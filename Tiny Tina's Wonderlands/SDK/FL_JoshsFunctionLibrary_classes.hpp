#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x0 (0x28 - 0x28)
// BlueprintGeneratedClass FL_JoshsFunctionLibrary.FL_JoshsFunctionLibrary_C
class UFL_JoshsFunctionLibrary_C : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UFL_JoshsFunctionLibrary_C* GetDefaultObj();

	void ValidateSpawnPoint(class USpawnPointComponent* PointToValidate, float MaxDropDistance, class UObject* __WorldContext, float MaxDropDistance_Local, class USpawnPointComponent* PointToDrop_Local, const struct FVector& CallFunc_MakeVector_ReturnValue, class USceneComponent* CallFunc_GetChildComponent_ReturnValue, TArray<class AActor*>& Temp_object_Variable, class UBillboardComponent* K2Node_DynamicCast_AsBillboard_Component, bool K2Node_DynamicCast_bSuccess, const struct FRotator& CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, const struct FHitResult& CallFunc_K2_SetWorldRotation_SweepHitResult, const struct FHitResult& CallFunc_LineTraceSingleByProfile_OutHit, bool CallFunc_LineTraceSingleByProfile_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, const struct FHitResult& CallFunc_K2_SetWorldLocation_SweepHitResult);
	void AIScriptedLookAtPlayers(class AActor* Target, class UObject* __WorldContext);
	void SetBlackboardInt(class FName BlackboardKey, class AActor* ControlledActor, int32 Value, class UObject* __WorldContext, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class AAIController* CallFunc_GetAIController_ReturnValue, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue);
	void GetBlackboardInt(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, int32* Value, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue, int32 CallFunc_GetValueAsInt_ReturnValue);
	void TestHitReaction(class AActor* Actor, enum class Enum_TestHitReactionType Hit_Reaction_Type, enum class Enum_TestHitReactionDirection Hit_Reaction_Direction, const struct FForceSelection& Force, class UObject* __WorldContext, class FText* Display_Text, class AActor* LocalHitReactingActor, enum class Enum_TestHitReactionDirection LocalHitReactionDirection, enum class Enum_TestHitReactionType LocalHitReactionType, bool Temp_bool_Variable, enum class Enum_TestHitReactionDirection Temp_byte_Variable, const class FString& Temp_string_Variable, const class FString& Temp_string_Variable1, const class FString& Temp_string_Variable2, const class FString& Temp_string_Variable3, enum class Enum_TestHitReactionType Temp_byte_Variable1, const class FString& Temp_string_Variable4, const class FString& Temp_string_Variable5, const class FString& Temp_string_Variable6, enum class Enum_TestHitReactionDirection Temp_byte_Variable2, const struct FVector& Temp_struct_Variable, const struct FVector& Temp_struct_Variable1, const struct FVector& Temp_struct_Variable2, const struct FVector& Temp_struct_Variable3, enum class Enum_TestHitReactionType Temp_byte_Variable3, class UHitReactionTag* Temp_object_Variable, class UHitReactionTag* Temp_object_Variable1, class UHitReactionTag* Temp_object_Variable2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const class FString& K2Node_Select_Default, const class FString& K2Node_Select1_Default, const class FString& CallFunc_Concat_StrStr_ReturnValue, const struct FVector& K2Node_Select2_Default, class FText CallFunc_Conv_StringToText_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue1, class FText CallFunc_Conv_StringToText_ReturnValue1, class FText K2Node_Select3_Default, class UHitReactionTag* K2Node_Select4_Default);
	void ThrowLightProjectile(class AActor* WhoIsThrowing_, class UClass* LightProjectileData, class FName SourceSocket, class AActor* TargetOverride, class FName TargetSocket, float MaxPrediction, float Speed, float AnglePercent, const struct FRotator& DirectionOffset, const struct FVector& LocalTargetOffset, int32 DataFlags, class UObject* __WorldContext, const struct FVector& MyLocalTargetOffset, const struct FRotator& MyLocalDirectionOffset, float MyLocalAnglePercent, float MyLocalSpeed, float MyLocalMaxPrediction, class FName MyLocalTargetSocket, class FName MyLocalSourceSocket, class AActor* MyTarget, class UClass* MyLightProjectileData, class APawn* MySelfLocal, bool CallFunc_IsValid_ReturnValue, class APawn* CallFunc_GetAssociatedPawn_ReturnValue, bool Temp_bool_Variable, const struct FVector& CallFunc_Setup_for_Throw_Actor_At_TargetLocation, const struct FVector& CallFunc_Setup_for_Throw_Actor_At_TargetVelocity, const struct FTransform& CallFunc_GetActorSocket_ReturnValue, const struct FVector& CallFunc_BreakTransform_Location, const struct FRotator& CallFunc_BreakTransform_Rotation, const struct FVector& CallFunc_BreakTransform_Scale, class AActor* CallFunc_GetCurrentTarget_Target, const struct FVector& CallFunc_CalcThrowVelocity_ResultVelocity, float CallFunc_CalcThrowVelocity_ResultGravityScale, class AActor* K2Node_Select_Default, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, const struct FOakLightProjectileInitializationData& K2Node_MakeStruct_OakLightProjectileInitializationData);
	void TransformSplat(const struct FHitResult& HitResult, class UObject* __WorldContext, struct FTransform* SplatTransform, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, const struct FRotator& CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FTransform& CallFunc_MakeTransform_ReturnValue);
	void GrantSecondWind(class AActor* ActorToGrantSecondWindTo, class UObject* __WorldContext, class AOakCharacter* K2Node_DynamicCast_AsOak_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInDownState_ReturnValue);
	void SimpleScreenParticle(class AActor* Target, class UParticleSystem* ScreenParticle, bool AllowMultipleInstances, bool OnlyDrawIfShieldsAreDepleted, class UObject* __WorldContext, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, class UGameResourcePoolManagerComponent* CallFunc_GetComponentByClass_ReturnValue, const struct FGameResourcePoolReference& CallFunc_GetResourcePoolByResource_ReturnValue, class APlayerController* CallFunc_GetAssociatedPlayerController_ReturnValue, bool CallFunc_BreakResourcePoolReference_bValid, float CallFunc_BreakResourcePoolReference_CurrentValue, float CallFunc_BreakResourcePoolReference_MinValue, float CallFunc_BreakResourcePoolReference_MaxValue, class UScreenParticleManagerComponent* CallFunc_GetComponentByClass_ReturnValue1, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
	void GetElementalTypeFromWeapon(class AActor* ActorWithWeapon, class UObject* __WorldContext, enum class EOakElementalType* WeaponElement, class UClass* WeaponDamageTypeLocal, class AActor* ActorWithWeaponLocal, class AOakCharacter* K2Node_DynamicCast_AsOak_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, class AWeapon* CallFunc_GetWeapon_ReturnValue, class UGbxDamageType* CallFunc_GetDamageType_ReturnValue, enum class EOakElementalType CallFunc_GetElementalType_ReturnValue);
	void GetBlackboardObject(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, class UObject** Value, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue, class UObject* CallFunc_GetValueAsObject_ReturnValue);
	void SetBlackboardObject(class AActor* ControlledActor, class FName BlackboardKey, class UObject* Value, class UObject* __WorldContext, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue);
	void Setup_for_Throw_Actor_At(class APawn* Who_is_Throwing_, class AActor* TargetOverride, class FName TargetSocket, class UObject* __WorldContext, struct FVector* TargetLocation, struct FVector* TargetVelocity, class AActor* MyTarget, const struct FVector& CallFunc_GetBestKnownLocation_ReturnValue, const struct FVector& CallFunc_GetVelocity_ReturnValue, bool CallFunc_IsValid_ReturnValue, class AController* CallFunc_GetController_ReturnValue, class UTargetingComponent* CallFunc_GetComponentByClass_ReturnValue, class AActor* CallFunc_GetBestTargetActor_ReturnValue);
	void GetCurrentTarget(class APawn* Who_s_Target_, bool bMustBePerceivable, class UObject* __WorldContext, class AActor** Target, class AController* CallFunc_GetController_ReturnValue, class UTargetingComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, class AActor* CallFunc_GetBestTargetActor_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_ActorHasTag_ReturnValue);
	void GetBlackboardFloat(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, float* Value, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue, float CallFunc_GetValueAsFloat_ReturnValue);
	void GetBlackboardBool(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, bool* Value, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool CallFunc_GetValueAsBool_ReturnValue);
	void SetBlackboardFloat(class AActor* ControlledActor, class FName BlackboardKey, float Value, class UObject* __WorldContext, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue);
	void SetBlackboardBool(class AActor* ControlledActor, class FName BlackboardKey, bool Value, class UObject* __WorldContext, class AAIController* CallFunc_GetAIController_ReturnValue, const struct FGbxBlackboardKeySelector& K2Node_MakeStruct_GbxBlackboardKeySelector, class UBlackboardComponent* CallFunc_GetBlackboard_ReturnValue);
	void SetStance(class AActor* Target, class UOakStanceData* New_Stance, class UObject* __WorldContext, class UStanceComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);
	void ForciblyResetSpawner(class ASpawner* Spawner, bool Kill_Existing_Actors, class UObject* __WorldContext);
	void ResourceLock(class AActor* Actor, enum class Enum_ResourceLockType Lock_Type, class FName Reason, bool LockState, class UObject* __WorldContext, bool LocalLockState, class FName LocalReason, enum class Enum_ResourceLockType LocalLockType, class AActor* LocalActor, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum1_CmpSuccess);
	void GBXActionVariableSetup(class AActor* Actor, class UObject* __WorldContext, class AActor** MySelf, class AActor** MyTarget, class UDamageCauserComponent** MyDamageCausingComponent, class ACharacter** MyCharacter, class UTeam** MyTeam, class UDamageCauserComponent* CallFunc_GetComponentByClass_ReturnValue, class AAIController* CallFunc_GetAIController_ReturnValue, class UTargetingComponent* CallFunc_GetComponentByClass_ReturnValue1, class AActor* CallFunc_GetBestTargetActor_ReturnValue);
};

}


