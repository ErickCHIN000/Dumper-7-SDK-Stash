#pragma once

// Dumped with Dumper-7!


#include "../SDK.hpp"

namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------


// Class GbxGameSystemCore.StanceDataProvider
// (None)

class UClass* UStanceDataProvider::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceDataProvider");

	return Clss;
}


// StanceDataProvider GbxGameSystemCore.Default__StanceDataProvider
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceDataProvider* UStanceDataProvider::GetDefaultObj()
{
	static class UStanceDataProvider* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceDataProvider*>(UStanceDataProvider::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StanceData
// (None)

class UClass* UStanceData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceData");

	return Clss;
}


// StanceData GbxGameSystemCore.Default__StanceData
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceData* UStanceData::GetDefaultObj()
{
	static class UStanceData* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceData*>(UStanceData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAnimTable
// (None)

class UClass* UGbxAnimTable::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimTable");

	return Clss;
}


// GbxAnimTable GbxGameSystemCore.Default__GbxAnimTable
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimTable* UGbxAnimTable::GetDefaultObj()
{
	static class UGbxAnimTable* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimTable*>(UGbxAnimTable::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAnimTable.Autofill
// (Native, Protected)
// Parameters:

void UGbxAnimTable::Autofill()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAnimTable", "Autofill");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction
// (None)

class UClass* UGbxAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction");

	return Clss;
}


// GbxAction GbxGameSystemCore.Default__GbxAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction* UGbxAction::GetDefaultObj()
{
	static class UGbxAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction*>(UGbxAction::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction.OnServerEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// enum class EGbxActionEndState      ActionEndState                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnServerEnd(enum class EGbxActionEndState ActionEndState, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "OnServerEnd");

	Params::UGbxAction_OnServerEnd_Params Parms{};

	Parms.ActionEndState = ActionEndState;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxAction.OnServerBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnServerBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "OnServerBegin");

	Params::UGbxAction_OnServerBegin_Params Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxAction.OnEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// enum class EGbxActionEndState      ActionEndState                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnEnd(enum class EGbxActionEndState ActionEndState, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "OnEnd");

	Params::UGbxAction_OnEnd_Params Parms{};

	Parms.ActionEndState = ActionEndState;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxAction.OnBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "OnBegin");

	Params::UGbxAction_OnBegin_Params Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxAction.K2_GetVectorRegisterValue
// (Final, Native, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        InName                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     OutVector                                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetVectorRegisterValue(class FName InName, struct FVector* OutVector)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetVectorRegisterValue");

	Params::UGbxAction_K2_GetVectorRegisterValue_Params Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetTimeRemaining
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetTimeRemaining()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetTimeRemaining");

	Params::UGbxAction_K2_GetTimeRemaining_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetObjectRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        InName                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     OutObject                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetObjectRegisterValue(class FName InName, class UObject** OutObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetObjectRegisterValue");

	Params::UGbxAction_K2_GetObjectRegisterValue_Params Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutObject != nullptr)
		*OutObject = Parms.OutObject;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetNameRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        InName                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        OutName                                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetNameRegisterValue(class FName InName, class FName* OutName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetNameRegisterValue");

	Params::UGbxAction_K2_GetNameRegisterValue_Params Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = Parms.OutName;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetMaxCurrentTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetMaxCurrentTime()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetMaxCurrentTime");

	Params::UGbxAction_K2_GetMaxCurrentTime_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetIntRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        InName                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OutInt                                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetIntRegisterValue(class FName InName, int32* OutInt)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetIntRegisterValue");

	Params::UGbxAction_K2_GetIntRegisterValue_Params Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutInt != nullptr)
		*OutInt = Parms.OutInt;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetFloatRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        InName                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              OutFloat                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetFloatRegisterValue(class FName InName, float* OutFloat)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetFloatRegisterValue");

	Params::UGbxAction_K2_GetFloatRegisterValue_Params Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetCurrentTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetCurrentTime()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetCurrentTime");

	Params::UGbxAction_K2_GetCurrentTime_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetCurrentNormalizedTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetCurrentNormalizedTime()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetCurrentNormalizedTime");

	Params::UGbxAction_K2_GetCurrentNormalizedTime_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction.K2_GetActor
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxAction::K2_GetActor()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction", "K2_GetActor");

	Params::UGbxAction_K2_GetActor_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxAction_SimpleAnim
// (None)

class UClass* UGbxAction_SimpleAnim::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_SimpleAnim");

	return Clss;
}


// GbxAction_SimpleAnim GbxGameSystemCore.Default__GbxAction_SimpleAnim
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_SimpleAnim* UGbxAction_SimpleAnim::GetDefaultObj()
{
	static class UGbxAction_SimpleAnim* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_SimpleAnim*>(UGbxAction_SimpleAnim::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.OnAnimEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::OnAnimEnd(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "OnAnimEnd");

	Params::UGbxAction_SimpleAnim_OnAnimEnd_Params Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetTickAndRefreshBones
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bLockResource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetTickAndRefreshBones(bool bLockResource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetTickAndRefreshBones");

	Params::UGbxAction_SimpleAnim_K2_SetTickAndRefreshBones_Params Parms{};

	Parms.bLockResource = bLockResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetPhysNoneWithRootMotion
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetPhysNoneWithRootMotion(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetPhysNoneWithRootMotion");

	Params::UGbxAction_SimpleAnim_K2_SetPhysNoneWithRootMotion_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetMovement
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetMovement(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetMovement");

	Params::UGbxAction_SimpleAnim_K2_SetMovement_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetLook
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetLook(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetLook");

	Params::UGbxAction_SimpleAnim_K2_SetLook_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHitReactions
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHitReactions(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHitReactions");

	Params::UGbxAction_SimpleAnim_K2_SetHitReactions_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHeadLookLocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bLock                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHeadLookLocked(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHeadLookLocked");

	Params::UGbxAction_SimpleAnim_K2_SetHeadLookLocked_Params Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHeadLook
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHeadLook(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHeadLook");

	Params::UGbxAction_SimpleAnim_K2_SetHeadLook_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetCollision
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetCollision(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetCollision");

	Params::UGbxAction_SimpleAnim_K2_SetCollision_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAvoidance
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAvoidance(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAvoidance");

	Params::UGbxAction_SimpleAnim_K2_SetAvoidance_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAIThinking
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAIThinking(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAIThinking");

	Params::UGbxAction_SimpleAnim_K2_SetAIThinking_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAimRotation
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAimRotation(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAimRotation");

	Params::UGbxAction_SimpleAnim_K2_SetAimRotation_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAISystemBase
// (None)

class UClass* UGbxAISystemBase::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAISystemBase");

	return Clss;
}


// GbxAISystemBase GbxGameSystemCore.Default__GbxAISystemBase
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAISystemBase* UGbxAISystemBase::GetDefaultObj()
{
	static class UGbxAISystemBase* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAISystemBase*>(UGbxAISystemBase::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.PreviewComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UPreviewComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PreviewComponent");

	return Clss;
}


// PreviewComponent GbxGameSystemCore.Default__PreviewComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UPreviewComponent* UPreviewComponent::GetDefaultObj()
{
	static class UPreviewComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UPreviewComponent*>(UPreviewComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.PreviewComponent.OnBlueprintCompiled
// (Final, Native, Protected)
// Parameters:
// class Ublueprint*                  BP                                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPreviewComponent::OnBlueprintCompiled(class Ublueprint* BP)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PreviewComponent", "OnBlueprintCompiled");

	Params::UPreviewComponent_OnBlueprintCompiled_Params Parms{};

	Parms.BP = BP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction_Anim
// (None)

class UClass* UGbxAction_Anim::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_Anim");

	return Clss;
}


// GbxAction_Anim GbxGameSystemCore.Default__GbxAction_Anim
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_Anim* UGbxAction_Anim::GetDefaultObj()
{
	static class UGbxAction_Anim* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_Anim*>(UGbxAction_Anim::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetMantlingBlocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bBlocked                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetMantlingBlocked(bool bBlocked)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetMantlingBlocked");

	Params::UGbxAction_Anim_K2_SetMantlingBlocked_Params Parms{};

	Parms.bBlocked = bBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetLaddersBlocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bBlocked                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetLaddersBlocked(bool bBlocked)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetLaddersBlocked");

	Params::UGbxAction_Anim_K2_SetLaddersBlocked_Params Parms{};

	Parms.bBlocked = bBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetGodMode
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetGodMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetGodMode");

	Params::UGbxAction_Anim_K2_SetGodMode_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetFootIK
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetFootIK(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetFootIK");

	Params::UGbxAction_Anim_K2_SetFootIK_Params Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetDemigodMode
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetDemigodMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetDemigodMode");

	Params::UGbxAction_Anim_K2_SetDemigodMode_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetCrouchBlocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                               bBlocked                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetCrouchBlocked(bool bBlocked)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetCrouchBlocked");

	Params::UGbxAction_Anim_K2_SetCrouchBlocked_Params Parms{};

	Parms.bBlocked = bBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_Resume
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_Resume()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_Resume");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_RepProceedToNextSection
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_RepProceedToNextSection()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_RepProceedToNextSection");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_RepJumpToNextSection
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_RepJumpToNextSection()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_RepJumpToNextSection");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_ProceedToNextSection
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_ProceedToNextSection()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_ProceedToNextSection");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_Pause
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_Pause()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_Pause");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Anim.K2_JumpToNextSection
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Anim::K2_JumpToNextSection()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Anim", "K2_JumpToNextSection");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.TeamComponent
// (None)

class UClass* UTeamComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TeamComponent");

	return Clss;
}


// TeamComponent GbxGameSystemCore.Default__TeamComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTeamComponent* UTeamComponent::GetDefaultObj()
{
	static class UTeamComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTeamComponent*>(UTeamComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.TeamComponent.SetTeamToDefault
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void UTeamComponent::SetTeamToDefault()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "SetTeamToDefault");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.SetTeamCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bOn                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetTeamCollision(bool bOn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "SetTeamCollision");

	Params::UTeamComponent_SetTeamCollision_Params Parms{};

	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.SetTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UTeam*                       NewTeam                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetTeam(class UTeam* NewTeam)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "SetTeam");

	Params::UTeamComponent_SetTeam_Params Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.SetSourceTeamComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTeamComponent*              NewSourceTeamComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetSourceTeamComponent(class UTeamComponent* NewSourceTeamComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "SetSourceTeamComponent");

	Params::UTeamComponent_SetSourceTeamComponent_Params Parms{};

	Parms.NewSourceTeamComponent = NewSourceTeamComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.SetCollidesWithTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bCollidesWithTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetCollidesWithTeam(bool bCollidesWithTeam)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "SetCollidesWithTeam");

	Params::UTeamComponent_SetCollidesWithTeam_Params Parms{};

	Parms.bCollidesWithTeam = bCollidesWithTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.OnRep_Team
// (Final, Native, Private)
// Parameters:
// class UTeam*                       OldTeam                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::OnRep_Team(class UTeam* OldTeam)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "OnRep_Team");

	Params::UTeamComponent_OnRep_Team_Params Parms{};

	Parms.OldTeam = OldTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.OnRep_bIgnoreCollisionWithTeam
// (Final, Native, Private)
// Parameters:

void UTeamComponent::OnRep_bIgnoreCollisionWithTeam()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "OnRep_bIgnoreCollisionWithTeam");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.IsNeutral
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsNeutral(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "IsNeutral");

	Params::UTeamComponent_IsNeutral_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TeamComponent.IsHostile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsHostile(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "IsHostile");

	Params::UTeamComponent_IsHostile_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TeamComponent.IsFriendly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsFriendly(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "IsFriendly");

	Params::UTeamComponent_IsFriendly_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TeamComponent.InitializeTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UTeam*                       NewTeam                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::InitializeTeam(class UTeam* NewTeam)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "InitializeTeam");

	Params::UTeamComponent_InitializeTeam_Params Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TeamComponent.GetTeamCollisionChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class ETeamCollisionChannel   ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class ETeamCollisionChannel UTeamComponent::GetTeamCollisionChannel()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "GetTeamCollisionChannel");

	Params::UTeamComponent_GetTeamCollisionChannel_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TeamComponent.GetTeamAttitudeTowardsTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                       OtherTeam                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamAttitude           ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class ETeamAttitude UTeamComponent::GetTeamAttitudeTowardsTeam(class UTeam* OtherTeam)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "GetTeamAttitudeTowardsTeam");

	Params::UTeamComponent_GetTeamAttitudeTowardsTeam_Params Parms{};

	Parms.OtherTeam = OtherTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TeamComponent.GetTeamAttitudeTowardsActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamAttitude           ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class ETeamAttitude UTeamComponent::GetTeamAttitudeTowardsActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TeamComponent", "GetTeamAttitudeTowardsActor");

	Params::UTeamComponent_GetTeamAttitudeTowardsActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxCharacter
// (Actor, Pawn)

class UClass* AGbxCharacter::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCharacter");

	return Clss;
}


// GbxCharacter GbxGameSystemCore.Default__GbxCharacter
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxCharacter* AGbxCharacter::GetDefaultObj()
{
	static class AGbxCharacter* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxCharacter*>(AGbxCharacter::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCharacter.SetTeam
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UTeam*                       Team                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetTeam(class UTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "SetTeam");

	Params::AGbxCharacter_SetTeam_Params Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.SetPlayerMaster
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGbxCharacter*               NewPlayerMaster                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetPlayerMaster(class AGbxCharacter* NewPlayerMaster)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "SetPlayerMaster");

	Params::AGbxCharacter_SetPlayerMaster_Params Parms{};

	Parms.NewPlayerMaster = NewPlayerMaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterUIName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIName*                  NewCharacterUIName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterUIName(class UGbxUIName* NewCharacterUIName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterUIName");

	Params::AGbxCharacter_SetCharacterUIName_Params Parms{};

	Parms.NewCharacterUIName = NewCharacterUIName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterNameFromString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                      NewCharacterName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterNameFromString(const class FString& NewCharacterName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterNameFromString");

	Params::AGbxCharacter_SetCharacterNameFromString_Params Parms{};

	Parms.NewCharacterName = NewCharacterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                        NewCharacterName                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterName(class FText& NewCharacterName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterName");

	Params::AGbxCharacter_SetCharacterName_Params Parms{};

	Parms.NewCharacterName = NewCharacterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.RotateCharacterTo
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                    TargetRotation                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EEasingFunc             Easing                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::RotateCharacterTo(const struct FRotator& TargetRotation, float Duration, enum class EEasingFunc Easing)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "RotateCharacterTo");

	Params::AGbxCharacter_RotateCharacterTo_Params Parms{};

	Parms.TargetRotation = TargetRotation;
	Parms.Duration = Duration;
	Parms.Easing = Easing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.ReceiveOwnerPlayerControllerChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*        NewPlayerControllerOwner                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::ReceiveOwnerPlayerControllerChanged(class AGbxPlayerController* NewPlayerControllerOwner)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "ReceiveOwnerPlayerControllerChanged");

	Params::AGbxCharacter_ReceiveOwnerPlayerControllerChanged_Params Parms{};

	Parms.NewPlayerControllerOwner = NewPlayerControllerOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.OnRep_ReplicatedPawnAttachState
// (Final, Native, Protected)
// Parameters:

void AGbxCharacter::OnRep_ReplicatedPawnAttachState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "OnRep_ReplicatedPawnAttachState");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.OnLandingDataTriggered
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FLandingInfo                LandingInfo                                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                              Index                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::OnLandingDataTriggered(const struct FLandingInfo& LandingInfo, int32 Index)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "OnLandingDataTriggered");

	Params::AGbxCharacter_OnLandingDataTriggered_Params Parms{};

	Parms.LandingInfo = LandingInfo;
	Parms.Index = Index;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_TriggerHitReactionSound
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UCharacterSoundTag*          Tag                                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::NetMulticast_TriggerHitReactionSound(class UCharacterSoundTag* Tag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_TriggerHitReactionSound");

	Params::AGbxCharacter_NetMulticast_TriggerHitReactionSound_Params Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_PlayLanded
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FHitResult                  Hit                                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              ImpactSpeed                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLandFromJump                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULandingData*                LandingDataOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::NetMulticast_PlayLanded(struct FHitResult& Hit, float ImpactSpeed, bool bLandFromJump, class ULandingData* LandingDataOverride)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_PlayLanded");

	Params::AGbxCharacter_NetMulticast_PlayLanded_Params Parms{};

	Parms.Hit = Hit;
	Parms.ImpactSpeed = ImpactSpeed;
	Parms.bLandFromJump = bLandFromJump;
	Parms.LandingDataOverride = LandingDataOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_PlayJumped
// (Net, Native, Event, NetMulticast, Public)
// Parameters:

void AGbxCharacter::NetMulticast_PlayJumped()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_PlayJumped");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.IsZoomed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxCharacter::IsZoomed()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "IsZoomed");

	Params::AGbxCharacter_IsZoomed_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetTeamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeamComponent*              ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeamComponent* AGbxCharacter::GetTeamComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetTeamComponent");

	Params::AGbxCharacter_GetTeamComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeam* AGbxCharacter::GetTeam()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetTeam");

	Params::AGbxCharacter_GetTeam_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetTargetingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetingComponent*         ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* AGbxCharacter::GetTargetingComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetTargetingComponent");

	Params::AGbxCharacter_GetTargetingComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetableComponent*        ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* AGbxCharacter::GetTargetableComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetTargetableComponent");

	Params::AGbxCharacter_GetTargetableComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetPerceptionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxPerceptionComponent*     ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxPerceptionComponent* AGbxCharacter::GetPerceptionComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetPerceptionComponent");

	Params::AGbxCharacter_GetPerceptionComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EPawnAttachStatus       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class EPawnAttachStatus AGbxCharacter::GetPawnAttachStatus()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachStatus");

	Params::AGbxCharacter_GetPawnAttachStatus_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPawnAttachSlotComponent*    ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPawnAttachSlotComponent* AGbxCharacter::GetPawnAttachComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachComponent");

	Params::AGbxCharacter_GetPawnAttachComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGbxCharacter::GetPawnAttachActor()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachActor");

	Params::AGbxCharacter_GetPawnAttachActor_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetLookAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              OutWeight                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGbxCharacter::GetLookAtLocation(float* OutWeight)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetLookAtLocation");

	Params::AGbxCharacter_GetLookAtLocation_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutWeight != nullptr)
		*OutWeight = Parms.OutWeight;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetLookAt
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     HeadLocation                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     EyeLocation                                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              HeadWeight                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGbxCharacter::GetLookAt(struct FVector* HeadLocation, struct FVector* EyeLocation, float* HeadWeight)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetLookAt");

	Params::AGbxCharacter_GetLookAt_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (HeadLocation != nullptr)
		*HeadLocation = std::move(Parms.HeadLocation);

	if (EyeLocation != nullptr)
		*EyeLocation = std::move(Parms.EyeLocation);

	if (HeadWeight != nullptr)
		*HeadWeight = Parms.HeadWeight;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetFirstPersonMesh
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*      ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AGbxCharacter::GetFirstPersonMesh()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetFirstPersonMesh");

	Params::AGbxCharacter_GetFirstPersonMesh_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetFirstPersonComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirstPersonComponent*       ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirstPersonComponent* AGbxCharacter::GetFirstPersonComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetFirstPersonComponent");

	Params::AGbxCharacter_GetFirstPersonComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetBlackboardComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBlackboardComponent*        ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* AGbxCharacter::GetBlackboardComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetBlackboardComponent");

	Params::AGbxCharacter_GetBlackboardComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetBlackboardAsset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBlackboardData*             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardData* AGbxCharacter::GetBlackboardAsset()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetBlackboardAsset");

	Params::AGbxCharacter_GetBlackboardAsset_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetAvailableSocketNames
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGbxCharacter::GetAvailableSocketNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetAvailableSocketNames");

	Params::AGbxCharacter_GetAvailableSocketNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Function GbxGameSystemCore.GbxCharacter.GetAimVectorStartLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGbxCharacter::GetAimVectorStartLocation()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetAimVectorStartLocation");

	Params::AGbxCharacter_GetAimVectorStartLocation_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.GetAimOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                    ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGbxCharacter::GetAimOffset()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "GetAimOffset");

	Params::AGbxCharacter_GetAimOffset_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.FindFirstPersonComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirstPersonComponent*       ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirstPersonComponent* AGbxCharacter::FindFirstPersonComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "FindFirstPersonComponent");

	Params::AGbxCharacter_FindFirstPersonComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacter.DetachCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EDetachmentRule         LocationRule                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::DetachCharacter(enum class EDetachmentRule LocationRule)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "DetachCharacter");

	Params::AGbxCharacter_DetachCharacter_Params Parms{};

	Parms.LocationRule = LocationRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.ClientRotateCharacterTo
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// struct FRotator                    TargetRotation                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EEasingFunc             Easing                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::ClientRotateCharacterTo(const struct FRotator& TargetRotation, float Duration, enum class EEasingFunc Easing)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "ClientRotateCharacterTo");

	Params::AGbxCharacter_ClientRotateCharacterTo_Params Parms{};

	Parms.TargetRotation = TargetRotation;
	Parms.Duration = Duration;
	Parms.Easing = Easing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.CauseEveryoneToForgetMe
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void AGbxCharacter::CauseEveryoneToForgetMe()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "CauseEveryoneToForgetMe");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.AttachCharacterToComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*             Parent                                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SocketName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         LocationRule                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         RotationRule                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         ScaleRule                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bWeldSimulatedBodies                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::AttachCharacterToComponent(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "AttachCharacterToComponent");

	Params::AGbxCharacter_AttachCharacterToComponent_Params Parms{};

	Parms.Parent = Parent;
	Parms.SocketName = SocketName;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;
	Parms.ScaleRule = ScaleRule;
	Parms.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacter.AttachCharacterToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ParentActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SocketName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         LocationRule                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         RotationRule                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAttachmentRule         ScaleRule                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bWeldSimulatedBodies                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::AttachCharacterToActor(class AActor* ParentActor, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacter", "AttachCharacterToActor");

	Params::AGbxCharacter_AttachCharacterToActor_Params Parms{};

	Parms.ParentActor = ParentActor;
	Parms.SocketName = SocketName;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;
	Parms.ScaleRule = ScaleRule;
	Parms.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.BalanceStateComponent
// (None)

class UClass* UBalanceStateComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BalanceStateComponent");

	return Clss;
}


// BalanceStateComponent GbxGameSystemCore.Default__BalanceStateComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UBalanceStateComponent* UBalanceStateComponent::GetDefaultObj()
{
	static class UBalanceStateComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UBalanceStateComponent*>(UBalanceStateComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.BalanceStateComponent.SetGameStage
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                              NewGameStage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::SetGameStage(int32 NewGameStage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "SetGameStage");

	Params::UBalanceStateComponent_SetGameStage_Params Parms{};

	Parms.NewGameStage = NewGameStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BalanceStateComponent.SetExperienceLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                              NewExperienceLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::SetExperienceLevel(int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "SetExperienceLevel");

	Params::UBalanceStateComponent_SetExperienceLevel_Params Parms{};

	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BalanceStateComponent.OnRep_ExperienceLevel
// (Final, Native, Protected)
// Parameters:
// int32                              OldExperienceLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::OnRep_ExperienceLevel(int32 OldExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "OnRep_ExperienceLevel");

	Params::UBalanceStateComponent_OnRep_ExperienceLevel_Params Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BalanceStateComponent.OnInheritedBalanceSourceLevelChanged
// (Native, Protected)
// Parameters:
// class UBalanceStateComponent*      InheritedBalanceStateSource                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OldExperienceLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewExperienceLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::OnInheritedBalanceSourceLevelChanged(class UBalanceStateComponent* InheritedBalanceStateSource, int32 OldExperienceLevel, int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "OnInheritedBalanceSourceLevelChanged");

	Params::UBalanceStateComponent_OnInheritedBalanceSourceLevelChanged_Params Parms{};

	Parms.InheritedBalanceStateSource = InheritedBalanceStateSource;
	Parms.OldExperienceLevel = OldExperienceLevel;
	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BalanceStateComponent.GetGameStage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBalanceStateComponent::GetGameStage()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "GetGameStage");

	Params::UBalanceStateComponent_GetGameStage_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.BalanceStateComponent.GetExperienceLevel
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBalanceStateComponent::GetExperienceLevel()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "GetExperienceLevel");

	Params::UBalanceStateComponent_GetExperienceLevel_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.BalanceStateComponent.GetBalanceTableRow
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle         ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UBalanceStateComponent::GetBalanceTableRow()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BalanceStateComponent", "GetBalanceTableRow");

	Params::UBalanceStateComponent_GetBalanceTableRow_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxChildActorComponent
// (SceneComponent)

class UClass* UGbxChildActorComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxChildActorComponent");

	return Clss;
}


// GbxChildActorComponent GbxGameSystemCore.Default__GbxChildActorComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxChildActorComponent* UGbxChildActorComponent::GetDefaultObj()
{
	static class UGbxChildActorComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxChildActorComponent*>(UGbxChildActorComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxChildActorComponent.SpawnChildActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void UGbxChildActorComponent::SpawnChildActor()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxChildActorComponent", "SpawnChildActor");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxChildActorComponent.DespawnChildActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void UGbxChildActorComponent::DespawnChildActor()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxChildActorComponent", "DespawnChildActor");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.AnimNotify_PawnAttachSlotTransition
// (None)

class UClass* UAnimNotify_PawnAttachSlotTransition::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_PawnAttachSlotTransition");

	return Clss;
}


// AnimNotify_PawnAttachSlotTransition GbxGameSystemCore.Default__AnimNotify_PawnAttachSlotTransition
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_PawnAttachSlotTransition* UAnimNotify_PawnAttachSlotTransition::GetDefaultObj()
{
	static class UAnimNotify_PawnAttachSlotTransition* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_PawnAttachSlotTransition*>(UAnimNotify_PawnAttachSlotTransition::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributeEffectMutatorData
// (None)

class UClass* UAttributeEffectMutatorData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeEffectMutatorData");

	return Clss;
}


// AttributeEffectMutatorData GbxGameSystemCore.Default__AttributeEffectMutatorData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeEffectMutatorData* UAttributeEffectMutatorData::GetDefaultObj()
{
	static class UAttributeEffectMutatorData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeEffectMutatorData*>(UAttributeEffectMutatorData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAnimInstance
// (None)

class UClass* UGbxAnimInstance::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimInstance");

	return Clss;
}


// GbxAnimInstance GbxGameSystemCore.Default__GbxAnimInstance
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimInstance* UGbxAnimInstance::GetDefaultObj()
{
	static class UGbxAnimInstance* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimInstance*>(UGbxAnimInstance::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAnimInstance.GetAnimTableSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAnimTable*               AnimTable                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequence* UGbxAnimInstance::GetAnimTableSequence(class UGbxAnimTable* AnimTable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAnimInstance", "GetAnimTableSequence");

	Params::UGbxAnimInstance_GetAnimTableSequence_Params Parms{};

	Parms.AnimTable = AnimTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAnimInstance.CanUseAnimTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAnimTable*               AnimTable                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAnimInstance::CanUseAnimTable(class UGbxAnimTable* AnimTable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAnimInstance", "CanUseAnimTable");

	Params::UGbxAnimInstance_CanUseAnimTable_Params Parms{};

	Parms.AnimTable = AnimTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.ActorPartSelectionData
// (None)

class UClass* UActorPartSelectionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ActorPartSelectionData");

	return Clss;
}


// ActorPartSelectionData GbxGameSystemCore.Default__ActorPartSelectionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UActorPartSelectionData* UActorPartSelectionData::GetDefaultObj()
{
	static class UActorPartSelectionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UActorPartSelectionData*>(UActorPartSelectionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAreaComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UGbxAreaComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAreaComponent");

	return Clss;
}


// GbxAreaComponent GbxGameSystemCore.Default__GbxAreaComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAreaComponent* UGbxAreaComponent::GetDefaultObj()
{
	static class UGbxAreaComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAreaComponent*>(UGbxAreaComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAreaComponent.AreaTest
// (Native, Public)
// Parameters:

void UGbxAreaComponent::AreaTest()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAreaComponent", "AreaTest");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.EffectCollectionData
// (None)

class UClass* UEffectCollectionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EffectCollectionData");

	return Clss;
}


// EffectCollectionData GbxGameSystemCore.Default__EffectCollectionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UEffectCollectionData* UEffectCollectionData::GetDefaultObj()
{
	static class UEffectCollectionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UEffectCollectionData*>(UEffectCollectionData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetWwiseEvent
// (Final, Native, Static, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UEffectCollectionData::StaticGetWwiseEvent(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "StaticGetWwiseEvent");

	Params::UEffectCollectionData_StaticGetWwiseEvent_Params Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetParticleEffectAndWwiseEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             ParticleEffect                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 WwiseEvent                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEffectCollectionData::StaticGetParticleEffectAndWwiseEvent(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject, class UParticleSystem** ParticleEffect, class UWwiseEvent** WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "StaticGetParticleEffectAndWwiseEvent");

	Params::UEffectCollectionData_StaticGetParticleEffectAndWwiseEvent_Params Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;

	if (WwiseEvent != nullptr)
		*WwiseEvent = Parms.WwiseEvent;

}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetParticleEffect
// (Final, Native, Static, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UEffectCollectionData::StaticGetParticleEffect(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "StaticGetParticleEffect");

	Params::UEffectCollectionData_StaticGetParticleEffect_Params Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EffectCollectionData.GetWwiseEvent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UEffectCollectionData::GetWwiseEvent(class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "GetWwiseEvent");

	Params::UEffectCollectionData_GetWwiseEvent_Params Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EffectCollectionData.GetParticleEffectAndWwiseEvent
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             ParticleEffect                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 WwiseEvent                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEffectCollectionData::GetParticleEffectAndWwiseEvent(class UObject* ContextObject, class UParticleSystem** ParticleEffect, class UWwiseEvent** WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "GetParticleEffectAndWwiseEvent");

	Params::UEffectCollectionData_GetParticleEffectAndWwiseEvent_Params Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;

	if (WwiseEvent != nullptr)
		*WwiseEvent = Parms.WwiseEvent;

}


// Function GbxGameSystemCore.EffectCollectionData.GetParticleEffect
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                     ContextObject                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UEffectCollectionData::GetParticleEffect(class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EffectCollectionData", "GetParticleEffect");

	Params::UEffectCollectionData_GetParticleEffect_Params Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.AttributeValueResolver
// (None)

class UClass* UAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeValueResolver");

	return Clss;
}


// AttributeValueResolver GbxGameSystemCore.Default__AttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeValueResolver* UAttributeValueResolver::GetDefaultObj()
{
	static class UAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeValueResolver*>(UAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AttributeValueResolver.SetValueForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAttributeValueResolver::SetValueForAttribute(class UGbxAttributeData* Attribute, class UObject* Context, float Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AttributeValueResolver", "SetValueForAttribute");

	Params::UAttributeValueResolver_SetValueForAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Context = Context;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.AttributeValueResolver.GetValueForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeValueResolver::GetValueForAttribute(class UGbxAttributeData* Attribute, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AttributeValueResolver", "GetValueForAttribute");

	Params::UAttributeValueResolver_GetValueForAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.EnvQueryGenerator_TargetableActors
// (None)

class UClass* UEnvQueryGenerator_TargetableActors::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryGenerator_TargetableActors");

	return Clss;
}


// EnvQueryGenerator_TargetableActors GbxGameSystemCore.Default__EnvQueryGenerator_TargetableActors
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryGenerator_TargetableActors* UEnvQueryGenerator_TargetableActors::GetDefaultObj()
{
	static class UEnvQueryGenerator_TargetableActors* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryGenerator_TargetableActors*>(UEnvQueryGenerator_TargetableActors::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UsableComponent
// (None)

class UClass* UUsableComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UsableComponent");

	return Clss;
}


// UsableComponent GbxGameSystemCore.Default__UsableComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UUsableComponent* UUsableComponent::GetDefaultObj()
{
	static class UUsableComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UUsableComponent*>(UUsableComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UsableComponent.SetUsableLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bLocked                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUsableComponent::SetUsableLocked(bool bLocked, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "SetUsableLocked");

	Params::UUsableComponent_SetUsableLocked_Params Parms{};

	Parms.bLocked = bLocked;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UsableComponent.SetPrimaryUseDefinition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUsableTypeDefinition*       Def                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUsableComponent::SetPrimaryUseDefinition(class UUsableTypeDefinition* Def)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "SetPrimaryUseDefinition");

	Params::UUsableComponent_SetPrimaryUseDefinition_Params Parms{};

	Parms.Def = Def;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UsableComponent.SetInteractionHeader
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                        NewHeaderName                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUsableComponent::SetInteractionHeader(class FText& NewHeaderName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "SetInteractionHeader");

	Params::UUsableComponent_SetInteractionHeader_Params Parms{};

	Parms.NewHeaderName = NewHeaderName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UsableComponent.ResetUseCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UUsableComponent::ResetUseCount()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "ResetUseCount");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UsableComponent.K2_GetOptionalErrorText
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUsableComponent::K2_GetOptionalErrorText()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "K2_GetOptionalErrorText");

	Params::UUsableComponent_K2_GetOptionalErrorText_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UsableComponent.K2_CanBeUsed
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUsabilityQuery             Query                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUsableComponent::K2_CanBeUsed(struct FUsabilityQuery& Query)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "K2_CanBeUsed");

	Params::UUsableComponent_K2_CanBeUsed_Params Parms{};

	Parms.Query = Query;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UsableComponent.GetValidPrimitiveComponentNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                ComponentNames                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUsableComponent::GetValidPrimitiveComponentNames(TArray<class FName>* ComponentNames)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "GetValidPrimitiveComponentNames");

	Params::UUsableComponent_GetValidPrimitiveComponentNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ComponentNames != nullptr)
		*ComponentNames = std::move(Parms.ComponentNames);

}


// Function GbxGameSystemCore.UsableComponent.GetInteractionHeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                        ReturnValue                                                      (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

class FText UUsableComponent::GetInteractionHeader()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UsableComponent", "GetInteractionHeader");

	Params::UUsableComponent_GetInteractionHeader_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxGameplayGlobals
// (None)

class UClass* UGbxGameplayGlobals::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameplayGlobals");

	return Clss;
}


// GbxGameplayGlobals GbxGameSystemCore.Default__GbxGameplayGlobals
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameplayGlobals* UGbxGameplayGlobals::GetDefaultObj()
{
	static class UGbxGameplayGlobals* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameplayGlobals*>(UGbxGameplayGlobals::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCharacterAnimInstance
// (None)

class UClass* UGbxCharacterAnimInstance::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCharacterAnimInstance");

	return Clss;
}


// GbxCharacterAnimInstance GbxGameSystemCore.Default__GbxCharacterAnimInstance
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCharacterAnimInstance* UGbxCharacterAnimInstance::GetDefaultObj()
{
	static class UGbxCharacterAnimInstance* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCharacterAnimInstance*>(UGbxCharacterAnimInstance::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCharacterAnimInstance.SetDesiredFacialEmoteWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              Weight                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BlendTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterAnimInstance::SetDesiredFacialEmoteWeight(float Weight, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterAnimInstance", "SetDesiredFacialEmoteWeight");

	Params::UGbxCharacterAnimInstance_SetDesiredFacialEmoteWeight_Params Parms{};

	Parms.Weight = Weight;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterAnimInstance.OnStanceChanged
// (Event, Public, BlueprintEvent)
// Parameters:

void UGbxCharacterAnimInstance::OnStanceChanged()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterAnimInstance", "OnStanceChanged");



	UObject::ProcessEvent(Func, nullptr);

}


// Class GbxGameSystemCore.DamageData
// (None)

class UClass* UDamageData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageData");

	return Clss;
}


// DamageData GbxGameSystemCore.Default__DamageData
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageData* UDamageData::GetDefaultObj()
{
	static class UDamageData* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageData*>(UDamageData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageData.OnKilledEnemy
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                      DamageInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageTarget                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails     Details                                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnKilledEnemy(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, struct FDamageDataEventDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageData", "OnKilledEnemy");

	Params::UDamageData_OnKilledEnemy_Params Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = Details;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageData.OnHitFriendly
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                      DamageInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageTarget                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails     Details                                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitFriendly(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, struct FDamageDataEventDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageData", "OnHitFriendly");

	Params::UDamageData_OnHitFriendly_Params Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = Details;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageData.OnHitEnemy
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                      DamageInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageTarget                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails     Details                                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitEnemy(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, struct FDamageDataEventDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageData", "OnHitEnemy");

	Params::UDamageData_OnHitEnemy_Params Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = Details;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageData.OnHitAnyAttitude
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                      DamageInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageTarget                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails     Details                                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitAnyAttitude(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, struct FDamageDataEventDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageData", "OnHitAnyAttitude");

	Params::UDamageData_OnHitAnyAttitude_Params Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = Details;

	UObject::ProcessEvent(Func, &Parms);

}


// Class GbxGameSystemCore.ProjectileHomingComponent
// (None)

class UClass* UProjectileHomingComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ProjectileHomingComponent");

	return Clss;
}


// ProjectileHomingComponent GbxGameSystemCore.Default__ProjectileHomingComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UProjectileHomingComponent* UProjectileHomingComponent::GetDefaultObj()
{
	static class UProjectileHomingComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UProjectileHomingComponent*>(UProjectileHomingComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ProjectileHomingComponent.ToggleHoming
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UProjectileHomingComponent::ToggleHoming()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileHomingComponent", "ToggleHoming");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ProjectileHomingComponent.SetHomeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnabled                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileHomingComponent::SetHomeIn(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileHomingComponent", "SetHomeIn");

	Params::UProjectileHomingComponent_SetHomeIn_Params Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ProjectileHomingComponent.SetAssociatedProjectileMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UProjectileMovementComponent*ProjectileMovementComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileHomingComponent::SetAssociatedProjectileMovement(class UProjectileMovementComponent* ProjectileMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileHomingComponent", "SetAssociatedProjectileMovement");

	Params::UProjectileHomingComponent_SetAssociatedProjectileMovement_Params Parms{};

	Parms.ProjectileMovementComponent = ProjectileMovementComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ProjectileHomingComponent.GetHomingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UProjectileHomingComponent::GetHomingLocation()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileHomingComponent", "GetHomingLocation");

	Params::UProjectileHomingComponent_GetHomingLocation_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.UIStatData
// (None)

class UClass* UUIStatData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatData");

	return Clss;
}


// UIStatData GbxGameSystemCore.Default__UIStatData
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatData* UUIStatData::GetDefaultObj()
{
	static class UUIStatData* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatData*>(UUIStatData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UIStatData.K2_ShouldDisplayStat
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIStatData::K2_ShouldDisplayStat(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UIStatData", "K2_ShouldDisplayStat");

	Params::UUIStatData_K2_ShouldDisplayStat_Params Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UIStatData.K2_GetValueText
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector            Collector                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIStatData::K2_GetValueText(class UObject* Context, struct FUIStatCollector& Collector)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UIStatData", "K2_GetValueText");

	Params::UUIStatData_K2_GetValueText_Params Parms{};

	Parms.Context = Context;
	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UIStatData.K2_GetComparisonValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector            Collector                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIStatData::K2_GetComparisonValue(class UObject* Context, struct FUIStatCollector& Collector)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UIStatData", "K2_GetComparisonValue");

	Params::UUIStatData_K2_GetComparisonValue_Params Parms{};

	Parms.Context = Context;
	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UIStatData.EnumerateSectionNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                OutSectionNameList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUIStatData::EnumerateSectionNames(TArray<class FName>* OutSectionNameList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UIStatData", "EnumerateSectionNames");

	Params::UUIStatData_EnumerateSectionNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutSectionNameList != nullptr)
		*OutSectionNameList = std::move(Parms.OutSectionNameList);

}


// Function GbxGameSystemCore.UIStatData.ComputeAttributeModification
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bScale                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOnlyScale                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector            Collector                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIStatData::ComputeAttributeModification(class UGbxAttributeData* Attribute, bool bScale, bool bOnlyScale, struct FUIStatCollector& Collector)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UIStatData", "ComputeAttributeModification");

	Params::UUIStatData_ComputeAttributeModification_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.bScale = bScale;
	Parms.bOnlyScale = bOnlyScale;
	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.UIStatData_Numeric
// (None)

class UClass* UUIStatData_Numeric::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatData_Numeric");

	return Clss;
}


// UIStatData_Numeric GbxGameSystemCore.Default__UIStatData_Numeric
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatData_Numeric* UUIStatData_Numeric::GetDefaultObj()
{
	static class UUIStatData_Numeric* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatData_Numeric*>(UUIStatData_Numeric::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer
// (None)

class UClass* UHitReactionLayer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer");

	return Clss;
}


// HitReactionLayer GbxGameSystemCore.Default__HitReactionLayer
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer* UHitReactionLayer::GetDefaultObj()
{
	static class UHitReactionLayer* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer*>(UHitReactionLayer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributeContextResolver
// (None)

class UClass* UAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeContextResolver");

	return Clss;
}


// AttributeContextResolver GbxGameSystemCore.Default__AttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeContextResolver* UAttributeContextResolver::GetDefaultObj()
{
	static class UAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeContextResolver*>(UAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AttributeContextResolver.GetContextForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UAttributeContextResolver::GetContextForAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AttributeContextResolver", "GetContextForAttribute");

	Params::UAttributeContextResolver_GetContextForAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.SpawnPatternData
// (None)

class UClass* USpawnPatternData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SpawnPatternData");

	return Clss;
}


// SpawnPatternData GbxGameSystemCore.Default__SpawnPatternData
// (Public, ClassDefaultObject, ArchetypeObject)

class USpawnPatternData* USpawnPatternData::GetDefaultObj()
{
	static class USpawnPatternData* Default = nullptr;

	if (!Default)
		Default = static_cast<USpawnPatternData*>(USpawnPatternData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.SpawnPatternData.CalculateSpawnPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSpawnPatternInputs         Inputs                                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSpawnPatternResult         Result                                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USpawnPatternData::CalculateSpawnPoint(const struct FSpawnPatternInputs& Inputs, struct FSpawnPatternResult* Result)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SpawnPatternData", "CalculateSpawnPoint");

	Params::USpawnPatternData_CalculateSpawnPoint_Params Parms{};

	Parms.Inputs = Inputs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

}


// Class GbxGameSystemCore.PhysicsSpawnPatternData
// (None)

class UClass* UPhysicsSpawnPatternData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PhysicsSpawnPatternData");

	return Clss;
}


// PhysicsSpawnPatternData GbxGameSystemCore.Default__PhysicsSpawnPatternData
// (Public, ClassDefaultObject, ArchetypeObject)

class UPhysicsSpawnPatternData* UPhysicsSpawnPatternData::GetDefaultObj()
{
	static class UPhysicsSpawnPatternData* Default = nullptr;

	if (!Default)
		Default = static_cast<UPhysicsSpawnPatternData*>(UPhysicsSpawnPatternData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxPlayerCameraManager
// (Actor)

class UClass* AGbxPlayerCameraManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPlayerCameraManager");

	return Clss;
}


// GbxPlayerCameraManager GbxGameSystemCore.Default__GbxPlayerCameraManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxPlayerCameraManager* AGbxPlayerCameraManager::GetDefaultObj()
{
	static class AGbxPlayerCameraManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxPlayerCameraManager*>(AGbxPlayerCameraManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffectData
// (None)

class UClass* UStatusEffectData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectData");

	return Clss;
}


// StatusEffectData GbxGameSystemCore.Default__StatusEffectData
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectData* UStatusEffectData::GetDefaultObj()
{
	static class UStatusEffectData* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectData*>(UStatusEffectData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CharacterAttributeContextResolver
// (None)

class UClass* UCharacterAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CharacterAttributeContextResolver");

	return Clss;
}


// CharacterAttributeContextResolver GbxGameSystemCore.Default__CharacterAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UCharacterAttributeContextResolver* UCharacterAttributeContextResolver::GetDefaultObj()
{
	static class UCharacterAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UCharacterAttributeContextResolver*>(UCharacterAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributePropertyValueResolver
// (None)

class UClass* UAttributePropertyValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributePropertyValueResolver");

	return Clss;
}


// AttributePropertyValueResolver GbxGameSystemCore.Default__AttributePropertyValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributePropertyValueResolver* UAttributePropertyValueResolver::GetDefaultObj()
{
	static class UAttributePropertyValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributePropertyValueResolver*>(UAttributePropertyValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AchievementUtility
// (None)

class UClass* UAchievementUtility::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AchievementUtility");

	return Clss;
}


// AchievementUtility GbxGameSystemCore.Default__AchievementUtility
// (Public, ClassDefaultObject, ArchetypeObject)

class UAchievementUtility* UAchievementUtility::GetDefaultObj()
{
	static class UAchievementUtility* Default = nullptr;

	if (!Default)
		Default = static_cast<UAchievementUtility*>(UAchievementUtility::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_CoordinatedEffect
// (None)

class UClass* UGbxAction_CoordinatedEffect::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_CoordinatedEffect");

	return Clss;
}


// GbxAction_CoordinatedEffect GbxGameSystemCore.Default__GbxAction_CoordinatedEffect
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_CoordinatedEffect* UGbxAction_CoordinatedEffect::GetDefaultObj()
{
	static class UGbxAction_CoordinatedEffect* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_CoordinatedEffect*>(UGbxAction_CoordinatedEffect::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_CoordinatedEffect.SetConstantMaterialVectorParamValue
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        ParamName                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                Color                                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_CoordinatedEffect::SetConstantMaterialVectorParamValue(class FName ParamName, struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_CoordinatedEffect", "SetConstantMaterialVectorParamValue");

	Params::UGbxAction_CoordinatedEffect_SetConstantMaterialVectorParamValue_Params Parms{};

	Parms.ParamName = ParamName;
	Parms.Color = Color;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction_Gib
// (None)

class UClass* UGbxAction_Gib::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_Gib");

	return Clss;
}


// GbxAction_Gib GbxGameSystemCore.Default__GbxAction_Gib
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_Gib* UGbxAction_Gib::GetDefaultObj()
{
	static class UGbxAction_Gib* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_Gib*>(UGbxAction_Gib::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_Loop
// (None)

class UClass* UGbxAction_Loop::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_Loop");

	return Clss;
}


// GbxAction_Loop GbxGameSystemCore.Default__GbxAction_Loop
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_Loop* UGbxAction_Loop::GetDefaultObj()
{
	static class UGbxAction_Loop* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_Loop*>(UGbxAction_Loop::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_Loop.OnStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Loop::OnStop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Loop", "OnStop");

	Params::UGbxAction_Loop_OnStop_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Loop.OnLoop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Loop::OnLoop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Loop", "OnLoop");

	Params::UGbxAction_Loop_OnLoop_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_Loop.K2_StopLooping
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:

void UGbxAction_Loop::K2_StopLooping()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_Loop", "K2_StopLooping");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction_PhysicalAnim
// (None)

class UClass* UGbxAction_PhysicalAnim::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_PhysicalAnim");

	return Clss;
}


// GbxAction_PhysicalAnim GbxGameSystemCore.Default__GbxAction_PhysicalAnim
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_PhysicalAnim* UGbxAction_PhysicalAnim::GetDefaultObj()
{
	static class UGbxAction_PhysicalAnim* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_PhysicalAnim*>(UGbxAction_PhysicalAnim::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_PhysicalAnim.K2_GetDynamicBodyState
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              AngularThreshold                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxPhysicalActionDynamicBodyStateReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class EGbxPhysicalActionDynamicBodyState UGbxAction_PhysicalAnim::K2_GetDynamicBodyState(float AngularThreshold)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_PhysicalAnim", "K2_GetDynamicBodyState");

	Params::UGbxAction_PhysicalAnim_K2_GetDynamicBodyState_Params Parms{};

	Parms.AngularThreshold = AngularThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAction_PhysicalAnim.K2_FixupDynamicToKinematicIssues
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// float                              AngularThreshold                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_PhysicalAnim::K2_FixupDynamicToKinematicIssues(float AngularThreshold)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_PhysicalAnim", "K2_FixupDynamicToKinematicIssues");

	Params::UGbxAction_PhysicalAnim_K2_FixupDynamicToKinematicIssues_Params Parms{};

	Parms.AngularThreshold = AngularThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction_PhysicalDeath
// (None)

class UClass* UGbxAction_PhysicalDeath::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_PhysicalDeath");

	return Clss;
}


// GbxAction_PhysicalDeath GbxGameSystemCore.Default__GbxAction_PhysicalDeath
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_PhysicalDeath* UGbxAction_PhysicalDeath::GetDefaultObj()
{
	static class UGbxAction_PhysicalDeath* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_PhysicalDeath*>(UGbxAction_PhysicalDeath::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AimAssistParameters
// (None)

class UClass* UAimAssistParameters::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AimAssistParameters");

	return Clss;
}


// AimAssistParameters GbxGameSystemCore.Default__AimAssistParameters
// (Public, ClassDefaultObject, ArchetypeObject)

class UAimAssistParameters* UAimAssistParameters::GetDefaultObj()
{
	static class UAimAssistParameters* Default = nullptr;

	if (!Default)
		Default = static_cast<UAimAssistParameters*>(UAimAssistParameters::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxPlayerController
// (Actor, PlayerController)

class UClass* AGbxPlayerController::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPlayerController");

	return Clss;
}


// GbxPlayerController GbxGameSystemCore.Default__GbxPlayerController
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxPlayerController* AGbxPlayerController::GetDefaultObj()
{
	static class AGbxPlayerController* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxPlayerController*>(AGbxPlayerController::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxPlayerController.SetTeam
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UTeam*                       Team                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::SetTeam(class UTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "SetTeam");

	Params::AGbxPlayerController_SetTeam_Params Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ServerRequestPawnSlotDetach
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class APawn*                       Occupant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ServerRequestPawnSlotDetach(class APawn* Occupant)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ServerRequestPawnSlotDetach");

	Params::AGbxPlayerController_ServerRequestPawnSlotDetach_Params Parms{};

	Parms.Occupant = Occupant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ServerCanSplitscreenJoin
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                              ControllerId                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ServerCanSplitscreenJoin(int32 ControllerId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ServerCanSplitscreenJoin");

	Params::AGbxPlayerController_ServerCanSplitscreenJoin_Params Parms{};

	Parms.ControllerId = ControllerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.PushCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::PushCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "PushCinematicMode");

	Params::AGbxPlayerController_PushCinematicMode_Params Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.PopCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::PopCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "PopCinematicMode");

	Params::AGbxPlayerController_PopCinematicMode_Params Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.OnRep_PrimaryCharacter
// (Final, Native, Protected)
// Parameters:

void AGbxPlayerController::OnRep_PrimaryCharacter()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "OnRep_PrimaryCharacter");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.OnRep_CinematicMode
// (Final, Native, Protected)
// Parameters:

void AGbxPlayerController::OnRep_CinematicMode()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "OnRep_CinematicMode");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// DelegateFunction GbxGameSystemCore.GbxPlayerController.OnPrimaryCharacterChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGbxCharacter*               NewCharacter                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::OnPrimaryCharacterChanged__DelegateSignature(class AGbxCharacter* NewCharacter)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "OnPrimaryCharacterChanged__DelegateSignature");

	Params::AGbxPlayerController_OnPrimaryCharacterChanged__DelegateSignature_Params Parms{};

	Parms.NewCharacter = NewCharacter;

	UObject::ProcessEvent(Func, &Parms);

}


// DelegateFunction GbxGameSystemCore.GbxPlayerController.OnPausedChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                               bPaused                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::OnPausedChangedDelegate__DelegateSignature(bool bPaused)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "OnPausedChangedDelegate__DelegateSignature");

	Params::AGbxPlayerController_OnPausedChangedDelegate__DelegateSignature_Params Parms{};

	Parms.bPaused = bPaused;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.GbxPlayerController.IsUsingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxPlayerController::IsUsingGamepad()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "IsUsingGamepad");

	Params::AGbxPlayerController_IsUsingGamepad_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetTeamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeamComponent*              ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeamComponent* AGbxPlayerController::GetTeamComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetTeamComponent");

	Params::AGbxPlayerController_GetTeamComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeam* AGbxPlayerController::GetTeam()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetTeam");

	Params::AGbxPlayerController_GetTeam_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetTargetingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetingComponent*         ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* AGbxPlayerController::GetTargetingComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetTargetingComponent");

	Params::AGbxPlayerController_GetTargetingComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetableComponent*        ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* AGbxPlayerController::GetTargetableComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetTargetableComponent");

	Params::AGbxPlayerController_GetTargetableComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetPrimaryCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGbxCharacter*               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxCharacter* AGbxPlayerController::GetPrimaryCharacter()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetPrimaryCharacter");

	Params::AGbxPlayerController_GetPrimaryCharacter_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerViewportSize
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              SizeX                                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              SizeY                                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::GetPlayerViewportSize(int32* SizeX, int32* SizeY)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerViewportSize");

	Params::AGbxPlayerController_GetPlayerViewportSize_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (SizeX != nullptr)
		*SizeX = Parms.SizeX;

	if (SizeY != nullptr)
		*SizeY = Parms.SizeY;

}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerViewportOffset
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              OffsetX                                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OffsetY                                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::GetPlayerViewportOffset(int32* OffsetX, int32* OffsetY)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerViewportOffset");

	Params::AGbxPlayerController_GetPlayerViewportOffset_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OffsetX != nullptr)
		*OffsetX = Parms.OffsetX;

	if (OffsetY != nullptr)
		*OffsetY = Parms.OffsetY;

}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerProfile
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxProfile*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxProfile* AGbxPlayerController::GetPlayerProfile()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerProfile");

	Params::AGbxPlayerController_GetPlayerProfile_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetGbxPerceptionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxPerceptionComponent*     ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxPerceptionComponent* AGbxPlayerController::GetGbxPerceptionComponent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetGbxPerceptionComponent");

	Params::AGbxPlayerController_GetGbxPerceptionComponent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.GetCurrencyAmount
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxInventoryCategoryData*   CurrencyType                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGbxPlayerController::GetCurrencyAmount(class UGbxInventoryCategoryData* CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "GetCurrencyAmount");

	Params::AGbxPlayerController_GetCurrencyAmount_Params Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.DeprojectViewportPositionToWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ViewportX                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ViewportY                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     WorldLocation                                                    (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     WorldDirection                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseForegroundProjection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxPlayerController::DeprojectViewportPositionToWorld(float ViewportX, float ViewportY, struct FVector* WorldLocation, struct FVector* WorldDirection, bool bUseForegroundProjection)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "DeprojectViewportPositionToWorld");

	Params::AGbxPlayerController_DeprojectViewportPositionToWorld_Params Parms{};

	Parms.ViewportX = ViewportX;
	Parms.ViewportY = ViewportY;
	Parms.bUseForegroundProjection = bUseForegroundProjection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxPlayerController.DebugCategory
// (Final, Exec, Native, Public)
// Parameters:
// class FName                        CategoryName                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::DebugCategory(class FName CategoryName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "DebugCategory");

	Params::AGbxPlayerController_DebugCategory_Params Parms{};

	Parms.CategoryName = CategoryName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientStopFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*               Data                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientStopFeedback(class UFeedbackData* Data)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientStopFeedback");

	Params::AGbxPlayerController_ClientStopFeedback_Params Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientPlayWwiseEvent
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UWwiseEvent*                 Event                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPlayWwiseEvent(class UWwiseEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientPlayWwiseEvent");

	Params::AGbxPlayerController_ClientPlayWwiseEvent_Params Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientPlayFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*               Data                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPlayFeedback(class UFeedbackData* Data, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientPlayFeedback");

	Params::AGbxPlayerController_ClientPlayFeedback_Params Parms{};

	Parms.Data = Data;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientPerformFeedbackAtLocation
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides    RangedOverrides                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPerformFeedbackAtLocation(class UFeedbackData* FeedbackData, const struct FVector& SourceLocation, bool bLoop, class UObject* SourceContext, const struct FRangedDistanceOverrides& RangedOverrides)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientPerformFeedbackAtLocation");

	Params::AGbxPlayerController_ClientPerformFeedbackAtLocation_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceLocation = SourceLocation;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.RangedOverrides = RangedOverrides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientPerformFeedback
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPerformFeedback(class UFeedbackData* FeedbackData, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientPerformFeedback");

	Params::AGbxPlayerController_ClientPerformFeedback_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientNotifyActivateCheckpoint
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:

void AGbxPlayerController::ClientNotifyActivateCheckpoint()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientNotifyActivateCheckpoint");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientCanSplitscreenJoin
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// int32                              ControllerId                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bCanJoin                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientCanSplitscreenJoin(int32 ControllerId, bool bCanJoin)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientCanSplitscreenJoin");

	Params::AGbxPlayerController_ClientCanSplitscreenJoin_Params Parms{};

	Parms.ControllerId = ControllerId;
	Parms.bCanJoin = bCanJoin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClientApplyDamageDataPresentation
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UDamageData*                 DamageData                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlayerDamageDataPresentationPlayerPresentation                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientApplyDamageDataPresentation(class UDamageData* DamageData, struct FPlayerDamageDataPresentation& PlayerPresentation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClientApplyDamageDataPresentation");

	Params::AGbxPlayerController_ClientApplyDamageDataPresentation_Params Parms{};

	Parms.DamageData = DamageData;
	Parms.PlayerPresentation = PlayerPresentation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.Client_StopGbxFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UGbxFeedbackData*            Data                                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::Client_StopGbxFeedback(class UGbxFeedbackData* Data, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "Client_StopGbxFeedback");

	Params::AGbxPlayerController_Client_StopGbxFeedback_Params Parms{};

	Parms.Data = Data;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.Client_PlayGbxFeedback
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UGbxFeedbackData*            Data                                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIs3D                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              EffectFalloffMinDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              EffectFalloffMaxDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::Client_PlayGbxFeedback(class UGbxFeedbackData* Data, bool bIs3D, bool bLoop, float Scale, class UObject* SourceContext, const struct FVector& SourceLocation, float EffectFalloffMinDistance, float EffectFalloffMaxDistance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "Client_PlayGbxFeedback");

	Params::AGbxPlayerController_Client_PlayGbxFeedback_Params Parms{};

	Parms.Data = Data;
	Parms.bIs3D = bIs3D;
	Parms.bLoop = bLoop;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;
	Parms.SourceLocation = SourceLocation;
	Parms.EffectFalloffMinDistance = EffectFalloffMinDistance;
	Parms.EffectFalloffMaxDistance = EffectFalloffMaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClearCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void AGbxPlayerController::ClearCinematicMode()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClearCinematicMode");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.ClearAndSetCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClearAndSetCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "ClearAndSetCinematicMode");

	Params::AGbxPlayerController_ClearAndSetCinematicMode_Params Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPlayerController.AddCurrencyAmount
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxInventoryCategoryData*   CurrencyType                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::AddCurrencyAmount(int32 Amount, class UGbxInventoryCategoryData* CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPlayerController", "AddCurrencyAmount");

	Params::AGbxPlayerController_AddCurrencyAmount_Params Parms{};

	Parms.Amount = Amount;
	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.AimAssistStrategy
// (None)

class UClass* UAimAssistStrategy::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AimAssistStrategy");

	return Clss;
}


// AimAssistStrategy GbxGameSystemCore.Default__AimAssistStrategy
// (Public, ClassDefaultObject, ArchetypeObject)

class UAimAssistStrategy* UAimAssistStrategy::GetDefaultObj()
{
	static class UAimAssistStrategy* Default = nullptr;

	if (!Default)
		Default = static_cast<UAimAssistStrategy*>(UAimAssistStrategy::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxGameAssetManager
// (None)

class UClass* UGbxGameAssetManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameAssetManager");

	return Clss;
}


// GbxGameAssetManager GbxGameSystemCore.Default__GbxGameAssetManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameAssetManager* UGbxGameAssetManager::GetDefaultObj()
{
	static class UGbxGameAssetManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameAssetManager*>(UGbxGameAssetManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AssetMappingData
// (None)

class UClass* UAssetMappingData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AssetMappingData");

	return Clss;
}


// AssetMappingData GbxGameSystemCore.Default__AssetMappingData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAssetMappingData* UAssetMappingData::GetDefaultObj()
{
	static class UAssetMappingData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAssetMappingData*>(UAssetMappingData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.challenge
// (None)

class UClass* UChallenge::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("challenge");

	return Clss;
}


// challenge GbxGameSystemCore.Default__challenge
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallenge* UChallenge::GetDefaultObj()
{
	static class UChallenge* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallenge*>(UChallenge::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.challenge.TestForCompleted
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*        PlayerToTest                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     OtherObject                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>              EnumTag                                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::TestForCompleted(class AGbxPlayerController* PlayerToTest, class UObject* OtherObject, TArray<class FString>& EnumTag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "TestForCompleted");

	Params::UChallenge_TestForCompleted_Params Parms{};

	Parms.PlayerToTest = PlayerToTest;
	Parms.OtherObject = OtherObject;
	Parms.EnumTag = EnumTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.SetChallengeProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                              NewProgress                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::SetChallengeProgress(int32 NewProgress)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "SetChallengeProgress");

	Params::UChallenge_SetChallengeProgress_Params Parms{};

	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.challenge.PlayerExitChallengeArea
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*LevelActorComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::PlayerExitChallengeArea(class UChallengeLevelActorComponent* LevelActorComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "PlayerExitChallengeArea");

	Params::UChallenge_PlayerExitChallengeArea_Params Parms{};

	Parms.LevelActorComponent = LevelActorComponent;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.challenge.PlayerEnterChallengeArea
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*LevelActorComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::PlayerEnterChallengeArea(class UChallengeLevelActorComponent* LevelActorComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "PlayerEnterChallengeArea");

	Params::UChallenge_PlayerEnterChallengeArea_Params Parms{};

	Parms.LevelActorComponent = LevelActorComponent;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.challenge.OnLevelActorRegistered
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*RegisteredLevelActor                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::OnLevelActorRegistered(class UChallengeLevelActorComponent* RegisteredLevelActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "OnLevelActorRegistered");

	Params::UChallenge_OnLevelActorRegistered_Params Parms{};

	Parms.RegisteredLevelActor = RegisteredLevelActor;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.challenge.OnInitChallengeInstance
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengesComponent*        OwningChallenges                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxCharacter*               AssociatedCharacter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "OnInitChallengeInstance");

	Params::UChallenge_OnInitChallengeInstance_Params Parms{};

	Parms.OwningChallenges = OwningChallenges;
	Parms.AssociatedCharacter = AssociatedCharacter;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.challenge.OnChallengeActivated
// (Event, Public, BlueprintEvent)
// Parameters:

void UChallenge::OnChallengeActivated()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "OnChallengeActivated");



	UObject::ProcessEvent(Func, nullptr);

}


// Function GbxGameSystemCore.challenge.IsChallengeComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::IsChallengeComplete()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "IsChallengeComplete");

	Params::UChallenge_IsChallengeComplete_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.IsChallengeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::IsChallengeActive()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "IsChallengeActive");

	Params::UChallenge_IsChallengeActive_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.IncrementChallengeProgressByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::IncrementChallengeProgressByValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "IncrementChallengeProgressByValue");

	Params::UChallenge_IncrementChallengeProgressByValue_Params Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.challenge.IncrementChallengeProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:

void UChallenge::IncrementChallengeProgress()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "IncrementChallengeProgress");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.challenge.GetLevelActorComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UChallengeLevelActorComponent*>LevelActorList                                                   (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UChallenge::GetLevelActorComponents(TArray<class UChallengeLevelActorComponent*>* LevelActorList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "GetLevelActorComponents");

	Params::UChallenge_GetLevelActorComponents_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (LevelActorList != nullptr)
		*LevelActorList = std::move(Parms.LevelActorList);

}


// Function GbxGameSystemCore.challenge.GetChallengeProgressGoalValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallenge::GetChallengeProgressGoalValue()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "GetChallengeProgressGoalValue");

	Params::UChallenge_GetChallengeProgressGoalValue_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.GetChallengeProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallenge::GetChallengeProgress()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "GetChallengeProgress");

	Params::UChallenge_GetChallengeProgress_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.GetChallengeCompleteInfo
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              NumCompleted                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumChallenges                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bCheckReplicatedChallenges                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::GetChallengeCompleteInfo(int32* NumCompleted, int32* NumChallenges, bool bCheckReplicatedChallenges)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "GetChallengeCompleteInfo");

	Params::UChallenge_GetChallengeCompleteInfo_Params Parms{};

	Parms.bCheckReplicatedChallenges = bCheckReplicatedChallenges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumChallenges != nullptr)
		*NumChallenges = Parms.NumChallenges;

}


// Function GbxGameSystemCore.challenge.CompletedConditional
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::CompletedConditional()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "CompletedConditional");

	Params::UChallenge_CompletedConditional_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.challenge.CompletedChallenge
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*        CompletedPlayer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::CompletedChallenge(class AGbxPlayerController* CompletedPlayer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "CompletedChallenge");

	Params::UChallenge_CompletedChallenge_Params Parms{};

	Parms.CompletedPlayer = CompletedPlayer;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.challenge.CompleteChallenge
// (Native, Public, BlueprintCallable, Const)
// Parameters:

void UChallenge::CompleteChallenge()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "CompleteChallenge");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.challenge.ActivateChallenge
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UChallenge::ActivateChallenge()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("challenge", "ActivateChallenge");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ChallengeCategoryData
// (None)

class UClass* UChallengeCategoryData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeCategoryData");

	return Clss;
}


// ChallengeCategoryData GbxGameSystemCore.Default__ChallengeCategoryData
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeCategoryData* UChallengeCategoryData::GetDefaultObj()
{
	static class UChallengeCategoryData* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeCategoryData*>(UChallengeCategoryData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeList
// (None)

class UClass* UChallengeList::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeList");

	return Clss;
}


// ChallengeList GbxGameSystemCore.Default__ChallengeList
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeList* UChallengeList::GetDefaultObj()
{
	static class UChallengeList* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeList*>(UChallengeList::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeManager
// (Actor)

class UClass* AChallengeManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeManager");

	return Clss;
}


// ChallengeManager GbxGameSystemCore.Default__ChallengeManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AChallengeManager* AChallengeManager::GetDefaultObj()
{
	static class AChallengeManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AChallengeManager*>(AChallengeManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ChallengeManager.OnStatUpdate
// (Final, Native, Public)
// Parameters:
// class AActor*                      StatContext                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatId                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AChallengeManager::OnStatUpdate(class AActor* StatContext, class UGameStatData* StatId, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeManager", "OnStatUpdate");

	Params::AChallengeManager_OnStatUpdate_Params Parms{};

	Parms.StatContext = StatContext;
	Parms.StatId = StatId;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeManager.OnStatIncrement
// (Final, Native, Public)
// Parameters:
// class AActor*                      StatContext                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatId                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AChallengeManager::OnStatIncrement(class AActor* StatContext, class UGameStatData* StatId, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeManager", "OnStatIncrement");

	Params::AChallengeManager_OnStatIncrement_Params Parms{};

	Parms.StatContext = StatContext;
	Parms.StatId = StatId;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeManager.OnRep_ReplicatedChallenges
// (Native, Protected)
// Parameters:

void AChallengeManager::OnRep_ReplicatedChallenges()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeManager", "OnRep_ReplicatedChallenges");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.CustomChallengePersistentState
// (None)

class UClass* UCustomChallengePersistentState::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CustomChallengePersistentState");

	return Clss;
}


// CustomChallengePersistentState GbxGameSystemCore.Default__CustomChallengePersistentState
// (Public, ClassDefaultObject, ArchetypeObject)

class UCustomChallengePersistentState* UCustomChallengePersistentState::GetDefaultObj()
{
	static class UCustomChallengePersistentState* Default = nullptr;

	if (!Default)
		Default = static_cast<UCustomChallengePersistentState*>(UCustomChallengePersistentState::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengesComponent
// (None)

class UClass* UChallengesComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengesComponent");

	return Clss;
}


// ChallengesComponent GbxGameSystemCore.Default__ChallengesComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengesComponent* UChallengesComponent::GetDefaultObj()
{
	static class UChallengesComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengesComponent*>(UChallengesComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ChallengesComponent.UnregisterInActivePlayerChallenges
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UChallengesComponent::UnregisterInActivePlayerChallenges()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "UnregisterInActivePlayerChallenges");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.SetChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewProgress                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::SetChallengeProgress(class UClass* ChalClass, int32 NewProgress)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "SetChallengeProgress");

	Params::UChallengesComponent_SetChallengeProgress_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.SetChallengeActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInIsActive                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::SetChallengeActive(class UClass* ChalClass, bool bInIsActive)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "SetChallengeActive");

	Params::UChallengesComponent_SetChallengeActive_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bInIsActive = bInIsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.IsChallengeComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bCheckReplicatedChallenges                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::IsChallengeComplete(class UClass* ChalClass, bool bCheckReplicatedChallenges)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "IsChallengeComplete");

	Params::UChallengesComponent_IsChallengeComplete_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bCheckReplicatedChallenges = bCheckReplicatedChallenges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.IsChallengeActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::IsChallengeActive(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "IsChallengeActive");

	Params::UChallengesComponent_IsChallengeActive_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.IncrementChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::IncrementChallengeProgress(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "IncrementChallengeProgress");

	Params::UChallengesComponent_IncrementChallengeProgress_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.GetMaxChallengeTiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetMaxChallengeTiers(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetMaxChallengeTiers");

	Params::UChallengesComponent_GetMaxChallengeTiers_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetLocalChallenges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FChallengeInstanceData>ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FChallengeInstanceData> UChallengesComponent::GetLocalChallenges()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetLocalChallenges");

	Params::UChallengesComponent_GetLocalChallenges_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetCompletedChallengeTiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetCompletedChallengeTiers(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetCompletedChallengeTiers");

	Params::UChallengesComponent_GetCompletedChallengeTiers_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatId                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeStatValue(class UClass* ChalClass, class UGameStatData* StatId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeStatValue");

	Params::UChallengesComponent_GetChallengeStatValue_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.StatId = StatId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeStatGoalValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatId                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeStatGoalValue(class UClass* ChalClass, class UGameStatData* StatId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeStatGoalValue");

	Params::UChallengesComponent_GetChallengeStatGoalValue_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.StatId = StatId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeProgressGoalValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeProgressGoalValue(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeProgressGoalValue");

	Params::UChallengesComponent_GetChallengeProgressGoalValue_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeProgress(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeProgress");

	Params::UChallengesComponent_GetChallengeProgress_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeCompleteInfoForLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                LevelsForChallenges                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UChallengeCategoryData*      Category                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumCompleted                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumActive                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnoreHidden                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::GetChallengeCompleteInfoForLevels(const TArray<class FName>& LevelsForChallenges, class UChallengeCategoryData* Category, int32* NumCompleted, int32* NumActive, bool bIgnoreHidden)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeCompleteInfoForLevels");

	Params::UChallengesComponent_GetChallengeCompleteInfoForLevels_Params Parms{};

	Parms.LevelsForChallenges = LevelsForChallenges;
	Parms.Category = Category;
	Parms.bIgnoreHidden = bIgnoreHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumActive != nullptr)
		*NumActive = Parms.NumActive;

}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeCompleteInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumCompleted                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumChallenges                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bCheckReplicatedChallenges                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::GetChallengeCompleteInfo(class UClass* ChalClass, int32* NumCompleted, int32* NumChallenges, bool bCheckReplicatedChallenges)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeCompleteInfo");

	Params::UChallengesComponent_GetChallengeCompleteInfo_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bCheckReplicatedChallenges = bCheckReplicatedChallenges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumChallenges != nullptr)
		*NumChallenges = Parms.NumChallenges;

}


// Function GbxGameSystemCore.ChallengesComponent.CompleteChallengeIfConditionsMet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::CompleteChallengeIfConditionsMet(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "CompleteChallengeIfConditionsMet");

	Params::UChallengesComponent_CompleteChallengeIfConditionsMet_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.CompleteChallenge
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bForceActive                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnoreRewards                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::CompleteChallenge(class UClass* ChalClass, bool bForceActive, bool bIgnoreRewards)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "CompleteChallenge");

	Params::UChallengesComponent_CompleteChallenge_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bForceActive = bForceActive;
	Parms.bIgnoreRewards = bIgnoreRewards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.ClientChallengeUpdateProgress
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewProgress                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientChallengeUpdateProgress(class UClass* ChalClass, int32 NewProgress)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "ClientChallengeUpdateProgress");

	Params::UChallengesComponent_ClientChallengeUpdateProgress_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.ClientChallengeCompleted
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NumTiersComplete                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bForceActive                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnoreRewards                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientChallengeCompleted(class UClass* ChalClass, int32 NumTiersComplete, bool bForceActive, bool bIgnoreRewards)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "ClientChallengeCompleted");

	Params::UChallengesComponent_ClientChallengeCompleted_Params Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NumTiersComplete = NumTiersComplete;
	Parms.bForceActive = bForceActive;
	Parms.bIgnoreRewards = bIgnoreRewards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.ClientActivateChallenge
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientActivateChallenge(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "ClientActivateChallenge");

	Params::UChallengesComponent_ClientActivateChallenge_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengesComponent.AreGlobalChallengesRegistered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::AreGlobalChallengesRegistered()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "AreGlobalChallengesRegistered");

	Params::UChallengesComponent_AreGlobalChallengesRegistered_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ChallengesComponent.ActivateChallenge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                      ChalClass                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ActivateChallenge(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengesComponent", "ActivateChallenge");

	Params::UChallengesComponent_ActivateChallenge_Params Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxCharacterMovementComponent
// (None)

class UClass* UGbxCharacterMovementComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCharacterMovementComponent");

	return Clss;
}


// GbxCharacterMovementComponent GbxGameSystemCore.Default__GbxCharacterMovementComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCharacterMovementComponent* UGbxCharacterMovementComponent::GetDefaultObj()
{
	static class UGbxCharacterMovementComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCharacterMovementComponent*>(UGbxCharacterMovementComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopRotateTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCharacterMovementComponent::StopRotateTo()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopRotateTo");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopMoveTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bForce                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicateStop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StopMoveTo(bool bForce, bool bReplicateStop)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopMoveTo");

	Params::UGbxCharacterMovementComponent_StopMoveTo_Params Parms{};

	Parms.bForce = bForce;
	Parms.bReplicateStop = bReplicateStop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopControlledMove
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bZeroVelocity                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInterrupted                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StopControlledMove(TSubclassOf<class UControlledMove> ControlledMove, bool bZeroVelocity, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopControlledMove");

	Params::UGbxCharacterMovementComponent_StopControlledMove_Params Parms{};

	Parms.ControlledMove = ControlledMove;
	Parms.bZeroVelocity = bZeroVelocity;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartRotateTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterRotateToCommand   RotateToCommand                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StartRotateTo(struct FCharacterRotateToCommand& RotateToCommand)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartRotateTo");

	Params::UGbxCharacterMovementComponent_StartRotateTo_Params Parms{};

	Parms.RotateToCommand = RotateToCommand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartMoveTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterMoveToCommand     MoveToCommand                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StartMoveTo(struct FCharacterMoveToCommand& MoveToCommand)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartMoveTo");

	Params::UGbxCharacterMovementComponent_StartMoveTo_Params Parms{};

	Parms.MoveToCommand = MoveToCommand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartControlledMove
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              SpeedOverride                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DurationOverride                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LaunchAngleOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetLocation                                                   (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::StartControlledMove(TSubclassOf<class UControlledMove> ControlledMove, class AActor* Instigator, float SpeedOverride, float DurationOverride, float LaunchAngleOverride, class AActor* TargetActor, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartControlledMove");

	Params::UGbxCharacterMovementComponent_StartControlledMove_Params Parms{};

	Parms.ControlledMove = ControlledMove;
	Parms.Instigator = Instigator;
	Parms.SpeedOverride = SpeedOverride;
	Parms.DurationOverride = DurationOverride;
	Parms.LaunchAngleOverride = LaunchAngleOverride;
	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = TargetLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bAnimationWalking                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetNoneWithRootMotionMode(bool bAnimationWalking, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetNoneWithRootMotionMode");

	Params::UGbxCharacterMovementComponent_SetNoneWithRootMotionMode_Params Parms{};

	Parms.bAnimationWalking = bAnimationWalking;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetFacingTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFacingInfo                 FacingTarget                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetFacingTarget(struct FFacingInfo& FacingTarget, enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetFacingTarget");

	Params::UGbxCharacterMovementComponent_SetFacingTarget_Params Parms{};

	Parms.FacingTarget = FacingTarget;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetAnimationBasedTurning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnable                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetAnimationBasedTurning(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetAnimationBasedTurning");

	Params::UGbxCharacterMovementComponent_SetAnimationBasedTurning_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerStopMoveTo
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:

void UGbxCharacterMovementComponent::ServerStopMoveTo()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerStopMoveTo");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerStartMoveTo
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FCharacterMoveToCommand     MoveToCommand                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ServerStartMoveTo(struct FCharacterMoveToCommand& MoveToCommand)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerStartMoveTo");

	Params::UGbxCharacterMovementComponent_ServerStartMoveTo_Params Parms{};

	Parms.MoveToCommand = MoveToCommand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerAttemptMantle
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FMantleAttemptInfo          ClientData                                                       (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Timestamp                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ServerAttemptMantle(struct FMantleAttemptInfo& ClientData, float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerAttemptMantle");

	Params::UGbxCharacterMovementComponent_ServerAttemptMantle_Params Parms{};

	Parms.ClientData = ClientData;
	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnStanceChanged
// (Native, Public)
// Parameters:
// struct FStanceChangedEventArgs     Args                                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnStanceChanged(const struct FStanceChangedEventArgs& Args)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnStanceChanged");

	Params::UGbxCharacterMovementComponent_OnStanceChanged_Params Parms{};

	Parms.Args = Args;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnRep_ControlledMove
// (Final, Native, Protected)
// Parameters:

void UGbxCharacterMovementComponent::OnRep_ControlledMove()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnRep_ControlledMove");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnNotifyTurnExit
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCharacterMovementComponent::OnNotifyTurnExit()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnNotifyTurnExit");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnNotifyTurnEnter
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCharacterMovementComponent::OnNotifyTurnEnter()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnNotifyTurnEnter");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnCharacterMeshAnimInstanceChanged
// (Final, Native, Protected)
// Parameters:

void UGbxCharacterMovementComponent::OnCharacterMeshAnimInstanceChanged()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnCharacterMeshAnimInstanceChanged");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnCapsuleEndOverlap
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*         OverlappedComp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      OtherActor                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         OtherComp                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OtherBodyIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnCapsuleEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnCapsuleEndOverlap");

	Params::UGbxCharacterMovementComponent_OnCapsuleEndOverlap_Params Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnCapsuleBeginOverlap
// (Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*         OverlappedComp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      OtherActor                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         OtherComp                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OtherBodyIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bFromSweep                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  SweepResult                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnCapsuleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnCapsuleBeginOverlap");

	Params::UGbxCharacterMovementComponent_OnCapsuleBeginOverlap_Params Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = SweepResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                    Rotation                                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoRotation");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoRotation_Params Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoNone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoNone()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoNone");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoNone_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                     Location                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoLocation");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoLocation_Params Parms{};

	Parms.Location = Location;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoDirection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                     Direction                                                        (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoDirection");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoDirection_Params Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoComponent(class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoComponent");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoComponent_Params Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoActorEyes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoActorEyes(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoActorEyes");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoActorEyes_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                 ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoActor");

	Params::UGbxCharacterMovementComponent_MakeFacingInfoActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.LeaveNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bApplyDefault                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::LeaveNoneWithRootMotionMode(bool bApplyDefault)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "LeaveNoneWithRootMotionMode");

	Params::UGbxCharacterMovementComponent_LeaveNoneWithRootMotionMode_Params Parms{};

	Parms.bApplyDefault = bApplyDefault;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsPerformingSpecificControlledMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsPerformingSpecificControlledMove(TSubclassOf<class UControlledMove> ControlledMove)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsPerformingSpecificControlledMove");

	Params::UGbxCharacterMovementComponent_IsPerformingSpecificControlledMove_Params Parms{};

	Parms.ControlledMove = ControlledMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsPerformingControlledMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsPerformingControlledMove()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsPerformingControlledMove");

	Params::UGbxCharacterMovementComponent_IsPerformingControlledMove_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMovingOnLadder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMovingOnLadder()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMovingOnLadder");

	Params::UGbxCharacterMovementComponent_IsMovingOnLadder_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMantlingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMantlingAllowed()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMantlingAllowed");

	Params::UGbxCharacterMovementComponent_IsMantlingAllowed_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMantling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMantling()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMantling");

	Params::UGbxCharacterMovementComponent_IsMantling_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsInNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsInNoneWithRootMotionMode()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsInNoneWithRootMotionMode");

	Params::UGbxCharacterMovementComponent_IsInNoneWithRootMotionMode_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsHandIkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsHandIkEnabled()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsHandIkEnabled");

	Params::UGbxCharacterMovementComponent_IsHandIkEnabled_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFootIkTracingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFootIkTracingEnabled()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFootIkTracingEnabled");

	Params::UGbxCharacterMovementComponent_IsFootIkTracingEnabled_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFootIkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFootIkEnabled()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFootIkEnabled");

	Params::UGbxCharacterMovementComponent_IsFootIkEnabled_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFacingTargetBP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ThresholdDegrees                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFacingTargetBP(float ThresholdDegrees, enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFacingTargetBP");

	Params::UGbxCharacterMovementComponent_IsFacingTargetBP_Params Parms{};

	Parms.ThresholdDegrees = ThresholdDegrees;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetMaxAllowedAimOffset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxCharacterMovementComponent::GetMaxAllowedAimOffset()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetMaxAllowedAimOffset");

	Params::UGbxCharacterMovementComponent_GetMaxAllowedAimOffset_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetMantleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMantleData*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMantleData* UGbxCharacterMovementComponent::GetMantleData()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetMantleData");

	Params::UGbxCharacterMovementComponent_GetMantleData_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetDesiredFacingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxCharacterMovementComponent::GetDesiredFacingRotation(enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetDesiredFacingRotation");

	Params::UGbxCharacterMovementComponent_GetDesiredFacingRotation_Params Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetDesiredFacingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetDesiredFacingLocation(enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetDesiredFacingLocation");

	Params::UGbxCharacterMovementComponent_GetDesiredFacingLocation_Params Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxCharacterMovementComponent::GetCurrentFacingRotation(enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingRotation");

	Params::UGbxCharacterMovementComponent_GetCurrentFacingRotation_Params Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetCurrentFacingOrigin(enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingOrigin");

	Params::UGbxCharacterMovementComponent_GetCurrentFacingOrigin_Params Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EFacingChannel          Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetCurrentFacingLocation(enum class EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingLocation");

	Params::UGbxCharacterMovementComponent_GetCurrentFacingLocation_Params Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetControlledMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UControlledMove*             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UControlledMove* UGbxCharacterMovementComponent::GetControlledMove()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetControlledMove");

	Params::UGbxCharacterMovementComponent_GetControlledMove_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GbxSetAnimInstanceClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*      SkelMeshComponent                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                      NewClass                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::GbxSetAnimInstanceClass(class USkeletalMeshComponent* SkelMeshComponent, class UClass* NewClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GbxSetAnimInstanceClass");

	Params::UGbxCharacterMovementComponent_GbxSetAnimInstanceClass_Params Parms{};

	Parms.SkelMeshComponent = SkelMeshComponent;
	Parms.NewClass = NewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// DelegateFunction GbxGameSystemCore.GbxCharacterMovementComponent.GbxCharacterMovementEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:

void UGbxCharacterMovementComponent::GbxCharacterMovementEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GbxCharacterMovementEvent__DelegateSignature");



	UObject::ProcessEvent(Func, nullptr);

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMoveOld
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                              OldTimeStamp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10       OldAccel                                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              OldMoveFlags                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             CMDir                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, uint8 OldMoveFlags, uint32 CMDir)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMoveOld");

	Params::UGbxCharacterMovementComponent_ControlledServerMoveOld_Params Parms{};

	Parms.OldTimeStamp = OldTimeStamp;
	Parms.OldAccel = OldAccel;
	Parms.OldMoveFlags = OldMoveFlags;
	Parms.CMDir = CMDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMoveDual
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                              TimeStamp0                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10       InAccel0                                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              PendingFlags                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             View0                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             CMDir0                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Timestamp                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10       InAccel                                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100      ClientLoc                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              NewFlags                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ClientRoll                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             View                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         ClientMovementBase                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ClientBaseBoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ClientMovementMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             CMDir                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                             ClientBodyYaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, uint32 CMDir0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode, uint32 CMDir, uint16 ClientBodyYaw)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMoveDual");

	Params::UGbxCharacterMovementComponent_ControlledServerMoveDual_Params Parms{};

	Parms.TimeStamp0 = TimeStamp0;
	Parms.InAccel0 = InAccel0;
	Parms.PendingFlags = PendingFlags;
	Parms.View0 = View0;
	Parms.CMDir0 = CMDir0;
	Parms.Timestamp = Timestamp;
	Parms.InAccel = InAccel;
	Parms.ClientLoc = ClientLoc;
	Parms.NewFlags = NewFlags;
	Parms.ClientRoll = ClientRoll;
	Parms.View = View;
	Parms.ClientMovementBase = ClientMovementBase;
	Parms.ClientBaseBoneName = ClientBaseBoneName;
	Parms.ClientMovementMode = ClientMovementMode;
	Parms.CMDir = CMDir;
	Parms.ClientBodyYaw = ClientBodyYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMove
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                              Timestamp                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10       InAccel                                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100      ClientLoc                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              CompressedMoveFlags                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ClientRoll                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             View                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         ClientMovementBase                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ClientBaseBoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ClientMovementMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                             CMDir                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                             ClientBodyYaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode, uint32 CMDir, uint16 ClientBodyYaw)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMove");

	Params::UGbxCharacterMovementComponent_ControlledServerMove_Params Parms{};

	Parms.Timestamp = Timestamp;
	Parms.InAccel = InAccel;
	Parms.ClientLoc = ClientLoc;
	Parms.CompressedMoveFlags = CompressedMoveFlags;
	Parms.ClientRoll = ClientRoll;
	Parms.View = View;
	Parms.ClientMovementBase = ClientMovementBase;
	Parms.ClientBaseBoneName = ClientBaseBoneName;
	Parms.ClientMovementMode = ClientMovementMode;
	Parms.CMDir = CMDir;
	Parms.ClientBodyYaw = ClientBodyYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ClientAdjustControlledMovePosition
// (Final, Net, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// float                              Timestamp                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FControlledMoveNetCorrectionServerCMData                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     NewLoc                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     NewVel                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         NewBase                                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        NewBaseBoneName                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHasBase                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bBaseRelativePosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ServerMovementMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ClientAdjustControlledMovePosition(float Timestamp, const struct FControlledMoveNetCorrection& ServerCMData, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ClientAdjustControlledMovePosition");

	Params::UGbxCharacterMovementComponent_ClientAdjustControlledMovePosition_Params Parms{};

	Parms.Timestamp = Timestamp;
	Parms.ServerCMData = ServerCMData;
	Parms.NewLoc = NewLoc;
	Parms.NewVel = NewVel;
	Parms.NewBase = NewBase;
	Parms.NewBaseBoneName = NewBaseBoneName;
	Parms.bHasBase = bHasBase;
	Parms.bBaseRelativePosition = bBaseRelativePosition;
	Parms.ServerMovementMode = ServerMovementMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.CanStartPassiveMantle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::CanStartPassiveMantle()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "CanStartPassiveMantle");

	Params::UGbxCharacterMovementComponent_CanStartPassiveMantle_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.CanStartMantle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::CanStartMantle()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "CanStartMantle");

	Params::UGbxCharacterMovementComponent_CanStartMantle_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.AddPendingRawInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     NewInputVector                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::AddPendingRawInputVector(const struct FVector& NewInputVector)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "AddPendingRawInputVector");

	Params::UGbxCharacterMovementComponent_AddPendingRawInputVector_Params Parms{};

	Parms.NewInputVector = NewInputVector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxCheatManager
// (None)

class UClass* UGbxCheatManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCheatManager");

	return Clss;
}


// GbxCheatManager GbxGameSystemCore.Default__GbxCheatManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCheatManager* UGbxCheatManager::GetDefaultObj()
{
	static class UGbxCheatManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCheatManager*>(UGbxCheatManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCheatManager.TestGameStage
// (Exec, Native, Public)
// Parameters:
// int32                              GameStageOverride                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::TestGameStage(int32 GameStageOverride)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "TestGameStage");

	Params::UGbxCheatManager_TestGameStage_Params Parms{};

	Parms.GameStageOverride = GameStageOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.StartPlayerInit
// (Final, Exec, Native, Public)
// Parameters:

void UGbxCheatManager::StartPlayerInit()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "StartPlayerInit");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.ShowProjectileImpacts
// (Final, Exec, Native, Public)
// Parameters:
// float                              Size                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LifeTime                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::ShowProjectileImpacts(float Size, float LifeTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "ShowProjectileImpacts");

	Params::UGbxCheatManager_ShowProjectileImpacts_Params Parms{};

	Parms.Size = Size;
	Parms.LifeTime = LifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.SetDebugActorByName
// (Final, Exec, Native, Public)
// Parameters:
// class FString                      ActorName                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::SetDebugActorByName(const class FString& ActorName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "SetDebugActorByName");

	Params::UGbxCheatManager_SetDebugActorByName_Params Parms{};

	Parms.ActorName = ActorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.SetDebugActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ControllerIndex                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::SetDebugActor(class AActor* Actor, int32 ControllerIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "SetDebugActor");

	Params::UGbxCheatManager_SetDebugActor_Params Parms{};

	Parms.Actor = Actor;
	Parms.ControllerIndex = ControllerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.Server_TogglePlayersOnly
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:

void UGbxCheatManager::Server_TogglePlayersOnly()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "Server_TogglePlayersOnly");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.Server_DamageTarget
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                              DamageAmount                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::Server_DamageTarget(float DamageAmount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "Server_DamageTarget");

	Params::UGbxCheatManager_Server_DamageTarget_Params Parms{};

	Parms.DamageAmount = DamageAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedbackRangedFromThere
// (Final, Exec, Native, Public)
// Parameters:
// class FString                      FeedbackData                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedbackRangedFromThere(const class FString& FeedbackData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedbackRangedFromThere");

	Params::UGbxCheatManager_PlayFeedbackRangedFromThere_Params Parms{};

	Parms.FeedbackData = FeedbackData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedbackDirectional
// (Final, Exec, Native, Public)
// Parameters:
// class FString                      FeedbackData                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DirectionAngle                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedbackDirectional(const class FString& FeedbackData, float DirectionAngle)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedbackDirectional");

	Params::UGbxCheatManager_PlayFeedbackDirectional_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.DirectionAngle = DirectionAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedback
// (Final, Exec, Native, Public)
// Parameters:
// class FString                      FeedbackData                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedback(const class FString& FeedbackData, float Scale)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedback");

	Params::UGbxCheatManager_PlayFeedback_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.LogQatalystInfo
// (Final, Exec, Native, Public, Const)
// Parameters:

void UGbxCheatManager::LogQatalystInfo()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "LogQatalystInfo");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.DebugNextAI
// (Final, Exec, Native, Public)
// Parameters:

void UGbxCheatManager::DebugNextAI()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "DebugNextAI");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.DamageAreaDebug
// (Final, Exec, Native, Public, Const)
// Parameters:

void UGbxCheatManager::DamageAreaDebug()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "DamageAreaDebug");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCheatManager.ClearPlayerInit
// (Final, Exec, Native, Public)
// Parameters:

void UGbxCheatManager::ClearPlayerInit()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCheatManager", "ClearPlayerInit");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.CinematicModeData
// (None)

class UClass* UCinematicModeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CinematicModeData");

	return Clss;
}


// CinematicModeData GbxGameSystemCore.Default__CinematicModeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UCinematicModeData* UCinematicModeData::GetDefaultObj()
{
	static class UCinematicModeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UCinematicModeData*>(UCinematicModeData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ControlledMove
// (None)

class UClass* UControlledMove::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ControlledMove");

	return Clss;
}


// ControlledMove GbxGameSystemCore.Default__ControlledMove
// (Public, ClassDefaultObject, ArchetypeObject)

class UControlledMove* UControlledMove::GetDefaultObj()
{
	static class UControlledMove* Default = nullptr;

	if (!Default)
		Default = static_cast<UControlledMove*>(UControlledMove::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ControlledMove.OnTeleported
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                              MoveDuration                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     PreTeleportLocation                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnTeleported(float MoveDuration, struct FVector& PreTeleportLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnTeleported");

	Params::UControlledMove_OnTeleported_Params Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.PreTeleportLocation = PreTeleportLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnTargetLocationChanged
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                     NewTargetLocation                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnTargetLocationChanged(struct FVector& NewTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnTargetLocationChanged");

	Params::UControlledMove_OnTargetLocationChanged_Params Parms{};

	Parms.NewTargetLocation = NewTargetLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                               bInterrupted                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnStop(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnStop");

	Params::UControlledMove_OnStop_Params Parms{};

	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                              MoveDuration                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnStart(float MoveDuration, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnStart");

	Params::UControlledMove_OnStart_Params Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnServerStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                               bInterrupted                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnServerStop(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnServerStop");

	Params::UControlledMove_OnServerStop_Params Parms{};

	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnServerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                              MoveDuration                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnServerStart(float MoveDuration, class AActor* TargetActor, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnServerStart");

	Params::UControlledMove_OnServerStart_Params Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.TargetActor = TargetActor;
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnHitWorld
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                      HitActor                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     HitNormal                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnHitWorld(class AActor* HitActor, struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnHitWorld");

	Params::UControlledMove_OnHitWorld_Params Parms{};

	Parms.HitActor = HitActor;
	Parms.HitNormal = HitNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMove.OnHitTargetable
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                      HitActor                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     HitNormal                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnHitTargetable(class AActor* HitActor, struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMove", "OnHitTargetable");

	Params::UControlledMove_OnHitTargetable_Params Parms{};

	Parms.HitActor = HitActor;
	Parms.HitNormal = HitNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxCustomizationComponent
// (None)

class UClass* UGbxCustomizationComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationComponent");

	return Clss;
}


// GbxCustomizationComponent GbxGameSystemCore.Default__GbxCustomizationComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationComponent* UGbxCustomizationComponent::GetDefaultObj()
{
	static class UGbxCustomizationComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationComponent*>(UGbxCustomizationComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerSetCustomFloat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                              Index                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Value                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerSetCustomFloat(int32 Index, float Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerSetCustomFloat");

	Params::UGbxCustomizationComponent_ServerSetCustomFloat_Params Parms{};

	Parms.Index = Index;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerSetAllowCustomizationSuppression
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                               bNewAllowCustomizationSuppression                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerSetAllowCustomizationSuppression(bool bNewAllowCustomizationSuppression)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerSetAllowCustomizationSuppression");

	Params::UGbxCustomizationComponent_ServerSetAllowCustomizationSuppression_Params Parms{};

	Parms.bNewAllowCustomizationSuppression = bNewAllowCustomizationSuppression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerApplyCustomizationData
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class UGbxCustomizationData*       CustomizationToApply                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OptionalCustomizationId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerApplyCustomizationData(class UGbxCustomizationData* CustomizationToApply, int32 OptionalCustomizationId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerApplyCustomizationData");

	Params::UGbxCustomizationComponent_ServerApplyCustomizationData_Params Parms{};

	Parms.CustomizationToApply = CustomizationToApply;
	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerApplyCustomizationCollection
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class UGbxCustomizationCollectionData*CollectionToApply                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerApplyCustomizationCollection(class UGbxCustomizationCollectionData* CollectionToApply)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerApplyCustomizationCollection");

	Params::UGbxCustomizationComponent_ServerApplyCustomizationCollection_Params Parms{};

	Parms.CollectionToApply = CollectionToApply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerApplyCustomColor
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// int32                              CustomColorIndex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                InAppliedColor                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                InSplitColor                                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               InUseDefaultColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               InUseDefaultSplitColor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerApplyCustomColor(int32 CustomColorIndex, const struct FLinearColor& InAppliedColor, const struct FLinearColor& InSplitColor, bool InUseDefaultColor, bool InUseDefaultSplitColor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerApplyCustomColor");

	Params::UGbxCustomizationComponent_ServerApplyCustomColor_Params Parms{};

	Parms.CustomColorIndex = CustomColorIndex;
	Parms.InAppliedColor = InAppliedColor;
	Parms.InSplitColor = InSplitColor;
	Parms.InUseDefaultColor = InUseDefaultColor;
	Parms.InUseDefaultSplitColor = InUseDefaultSplitColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.RemoveCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationData*       Customization                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::RemoveCustomization(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "RemoveCustomization");

	Params::UGbxCustomizationComponent_RemoveCustomization_Params Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.RemoveAllCustomizations
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCustomizationComponent::RemoveAllCustomizations()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "RemoveAllCustomizations");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.PostApplyCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCustomizationComponent::PostApplyCustomization()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "PostApplyCustomization");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.OnRep_CustomFloats
// (Final, Native, Protected)
// Parameters:

void UGbxCustomizationComponent::OnRep_CustomFloats()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "OnRep_CustomFloats");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.OnRep_CustomColorSelections
// (Final, Native, Public)
// Parameters:

void UGbxCustomizationComponent::OnRep_CustomColorSelections()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "OnRep_CustomColorSelections");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.OnRep_AllowCustomizationSuppression
// (Final, Native, Protected)
// Parameters:

void UGbxCustomizationComponent::OnRep_AllowCustomizationSuppression()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "OnRep_AllowCustomizationSuppression");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkToCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationComponent*  SourceComponent                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkToCustomization(class UGbxCustomizationComponent* SourceComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkToCustomization");

	Params::UGbxCustomizationComponent_LinkToCustomization_Params Parms{};

	Parms.SourceComponent = SourceComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkedCustomizationRemoved
// (Final, Native, Public)
// Parameters:
// class UGbxCustomizationData*       Customization                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkedCustomizationRemoved(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkedCustomizationRemoved");

	Params::UGbxCustomizationComponent_LinkedCustomizationRemoved_Params Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkedCustomizationApplied
// (Final, Native, Public)
// Parameters:
// class UGbxCustomizationData*       Customization                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkedCustomizationApplied(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkedCustomizationApplied");

	Params::UGbxCustomizationComponent_LinkedCustomizationApplied_Params Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.IsCustomizationApplied
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxCustomizationData*       Customization                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::IsCustomizationApplied(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "IsCustomizationApplied");

	Params::UGbxCustomizationComponent_IsCustomizationApplied_Params Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxCustomizationComponent::Initialize()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "Initialize");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.GetDefaultCustomSplitColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                              SelectionIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                DefaultSplitColor                                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::GetDefaultCustomSplitColor(int32 SelectionIndex, struct FLinearColor* DefaultSplitColor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "GetDefaultCustomSplitColor");

	Params::UGbxCustomizationComponent_GetDefaultCustomSplitColor_Params Parms{};

	Parms.SelectionIndex = SelectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (DefaultSplitColor != nullptr)
		*DefaultSplitColor = std::move(Parms.DefaultSplitColor);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.GetDefaultCustomColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                              SelectionIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                DefaultColor                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::GetDefaultCustomColor(int32 SelectionIndex, struct FLinearColor* DefaultColor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "GetDefaultCustomColor");

	Params::UGbxCustomizationComponent_GetDefaultCustomColor_Params Parms{};

	Parms.SelectionIndex = SelectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (DefaultColor != nullptr)
		*DefaultColor = std::move(Parms.DefaultColor);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.GetAppliedCustomizations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UGbxCustomizationData*>ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGbxCustomizationData*> UGbxCustomizationComponent::GetAppliedCustomizations()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "GetAppliedCustomizations");

	Params::UGbxCustomizationComponent_GetAppliedCustomizations_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationComponent.CopyFromCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationComponent*  SourceComponent                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::CopyFromCustomization(class UGbxCustomizationComponent* SourceComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationComponent", "CopyFromCustomization");

	Params::UGbxCustomizationComponent_CopyFromCustomization_Params Parms{};

	Parms.SourceComponent = SourceComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxCustomizationData
// (None)

class UClass* UGbxCustomizationData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationData");

	return Clss;
}


// GbxCustomizationData GbxGameSystemCore.Default__GbxCustomizationData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationData* UGbxCustomizationData::GetDefaultObj()
{
	static class UGbxCustomizationData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationData*>(UGbxCustomizationData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCustomizationData.RemoveCustomizationFromActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::RemoveCustomizationFromActor(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "RemoveCustomizationFromActor");

	Params::UGbxCustomizationData_RemoveCustomizationFromActor_Params Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationData.OnCustomizationAssetLoaded
// (Final, Native, Private)
// Parameters:

void UGbxCustomizationData::OnCustomizationAssetLoaded()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "OnCustomizationAssetLoaded");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationData.K2_PlayAction
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActionState_Base           ActionData                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGbxAction*                  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxCustomizationData::K2_PlayAction(class AActor* TargetActor, struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "K2_PlayAction");

	Params::UGbxCustomizationData_K2_PlayAction_Params Parms{};

	Parms.TargetActor = TargetActor;
	Parms.ActionData = ActionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationData.IsLoading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::IsLoading()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "IsLoading");

	Params::UGbxCustomizationData_IsLoading_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationData.IsLoaded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              OptionalCustomizationId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::IsLoaded(int32 OptionalCustomizationId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "IsLoaded");

	Params::UGbxCustomizationData_IsLoaded_Params Parms{};

	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCustomizationData.AsyncLoadCustomizationAssets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// UDelegateProperty_                 LoadedDelegate                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCustomizationData::AsyncLoadCustomizationAssets(UDelegateProperty_& LoadedDelegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "AsyncLoadCustomizationAssets");

	Params::UGbxCustomizationData_AsyncLoadCustomizationAssets_Params Parms{};

	Parms.LoadedDelegate = LoadedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxCustomizationData.ApplyCustomizationToActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OptionalCustomizationId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::ApplyCustomizationToActor(class AActor* TargetActor, int32 OptionalCustomizationId)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationData", "ApplyCustomizationToActor");

	Params::UGbxCustomizationData_ApplyCustomizationToActor_Params Parms{};

	Parms.TargetActor = TargetActor;
	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxCustomizationManager
// (Actor)

class UClass* AGbxCustomizationManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationManager");

	return Clss;
}


// GbxCustomizationManager GbxGameSystemCore.Default__GbxCustomizationManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxCustomizationManager* AGbxCustomizationManager::GetDefaultObj()
{
	static class AGbxCustomizationManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxCustomizationManager*>(AGbxCustomizationManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCustomizationManager.OnCustomizationAssetLoaded
// (Final, Native, Public)
// Parameters:

void AGbxCustomizationManager::OnCustomizationAssetLoaded()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCustomizationManager", "OnCustomizationAssetLoaded");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxCustomizationTypeData
// (None)

class UClass* UGbxCustomizationTypeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationTypeData");

	return Clss;
}


// GbxCustomizationTypeData GbxGameSystemCore.Default__GbxCustomizationTypeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationTypeData* UGbxCustomizationTypeData::GetDefaultObj()
{
	static class UGbxCustomizationTypeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationTypeData*>(UGbxCustomizationTypeData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageBaseComponent
// (None)

class UClass* UDamageBaseComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageBaseComponent");

	return Clss;
}


// DamageBaseComponent GbxGameSystemCore.Default__DamageBaseComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageBaseComponent* UDamageBaseComponent::GetDefaultObj()
{
	static class UDamageBaseComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageBaseComponent*>(UDamageBaseComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageCauserComponent
// (None)

class UClass* UDamageCauserComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageCauserComponent");

	return Clss;
}


// DamageCauserComponent GbxGameSystemCore.Default__DamageCauserComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageCauserComponent* UDamageCauserComponent::GetDefaultObj()
{
	static class UDamageCauserComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageCauserComponent*>(UDamageCauserComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageCauserComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageCauserComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageCauserComponent", "UnregisterConditionalDamageModifier");

	Params::UDamageCauserComponent_UnregisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageCauserComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageCauserComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageCauserComponent", "RegisterConditionalDamageModifier");

	Params::UDamageCauserComponent_RegisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageCauserComponent.GetCritModifierTotals
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ECritType               CritType                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ModifierTotal                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCritSourceModifiers        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCritSourceModifiers UDamageCauserComponent::GetCritModifierTotals(TSubclassOf<class UDamageSource> DamageSource, enum class ECritType CritType, float* ModifierTotal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageCauserComponent", "GetCritModifierTotals");

	Params::UDamageCauserComponent_GetCritModifierTotals_Params Parms{};

	Parms.DamageSource = DamageSource;
	Parms.CritType = CritType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierTotal != nullptr)
		*ModifierTotal = Parms.ModifierTotal;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageCauserComponent.GetCritModifiersForSource
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ECritType               CritType                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ModifierTotal                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCritSourceModifiers        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCritSourceModifiers UDamageCauserComponent::GetCritModifiersForSource(TSubclassOf<class UDamageSource> DamageSource, enum class ECritType CritType, float* ModifierTotal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageCauserComponent", "GetCritModifiersForSource");

	Params::UDamageCauserComponent_GetCritModifiersForSource_Params Parms{};

	Parms.DamageSource = DamageSource;
	Parms.CritType = CritType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierTotal != nullptr)
		*ModifierTotal = Parms.ModifierTotal;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageCauserComponent.FindCritModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ECritType               CritType                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCritSourceModifiers        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCritSourceModifiers UDamageCauserComponent::FindCritModifier(TSubclassOf<class UDamageSource> DamageSource, enum class ECritType CritType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageCauserComponent", "FindCritModifier");

	Params::UDamageCauserComponent_FindCritModifier_Params Parms{};

	Parms.DamageSource = DamageSource;
	Parms.CritType = CritType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.DamageComponent
// (None)

class UClass* UDamageComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageComponent");

	return Clss;
}


// DamageComponent GbxGameSystemCore.Default__DamageComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageComponent* UDamageComponent::GetDefaultObj()
{
	static class UDamageComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageComponent*>(UDamageComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "UnregisterConditionalDamageModifier");

	Params::UDamageComponent_UnregisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.SetSelfReflectedDamageType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxDamageType>  DamageType                                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetSelfReflectedDamageType(TSubclassOf<class UGbxDamageType>& DamageType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "SetSelfReflectedDamageType");

	Params::UDamageComponent_SetSelfReflectedDamageType_Params Parms{};

	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.SetGodMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bInGodMode                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetGodMode(bool bInGodMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "SetGodMode");

	Params::UDamageComponent_SetGodMode_Params Parms{};

	Parms.bInGodMode = bInGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.SetDemiGodMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bInDemiGodMode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetDemiGodMode(bool bInDemiGodMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "SetDemiGodMode");

	Params::UDamageComponent_SetDemiGodMode_Params Parms{};

	Parms.bInDemiGodMode = bInDemiGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.SetCurrentShield
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              NewCurrentShield                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetCurrentShield(float NewCurrentShield)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "SetCurrentShield");

	Params::UDamageComponent_SetCurrentShield_Params Parms{};

	Parms.NewCurrentShield = NewCurrentShield;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.SetCurrentHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              NewCurrentHealth                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetCurrentHealth(float NewCurrentHealth)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "SetCurrentHealth");

	Params::UDamageComponent_SetCurrentHealth_Params Parms{};

	Parms.NewCurrentHealth = NewCurrentHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "RegisterConditionalDamageModifier");

	Params::UDamageComponent_RegisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.ReceiveHealthDepleted
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class UDamageCauserComponent*      DamageCauser                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveHealthDepleted(class UDamageCauserComponent* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "ReceiveHealthDepleted");

	Params::UDamageComponent_ReceiveHealthDepleted_Params Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageComponent.ReceiveAnyHealing
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                              Healing                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      HealInstigator                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*               DamageSource                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                 DamageType                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveAnyHealing(float Healing, class AActor* HealInstigator, class UDamageSource* DamageSource, class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "ReceiveAnyHealing");

	Params::UDamageComponent_ReceiveAnyHealing_Params Parms{};

	Parms.Healing = Healing;
	Parms.HealInstigator = HealInstigator;
	Parms.DamageSource = DamageSource;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageComponent.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                              Damage                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDamageType*              DamageType                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*               DamageSource                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                 InstigatedBy                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageCauserComponent*      DamageCauser                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReceivedDamageDetails      Details                                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveAnyDamage(float Damage, class UGbxDamageType* DamageType, class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, struct FReceivedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "ReceiveAnyDamage");

	Params::UDamageComponent_ReceiveAnyDamage_Params Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.Details = Details;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.DamageComponent.OnRep_SimpleHealthInformation
// (Native, Protected)
// Parameters:

void UDamageComponent::OnRep_SimpleHealthInformation()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnRep_SimpleHealthInformation");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnRep_HealthInformation
// (Native, Protected)
// Parameters:

void UDamageComponent::OnRep_HealthInformation()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnRep_HealthInformation");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnRep_DeathHitReaction
// (Native, Protected)
// Parameters:

void UDamageComponent::OnRep_DeathHitReaction()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnRep_DeathHitReaction");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnRep_bCurrentlyDead
// (Final, Native, Private)
// Parameters:

void UDamageComponent::OnRep_bCurrentlyDead()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnRep_bCurrentlyDead");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnOwnerExperienceLevelChanged
// (Final, Native, Private)
// Parameters:
// int32                              OldExperienceLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewExperienceLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::OnOwnerExperienceLevelChanged(int32 OldExperienceLevel, int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnOwnerExperienceLevelChanged");

	Params::UDamageComponent_OnOwnerExperienceLevelChanged_Params Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;
	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnHealthResourceNowNotDepleted
// (Final, Native, Private)
// Parameters:
// struct FGameResourcePoolReference  ResourcePool                                                     (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::OnHealthResourceNowNotDepleted(const struct FGameResourcePoolReference& ResourcePool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnHealthResourceNowNotDepleted");

	Params::UDamageComponent_OnHealthResourceNowNotDepleted_Params Parms{};

	Parms.ResourcePool = ResourcePool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.OnHealthResourceNowDepleted
// (Final, Native, Private)
// Parameters:
// struct FGameResourcePoolReference  ResourcePool                                                     (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::OnHealthResourceNowDepleted(const struct FGameResourcePoolReference& ResourcePool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "OnHealthResourceNowDepleted");

	Params::UDamageComponent_OnHealthResourceNowDepleted_Params Parms{};

	Parms.ResourcePool = ResourcePool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageComponent.IsInGodMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsInGodMode()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "IsInGodMode");

	Params::UDamageComponent_IsInGodMode_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.IsInDemiGodMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsInDemiGodMode()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "IsInDemiGodMode");

	Params::UDamageComponent_IsInDemiGodMode_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.IsDamageOverkill
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              DamageAmount                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              OverkillThreshold                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsDamageOverkill(float DamageAmount, float OverkillThreshold)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "IsDamageOverkill");

	Params::UDamageComponent_IsDamageOverkill_Params Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.OverkillThreshold = OverkillThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetValidDamageEventFunctionNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Names                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDamageComponent::GetValidDamageEventFunctionNames(TArray<class FName>* Names)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetValidDamageEventFunctionNames");

	Params::UDamageComponent_GetValidDamageEventFunctionNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);

}


// Function GbxGameSystemCore.DamageComponent.GetTotalMaxHealth
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetTotalMaxHealth()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetTotalMaxHealth");

	Params::UDamageComponent_GetTotalMaxHealth_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetMaxShield
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetMaxShield()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetMaxShield");

	Params::UDamageComponent_GetMaxShield_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetMaxHealth()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetMaxHealth");

	Params::UDamageComponent_GetMaxHealth_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetCurrentShield
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentShield()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetCurrentShield");

	Params::UDamageComponent_GetCurrentShield_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetCurrentHealthPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentHealthPercent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetCurrentHealthPercent");

	Params::UDamageComponent_GetCurrentHealthPercent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.GetCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentHealth()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "GetCurrentHealth");

	Params::UDamageComponent_GetCurrentHealth_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageComponent.BroadcastPlayImpactSplatterEffect
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// class UImpactData*                 ImpactData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100      HitLocation                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal   HitDirection                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DamageSeverity                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::BroadcastPlayImpactSplatterEffect(class UImpactData* ImpactData, const struct FVector_NetQuantize100& HitLocation, const struct FVector_NetQuantizeNormal& HitDirection, float DamageSeverity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageComponent", "BroadcastPlayImpactSplatterEffect");

	Params::UDamageComponent_BroadcastPlayImpactSplatterEffect_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.HitLocation = HitLocation;
	Parms.HitDirection = HitDirection;
	Parms.DamageSeverity = DamageSeverity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.DamageFilter
// (None)

class UClass* UDamageFilter::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageFilter");

	return Clss;
}


// DamageFilter GbxGameSystemCore.Default__DamageFilter
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageFilter* UDamageFilter::GetDefaultObj()
{
	static class UDamageFilter* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageFilter*>(UDamageFilter::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageGlobalsData
// (None)

class UClass* UDamageGlobalsData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageGlobalsData");

	return Clss;
}


// DamageGlobalsData GbxGameSystemCore.Default__DamageGlobalsData
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageGlobalsData* UDamageGlobalsData::GetDefaultObj()
{
	static class UDamageGlobalsData* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageGlobalsData*>(UDamageGlobalsData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageModifierComponent
// (None)

class UClass* UDamageModifierComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageModifierComponent");

	return Clss;
}


// DamageModifierComponent GbxGameSystemCore.Default__DamageModifierComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageModifierComponent* UDamageModifierComponent::GetDefaultObj()
{
	static class UDamageModifierComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageModifierComponent*>(UDamageModifierComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageModifierComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageModifierComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageModifierComponent", "UnregisterConditionalDamageModifier");

	Params::UDamageModifierComponent_UnregisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageModifierComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*  Modifier                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageModifierComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageModifierComponent", "RegisterConditionalDamageModifier");

	Params::UDamageModifierComponent_RegisterConditionalDamageModifier_Params Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.DamageOverTimeManager
// (None)

class UClass* UDamageOverTimeManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageOverTimeManager");

	return Clss;
}


// DamageOverTimeManager GbxGameSystemCore.Default__DamageOverTimeManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageOverTimeManager* UDamageOverTimeManager::GetDefaultObj()
{
	static class UDamageOverTimeManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageOverTimeManager*>(UDamageOverTimeManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageOverTimeManager.OnParticleSystemStopped
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*    ParticleSystem                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageOverTimeManager::OnParticleSystemStopped(class UParticleSystemComponent* ParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageOverTimeManager", "OnParticleSystemStopped");

	Params::UDamageOverTimeManager_OnParticleSystemStopped_Params Parms{};

	Parms.ParticleSystem = ParticleSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.DamageSource
// (None)

class UClass* UDamageSource::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageSource");

	return Clss;
}


// DamageSource GbxGameSystemCore.Default__DamageSource
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageSource* UDamageSource::GetDefaultObj()
{
	static class UDamageSource* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageSource*>(UDamageSource::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxDamageType
// (None)

class UClass* UGbxDamageType::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxDamageType");

	return Clss;
}


// GbxDamageType GbxGameSystemCore.Default__GbxDamageType
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxDamageType* UGbxDamageType::GetDefaultObj()
{
	static class UGbxDamageType* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxDamageType*>(UGbxDamageType::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxDamageType.IsElementalType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxDamageType::IsElementalType()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxDamageType", "IsElementalType");

	Params::UGbxDamageType_IsElementalType_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.EnvQueryContext_EnvQueryParam
// (None)

class UClass* UEnvQueryContext_EnvQueryParam::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_EnvQueryParam");

	return Clss;
}


// EnvQueryContext_EnvQueryParam GbxGameSystemCore.Default__EnvQueryContext_EnvQueryParam
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_EnvQueryParam* UEnvQueryContext_EnvQueryParam::GetDefaultObj()
{
	static class UEnvQueryContext_EnvQueryParam* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_EnvQueryParam*>(UEnvQueryContext_EnvQueryParam::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.FirstPersonComponent
// (None)

class UClass* UFirstPersonComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FirstPersonComponent");

	return Clss;
}


// FirstPersonComponent GbxGameSystemCore.Default__FirstPersonComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UFirstPersonComponent* UFirstPersonComponent::GetDefaultObj()
{
	static class UFirstPersonComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UFirstPersonComponent*>(UFirstPersonComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.FirstPersonComponent.SetBaseEyeToWeaponTransform
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                  NewWeaponTransform                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFirstPersonComponent::SetBaseEyeToWeaponTransform(const struct FTransform& NewWeaponTransform)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FirstPersonComponent", "SetBaseEyeToWeaponTransform");

	Params::UFirstPersonComponent_SetBaseEyeToWeaponTransform_Params Parms{};

	Parms.NewWeaponTransform = NewWeaponTransform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FirstPersonComponent.GetFirstPersonComponentByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        Name                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*             ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UFirstPersonComponent::GetFirstPersonComponentByName(class FName Name)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FirstPersonComponent", "GetFirstPersonComponentByName");

	Params::UFirstPersonComponent_GetFirstPersonComponentByName_Params Parms{};

	Parms.Name = Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxGameInstance
// (None)

class UClass* UGbxGameInstance::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameInstance");

	return Clss;
}


// GbxGameInstance GbxGameSystemCore.Default__GbxGameInstance
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameInstance* UGbxGameInstance::GetDefaultObj()
{
	static class UGbxGameInstance* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameInstance*>(UGbxGameInstance::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxGameInstance.DebugLoadStartupAssets
// (Final, Exec, Native, Public)
// Parameters:

void UGbxGameInstance::DebugLoadStartupAssets()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameInstance", "DebugLoadStartupAssets");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxGameMode
// (Actor)

class UClass* AGbxGameMode::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameMode");

	return Clss;
}


// GbxGameMode GbxGameSystemCore.Default__GbxGameMode
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxGameMode* AGbxGameMode::GetDefaultObj()
{
	static class AGbxGameMode* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxGameMode*>(AGbxGameMode::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxGameState
// (Actor)

class UClass* AGbxGameState::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameState");

	return Clss;
}


// GbxGameState GbxGameSystemCore.Default__GbxGameState
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxGameState* AGbxGameState::GetDefaultObj()
{
	static class AGbxGameState* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxGameState*>(AGbxGameState::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtLocationMulticastImpl
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class UParticleSystem*             EmitterTemplate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Location                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    Rotation                                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     Scale                                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAutoDestroy                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ParameterEvaluationContext                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtLocationMulticastImpl(class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "SpawnEmitterAtLocationMulticastImpl");

	Params::AGbxGameState_SpawnEmitterAtLocationMulticastImpl_Params Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Location = Location;
	Parms.Rotation = Rotation;
	Parms.Scale = Scale;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtLocationMulticast
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             EmitterTemplate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Location                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    Rotation                                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     Scale                                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAutoDestroy                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ParameterEvaluationContext                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtLocationMulticast(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "SpawnEmitterAtLocationMulticast");

	Params::AGbxGameState_SpawnEmitterAtLocationMulticast_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Location = Location;
	Parms.Rotation = Rotation;
	Parms.Scale = Scale;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtComponentSocketMulticast
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             EmitterTemplate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Socket                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAutoDestroy                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ParameterEvaluationContext                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtComponentSocketMulticast(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class USceneComponent* Component, class FName Socket, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "SpawnEmitterAtComponentSocketMulticast");

	Params::AGbxGameState_SpawnEmitterAtComponentSocketMulticast_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Component = Component;
	Parms.Socket = Socket;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtActorSocketMulticast
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             EmitterTemplate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Socket                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAutoDestroy                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ParameterEvaluationContext                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtActorSocketMulticast(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class AActor* Actor, class FName Socket, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "SpawnEmitterAtActorSocketMulticast");

	Params::AGbxGameState_SpawnEmitterAtActorSocketMulticast_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Actor = Actor;
	Parms.Socket = Socket;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.PlayImpactMulticast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UImpactData*                 ImpactData                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ImpactInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedImpactHitResult  HitResult                                                        (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FImpactResponseParams       ResponseParams                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGbxGameState::PlayImpactMulticast(class UImpactData* ImpactData, class AActor* ImpactInstigator, struct FReplicatedImpactHitResult& HitResult, struct FImpactResponseParams& ResponseParams)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "PlayImpactMulticast");

	Params::AGbxGameState_PlayImpactMulticast_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.ImpactInstigator = ImpactInstigator;
	Parms.HitResult = HitResult;
	Parms.ResponseParams = ResponseParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.PlayHitRegionImpactMulticast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UHitRegionData*              HitRegion                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImpactData*                 AudioImpactData                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ImpactInstigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedImpactHitResult  HitResult                                                        (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGbxGameState::PlayHitRegionImpactMulticast(class UHitRegionData* HitRegion, class UImpactData* AudioImpactData, class AActor* ImpactInstigator, struct FReplicatedImpactHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "PlayHitRegionImpactMulticast");

	Params::AGbxGameState_PlayHitRegionImpactMulticast_Params Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AudioImpactData = AudioImpactData;
	Parms.ImpactInstigator = ImpactInstigator;
	Parms.HitResult = HitResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_StatsManager
// (Native, Public)
// Parameters:

void AGbxGameState::OnRep_StatsManager()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_StatsManager");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_HostPlayerState
// (Native, Public)
// Parameters:

void AGbxGameState::OnRep_HostPlayerState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_HostPlayerState");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_GameInstanceTime
// (Final, Native, Private)
// Parameters:

void AGbxGameState::OnRep_GameInstanceTime()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_GameInstanceTime");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_GameInstanceId
// (Final, Native, Private)
// Parameters:

void AGbxGameState::OnRep_GameInstanceId()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_GameInstanceId");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_ChallengeManager
// (Native, Public)
// Parameters:

void AGbxGameState::OnRep_ChallengeManager()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_ChallengeManager");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameState.OnRep_bPlayersOnly
// (Final, Native, Private)
// Parameters:

void AGbxGameState::OnRep_bPlayersOnly()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameState", "OnRep_bPlayersOnly");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxGameViewportClient
// (None)

class UClass* UGbxGameViewportClient::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameViewportClient");

	return Clss;
}


// GbxGameViewportClient GbxGameSystemCore.Default__GbxGameViewportClient
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameViewportClient* UGbxGameViewportClient::GetDefaultObj()
{
	static class UGbxGameViewportClient* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameViewportClient*>(UGbxGameViewportClient::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GlobalAIData
// (None)

class UClass* UGlobalAIData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GlobalAIData");

	return Clss;
}


// GlobalAIData GbxGameSystemCore.Default__GlobalAIData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGlobalAIData* UGlobalAIData::GetDefaultObj()
{
	static class UGlobalAIData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGlobalAIData*>(UGlobalAIData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxGlobalInputManager
// (None)

class UClass* UGbxGlobalInputManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGlobalInputManager");

	return Clss;
}


// GbxGlobalInputManager GbxGameSystemCore.Default__GbxGlobalInputManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGlobalInputManager* UGbxGlobalInputManager::GetDefaultObj()
{
	static class UGbxGlobalInputManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGlobalInputManager*>(UGbxGlobalInputManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxGlobalsData
// (None)

class UClass* UGbxGlobalsData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGlobalsData");

	return Clss;
}


// GbxGlobalsData GbxGameSystemCore.Default__GbxGlobalsData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGlobalsData* UGbxGlobalsData::GetDefaultObj()
{
	static class UGbxGlobalsData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGlobalsData*>(UGbxGlobalsData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitRegionComponent
// (None)

class UClass* UHitRegionComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitRegionComponent");

	return Clss;
}


// HitRegionComponent GbxGameSystemCore.Default__HitRegionComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitRegionComponent* UHitRegionComponent::GetDefaultObj()
{
	static class UHitRegionComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitRegionComponent*>(UHitRegionComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.HitRegionComponent.TriggerClientEvent
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDamageReactionEventSummary EventSummary                                                     (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitRegionComponent::TriggerClientEvent(struct FDamageReactionEventSummary& EventSummary)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "TriggerClientEvent");

	Params::UHitRegionComponent_TriggerClientEvent_Params Parms{};

	Parms.EventSummary = EventSummary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitRegionComponent.GetValidDamageEventFunctionNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitRegionComponent::GetValidDamageEventFunctionNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "GetValidDamageEventFunctionNames");

	Params::UHitRegionComponent_GetValidDamageEventFunctionNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Function GbxGameSystemCore.HitRegionComponent.GetValidAssociatedComponentNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitRegionComponent::GetValidAssociatedComponentNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "GetValidAssociatedComponentNames");

	Params::UHitRegionComponent_GetValidAssociatedComponentNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionPercentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionPercentHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionPercentHealth");

	Params::UHitRegionComponent_GetHitRegionPercentHealth_Params Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionMaxHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionMaxHealth");

	Params::UHitRegionComponent_GetHitRegionMaxHealth_Params Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionCurrentHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionCurrentHealth");

	Params::UHitRegionComponent_GetHitRegionCurrentHealth_Params Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.HitRegionData
// (None)

class UClass* UHitRegionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitRegionData");

	return Clss;
}


// HitRegionData GbxGameSystemCore.Default__HitRegionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitRegionData* UHitRegionData::GetDefaultObj()
{
	static class UHitRegionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitRegionData*>(UHitRegionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ActorPartData
// (None)

class UClass* UActorPartData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ActorPartData");

	return Clss;
}


// ActorPartData GbxGameSystemCore.Default__ActorPartData
// (Public, ClassDefaultObject, ArchetypeObject)

class UActorPartData* UActorPartData::GetDefaultObj()
{
	static class UActorPartData* Default = nullptr;

	if (!Default)
		Default = static_cast<UActorPartData*>(UActorPartData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ActorPartData.EnumeratePossibleExcluders
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>      OutPartList                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumeratePossibleExcluders(TArray<class UActorPartData*>* OutPartList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ActorPartData", "EnumeratePossibleExcluders");

	Params::UActorPartData_EnumeratePossibleExcluders_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);

}


// Function GbxGameSystemCore.ActorPartData.EnumeratePossibleDependencies
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>      OutPartList                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumeratePossibleDependencies(TArray<class UActorPartData*>* OutPartList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ActorPartData", "EnumeratePossibleDependencies");

	Params::UActorPartData_EnumeratePossibleDependencies_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);

}


// Function GbxGameSystemCore.ActorPartData.EnumerateOtherParts
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>      OutPartList                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumerateOtherParts(TArray<class UActorPartData*>* OutPartList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ActorPartData", "EnumerateOtherParts");

	Params::UActorPartData_EnumerateOtherParts_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);

}


// Function GbxGameSystemCore.ActorPartData.EnumerateGestaltMeshPartNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                OutPartNameList                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumerateGestaltMeshPartNames(TArray<class FName>* OutPartNameList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ActorPartData", "EnumerateGestaltMeshPartNames");

	Params::UActorPartData_EnumerateGestaltMeshPartNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartNameList != nullptr)
		*OutPartNameList = std::move(Parms.OutPartNameList);

}


// Class GbxGameSystemCore.DataTableAttributeValueResolver
// (None)

class UClass* UDataTableAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DataTableAttributeValueResolver");

	return Clss;
}


// DataTableAttributeValueResolver GbxGameSystemCore.Default__DataTableAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UDataTableAttributeValueResolver* UDataTableAttributeValueResolver::GetDefaultObj()
{
	static class UDataTableAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UDataTableAttributeValueResolver*>(UDataTableAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DataTableAttributeValueResolver.GetDataTableColumnNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FString>              ValueNames                                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDataTableAttributeValueResolver::GetDataTableColumnNames(TArray<class FString>* ValueNames)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DataTableAttributeValueResolver", "GetDataTableColumnNames");

	Params::UDataTableAttributeValueResolver_GetDataTableColumnNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ValueNames != nullptr)
		*ValueNames = std::move(Parms.ValueNames);

}


// Class GbxGameSystemCore.DataTableFunctionAttributeValueResolver
// (None)

class UClass* UDataTableFunctionAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DataTableFunctionAttributeValueResolver");

	return Clss;
}


// DataTableFunctionAttributeValueResolver GbxGameSystemCore.Default__DataTableFunctionAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UDataTableFunctionAttributeValueResolver* UDataTableFunctionAttributeValueResolver::GetDefaultObj()
{
	static class UDataTableFunctionAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UDataTableFunctionAttributeValueResolver*>(UDataTableFunctionAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DataTableFunctionAttributeValueResolver.GetDataTableRow
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UObject*                     Context                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle         ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UDataTableFunctionAttributeValueResolver::GetDataTableRow(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DataTableFunctionAttributeValueResolver", "GetDataTableRow");

	Params::UDataTableFunctionAttributeValueResolver_GetDataTableRow_Params Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.LadderInteractData
// (None)

class UClass* ULadderInteractData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LadderInteractData");

	return Clss;
}


// LadderInteractData GbxGameSystemCore.Default__LadderInteractData
// (Public, ClassDefaultObject, ArchetypeObject)

class ULadderInteractData* ULadderInteractData::GetDefaultObj()
{
	static class ULadderInteractData* Default = nullptr;

	if (!Default)
		Default = static_cast<ULadderInteractData*>(ULadderInteractData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NavComponent
// (None)

class UClass* UNavComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NavComponent");

	return Clss;
}


// NavComponent GbxGameSystemCore.Default__NavComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UNavComponent* UNavComponent::GetDefaultObj()
{
	static class UNavComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UNavComponent*>(UNavComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxSkeletalMeshComponent
// (SceneComponent, PrimitiveComponent, SkinnedMeshComponent, SkeletalMeshComponent)

class UClass* UGbxSkeletalMeshComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSkeletalMeshComponent");

	return Clss;
}


// GbxSkeletalMeshComponent GbxGameSystemCore.Default__GbxSkeletalMeshComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSkeletalMeshComponent* UGbxSkeletalMeshComponent::GetDefaultObj()
{
	static class UGbxSkeletalMeshComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSkeletalMeshComponent*>(UGbxSkeletalMeshComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.ShowGestaltMeshParts
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGestaltPartData_Mesh*>Parts                                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               bLocalOnly                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::ShowGestaltMeshParts(TArray<class UGestaltPartData_Mesh*>& Parts, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "ShowGestaltMeshParts");

	Params::UGbxSkeletalMeshComponent_ShowGestaltMeshParts_Params Parms{};

	Parms.Parts = Parts;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.ShowGestaltMeshPart
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UGestaltPartData_Mesh*       GestaltMeshPart                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLocalOnly                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::ShowGestaltMeshPart(class UGestaltPartData_Mesh* GestaltMeshPart, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "ShowGestaltMeshPart");

	Params::UGbxSkeletalMeshComponent_ShowGestaltMeshPart_Params Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetUpdateOverrideValues
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                      UpdateRateOverrides                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               bEnableOverrideProperties                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetUpdateOverrideValues(TArray<float>& UpdateRateOverrides, bool bEnableOverrideProperties)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetUpdateOverrideValues");

	Params::UGbxSkeletalMeshComponent_SetUpdateOverrideValues_Params Parms{};

	Parms.UpdateRateOverrides = UpdateRateOverrides;
	Parms.bEnableOverrideProperties = bEnableOverrideProperties;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetParentAnimationComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*      ParentComponent                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetParentAnimationComponent(class USkeletalMeshComponent* ParentComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetParentAnimationComponent");

	Params::UGbxSkeletalMeshComponent_SetParentAnimationComponent_Params Parms{};

	Parms.ParentComponent = ParentComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetGestaltPartList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGestaltPartListData*        NewGestaltPartList                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetGestaltPartList(class UGestaltPartListData* NewGestaltPartList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetGestaltPartList");

	Params::UGbxSkeletalMeshComponent_SetGestaltPartList_Params Parms{};

	Parms.NewGestaltPartList = NewGestaltPartList;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.RunPoseTest
// (Final, Native, Private)
// Parameters:

void UGbxSkeletalMeshComponent::RunPoseTest()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "RunPoseTest");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.OnRep_GlobalBoneMod
// (Final, Native, Public)
// Parameters:

void UGbxSkeletalMeshComponent::OnRep_GlobalBoneMod()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "OnRep_GlobalBoneMod");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.OnRep_GestaltMeshParts
// (Final, Native, Private)
// Parameters:

void UGbxSkeletalMeshComponent::OnRep_GestaltMeshParts()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "OnRep_GestaltMeshParts");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.LinkSkelMeshAnimInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMeshComponent*>InLinkedSkelMeshComponents                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::LinkSkelMeshAnimInstances(TArray<class USkeletalMeshComponent*>& InLinkedSkelMeshComponents)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "LinkSkelMeshAnimInstances");

	Params::UGbxSkeletalMeshComponent_LinkSkelMeshAnimInstances_Params Parms{};

	Parms.InLinkedSkelMeshComponents = InLinkedSkelMeshComponents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.LinkSkelMeshAnimInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*      InLinkedSkelMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::LinkSkelMeshAnimInstance(class USkeletalMeshComponent* InLinkedSkelMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "LinkSkelMeshAnimInstance");

	Params::UGbxSkeletalMeshComponent_LinkSkelMeshAnimInstance_Params Parms{};

	Parms.InLinkedSkelMeshComponent = InLinkedSkelMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.IsGestaltMeshPartVisible
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGestaltPartData_Mesh*       GestaltMeshPart                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxSkeletalMeshComponent::IsGestaltMeshPartVisible(class UGestaltPartData_Mesh* GestaltMeshPart)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "IsGestaltMeshPartVisible");

	Params::UGbxSkeletalMeshComponent_IsGestaltMeshPartVisible_Params Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.IsCustomizationTargetFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxCustomizationTargetData* TargetToTest                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxSkeletalMeshComponent::IsCustomizationTargetFor(class UGbxCustomizationTargetData* TargetToTest)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "IsCustomizationTargetFor");

	Params::UGbxSkeletalMeshComponent_IsCustomizationTargetFor_Params Parms{};

	Parms.TargetToTest = TargetToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.HideGestaltMeshParts
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGestaltPartData_Mesh*>Parts                                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               bLocalOnly                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::HideGestaltMeshParts(TArray<class UGestaltPartData_Mesh*>& Parts, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "HideGestaltMeshParts");

	Params::UGbxSkeletalMeshComponent_HideGestaltMeshParts_Params Parms{};

	Parms.Parts = Parts;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.HideGestaltMeshPart
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UGestaltPartData_Mesh*       GestaltMeshPart                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLocalOnly                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::HideGestaltMeshPart(class UGestaltPartData_Mesh* GestaltMeshPart, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "HideGestaltMeshPart");

	Params::UGbxSkeletalMeshComponent_HideGestaltMeshPart_Params Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.GetUpdateOverrideValues
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UGbxSkeletalMeshComponent::GetUpdateOverrideValues()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "GetUpdateOverrideValues");

	Params::UGbxSkeletalMeshComponent_GetUpdateOverrideValues_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.GetAvailableBoneNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::GetAvailableBoneNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "GetAvailableBoneNames");

	Params::UGbxSkeletalMeshComponent_GetAvailableBoneNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.CopyGestaltPartList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      GestaltPartListSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::CopyGestaltPartList(class AActor* GestaltPartListSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "CopyGestaltPartList");

	Params::UGbxSkeletalMeshComponent_CopyGestaltPartList_Params Parms{};

	Parms.GestaltPartListSource = GestaltPartListSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.PawnAttachSlotComponent
// (None)

class UClass* UPawnAttachSlotComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PawnAttachSlotComponent");

	return Clss;
}


// PawnAttachSlotComponent GbxGameSystemCore.Default__PawnAttachSlotComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UPawnAttachSlotComponent* UPawnAttachSlotComponent::GetDefaultObj()
{
	static class UPawnAttachSlotComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UPawnAttachSlotComponent*>(UPawnAttachSlotComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.SetPersistentAttachSocketName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                        SocketName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::SetPersistentAttachSocketName(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "SetPersistentAttachSocketName");

	Params::UPawnAttachSlotComponent_SetPersistentAttachSocketName_Params Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.SetDetachabilityLocked
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bLock                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::SetDetachabilityLocked(bool bLock, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "SetDetachabilityLocked");

	Params::UPawnAttachSlotComponent_SetDetachabilityLocked_Params Parms{};

	Parms.bLock = bLock;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.RequestDetachPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UPawnAttachSlotComponent::RequestDetachPawn()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "RequestDetachPawn");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.OnRep_AttachState
// (Final, Native, Private)
// Parameters:

void UPawnAttachSlotComponent::OnRep_AttachState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "OnRep_AttachState");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.ManuallyFinishAttach
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void UPawnAttachSlotComponent::ManuallyFinishAttach()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "ManuallyFinishAttach");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.IsOccupied
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               bIncludeDetaching                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPawnAttachSlotComponent::IsOccupied(bool bIncludeDetaching)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "IsOccupied");

	Params::UPawnAttachSlotComponent_IsOccupied_Params Parms{};

	Parms.bIncludeDetaching = bIncludeDetaching;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.HandleActorDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::HandleActorDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "HandleActorDestroyed");

	Params::UPawnAttachSlotComponent_HandleActorDestroyed_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetPersistentAttachSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                  ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UPawnAttachSlotComponent::GetPersistentAttachSocketTransform()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetPersistentAttachSocketTransform");

	Params::UPawnAttachSlotComponent_GetPersistentAttachSocketTransform_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetOccupant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               bIncludeDetaching                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UPawnAttachSlotComponent::GetOccupant(bool bIncludeDetaching)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetOccupant");

	Params::UPawnAttachSlotComponent_GetOccupant_Params Parms{};

	Parms.bIncludeDetaching = bIncludeDetaching;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetAttachStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EPawnAttachStatus       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class EPawnAttachStatus UPawnAttachSlotComponent::GetAttachStatus()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetAttachStatus");

	Params::UPawnAttachSlotComponent_GetAttachStatus_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.DetachPawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bInstant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bSkipPlacement                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::DetachPawn(bool bInstant, bool bSkipPlacement)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "DetachPawn");

	Params::UPawnAttachSlotComponent_DetachPawn_Params Parms{};

	Parms.bInstant = bInstant;
	Parms.bSkipPlacement = bSkipPlacement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachSlotComponent.AttachPawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                       AttachingPawn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInstant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::AttachPawn(class APawn* AttachingPawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachSlotComponent", "AttachPawn");

	Params::UPawnAttachSlotComponent_AttachPawn_Params Parms{};

	Parms.AttachingPawn = AttachingPawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxPlayerInput
// (None)

class UClass* UGbxPlayerInput::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPlayerInput");

	return Clss;
}


// GbxPlayerInput GbxGameSystemCore.Default__GbxPlayerInput
// (Public, Transactional, ClassDefaultObject, ArchetypeObject)

class UGbxPlayerInput* UGbxPlayerInput::GetDefaultObj()
{
	static class UGbxPlayerInput* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxPlayerInput*>(UGbxPlayerInput::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxProfile
// (None)

class UClass* UGbxProfile::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxProfile");

	return Clss;
}


// GbxProfile GbxGameSystemCore.Default__GbxProfile
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxProfile* UGbxProfile::GetDefaultObj()
{
	static class UGbxProfile* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxProfile*>(UGbxProfile::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.RadiusDamageReplicationManager
// (Actor)

class UClass* ARadiusDamageReplicationManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("RadiusDamageReplicationManager");

	return Clss;
}


// RadiusDamageReplicationManager GbxGameSystemCore.Default__RadiusDamageReplicationManager
// (Public, ClassDefaultObject, ArchetypeObject)

class ARadiusDamageReplicationManager* ARadiusDamageReplicationManager::GetDefaultObj()
{
	static class ARadiusDamageReplicationManager* Default = nullptr;

	if (!Default)
		Default = static_cast<ARadiusDamageReplicationManager*>(ARadiusDamageReplicationManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.RadiusDamageReplicationManager.Multicast_StopRadiusEffect
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>     DamageData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bStopAllForContext                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bContextIsSourceActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARadiusDamageReplicationManager::Multicast_StopRadiusEffect(class AActor* ContextActor, TSubclassOf<class UDamageData> DamageData, bool bStopAllForContext, bool bContextIsSourceActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("RadiusDamageReplicationManager", "Multicast_StopRadiusEffect");

	Params::ARadiusDamageReplicationManager_Multicast_StopRadiusEffect_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.DamageData = DamageData;
	Parms.bStopAllForContext = bStopAllForContext;
	Parms.bContextIsSourceActor = bContextIsSourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.RadiusDamageReplicationManager.Multicast_ProcessRadiusRequest
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>     DamageData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Radius                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize         Location                                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Damage                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UExplosionData*              ExplosionData                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             DefaultParticles                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 DefaultAudioEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImpactData*                 DefaultImpactData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxSignificanceEvent       SignificanceEvent                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                              Force                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      SourceActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARadiusDamageReplicationManager::Multicast_ProcessRadiusRequest(class AActor* ContextActor, TSubclassOf<class UDamageData> DamageData, TSubclassOf<class UGbxDamageType> DamageType, float Radius, const struct FVector_NetQuantize& Location, float Damage, class UExplosionData* ExplosionData, class UParticleSystem* DefaultParticles, class UWwiseEvent* DefaultAudioEvent, class UImpactData* DefaultImpactData, const struct FGbxSignificanceEvent& SignificanceEvent, float Force, class AActor* SourceActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("RadiusDamageReplicationManager", "Multicast_ProcessRadiusRequest");

	Params::ARadiusDamageReplicationManager_Multicast_ProcessRadiusRequest_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.DamageData = DamageData;
	Parms.DamageType = DamageType;
	Parms.Radius = Radius;
	Parms.Location = Location;
	Parms.Damage = Damage;
	Parms.ExplosionData = ExplosionData;
	Parms.DefaultParticles = DefaultParticles;
	Parms.DefaultAudioEvent = DefaultAudioEvent;
	Parms.DefaultImpactData = DefaultImpactData;
	Parms.SignificanceEvent = SignificanceEvent;
	Parms.Force = Force;
	Parms.SourceActor = SourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.RecentDamageTrackingComponent
// (None)

class UClass* URecentDamageTrackingComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("RecentDamageTrackingComponent");

	return Clss;
}


// RecentDamageTrackingComponent GbxGameSystemCore.Default__RecentDamageTrackingComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class URecentDamageTrackingComponent* URecentDamageTrackingComponent::GetDefaultObj()
{
	static class URecentDamageTrackingComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<URecentDamageTrackingComponent*>(URecentDamageTrackingComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxSaveGame
// (None)

class UClass* UGbxSaveGame::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSaveGame");

	return Clss;
}


// GbxSaveGame GbxGameSystemCore.Default__GbxSaveGame
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSaveGame* UGbxSaveGame::GetDefaultObj()
{
	static class UGbxSaveGame* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSaveGame*>(UGbxSaveGame::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SaveGameChannel
// (None)

class UClass* USaveGameChannel::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SaveGameChannel");

	return Clss;
}


// SaveGameChannel GbxGameSystemCore.Default__SaveGameChannel
// (Public, ClassDefaultObject, ArchetypeObject)

class USaveGameChannel* USaveGameChannel::GetDefaultObj()
{
	static class USaveGameChannel* Default = nullptr;

	if (!Default)
		Default = static_cast<USaveGameChannel*>(USaveGameChannel::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxSignificanceManager
// (None)

class UClass* UGbxSignificanceManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSignificanceManager");

	return Clss;
}


// GbxSignificanceManager GbxGameSystemCore.Default__GbxSignificanceManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSignificanceManager* UGbxSignificanceManager::GetDefaultObj()
{
	static class UGbxSignificanceManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSignificanceManager*>(UGbxSignificanceManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxSingletons
// (None)

class UClass* UGbxSingletons::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSingletons");

	return Clss;
}


// GbxSingletons GbxGameSystemCore.Default__GbxSingletons
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSingletons* UGbxSingletons::GetDefaultObj()
{
	static class UGbxSingletons* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSingletons*>(UGbxSingletons::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StanceDataSelector
// (None)

class UClass* UStanceDataSelector::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceDataSelector");

	return Clss;
}


// StanceDataSelector GbxGameSystemCore.Default__StanceDataSelector
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceDataSelector* UStanceDataSelector::GetDefaultObj()
{
	static class UStanceDataSelector* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceDataSelector*>(UStanceDataSelector::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffectGlobalsData
// (None)

class UClass* UStatusEffectGlobalsData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectGlobalsData");

	return Clss;
}


// StatusEffectGlobalsData GbxGameSystemCore.Default__StatusEffectGlobalsData
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectGlobalsData* UStatusEffectGlobalsData::GetDefaultObj()
{
	static class UStatusEffectGlobalsData* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectGlobalsData*>(UStatusEffectGlobalsData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffectManagerComponent
// (None)

class UClass* UStatusEffectManagerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectManagerComponent");

	return Clss;
}


// StatusEffectManagerComponent GbxGameSystemCore.Default__StatusEffectManagerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectManagerComponent* UStatusEffectManagerComponent::GetDefaultObj()
{
	static class UStatusEffectManagerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectManagerComponent*>(UStatusEffectManagerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StatusEffectManagerComponent.RemoveStatusEffectInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectInstanceReferenceReference                                                        (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectManagerComponent::RemoveStatusEffectInstance(struct FStatusEffectInstanceReference& Reference)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectManagerComponent", "RemoveStatusEffectInstance");

	Params::UStatusEffectManagerComponent_RemoveStatusEffectInstance_Params Parms{};

	Parms.Reference = Reference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectManagerComponent.RemoveStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectRemoveSpec     Spec                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectManagerComponent::RemoveStatusEffect(struct FStatusEffectRemoveSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectManagerComponent", "RemoveStatusEffect");

	Params::UStatusEffectManagerComponent_RemoveStatusEffect_Params Parms{};

	Parms.Spec = Spec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectManagerComponent.QueryStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStatusEffectQuery          Query                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectQueryResult    ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStatusEffectQueryResult UStatusEffectManagerComponent::QueryStatusEffect(struct FStatusEffectQuery& Query)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectManagerComponent", "QueryStatusEffect");

	Params::UStatusEffectManagerComponent_QueryStatusEffect_Params Parms{};

	Parms.Query = Query;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectManagerComponent.AddStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectSpec           Spec                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReferenceReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FStatusEffectInstanceReference UStatusEffectManagerComponent::AddStatusEffect(struct FStatusEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectManagerComponent", "AddStatusEffect");

	Params::UStatusEffectManagerComponent_AddStatusEffect_Params Parms{};

	Parms.Spec = Spec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.StatusEffectsStatics
// (None)

class UClass* UStatusEffectsStatics::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectsStatics");

	return Clss;
}


// StatusEffectsStatics GbxGameSystemCore.Default__StatusEffectsStatics
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectsStatics* UStatusEffectsStatics::GetDefaultObj()
{
	static class UStatusEffectsStatics* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectsStatics*>(UStatusEffectsStatics::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StatusEffectsStatics.RemoveStatusEffectInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReferenceReference                                                        (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectsStatics::RemoveStatusEffectInstance(class AActor* Target, struct FStatusEffectInstanceReference& Reference)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectsStatics", "RemoveStatusEffectInstance");

	Params::UStatusEffectsStatics_RemoveStatusEffectInstance_Params Parms{};

	Parms.Target = Target;
	Parms.Reference = Reference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectsStatics.RemoveStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectRemoveSpec     RemoveSpec                                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectsStatics::RemoveStatusEffect(class AActor* Target, struct FStatusEffectRemoveSpec& RemoveSpec)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectsStatics", "RemoveStatusEffect");

	Params::UStatusEffectsStatics_RemoveStatusEffect_Params Parms{};

	Parms.Target = Target;
	Parms.RemoveSpec = RemoveSpec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectsStatics.QueryStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectQuery          Query                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectQueryResult    ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStatusEffectQueryResult UStatusEffectsStatics::QueryStatusEffect(class AActor* Target, struct FStatusEffectQuery& Query)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectsStatics", "QueryStatusEffect");

	Params::UStatusEffectsStatics_QueryStatusEffect_Params Parms{};

	Parms.Target = Target;
	Parms.Query = Query;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StatusEffectsStatics.AddStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectSpec           Spec                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReferenceReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FStatusEffectInstanceReference UStatusEffectsStatics::AddStatusEffect(class AActor* Target, struct FStatusEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffectsStatics", "AddStatusEffect");

	Params::UStatusEffectsStatics_AddStatusEffect_Params Parms{};

	Parms.Target = Target;
	Parms.Spec = Spec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxInputComponent
// (None)

class UClass* UGbxInputComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxInputComponent");

	return Clss;
}


// GbxInputComponent GbxGameSystemCore.Default__GbxInputComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxInputComponent* UGbxInputComponent::GetDefaultObj()
{
	static class UGbxInputComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxInputComponent*>(UGbxInputComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UseComponent
// (None)

class UClass* UUseComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UseComponent");

	return Clss;
}


// UseComponent GbxGameSystemCore.Default__UseComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UUseComponent* UUseComponent::GetDefaultObj()
{
	static class UUseComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UUseComponent*>(UUseComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UseComponent.StopUsingCurrentObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::StopUsingCurrentObject(enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "StopUsingCurrentObject");

	Params::UUseComponent_StopUsingCurrentObject_Params Parms{};

	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.StartUsingCurrentObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::StartUsingCurrentObject(enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "StartUsingCurrentObject");

	Params::UUseComponent_StartUsingCurrentObject_Params Parms{};

	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ServerUseObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHeld                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerUseObject(class UUsableComponent* UsableObject, enum class EUsabilityType UseType, bool bHeld)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ServerUseObject");

	Params::UUseComponent_ServerUseObject_Params Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;
	Parms.bHeld = bHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ServerUnfilteredStopUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerUnfilteredStopUsingObject(class UUsableComponent* UsableObject, enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ServerUnfilteredStopUsingObject");

	Params::UUseComponent_ServerUnfilteredStopUsingObject_Params Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ServerUnfilteredStartUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerUnfilteredStartUsingObject(class UUsableComponent* UsableObject, enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ServerUnfilteredStartUsingObject");

	Params::UUseComponent_ServerUnfilteredStartUsingObject_Params Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ServerStopUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerStopUsingObject(class UUsableComponent* UsableObject, enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ServerStopUsingObject");

	Params::UUseComponent_ServerStopUsingObject_Params Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ServerStartUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerStartUsingObject(class UUsableComponent* UsableObject, enum class EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ServerStartUsingObject");

	Params::UUseComponent_ServerStartUsingObject_Params Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUsedLockedObject__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:

void UUseComponent::OnUsedLockedObject__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnUsedLockedObject__DelegateSignature");



	UObject::ProcessEvent(Func, nullptr);

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUsableChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams, HasDefaults)
// Parameters:
// class UUsableComponent*            NewUsableComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUsabilityInfo              InUsabilityInfo                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                     NewUsableComponentImpactPoint                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              NewUsableComponentDistanceAway                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnUsableChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, struct FUsabilityInfo& InUsabilityInfo, const struct FVector& NewUsableComponentImpactPoint, float NewUsableComponentDistanceAway)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnUsableChanged__DelegateSignature");

	Params::UUseComponent_OnUsableChanged__DelegateSignature_Params Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.InUsabilityInfo = InUsabilityInfo;
	Parms.NewUsableComponentImpactPoint = NewUsableComponentImpactPoint;
	Parms.NewUsableComponentDistanceAway = NewUsableComponentDistanceAway;

	UObject::ProcessEvent(Func, &Parms);

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUsabilityChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class UUsableComponent*            NewUsableComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUsabilityInfo              InUsabilityInfo                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUseComponent::OnUsabilityChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, struct FUsabilityInfo& InUsabilityInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnUsabilityChanged__DelegateSignature");

	Params::UUseComponent_OnUsabilityChanged__DelegateSignature_Params Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.InUsabilityInfo = InUsabilityInfo;

	UObject::ProcessEvent(Func, &Parms);

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUnableToAffordUsableObject__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UUsableComponent*            Usable                                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseHeld                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnUnableToAffordUsableObject__DelegateSignature(class UUsableComponent* Usable, enum class EUsabilityType UseType, bool bUseHeld)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnUnableToAffordUsableObject__DelegateSignature");

	Params::UUseComponent_OnUnableToAffordUsableObject__DelegateSignature_Params Parms{};

	Parms.Usable = Usable;
	Parms.UseType = UseType;
	Parms.bUseHeld = bUseHeld;

	UObject::ProcessEvent(Func, &Parms);

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnImpactDataChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasDefaults)
// Parameters:
// class UUsableComponent*            NewUsableComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     NewUsableComponentImpactPoint                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              NewUsableComponentDistanceAway                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnImpactDataChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, const struct FVector& NewUsableComponentImpactPoint, float NewUsableComponentDistanceAway)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnImpactDataChanged__DelegateSignature");

	Params::UUseComponent_OnImpactDataChanged__DelegateSignature_Params Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.NewUsableComponentImpactPoint = NewUsableComponentImpactPoint;
	Parms.NewUsableComponentDistanceAway = NewUsableComponentDistanceAway;

	UObject::ProcessEvent(Func, &Parms);

}


// DelegateFunction GbxGameSystemCore.UseComponent.OnHoldUseStopped__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:

void UUseComponent::OnHoldUseStopped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "OnHoldUseStopped__DelegateSignature");



	UObject::ProcessEvent(Func, nullptr);

}


// Function GbxGameSystemCore.UseComponent.GetCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUsableComponent*            ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUsableComponent* UUseComponent::GetCurrentUsable()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "GetCurrentUsable");

	Params::UUseComponent_GetCurrentUsable_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UseComponent.ForceUsingObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUsableComponent*            UsableObject                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ForceUsingObject(class UUsableComponent* UsableObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ForceUsingObject");

	Params::UUseComponent_ForceUsingObject_Params Parms{};

	Parms.UsableObject = UsableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ClientNotifyUsedLockedObject
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:

void UUseComponent::ClientNotifyUsedLockedObject()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ClientNotifyUsedLockedObject");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.ClientNotifyAttemptedUseCouldNotAfford
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:
// class UUsableComponent*            Usable                                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EUsabilityType          UseType                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseHeld                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ClientNotifyAttemptedUseCouldNotAfford(class UUsableComponent* Usable, enum class EUsabilityType UseType, bool bUseHeld)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "ClientNotifyAttemptedUseCouldNotAfford");

	Params::UUseComponent_ClientNotifyAttemptedUseCouldNotAfford_Params Parms{};

	Parms.Usable = Usable;
	Parms.UseType = UseType;
	Parms.bUseHeld = bUseHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseComponent.CanUseCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EUsabilityType          Type                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUseComponent::CanUseCurrentUsable(enum class EUsabilityType Type)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "CanUseCurrentUsable");

	Params::UUseComponent_CanUseCurrentUsable_Params Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UseComponent.CanInteractWithCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EUsabilityType          Type                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUseComponent::CanInteractWithCurrentUsable(enum class EUsabilityType Type)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseComponent", "CanInteractWithCurrentUsable");

	Params::UUseComponent_CanInteractWithCurrentUsable_Params Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.LevelGroupData
// (None)

class UClass* ULevelGroupData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LevelGroupData");

	return Clss;
}


// LevelGroupData GbxGameSystemCore.Default__LevelGroupData
// (Public, ClassDefaultObject, ArchetypeObject)

class ULevelGroupData* ULevelGroupData::GetDefaultObj()
{
	static class ULevelGroupData* Default = nullptr;

	if (!Default)
		Default = static_cast<ULevelGroupData*>(ULevelGroupData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ActorPartSetData
// (None)

class UClass* UActorPartSetData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ActorPartSetData");

	return Clss;
}


// ActorPartSetData GbxGameSystemCore.Default__ActorPartSetData
// (Public, ClassDefaultObject, ArchetypeObject)

class UActorPartSetData* UActorPartSetData::GetDefaultObj()
{
	static class UActorPartSetData* Default = nullptr;

	if (!Default)
		Default = static_cast<UActorPartSetData*>(UActorPartSetData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ActorPartSetData.EnumeratePartListForPartType
// (Native, Protected, HasOutParams, Const)
// Parameters:
// uint8                              PartType                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorPartData*>      OutPartList                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartSetData::EnumeratePartListForPartType(uint8 PartType, TArray<class UActorPartData*>* OutPartList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ActorPartSetData", "EnumeratePartListForPartType");

	Params::UActorPartSetData_EnumeratePartListForPartType_Params Parms{};

	Parms.PartType = PartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);

}


// Class GbxGameSystemCore.PrototypeActor
// (Actor)

class UClass* APrototypeActor::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PrototypeActor");

	return Clss;
}


// PrototypeActor GbxGameSystemCore.Default__PrototypeActor
// (Public, ClassDefaultObject, ArchetypeObject)

class APrototypeActor* APrototypeActor::GetDefaultObj()
{
	static class APrototypeActor* Default = nullptr;

	if (!Default)
		Default = static_cast<APrototypeActor*>(APrototypeActor::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffectStackingStrategyData
// (None)

class UClass* UStatusEffectStackingStrategyData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectStackingStrategyData");

	return Clss;
}


// StatusEffectStackingStrategyData GbxGameSystemCore.Default__StatusEffectStackingStrategyData
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectStackingStrategyData* UStatusEffectStackingStrategyData::GetDefaultObj()
{
	static class UStatusEffectStackingStrategyData* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectStackingStrategyData*>(UStatusEffectStackingStrategyData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UIStatData_Attribute
// (None)

class UClass* UUIStatData_Attribute::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatData_Attribute");

	return Clss;
}


// UIStatData_Attribute GbxGameSystemCore.Default__UIStatData_Attribute
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatData_Attribute* UUIStatData_Attribute::GetDefaultObj()
{
	static class UUIStatData_Attribute* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatData_Attribute*>(UUIStatData_Attribute::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UIStatFormulaEvaluator
// (None)

class UClass* UUIStatFormulaEvaluator::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatFormulaEvaluator");

	return Clss;
}


// UIStatFormulaEvaluator GbxGameSystemCore.Default__UIStatFormulaEvaluator
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatFormulaEvaluator* UUIStatFormulaEvaluator::GetDefaultObj()
{
	static class UUIStatFormulaEvaluator* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatFormulaEvaluator*>(UUIStatFormulaEvaluator::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxWeaponSlotData
// (None)

class UClass* UGbxWeaponSlotData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxWeaponSlotData");

	return Clss;
}


// GbxWeaponSlotData GbxGameSystemCore.Default__GbxWeaponSlotData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxWeaponSlotData* UGbxWeaponSlotData::GetDefaultObj()
{
	static class UGbxWeaponSlotData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxWeaponSlotData*>(UGbxWeaponSlotData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.LevelData
// (None)

class UClass* ULevelData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LevelData");

	return Clss;
}


// LevelData GbxGameSystemCore.Default__LevelData
// (Public, ClassDefaultObject, ArchetypeObject)

class ULevelData* ULevelData::GetDefaultObj()
{
	static class ULevelData* Default = nullptr;

	if (!Default)
		Default = static_cast<ULevelData*>(ULevelData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ActorAttributeContextResolver
// (None)

class UClass* UActorAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ActorAttributeContextResolver");

	return Clss;
}


// ActorAttributeContextResolver GbxGameSystemCore.Default__ActorAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UActorAttributeContextResolver* UActorAttributeContextResolver::GetDefaultObj()
{
	static class UActorAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UActorAttributeContextResolver*>(UActorAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AIChargeData
// (None)

class UClass* UAIChargeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AIChargeData");

	return Clss;
}


// AIChargeData GbxGameSystemCore.Default__AIChargeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAIChargeData* UAIChargeData::GetDefaultObj()
{
	static class UAIChargeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAIChargeData*>(UAIChargeData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AIDataProvider_AttributeData
// (None)

class UClass* UAIDataProvider_AttributeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AIDataProvider_AttributeData");

	return Clss;
}


// AIDataProvider_AttributeData GbxGameSystemCore.Default__AIDataProvider_AttributeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAIDataProvider_AttributeData* UAIDataProvider_AttributeData::GetDefaultObj()
{
	static class UAIDataProvider_AttributeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAIDataProvider_AttributeData*>(UAIDataProvider_AttributeData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AIDataProvider_AttributeInitializationData
// (None)

class UClass* UAIDataProvider_AttributeInitializationData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AIDataProvider_AttributeInitializationData");

	return Clss;
}


// AIDataProvider_AttributeInitializationData GbxGameSystemCore.Default__AIDataProvider_AttributeInitializationData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAIDataProvider_AttributeInitializationData* UAIDataProvider_AttributeInitializationData::GetDefaultObj()
{
	static class UAIDataProvider_AttributeInitializationData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAIDataProvider_AttributeInitializationData*>(UAIDataProvider_AttributeInitializationData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AIDataProvider_AttributeInitializer
// (None)

class UClass* UAIDataProvider_AttributeInitializer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AIDataProvider_AttributeInitializer");

	return Clss;
}


// AIDataProvider_AttributeInitializer GbxGameSystemCore.Default__AIDataProvider_AttributeInitializer
// (Public, ClassDefaultObject, ArchetypeObject)

class UAIDataProvider_AttributeInitializer* UAIDataProvider_AttributeInitializer::GetDefaultObj()
{
	static class UAIDataProvider_AttributeInitializer* Default = nullptr;

	if (!Default)
		Default = static_cast<UAIDataProvider_AttributeInitializer*>(UAIDataProvider_AttributeInitializer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AIDodgeComponent
// (None)

class UClass* UAIDodgeComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AIDodgeComponent");

	return Clss;
}


// AIDodgeComponent GbxGameSystemCore.Default__AIDodgeComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UAIDodgeComponent* UAIDodgeComponent::GetDefaultObj()
{
	static class UAIDodgeComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UAIDodgeComponent*>(UAIDodgeComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerZoneDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ZoneLoc                                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ZoneVel                                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ActorRef                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerZoneDodge(class UObject* WorldContextObject, class AActor* TargetActor, struct FVector& ZoneLoc, struct FVector& ZoneVel, class AActor* ActorRef)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AIDodgeComponent", "TriggerZoneDodge");

	Params::UAIDodgeComponent_TriggerZoneDodge_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TargetActor = TargetActor;
	Parms.ZoneLoc = ZoneLoc;
	Parms.ZoneVel = ZoneVel;
	Parms.ActorRef = ActorRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerGrenadeDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     GrenadeLoc                                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ExtraDelay                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerGrenadeDodge(class UObject* WorldContextObject, struct FVector& GrenadeLoc, class AActor* Instigator, float ExtraDelay)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AIDodgeComponent", "TriggerGrenadeDodge");

	Params::UAIDodgeComponent_TriggerGrenadeDodge_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GrenadeLoc = GrenadeLoc;
	Parms.Instigator = Instigator;
	Parms.ExtraDelay = ExtraDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerDodge
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// enum class EAIDodgeType            Type                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLoc                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      SourceActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ExtraDelay                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bForced                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAIDodgeComponent::TriggerDodge(enum class EAIDodgeType Type, struct FVector& SourceLoc, class AActor* SourceActor, float ExtraDelay, bool bForced)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AIDodgeComponent", "TriggerDodge");

	Params::UAIDodgeComponent_TriggerDodge_Params Parms{};

	Parms.Type = Type;
	Parms.SourceLoc = SourceLoc;
	Parms.SourceActor = SourceActor;
	Parms.ExtraDelay = ExtraDelay;
	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerBulletDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     MuzzleLoc                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     BulletVel                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerBulletDodge(class UObject* WorldContextObject, struct FVector& MuzzleLoc, struct FVector& BulletVel, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AIDodgeComponent", "TriggerBulletDodge");

	Params::UAIDodgeComponent_TriggerBulletDodge_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MuzzleLoc = MuzzleLoc;
	Parms.BulletVel = BulletVel;
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.AimControlData
// (None)

class UClass* UAimControlData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AimControlData");

	return Clss;
}


// AimControlData GbxGameSystemCore.Default__AimControlData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAimControlData* UAimControlData::GetDefaultObj()
{
	static class UAimControlData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAimControlData*>(UAimControlData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AISense_Bullet
// (None)

class UClass* UAISense_Bullet::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AISense_Bullet");

	return Clss;
}


// AISense_Bullet GbxGameSystemCore.Default__AISense_Bullet
// (Public, ClassDefaultObject, ArchetypeObject)

class UAISense_Bullet* UAISense_Bullet::GetDefaultObj()
{
	static class UAISense_Bullet* Default = nullptr;

	if (!Default)
		Default = static_cast<UAISense_Bullet*>(UAISense_Bullet::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AISense_Bullet.ReportBulletEvent
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContext                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     StartLoc                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     EndLoc                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bFirstEvent                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Strength                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISense_Bullet::ReportBulletEvent(class UObject* WorldContext, const struct FVector& StartLoc, const struct FVector& EndLoc, bool bFirstEvent, class AActor* Instigator, float Strength)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AISense_Bullet", "ReportBulletEvent");

	Params::UAISense_Bullet_ReportBulletEvent_Params Parms{};

	Parms.WorldContext = WorldContext;
	Parms.StartLoc = StartLoc;
	Parms.EndLoc = EndLoc;
	Parms.bFirstEvent = bFirstEvent;
	Parms.Instigator = Instigator;
	Parms.Strength = Strength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.AISense_GbxPrediction
// (None)

class UClass* UAISense_GbxPrediction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AISense_GbxPrediction");

	return Clss;
}


// AISense_GbxPrediction GbxGameSystemCore.Default__AISense_GbxPrediction
// (Public, ClassDefaultObject, ArchetypeObject)

class UAISense_GbxPrediction* UAISense_GbxPrediction::GetDefaultObj()
{
	static class UAISense_GbxPrediction* Default = nullptr;

	if (!Default)
		Default = static_cast<UAISense_GbxPrediction*>(UAISense_GbxPrediction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AISense_GbxSight
// (None)

class UClass* UAISense_GbxSight::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AISense_GbxSight");

	return Clss;
}


// AISense_GbxSight GbxGameSystemCore.Default__AISense_GbxSight
// (Public, ClassDefaultObject, ArchetypeObject)

class UAISense_GbxSight* UAISense_GbxSight::GetDefaultObj()
{
	static class UAISense_GbxSight* Default = nullptr;

	if (!Default)
		Default = static_cast<UAISense_GbxSight*>(UAISense_GbxSight::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AISense_GbxSight.ForceSightEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContext                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      SeenActor                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      LookingActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISense_GbxSight::ForceSightEvent(class UObject* WorldContext, class AActor* SeenActor, class AActor* LookingActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AISense_GbxSight", "ForceSightEvent");

	Params::UAISense_GbxSight_ForceSightEvent_Params Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SeenActor = SeenActor;
	Parms.LookingActor = LookingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.AISenseConfig_Bullet
// (None)

class UClass* UAISenseConfig_Bullet::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AISenseConfig_Bullet");

	return Clss;
}


// AISenseConfig_Bullet GbxGameSystemCore.Default__AISenseConfig_Bullet
// (Public, ClassDefaultObject, ArchetypeObject)

class UAISenseConfig_Bullet* UAISenseConfig_Bullet::GetDefaultObj()
{
	static class UAISenseConfig_Bullet* Default = nullptr;

	if (!Default)
		Default = static_cast<UAISenseConfig_Bullet*>(UAISenseConfig_Bullet::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AISenseConfig_GbxPrediction
// (None)

class UClass* UAISenseConfig_GbxPrediction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AISenseConfig_GbxPrediction");

	return Clss;
}


// AISenseConfig_GbxPrediction GbxGameSystemCore.Default__AISenseConfig_GbxPrediction
// (Public, ClassDefaultObject, ArchetypeObject)

class UAISenseConfig_GbxPrediction* UAISenseConfig_GbxPrediction::GetDefaultObj()
{
	static class UAISenseConfig_GbxPrediction* Default = nullptr;

	if (!Default)
		Default = static_cast<UAISenseConfig_GbxPrediction*>(UAISenseConfig_GbxPrediction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_CanInterruptAnim
// (None)

class UClass* UAnimNotify_CanInterruptAnim::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_CanInterruptAnim");

	return Clss;
}


// AnimNotify_CanInterruptAnim GbxGameSystemCore.Default__AnimNotify_CanInterruptAnim
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_CanInterruptAnim* UAnimNotify_CanInterruptAnim::GetDefaultObj()
{
	static class UAnimNotify_CanInterruptAnim* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_CanInterruptAnim*>(UAnimNotify_CanInterruptAnim::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_CauseDamage
// (None)

class UClass* UAnimNotify_CauseDamage::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_CauseDamage");

	return Clss;
}


// AnimNotify_CauseDamage GbxGameSystemCore.Default__AnimNotify_CauseDamage
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_CauseDamage* UAnimNotify_CauseDamage::GetDefaultObj()
{
	static class UAnimNotify_CauseDamage* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_CauseDamage*>(UAnimNotify_CauseDamage::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_Feedback
// (None)

class UClass* UAnimNotify_Feedback::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_Feedback");

	return Clss;
}


// AnimNotify_Feedback GbxGameSystemCore.Default__AnimNotify_Feedback
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_Feedback* UAnimNotify_Feedback::GetDefaultObj()
{
	static class UAnimNotify_Feedback* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_Feedback*>(UAnimNotify_Feedback::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_Footstep
// (None)

class UClass* UAnimNotify_Footstep::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_Footstep");

	return Clss;
}


// AnimNotify_Footstep GbxGameSystemCore.Default__AnimNotify_Footstep
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_Footstep* UAnimNotify_Footstep::GetDefaultObj()
{
	static class UAnimNotify_Footstep* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_Footstep*>(UAnimNotify_Footstep::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_GbxAction
// (None)

class UClass* UAnimNotify_GbxAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_GbxAction");

	return Clss;
}


// AnimNotify_GbxAction GbxGameSystemCore.Default__AnimNotify_GbxAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_GbxAction* UAnimNotify_GbxAction::GetDefaultObj()
{
	static class UAnimNotify_GbxAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_GbxAction*>(UAnimNotify_GbxAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_HandPlant
// (None)

class UClass* UAnimNotify_HandPlant::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_HandPlant");

	return Clss;
}


// AnimNotify_HandPlant GbxGameSystemCore.Default__AnimNotify_HandPlant
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_HandPlant* UAnimNotify_HandPlant::GetDefaultObj()
{
	static class UAnimNotify_HandPlant* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_HandPlant*>(UAnimNotify_HandPlant::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_PlayJumpedImpact
// (None)

class UClass* UAnimNotify_PlayJumpedImpact::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_PlayJumpedImpact");

	return Clss;
}


// AnimNotify_PlayJumpedImpact GbxGameSystemCore.Default__AnimNotify_PlayJumpedImpact
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_PlayJumpedImpact* UAnimNotify_PlayJumpedImpact::GetDefaultObj()
{
	static class UAnimNotify_PlayJumpedImpact* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_PlayJumpedImpact*>(UAnimNotify_PlayJumpedImpact::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_PlayLandedImpact
// (None)

class UClass* UAnimNotify_PlayLandedImpact::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_PlayLandedImpact");

	return Clss;
}


// AnimNotify_PlayLandedImpact GbxGameSystemCore.Default__AnimNotify_PlayLandedImpact
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_PlayLandedImpact* UAnimNotify_PlayLandedImpact::GetDefaultObj()
{
	static class UAnimNotify_PlayLandedImpact* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_PlayLandedImpact*>(UAnimNotify_PlayLandedImpact::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_SetRagdollObjectHoldTransform
// (None)

class UClass* UAnimNotify_SetRagdollObjectHoldTransform::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_SetRagdollObjectHoldTransform");

	return Clss;
}


// AnimNotify_SetRagdollObjectHoldTransform GbxGameSystemCore.Default__AnimNotify_SetRagdollObjectHoldTransform
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_SetRagdollObjectHoldTransform* UAnimNotify_SetRagdollObjectHoldTransform::GetDefaultObj()
{
	static class UAnimNotify_SetRagdollObjectHoldTransform* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_SetRagdollObjectHoldTransform*>(UAnimNotify_SetRagdollObjectHoldTransform::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotify_StretchBonesMarker
// (None)

class UClass* UAnimNotify_StretchBonesMarker::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotify_StretchBonesMarker");

	return Clss;
}


// AnimNotify_StretchBonesMarker GbxGameSystemCore.Default__AnimNotify_StretchBonesMarker
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotify_StretchBonesMarker* UAnimNotify_StretchBonesMarker::GetDefaultObj()
{
	static class UAnimNotify_StretchBonesMarker* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotify_StretchBonesMarker*>(UAnimNotify_StretchBonesMarker::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_DeathOverride
// (None)

class UClass* UAnimNotifyState_DeathOverride::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_DeathOverride");

	return Clss;
}


// AnimNotifyState_DeathOverride GbxGameSystemCore.Default__AnimNotifyState_DeathOverride
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_DeathOverride* UAnimNotifyState_DeathOverride::GetDefaultObj()
{
	static class UAnimNotifyState_DeathOverride* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_DeathOverride*>(UAnimNotifyState_DeathOverride::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_DisableLegIK
// (None)

class UClass* UAnimNotifyState_DisableLegIK::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_DisableLegIK");

	return Clss;
}


// AnimNotifyState_DisableLegIK GbxGameSystemCore.Default__AnimNotifyState_DisableLegIK
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_DisableLegIK* UAnimNotifyState_DisableLegIK::GetDefaultObj()
{
	static class UAnimNotifyState_DisableLegIK* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_DisableLegIK*>(UAnimNotifyState_DisableLegIK::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_DisableLegIKTracing
// (None)

class UClass* UAnimNotifyState_DisableLegIKTracing::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_DisableLegIKTracing");

	return Clss;
}


// AnimNotifyState_DisableLegIKTracing GbxGameSystemCore.Default__AnimNotifyState_DisableLegIKTracing
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_DisableLegIKTracing* UAnimNotifyState_DisableLegIKTracing::GetDefaultObj()
{
	static class UAnimNotifyState_DisableLegIKTracing* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_DisableLegIKTracing*>(UAnimNotifyState_DisableLegIKTracing::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_DisableLookAt
// (None)

class UClass* UAnimNotifyState_DisableLookAt::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_DisableLookAt");

	return Clss;
}


// AnimNotifyState_DisableLookAt GbxGameSystemCore.Default__AnimNotifyState_DisableLookAt
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_DisableLookAt* UAnimNotifyState_DisableLookAt::GetDefaultObj()
{
	static class UAnimNotifyState_DisableLookAt* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_DisableLookAt*>(UAnimNotifyState_DisableLookAt::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_Feedback
// (None)

class UClass* UAnimNotifyState_Feedback::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_Feedback");

	return Clss;
}


// AnimNotifyState_Feedback GbxGameSystemCore.Default__AnimNotifyState_Feedback
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_Feedback* UAnimNotifyState_Feedback::GetDefaultObj()
{
	static class UAnimNotifyState_Feedback* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_Feedback*>(UAnimNotifyState_Feedback::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_GbxAction
// (None)

class UClass* UAnimNotifyState_GbxAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_GbxAction");

	return Clss;
}


// AnimNotifyState_GbxAction GbxGameSystemCore.Default__AnimNotifyState_GbxAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_GbxAction* UAnimNotifyState_GbxAction::GetDefaultObj()
{
	static class UAnimNotifyState_GbxAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_GbxAction*>(UAnimNotifyState_GbxAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_RootMotionRotation
// (None)

class UClass* UAnimNotifyState_RootMotionRotation::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_RootMotionRotation");

	return Clss;
}


// AnimNotifyState_RootMotionRotation GbxGameSystemCore.Default__AnimNotifyState_RootMotionRotation
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_RootMotionRotation* UAnimNotifyState_RootMotionRotation::GetDefaultObj()
{
	static class UAnimNotifyState_RootMotionRotation* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_RootMotionRotation*>(UAnimNotifyState_RootMotionRotation::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_SoftAlign
// (None)

class UClass* UAnimNotifyState_SoftAlign::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_SoftAlign");

	return Clss;
}


// AnimNotifyState_SoftAlign GbxGameSystemCore.Default__AnimNotifyState_SoftAlign
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_SoftAlign* UAnimNotifyState_SoftAlign::GetDefaultObj()
{
	static class UAnimNotifyState_SoftAlign* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_SoftAlign*>(UAnimNotifyState_SoftAlign::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_StretchAction
// (None)

class UClass* UAnimNotifyState_StretchAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_StretchAction");

	return Clss;
}


// AnimNotifyState_StretchAction GbxGameSystemCore.Default__AnimNotifyState_StretchAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_StretchAction* UAnimNotifyState_StretchAction::GetDefaultObj()
{
	static class UAnimNotifyState_StretchAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_StretchAction*>(UAnimNotifyState_StretchAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AnimNotifyState_StretchBonesMarker
// (None)

class UClass* UAnimNotifyState_StretchBonesMarker::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AnimNotifyState_StretchBonesMarker");

	return Clss;
}


// AnimNotifyState_StretchBonesMarker GbxGameSystemCore.Default__AnimNotifyState_StretchBonesMarker
// (Public, ClassDefaultObject, ArchetypeObject)

class UAnimNotifyState_StretchBonesMarker* UAnimNotifyState_StretchBonesMarker::GetDefaultObj()
{
	static class UAnimNotifyState_StretchBonesMarker* Default = nullptr;

	if (!Default)
		Default = static_cast<UAnimNotifyState_StretchBonesMarker*>(UAnimNotifyState_StretchBonesMarker::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AsyncExplosionImpactManager
// (None)

class UClass* UAsyncExplosionImpactManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AsyncExplosionImpactManager");

	return Clss;
}


// AsyncExplosionImpactManager GbxGameSystemCore.Default__AsyncExplosionImpactManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UAsyncExplosionImpactManager* UAsyncExplosionImpactManager::GetDefaultObj()
{
	static class UAsyncExplosionImpactManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UAsyncExplosionImpactManager*>(UAsyncExplosionImpactManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributeEffectMultiMutatorData
// (None)

class UClass* UAttributeEffectMultiMutatorData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeEffectMultiMutatorData");

	return Clss;
}


// AttributeEffectMultiMutatorData GbxGameSystemCore.Default__AttributeEffectMultiMutatorData
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeEffectMultiMutatorData* UAttributeEffectMultiMutatorData::GetDefaultObj()
{
	static class UAttributeEffectMultiMutatorData* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeEffectMultiMutatorData*>(UAttributeEffectMultiMutatorData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributeInitializer
// (None)

class UClass* UAttributeInitializer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeInitializer");

	return Clss;
}


// AttributeInitializer GbxGameSystemCore.Default__AttributeInitializer
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeInitializer* UAttributeInitializer::GetDefaultObj()
{
	static class UAttributeInitializer* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeInitializer*>(UAttributeInitializer::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.AttributeInitializer.EvaluateBalanceFormula
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              Multiplier                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Level                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Power                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Offset                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeInitializer::EvaluateBalanceFormula(float Multiplier, float Level, float Power, float Offset)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AttributeInitializer", "EvaluateBalanceFormula");

	Params::UAttributeInitializer_EvaluateBalanceFormula_Params Parms{};

	Parms.Multiplier = Multiplier;
	Parms.Level = Level;
	Parms.Power = Power;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.AttributeInitializer.CalculateAttributeInitialValue
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                     Context                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeInitializer::CalculateAttributeInitialValue(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("AttributeInitializer", "CalculateAttributeInitialValue");

	Params::UAttributeInitializer_CalculateAttributeInitialValue_Params Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.AttributeModifierTestContext
// (None)

class UClass* UAttributeModifierTestContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributeModifierTestContext");

	return Clss;
}


// AttributeModifierTestContext GbxGameSystemCore.Default__AttributeModifierTestContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributeModifierTestContext* UAttributeModifierTestContext::GetDefaultObj()
{
	static class UAttributeModifierTestContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributeModifierTestContext*>(UAttributeModifierTestContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.TestAttributePropertyValueResolver
// (None)

class UClass* UTestAttributePropertyValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TestAttributePropertyValueResolver");

	return Clss;
}


// TestAttributePropertyValueResolver GbxGameSystemCore.Default__TestAttributePropertyValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UTestAttributePropertyValueResolver* UTestAttributePropertyValueResolver::GetDefaultObj()
{
	static class UTestAttributePropertyValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UTestAttributePropertyValueResolver*>(UTestAttributePropertyValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.AttributePropertyValueResolverTestContext
// (None)

class UClass* UAttributePropertyValueResolverTestContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("AttributePropertyValueResolverTestContext");

	return Clss;
}


// AttributePropertyValueResolverTestContext GbxGameSystemCore.Default__AttributePropertyValueResolverTestContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UAttributePropertyValueResolverTestContext* UAttributePropertyValueResolverTestContext::GetDefaultObj()
{
	static class UAttributePropertyValueResolverTestContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UAttributePropertyValueResolverTestContext*>(UAttributePropertyValueResolverTestContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BalanceFormulaAttributeValueResolver
// (None)

class UClass* UBalanceFormulaAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BalanceFormulaAttributeValueResolver");

	return Clss;
}


// BalanceFormulaAttributeValueResolver GbxGameSystemCore.Default__BalanceFormulaAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UBalanceFormulaAttributeValueResolver* UBalanceFormulaAttributeValueResolver::GetDefaultObj()
{
	static class UBalanceFormulaAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UBalanceFormulaAttributeValueResolver*>(UBalanceFormulaAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BalanceStateAttributeValueResolver
// (None)

class UClass* UBalanceStateAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BalanceStateAttributeValueResolver");

	return Clss;
}


// BalanceStateAttributeValueResolver GbxGameSystemCore.Default__BalanceStateAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UBalanceStateAttributeValueResolver* UBalanceStateAttributeValueResolver::GetDefaultObj()
{
	static class UBalanceStateAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UBalanceStateAttributeValueResolver*>(UBalanceStateAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BalanceTableAttributeValueResolver
// (None)

class UClass* UBalanceTableAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BalanceTableAttributeValueResolver");

	return Clss;
}


// BalanceTableAttributeValueResolver GbxGameSystemCore.Default__BalanceTableAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UBalanceTableAttributeValueResolver* UBalanceTableAttributeValueResolver::GetDefaultObj()
{
	static class UBalanceTableAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UBalanceTableAttributeValueResolver*>(UBalanceTableAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BlackboardKeyAttributeContextResolver
// (None)

class UClass* UBlackboardKeyAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BlackboardKeyAttributeContextResolver");

	return Clss;
}


// BlackboardKeyAttributeContextResolver GbxGameSystemCore.Default__BlackboardKeyAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UBlackboardKeyAttributeContextResolver* UBlackboardKeyAttributeContextResolver::GetDefaultObj()
{
	static class UBlackboardKeyAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UBlackboardKeyAttributeContextResolver*>(UBlackboardKeyAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BlackboardKeyType_GbxFlag
// (None)

class UClass* UBlackboardKeyType_GbxFlag::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BlackboardKeyType_GbxFlag");

	return Clss;
}


// BlackboardKeyType_GbxFlag GbxGameSystemCore.Default__BlackboardKeyType_GbxFlag
// (Public, ClassDefaultObject, ArchetypeObject)

class UBlackboardKeyType_GbxFlag* UBlackboardKeyType_GbxFlag::GetDefaultObj()
{
	static class UBlackboardKeyType_GbxFlag* Default = nullptr;

	if (!Default)
		Default = static_cast<UBlackboardKeyType_GbxFlag*>(UBlackboardKeyType_GbxFlag::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BlackboardKeyType_Struct
// (None)

class UClass* UBlackboardKeyType_Struct::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BlackboardKeyType_Struct");

	return Clss;
}


// BlackboardKeyType_Struct GbxGameSystemCore.Default__BlackboardKeyType_Struct
// (Public, ClassDefaultObject, ArchetypeObject)

class UBlackboardKeyType_Struct* UBlackboardKeyType_Struct::GetDefaultObj()
{
	static class UBlackboardKeyType_Struct* Default = nullptr;

	if (!Default)
		Default = static_cast<UBlackboardKeyType_Struct*>(UBlackboardKeyType_Struct::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BlackboardKeyType_TargetActorInfo
// (None)

class UClass* UBlackboardKeyType_TargetActorInfo::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BlackboardKeyType_TargetActorInfo");

	return Clss;
}


// BlackboardKeyType_TargetActorInfo GbxGameSystemCore.Default__BlackboardKeyType_TargetActorInfo
// (Public, ClassDefaultObject, ArchetypeObject)

class UBlackboardKeyType_TargetActorInfo* UBlackboardKeyType_TargetActorInfo::GetDefaultObj()
{
	static class UBlackboardKeyType_TargetActorInfo* Default = nullptr;

	if (!Default)
		Default = static_cast<UBlackboardKeyType_TargetActorInfo*>(UBlackboardKeyType_TargetActorInfo::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BoneModBlueprintLibrary
// (None)

class UClass* UBoneModBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BoneModBlueprintLibrary");

	return Clss;
}


// BoneModBlueprintLibrary GbxGameSystemCore.Default__BoneModBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UBoneModBlueprintLibrary* UBoneModBlueprintLibrary::GetDefaultObj()
{
	static class UBoneModBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UBoneModBlueprintLibrary*>(UBoneModBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneTranslation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneName                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Translation                                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InBlendTime                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAlphaBlendOption       InBlendOption                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                 InCustomBlendCurve                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneTranslation(class FName BoneName, const struct FVector& Translation, class UObject* Target, float InBlendTime, enum class EAlphaBlendOption InBlendOption, class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneTranslation");

	Params::UBoneModBlueprintLibrary_SetBoneTranslation_Params Parms{};

	Parms.BoneName = BoneName;
	Parms.Translation = Translation;
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneScale3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneName                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Scale3D                                                          (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InBlendTime                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAlphaBlendOption       InBlendOption                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                 InCustomBlendCurve                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneScale3D(class FName BoneName, const struct FVector& Scale3D, class UObject* Target, float InBlendTime, enum class EAlphaBlendOption InBlendOption, class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneScale3D");

	Params::UBoneModBlueprintLibrary_SetBoneScale3D_Params Parms{};

	Parms.BoneName = BoneName;
	Parms.Scale3D = Scale3D;
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneName                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InBlendTime                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAlphaBlendOption       InBlendOption                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                 InCustomBlendCurve                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneScale(class FName BoneName, float Scale, class UObject* Target, float InBlendTime, enum class EAlphaBlendOption InBlendOption, class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneScale");

	Params::UBoneModBlueprintLibrary_SetBoneScale_Params Parms{};

	Parms.BoneName = BoneName;
	Parms.Scale = Scale;
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneName                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    Rotation                                                         (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InBlendTime                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAlphaBlendOption       InBlendOption                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                 InCustomBlendCurve                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneRotation(class FName BoneName, const struct FRotator& Rotation, class UObject* Target, float InBlendTime, enum class EAlphaBlendOption InBlendOption, class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneRotation");

	Params::UBoneModBlueprintLibrary_SetBoneRotation_Params Parms{};

	Parms.BoneName = BoneName;
	Parms.Rotation = Rotation;
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseTranslation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseTranslation                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseTranslation(class FName BoneModName, bool bUseTranslation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseTranslation");

	Params::UBoneModBlueprintLibrary_SetBoneModUseTranslation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseTranslation = bUseTranslation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseScale                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseScale(class FName BoneModName, bool bUseScale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseScale");

	Params::UBoneModBlueprintLibrary_SetBoneModUseScale_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseScale = bUseScale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseRotation                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseRotation(class FName BoneModName, bool bUseRotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseRotation");

	Params::UBoneModBlueprintLibrary_SetBoneModUseRotation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseRotation = bUseRotation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTranslationSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EBoneControlSpace       TranslationSpace                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTranslationSpace(class FName BoneModName, enum class EBoneControlSpace TranslationSpace, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModTranslationSpace");

	Params::UBoneModBlueprintLibrary_SetBoneModTranslationSpace_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.TranslationSpace = TranslationSpace;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTranslation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Translation                                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTranslation(class FName BoneModName, const struct FVector& Translation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModTranslation");

	Params::UBoneModBlueprintLibrary_SetBoneModTranslation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Translation = Translation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                  Transform                                                        (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTransform(class FName BoneModName, const struct FTransform& Transform, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModTransform");

	Params::UBoneModBlueprintLibrary_SetBoneModTransform_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Transform = Transform;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModScale3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Scale                                                            (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModScale3D(class FName BoneModName, const struct FVector& Scale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModScale3D");

	Params::UBoneModBlueprintLibrary_SetBoneModScale3D_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Scale = Scale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModScale(class FName BoneModName, float Scale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModScale");

	Params::UBoneModBlueprintLibrary_SetBoneModScale_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Scale = Scale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModRotationSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EBoneControlSpace       RotationSpace                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModRotationSpace(class FName BoneModName, enum class EBoneControlSpace RotationSpace, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModRotationSpace");

	Params::UBoneModBlueprintLibrary_SetBoneModRotationSpace_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.RotationSpace = RotationSpace;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    Rotation                                                         (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModRotation(class FName BoneModName, const struct FRotator& Rotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModRotation");

	Params::UBoneModBlueprintLibrary_SetBoneModRotation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Rotation = Rotation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceTranslation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplaceTranslation                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceTranslation(class FName BoneModName, bool bReplaceTranslation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceTranslation");

	Params::UBoneModBlueprintLibrary_SetBoneModReplaceTranslation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceTranslation = bReplaceTranslation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplaceScale                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceScale(class FName BoneModName, bool bReplaceScale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceScale");

	Params::UBoneModBlueprintLibrary_SetBoneModReplaceScale_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceScale = bReplaceScale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplaceRotation                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceRotation(class FName BoneModName, bool bReplaceRotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceRotation");

	Params::UBoneModBlueprintLibrary_SetBoneModReplaceRotation_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceRotation = bReplaceRotation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        NewBoneModName                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModName(class FName BoneModName, class FName NewBoneModName, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModName");

	Params::UBoneModBlueprintLibrary_SetBoneModName_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.NewBoneModName = NewBoneModName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModifyProfileState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        StateName                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bActive                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BlendTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModifyProfileState(class FName StateName, bool bActive, class UObject* Target, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModifyProfileState");

	Params::UBoneModBlueprintLibrary_SetBoneModifyProfileState_Params Parms{};

	Parms.StateName = StateName;
	Parms.bActive = bActive;
	Parms.Target = Target;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModifyProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxBoneModifyProfile*       BoneModifyProfile                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModifyProfile(class UGbxBoneModifyProfile* BoneModifyProfile, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModifyProfile");

	Params::UBoneModBlueprintLibrary_SetBoneModifyProfile_Params Parms{};

	Parms.BoneModifyProfile = BoneModifyProfile;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModBoneName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BoneModBoneName                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModBoneName(class FName BoneModName, class FName BoneModBoneName, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModBoneName");

	Params::UBoneModBlueprintLibrary_SetBoneModBoneName_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.BoneModBoneName = BoneModBoneName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModBlendTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BlendTime                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModBlendTime(class FName BoneModName, float BlendTime, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModBlendTime");

	Params::UBoneModBlueprintLibrary_SetBoneModBlendTime_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.BlendTime = BlendTime;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModAlphaBlend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAlphaBlend                 Blend                                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModAlphaBlend(class FName BoneModName, const struct FAlphaBlend& Blend, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModAlphaBlend");

	Params::UBoneModBlueprintLibrary_SetBoneModAlphaBlend_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Blend = Blend;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bActive                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModActive(class FName BoneModName, bool bActive, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneModActive");

	Params::UBoneModBlueprintLibrary_SetBoneModActive_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bActive = bActive;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBoneModInstance            InBoneMod                                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                        BoneModToSet                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bBlendIn                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneMod(struct FBoneModInstance& InBoneMod, class FName BoneModToSet, class UObject* Target, bool bBlendIn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "SetBoneMod");

	Params::UBoneModBlueprintLibrary_SetBoneMod_Params Parms{};

	Parms.InBoneMod = InBoneMod;
	Parms.BoneModToSet = BoneModToSet;
	Parms.Target = Target;
	Parms.bBlendIn = bBlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.RemoveBoneMod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        BoneModToRemove                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bBlendOut                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::RemoveBoneMod(class FName BoneModToRemove, class UObject* Target, bool bBlendOut)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "RemoveBoneMod");

	Params::UBoneModBlueprintLibrary_RemoveBoneMod_Params Parms{};

	Parms.BoneModToRemove = BoneModToRemove;
	Parms.Target = Target;
	Parms.bBlendOut = bBlendOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.GetBoneMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                        BoneModName                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoneModInstance            BoneMod                                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBoneModBlueprintLibrary::GetBoneMod(class FName BoneModName, struct FBoneModInstance* BoneMod, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "GetBoneMod");

	Params::UBoneModBlueprintLibrary_GetBoneMod_Params Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (BoneMod != nullptr)
		*BoneMod = std::move(Parms.BoneMod);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.CreateBoneMod
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                        InBoneModName                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        InBoneName                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     InTranslation                                                    (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    InRotation                                                       (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     InScale                                                          (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InBlendTime                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EAlphaBlendOption       InBlendOption                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                 InCustomBlendCurve                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInUseTranslation                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInUseRotation                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInUseScale                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInReplaceTranslation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInReplaceRotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInReplaceScale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EBoneControlSpace       InTranslationSpace                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EBoneControlSpace       InRotationSpace                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bBlendIn                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::CreateBoneMod(class FName InBoneModName, class FName InBoneName, const struct FVector& InTranslation, const struct FRotator& InRotation, const struct FVector& InScale, float InBlendTime, class UObject* Target, enum class EAlphaBlendOption InBlendOption, class UCurveFloat* InCustomBlendCurve, bool bInUseTranslation, bool bInUseRotation, bool bInUseScale, bool bInReplaceTranslation, bool bInReplaceRotation, bool bInReplaceScale, enum class EBoneControlSpace InTranslationSpace, enum class EBoneControlSpace InRotationSpace, bool bBlendIn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("BoneModBlueprintLibrary", "CreateBoneMod");

	Params::UBoneModBlueprintLibrary_CreateBoneMod_Params Parms{};

	Parms.InBoneModName = InBoneModName;
	Parms.InBoneName = InBoneName;
	Parms.InTranslation = InTranslation;
	Parms.InRotation = InRotation;
	Parms.InScale = InScale;
	Parms.InBlendTime = InBlendTime;
	Parms.Target = Target;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;
	Parms.bInUseTranslation = bInUseTranslation;
	Parms.bInUseRotation = bInUseRotation;
	Parms.bInUseScale = bInUseScale;
	Parms.bInReplaceTranslation = bInReplaceTranslation;
	Parms.bInReplaceRotation = bInReplaceRotation;
	Parms.bInReplaceScale = bInReplaceScale;
	Parms.InTranslationSpace = InTranslationSpace;
	Parms.InRotationSpace = InRotationSpace;
	Parms.bBlendIn = bBlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.BoneModComponent
// (SceneComponent)

class UClass* UBoneModComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BoneModComponent");

	return Clss;
}


// BoneModComponent GbxGameSystemCore.Default__BoneModComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UBoneModComponent* UBoneModComponent::GetDefaultObj()
{
	static class UBoneModComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UBoneModComponent*>(UBoneModComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BTDecorator_GbxCondition
// (None)

class UClass* UBTDecorator_GbxCondition::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BTDecorator_GbxCondition");

	return Clss;
}


// BTDecorator_GbxCondition GbxGameSystemCore.Default__BTDecorator_GbxCondition
// (Public, ClassDefaultObject, ArchetypeObject)

class UBTDecorator_GbxCondition* UBTDecorator_GbxCondition::GetDefaultObj()
{
	static class UBTDecorator_GbxCondition* Default = nullptr;

	if (!Default)
		Default = static_cast<UBTDecorator_GbxCondition*>(UBTDecorator_GbxCondition::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BTTask_PlayGbxAction
// (None)

class UClass* UBTTask_PlayGbxAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BTTask_PlayGbxAction");

	return Clss;
}


// BTTask_PlayGbxAction GbxGameSystemCore.Default__BTTask_PlayGbxAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UBTTask_PlayGbxAction* UBTTask_PlayGbxAction::GetDefaultObj()
{
	static class UBTTask_PlayGbxAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UBTTask_PlayGbxAction*>(UBTTask_PlayGbxAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CauseDamageContextSourceInterface
// (None)

class UClass* ICauseDamageContextSourceInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CauseDamageContextSourceInterface");

	return Clss;
}


// CauseDamageContextSourceInterface GbxGameSystemCore.Default__CauseDamageContextSourceInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ICauseDamageContextSourceInterface* ICauseDamageContextSourceInterface::GetDefaultObj()
{
	static class ICauseDamageContextSourceInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ICauseDamageContextSourceInterface*>(ICauseDamageContextSourceInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeConditionData
// (None)

class UClass* UChallengeConditionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeConditionData");

	return Clss;
}


// ChallengeConditionData GbxGameSystemCore.Default__ChallengeConditionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeConditionData* UChallengeConditionData::GetDefaultObj()
{
	static class UChallengeConditionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeConditionData*>(UChallengeConditionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeLevelActorComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UChallengeLevelActorComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeLevelActorComponent");

	return Clss;
}


// ChallengeLevelActorComponent GbxGameSystemCore.Default__ChallengeLevelActorComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeLevelActorComponent* UChallengeLevelActorComponent::GetDefaultObj()
{
	static class UChallengeLevelActorComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeLevelActorComponent*>(UChallengeLevelActorComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.SetIsStationary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bInIsStationary                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::SetIsStationary(bool bInIsStationary)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "SetIsStationary");

	Params::UChallengeLevelActorComponent_SetIsStationary_Params Parms{};

	Parms.bInIsStationary = bInIsStationary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.SetInWorldIconEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::SetInWorldIconEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "SetInWorldIconEnabled");

	Params::UChallengeLevelActorComponent_SetInWorldIconEnabled_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_IsStationary
// (Final, Native, Private)
// Parameters:
// bool                               bOldIsStationary                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::OnRep_IsStationary(bool bOldIsStationary)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_IsStationary");

	Params::UChallengeLevelActorComponent_OnRep_IsStationary_Params Parms{};

	Parms.bOldIsStationary = bOldIsStationary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_InWorldIconEnabled
// (Final, Native, Private)
// Parameters:
// bool                               bOldEnabled                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::OnRep_InWorldIconEnabled(bool bOldEnabled)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_InWorldIconEnabled");

	Params::UChallengeLevelActorComponent_OnRep_InWorldIconEnabled_Params Parms{};

	Parms.bOldEnabled = bOldEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_ChallengeReference
// (Final, Native, Private)
// Parameters:

void UChallengeLevelActorComponent::OnRep_ChallengeReference()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_ChallengeReference");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.HandleAttachmentChanged
// (Final, Native, Private)
// Parameters:

void UChallengeLevelActorComponent::HandleAttachmentChanged()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "HandleAttachmentChanged");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.GetAssociatedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UChallengeLevelActorComponent::GetAssociatedActor()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "GetAssociatedActor");

	Params::UChallengeLevelActorComponent_GetAssociatedActor_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.ChallengeLevelParentComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UChallengeLevelParentComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeLevelParentComponent");

	return Clss;
}


// ChallengeLevelParentComponent GbxGameSystemCore.Default__ChallengeLevelParentComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeLevelParentComponent* UChallengeLevelParentComponent::GetDefaultObj()
{
	static class UChallengeLevelParentComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeLevelParentComponent*>(UChallengeLevelParentComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.RemoveAssociatedActorComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UChallengeLevelActorComponent*AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::RemoveAssociatedActorComponent(class UChallengeLevelActorComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "RemoveAssociatedActorComponent");

	Params::UChallengeLevelParentComponent_RemoveAssociatedActorComponent_Params Parms{};

	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.RemoveAssociatedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      AssociatedActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::RemoveAssociatedActor(class AActor* AssociatedActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "RemoveAssociatedActor");

	Params::UChallengeLevelParentComponent_RemoveAssociatedActor_Params Parms{};

	Parms.AssociatedActor = AssociatedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.ClearAssociatedActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UChallengeLevelParentComponent::ClearAssociatedActors()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "ClearAssociatedActors");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.AddAssociatedActor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      AssociatedActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UChallengeLevelActorComponent>ComponentClass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     RelativeOffset                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::AddAssociatedActor(class AActor* AssociatedActor, TSubclassOf<class UChallengeLevelActorComponent> ComponentClass, const struct FVector& RelativeOffset)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "AddAssociatedActor");

	Params::UChallengeLevelParentComponent_AddAssociatedActor_Params Parms{};

	Parms.AssociatedActor = AssociatedActor;
	Parms.ComponentClass = ComponentClass;
	Parms.RelativeOffset = RelativeOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ChallengeObserverInterface
// (None)

class UClass* IChallengeObserverInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeObserverInterface");

	return Clss;
}


// ChallengeObserverInterface GbxGameSystemCore.Default__ChallengeObserverInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IChallengeObserverInterface* IChallengeObserverInterface::GetDefaultObj()
{
	static class IChallengeObserverInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IChallengeObserverInterface*>(IChallengeObserverInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeRewardData
// (None)

class UClass* UChallengeRewardData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeRewardData");

	return Clss;
}


// ChallengeRewardData GbxGameSystemCore.Default__ChallengeRewardData
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeRewardData* UChallengeRewardData::GetDefaultObj()
{
	static class UChallengeRewardData* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeRewardData*>(UChallengeRewardData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ChallengeSystemSettings
// (None)

class UClass* UChallengeSystemSettings::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ChallengeSystemSettings");

	return Clss;
}


// ChallengeSystemSettings GbxGameSystemCore.Default__ChallengeSystemSettings
// (Public, ClassDefaultObject, ArchetypeObject)

class UChallengeSystemSettings* UChallengeSystemSettings::GetDefaultObj()
{
	static class UChallengeSystemSettings* Default = nullptr;

	if (!Default)
		Default = static_cast<UChallengeSystemSettings*>(UChallengeSystemSettings::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CharacterBestTargetAttributeContextResolver
// (None)

class UClass* UCharacterBestTargetAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CharacterBestTargetAttributeContextResolver");

	return Clss;
}


// CharacterBestTargetAttributeContextResolver GbxGameSystemCore.Default__CharacterBestTargetAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UCharacterBestTargetAttributeContextResolver* UCharacterBestTargetAttributeContextResolver::GetDefaultObj()
{
	static class UCharacterBestTargetAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UCharacterBestTargetAttributeContextResolver*>(UCharacterBestTargetAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CharacterMovementAttributeValueResolver
// (None)

class UClass* UCharacterMovementAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CharacterMovementAttributeValueResolver");

	return Clss;
}


// CharacterMovementAttributeValueResolver GbxGameSystemCore.Default__CharacterMovementAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UCharacterMovementAttributeValueResolver* UCharacterMovementAttributeValueResolver::GetDefaultObj()
{
	static class UCharacterMovementAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UCharacterMovementAttributeValueResolver*>(UCharacterMovementAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CinematicModeBlueprintLibrary
// (None)

class UClass* UCinematicModeBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CinematicModeBlueprintLibrary");

	return Clss;
}


// CinematicModeBlueprintLibrary GbxGameSystemCore.Default__CinematicModeBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UCinematicModeBlueprintLibrary* UCinematicModeBlueprintLibrary::GetDefaultObj()
{
	static class UCinematicModeBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UCinematicModeBlueprintLibrary*>(UCinematicModeBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.PushCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::PushCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("CinematicModeBlueprintLibrary", "PushCinematicMode");

	Params::UCinematicModeBlueprintLibrary_PushCinematicMode_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.PopCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::PopCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("CinematicModeBlueprintLibrary", "PopCinematicMode");

	Params::UCinematicModeBlueprintLibrary_PopCinematicMode_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.ClearCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::ClearCinematicMode(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("CinematicModeBlueprintLibrary", "ClearCinematicMode");

	Params::UCinematicModeBlueprintLibrary_ClearCinematicMode_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.ClearAndSetCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*          InCinematicMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::ClearAndSetCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("CinematicModeBlueprintLibrary", "ClearAndSetCinematicMode");

	Params::UCinematicModeBlueprintLibrary_ClearAndSetCinematicMode_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ClothManagerInterface
// (Actor)

class UClass* AClothManagerInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ClothManagerInterface");

	return Clss;
}


// ClothManagerInterface GbxGameSystemCore.Default__ClothManagerInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class AClothManagerInterface* AClothManagerInterface::GetDefaultObj()
{
	static class AClothManagerInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<AClothManagerInterface*>(AClothManagerInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.Beacon
// (Actor)

class UClass* ABeacon::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("Beacon");

	return Clss;
}


// Beacon GbxGameSystemCore.Default__Beacon
// (Public, ClassDefaultObject, ArchetypeObject)

class ABeacon* ABeacon::GetDefaultObj()
{
	static class ABeacon* Default = nullptr;

	if (!Default)
		Default = static_cast<ABeacon*>(ABeacon::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.Beacon.OnBeaconSourceEndPlay
// (Final, Native, Public)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EEndPlayReason          EndPlayReason                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABeacon::OnBeaconSourceEndPlay(class AActor* Actor, enum class EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("Beacon", "OnBeaconSourceEndPlay");

	Params::ABeacon_OnBeaconSourceEndPlay_Params Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ConditionalAttributeValueResolver
// (None)

class UClass* UConditionalAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalAttributeValueResolver");

	return Clss;
}


// ConditionalAttributeValueResolver GbxGameSystemCore.Default__ConditionalAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalAttributeValueResolver* UConditionalAttributeValueResolver::GetDefaultObj()
{
	static class UConditionalAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalAttributeValueResolver*>(UConditionalAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConditionalDamageModifier
// (None)

class UClass* UConditionalDamageModifier::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalDamageModifier");

	return Clss;
}


// ConditionalDamageModifier GbxGameSystemCore.Default__ConditionalDamageModifier
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalDamageModifier* UConditionalDamageModifier::GetDefaultObj()
{
	static class UConditionalDamageModifier* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalDamageModifier*>(UConditionalDamageModifier::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConditionalDamageCriticalModifier
// (None)

class UClass* UConditionalDamageCriticalModifier::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalDamageCriticalModifier");

	return Clss;
}


// ConditionalDamageCriticalModifier GbxGameSystemCore.Default__ConditionalDamageCriticalModifier
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalDamageCriticalModifier* UConditionalDamageCriticalModifier::GetDefaultObj()
{
	static class UConditionalDamageCriticalModifier* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalDamageCriticalModifier*>(UConditionalDamageCriticalModifier::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConditionalDamageHitRegionModifier
// (None)

class UClass* UConditionalDamageHitRegionModifier::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalDamageHitRegionModifier");

	return Clss;
}


// ConditionalDamageHitRegionModifier GbxGameSystemCore.Default__ConditionalDamageHitRegionModifier
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalDamageHitRegionModifier* UConditionalDamageHitRegionModifier::GetDefaultObj()
{
	static class UConditionalDamageHitRegionModifier* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalDamageHitRegionModifier*>(UConditionalDamageHitRegionModifier::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConditionalDamageTypeModifier
// (None)

class UClass* UConditionalDamageTypeModifier::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalDamageTypeModifier");

	return Clss;
}


// ConditionalDamageTypeModifier GbxGameSystemCore.Default__ConditionalDamageTypeModifier
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalDamageTypeModifier* UConditionalDamageTypeModifier::GetDefaultObj()
{
	static class UConditionalDamageTypeModifier* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalDamageTypeModifier*>(UConditionalDamageTypeModifier::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConditionalDamageValueModifier
// (None)

class UClass* UConditionalDamageValueModifier::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConditionalDamageValueModifier");

	return Clss;
}


// ConditionalDamageValueModifier GbxGameSystemCore.Default__ConditionalDamageValueModifier
// (Public, ClassDefaultObject, ArchetypeObject)

class UConditionalDamageValueModifier* UConditionalDamageValueModifier::GetDefaultObj()
{
	static class UConditionalDamageValueModifier* Default = nullptr;

	if (!Default)
		Default = static_cast<UConditionalDamageValueModifier*>(UConditionalDamageValueModifier::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ConstantAttributeValueResolver
// (None)

class UClass* UConstantAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ConstantAttributeValueResolver");

	return Clss;
}


// ConstantAttributeValueResolver GbxGameSystemCore.Default__ConstantAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UConstantAttributeValueResolver* UConstantAttributeValueResolver::GetDefaultObj()
{
	static class UConstantAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UConstantAttributeValueResolver*>(UConstantAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ControlledMoveFunctionLibrary
// (None)

class UClass* UControlledMoveFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ControlledMoveFunctionLibrary");

	return Clss;
}


// ControlledMoveFunctionLibrary GbxGameSystemCore.Default__ControlledMoveFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UControlledMoveFunctionLibrary* UControlledMoveFunctionLibrary::GetDefaultObj()
{
	static class UControlledMoveFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UControlledMoveFunctionLibrary*>(UControlledMoveFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.StopControlledMove
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bZeroVelocity                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInterrupted                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMoveFunctionLibrary::StopControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove, bool bZeroVelocity, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMoveFunctionLibrary", "StopControlledMove");

	Params::UControlledMoveFunctionLibrary_StopControlledMove_Params Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;
	Parms.bZeroVelocity = bZeroVelocity;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.StartControlledMove
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              SpeedOverride                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DurationOverride                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LaunchAngleOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetLocation                                                   (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::StartControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove, class AActor* Instigator, float SpeedOverride, float DurationOverride, float LaunchAngleOverride, class AActor* TargetActor, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMoveFunctionLibrary", "StartControlledMove");

	Params::UControlledMoveFunctionLibrary_StartControlledMove_Params Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;
	Parms.Instigator = Instigator;
	Parms.SpeedOverride = SpeedOverride;
	Parms.DurationOverride = DurationOverride;
	Parms.LaunchAngleOverride = LaunchAngleOverride;
	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = TargetLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.IsPerformingSpecificControlledMove
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove> ControlledMove                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::IsPerformingSpecificControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMoveFunctionLibrary", "IsPerformingSpecificControlledMove");

	Params::UControlledMoveFunctionLibrary_IsPerformingSpecificControlledMove_Params Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.IsPerformingControlledMove
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::IsPerformingControlledMove(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ControlledMoveFunctionLibrary", "IsPerformingControlledMove");

	Params::UControlledMoveFunctionLibrary_IsPerformingControlledMove_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.ControllerAttributeContextResolver
// (None)

class UClass* UControllerAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ControllerAttributeContextResolver");

	return Clss;
}


// ControllerAttributeContextResolver GbxGameSystemCore.Default__ControllerAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UControllerAttributeContextResolver* UControllerAttributeContextResolver::GetDefaultObj()
{
	static class UControllerAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UControllerAttributeContextResolver*>(UControllerAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CoordinatedEffectBlueprintLibrary
// (None)

class UClass* UCoordinatedEffectBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CoordinatedEffectBlueprintLibrary");

	return Clss;
}


// CoordinatedEffectBlueprintLibrary GbxGameSystemCore.Default__CoordinatedEffectBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UCoordinatedEffectBlueprintLibrary* UCoordinatedEffectBlueprintLibrary::GetDefaultObj()
{
	static class UCoordinatedEffectBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UCoordinatedEffectBlueprintLibrary*>(UCoordinatedEffectBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.CoordinatedEffectBlueprintLibrary.GetOriginalOverrideMaterialAtIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMeshComponent*              MeshComponent                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Index                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OutActualIndex                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*          ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UCoordinatedEffectBlueprintLibrary::GetOriginalOverrideMaterialAtIndex(class UMeshComponent* MeshComponent, int32 Index, int32* OutActualIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("CoordinatedEffectBlueprintLibrary", "GetOriginalOverrideMaterialAtIndex");

	Params::UCoordinatedEffectBlueprintLibrary_GetOriginalOverrideMaterialAtIndex_Params Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.Index = Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutActualIndex != nullptr)
		*OutActualIndex = Parms.OutActualIndex;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.DamageableInterface
// (None)

class UClass* IDamageableInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageableInterface");

	return Clss;
}


// DamageableInterface GbxGameSystemCore.Default__DamageableInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IDamageableInterface* IDamageableInterface::GetDefaultObj()
{
	static class IDamageableInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IDamageableInterface*>(IDamageableInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType
// (None)

class UClass* UDamageAreaType::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType");

	return Clss;
}


// DamageAreaType GbxGameSystemCore.Default__DamageAreaType
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType* UDamageAreaType::GetDefaultObj()
{
	static class UDamageAreaType* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType*>(UDamageAreaType::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_BaseRound
// (None)

class UClass* UDamageAreaType_BaseRound::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_BaseRound");

	return Clss;
}


// DamageAreaType_BaseRound GbxGameSystemCore.Default__DamageAreaType_BaseRound
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_BaseRound* UDamageAreaType_BaseRound::GetDefaultObj()
{
	static class UDamageAreaType_BaseRound* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_BaseRound*>(UDamageAreaType_BaseRound::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_Sphere
// (None)

class UClass* UDamageAreaType_Sphere::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_Sphere");

	return Clss;
}


// DamageAreaType_Sphere GbxGameSystemCore.Default__DamageAreaType_Sphere
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_Sphere* UDamageAreaType_Sphere::GetDefaultObj()
{
	static class UDamageAreaType_Sphere* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_Sphere*>(UDamageAreaType_Sphere::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_Cylinder
// (None)

class UClass* UDamageAreaType_Cylinder::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_Cylinder");

	return Clss;
}


// DamageAreaType_Cylinder GbxGameSystemCore.Default__DamageAreaType_Cylinder
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_Cylinder* UDamageAreaType_Cylinder::GetDefaultObj()
{
	static class UDamageAreaType_Cylinder* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_Cylinder*>(UDamageAreaType_Cylinder::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_Cone
// (None)

class UClass* UDamageAreaType_Cone::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_Cone");

	return Clss;
}


// DamageAreaType_Cone GbxGameSystemCore.Default__DamageAreaType_Cone
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_Cone* UDamageAreaType_Cone::GetDefaultObj()
{
	static class UDamageAreaType_Cone* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_Cone*>(UDamageAreaType_Cone::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_Box
// (None)

class UClass* UDamageAreaType_Box::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_Box");

	return Clss;
}


// DamageAreaType_Box GbxGameSystemCore.Default__DamageAreaType_Box
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_Box* UDamageAreaType_Box::GetDefaultObj()
{
	static class UDamageAreaType_Box* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_Box*>(UDamageAreaType_Box::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAreaType_Capsule
// (None)

class UClass* UDamageAreaType_Capsule::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAreaType_Capsule");

	return Clss;
}


// DamageAreaType_Capsule GbxGameSystemCore.Default__DamageAreaType_Capsule
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAreaType_Capsule* UDamageAreaType_Capsule::GetDefaultObj()
{
	static class UDamageAreaType_Capsule* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAreaType_Capsule*>(UDamageAreaType_Capsule::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageAsyncManager
// (None)

class UClass* UDamageAsyncManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageAsyncManager");

	return Clss;
}


// DamageAsyncManager GbxGameSystemCore.Default__DamageAsyncManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageAsyncManager* UDamageAsyncManager::GetDefaultObj()
{
	static class UDamageAsyncManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageAsyncManager*>(UDamageAsyncManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.CritSourceValueResolver
// (None)

class UClass* UCritSourceValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("CritSourceValueResolver");

	return Clss;
}


// CritSourceValueResolver GbxGameSystemCore.Default__CritSourceValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UCritSourceValueResolver* UCritSourceValueResolver::GetDefaultObj()
{
	static class UCritSourceValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UCritSourceValueResolver*>(UCritSourceValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageCauserInterface
// (None)

class UClass* IDamageCauserInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageCauserInterface");

	return Clss;
}


// DamageCauserInterface GbxGameSystemCore.Default__DamageCauserInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IDamageCauserInterface* IDamageCauserInterface::GetDefaultObj()
{
	static class IDamageCauserInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IDamageCauserInterface*>(IDamageCauserInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DamageStatics
// (None)

class UClass* UDamageStatics::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageStatics");

	return Clss;
}


// DamageStatics GbxGameSystemCore.Default__DamageStatics
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageStatics* UDamageStatics::GetDefaultObj()
{
	static class UDamageStatics* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageStatics*>(UDamageStatics::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageStatics.StopCausingDamageToTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageTarget                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>     DamageData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingDamageToTarget(class AActor* DamageCauser, class AActor* DamageTarget, TSubclassOf<class UDamageData> DamageData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "StopCausingDamageToTarget");

	Params::UDamageStatics_StopCausingDamageToTarget_Params Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.DamageData = DamageData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.StopCausingDamageBySource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      SourceActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingDamageBySource(class AActor* SourceActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "StopCausingDamageBySource");

	Params::UDamageStatics_StopCausingDamageBySource_Params Parms{};

	Parms.SourceActor = SourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.StopCausingDamage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>     DamageData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingDamage(class AActor* DamageCauser, TSubclassOf<class UDamageData> DamageData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "StopCausingDamage");

	Params::UDamageStatics_StopCausingDamage_Params Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageData = DamageData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.StopCausingAllDamage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingAllDamage(class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "StopCausingAllDamage");

	Params::UDamageStatics_StopCausingAllDamage_Params Parms{};

	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.MakePipelineDamageInput
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageReceiver                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  HitInfo                                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                     HitLocation                                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     HitDirection                                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     HitForceDirection                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection             HitForceMagnitude                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPipelineDamageInput        ReturnValue                                                      (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FPipelineDamageInput UDamageStatics::MakePipelineDamageInput(class AActor* DamageCauser, class AActor* DamageReceiver, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, struct FHitResult& HitInfo, const struct FVector& HitLocation, const struct FVector& HitDirection, const struct FVector& HitForceDirection, const struct FForceSelection& HitForceMagnitude)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "MakePipelineDamageInput");

	Params::UDamageStatics_MakePipelineDamageInput_Params Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageReceiver = DamageReceiver;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.HitInfo = HitInfo;
	Parms.HitLocation = HitLocation;
	Parms.HitDirection = HitDirection;
	Parms.HitForceDirection = HitForceDirection;
	Parms.HitForceMagnitude = HitForceMagnitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.GetSummary_ForceSelection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FForceSelection             ForceSelection                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDamageStatics::GetSummary_ForceSelection(struct FForceSelection& ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "GetSummary_ForceSelection");

	Params::UDamageStatics_GetSummary_ForceSelection_Params Parms{};

	Parms.ForceSelection = ForceSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.GetDamageTypeFromClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGbxDamageType>  DamageTypeClass                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDamageType*              ReturnValue                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDamageType* UDamageStatics::GetDamageTypeFromClass(TSubclassOf<class UGbxDamageType> DamageTypeClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "GetDamageTypeFromClass");

	Params::UDamageStatics_GetDamageTypeFromClass_Params Parms{};

	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.GetDamageSourceFromClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UDamageSource>   DamageSourceClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*               ReturnValue                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDamageSource* UDamageStatics::GetDamageSourceFromClass(TSubclassOf<class UDamageSource> DamageSourceClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "GetDamageSourceFromClass");

	Params::UDamageStatics_GetDamageSourceFromClass_Params Parms{};

	Parms.DamageSourceClass = DamageSourceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.Conv_ForceSelectionToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FForceSelection             ForceSelection                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageStatics::Conv_ForceSelectionToFloat(struct FForceSelection& ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "Conv_ForceSelectionToFloat");

	Params::UDamageStatics_Conv_ForceSelectionToFloat_Params Parms{};

	Parms.ForceSelection = ForceSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.Conv_FloatToForceSelection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                              ForceSelection                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection             ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FForceSelection UDamageStatics::Conv_FloatToForceSelection(float ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "Conv_FloatToForceSelection");

	Params::UDamageStatics_Conv_FloatToForceSelection_Params Parms{};

	Parms.ForceSelection = ForceSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageStatics.ApplyDamageInRadius
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BaseDamage                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Origin                                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Radius                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              IgnoreActors                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                 EventInstigator                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection             BaseImpactForce                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// enum class ECollisionChannel       DamagePreventionChannel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bDamageFalloff                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*    DamageModifierComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               InstigatorFeedback                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bUseInstigatorRadiusDamageScale                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamageInRadius(class UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float Radius, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* EventInstigator, const struct FForceSelection& BaseImpactForce, enum class ECollisionChannel DamagePreventionChannel, bool bDamageFalloff, class UDamageModifierComponent* DamageModifierComponent, class UFeedbackData* InstigatorFeedback, bool bUseInstigatorRadiusDamageScale)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "ApplyDamageInRadius");

	Params::UDamageStatics_ApplyDamageInRadius_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BaseDamage = BaseDamage;
	Parms.Origin = Origin;
	Parms.Radius = Radius;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.IgnoreActors = IgnoreActors;
	Parms.DamageCauser = DamageCauser;
	Parms.EventInstigator = EventInstigator;
	Parms.BaseImpactForce = BaseImpactForce;
	Parms.DamagePreventionChannel = DamagePreventionChannel;
	Parms.bDamageFalloff = bDamageFalloff;
	Parms.DamageModifierComponent = DamageModifierComponent;
	Parms.InstigatorFeedback = InstigatorFeedback;
	Parms.bUseInstigatorRadiusDamageScale = bUseInstigatorRadiusDamageScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.ApplyDamageEx
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FPipelineDamageInput        PipelineInput                                                    (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              BaseDamage                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamageEx(const struct FPipelineDamageInput& PipelineInput, float BaseDamage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "ApplyDamageEx");

	Params::UDamageStatics_ApplyDamageEx_Params Parms{};

	Parms.PipelineInput = PipelineInput;
	Parms.BaseDamage = BaseDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageStatics.ApplyDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      DamageReceiver                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BaseDamage                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>   DamageSource                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                 EventInstigator                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      DamageCauser                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamage(class AActor* DamageReceiver, float BaseDamage, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageStatics", "ApplyDamage");

	Params::UDamageStatics_ApplyDamage_Params Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.BaseDamage = BaseDamage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.DeathData
// (None)

class UClass* UDeathData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DeathData");

	return Clss;
}


// DeathData GbxGameSystemCore.Default__DeathData
// (Public, ClassDefaultObject, ArchetypeObject)

class UDeathData* UDeathData::GetDefaultObj()
{
	static class UDeathData* Default = nullptr;

	if (!Default)
		Default = static_cast<UDeathData*>(UDeathData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.Decorator
// (Actor)

class UClass* ADecorator::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("Decorator");

	return Clss;
}


// Decorator GbxGameSystemCore.Default__Decorator
// (Public, ClassDefaultObject, ArchetypeObject)

class ADecorator* ADecorator::GetDefaultObj()
{
	static class ADecorator* Default = nullptr;

	if (!Default)
		Default = static_cast<ADecorator*>(ADecorator::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DrunkenBaseMovementComponent
// (None)

class UClass* UDrunkenBaseMovementComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DrunkenBaseMovementComponent");

	return Clss;
}


// DrunkenBaseMovementComponent GbxGameSystemCore.Default__DrunkenBaseMovementComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDrunkenBaseMovementComponent* UDrunkenBaseMovementComponent::GetDefaultObj()
{
	static class UDrunkenBaseMovementComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDrunkenBaseMovementComponent*>(UDrunkenBaseMovementComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DrunkenRandomMovementComponent
// (None)

class UClass* UDrunkenRandomMovementComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DrunkenRandomMovementComponent");

	return Clss;
}


// DrunkenRandomMovementComponent GbxGameSystemCore.Default__DrunkenRandomMovementComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDrunkenRandomMovementComponent* UDrunkenRandomMovementComponent::GetDefaultObj()
{
	static class UDrunkenRandomMovementComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDrunkenRandomMovementComponent*>(UDrunkenRandomMovementComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DrunkenWaveMovementComponent
// (None)

class UClass* UDrunkenWaveMovementComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DrunkenWaveMovementComponent");

	return Clss;
}


// DrunkenWaveMovementComponent GbxGameSystemCore.Default__DrunkenWaveMovementComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDrunkenWaveMovementComponent* UDrunkenWaveMovementComponent::GetDefaultObj()
{
	static class UDrunkenWaveMovementComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDrunkenWaveMovementComponent*>(UDrunkenWaveMovementComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.DynamicPhysicalAnimationComponent
// (None)

class UClass* UDynamicPhysicalAnimationComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DynamicPhysicalAnimationComponent");

	return Clss;
}


// DynamicPhysicalAnimationComponent GbxGameSystemCore.Default__DynamicPhysicalAnimationComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UDynamicPhysicalAnimationComponent* UDynamicPhysicalAnimationComponent::GetDefaultObj()
{
	static class UDynamicPhysicalAnimationComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UDynamicPhysicalAnimationComponent*>(UDynamicPhysicalAnimationComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetStrengthMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              NewValue                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetStrengthMultiplier(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetStrengthMultiplier");

	Params::UDynamicPhysicalAnimationComponent_SetStrengthMultiplier_Params Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*      NewSkeletalMeshComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* NewSkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetSkeletalMeshComponent");

	Params::UDynamicPhysicalAnimationComponent_SetSkeletalMeshComponent_Params Parms{};

	Parms.NewSkeletalMeshComponent = NewSkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetRootMotionControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EPhysicalAnimationRootMotionControlMotionControl                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetRootMotionControl(enum class EPhysicalAnimationRootMotionControl MotionControl)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetRootMotionControl");

	Params::UDynamicPhysicalAnimationComponent_SetRootMotionControl_Params Parms{};

	Parms.MotionControl = MotionControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetHasAnimationPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bPlaying                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetHasAnimationPlaying(bool bPlaying)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetHasAnimationPlaying");

	Params::UDynamicPhysicalAnimationComponent_SetHasAnimationPlaying_Params Parms{};

	Parms.bPlaying = bPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetEnableRagdoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetEnableRagdoll(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetEnableRagdoll");

	Params::UDynamicPhysicalAnimationComponent_SetEnableRagdoll_Params Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetEnablePhysicalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnable                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BodyName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetEnablePhysicalAnimation(bool bEnable, class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetEnablePhysicalAnimation");

	Params::UDynamicPhysicalAnimationComponent_SetEnablePhysicalAnimation_Params Parms{};

	Parms.bEnable = bEnable;
	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetActiveProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicalAnimationProfileAsset*Profile                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetActiveProfile(class UPhysicalAnimationProfileAsset* Profile)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetActiveProfile");

	Params::UDynamicPhysicalAnimationComponent_SetActiveProfile_Params Parms{};

	Parms.Profile = Profile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.OnRigidBodyOverlap
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*         HitComponent                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      OtherActor                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         OtherComp                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     NormalImpulse                                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  Hit                                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::OnRigidBodyOverlap(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "OnRigidBodyOverlap");

	Params::UDynamicPhysicalAnimationComponent_OnRigidBodyOverlap_Params Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = NormalImpulse;
	Parms.Hit = Hit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.GetStrengthMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicPhysicalAnimationComponent::GetStrengthMultiplier()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "GetStrengthMultiplier");

	Params::UDynamicPhysicalAnimationComponent_GetStrengthMultiplier_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.GetRootMotionControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EPhysicalAnimationRootMotionControlReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class EPhysicalAnimationRootMotionControl UDynamicPhysicalAnimationComponent::GetRootMotionControl()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "GetRootMotionControl");

	Params::UDynamicPhysicalAnimationComponent_GetRootMotionControl_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.DetachBodyFromAllExternalRigidBodies
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                        BodyName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::DetachBodyFromAllExternalRigidBodies(class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "DetachBodyFromAllExternalRigidBodies");

	Params::UDynamicPhysicalAnimationComponent_DetachBodyFromAllExternalRigidBodies_Params Parms{};

	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.AttachBodyTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                        BodyName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AttachToComponent                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        AttachToBodyName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              VelocitySpaceBlend                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BreakForce                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::AttachBodyTo(class FName BodyName, class UPrimitiveComponent* AttachToComponent, class FName AttachToBodyName, float VelocitySpaceBlend, float BreakForce)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "AttachBodyTo");

	Params::UDynamicPhysicalAnimationComponent_AttachBodyTo_Params Parms{};

	Parms.BodyName = BodyName;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachToBodyName = AttachToBodyName;
	Parms.VelocitySpaceBlend = VelocitySpaceBlend;
	Parms.BreakForce = BreakForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.EnvQueryContext_AimStart
// (None)

class UClass* UEnvQueryContext_AimStart::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_AimStart");

	return Clss;
}


// EnvQueryContext_AimStart GbxGameSystemCore.Default__EnvQueryContext_AimStart
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_AimStart* UEnvQueryContext_AimStart::GetDefaultObj()
{
	static class UEnvQueryContext_AimStart* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_AimStart*>(UEnvQueryContext_AimStart::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_AimEnd
// (None)

class UClass* UEnvQueryContext_AimEnd::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_AimEnd");

	return Clss;
}


// EnvQueryContext_AimEnd GbxGameSystemCore.Default__EnvQueryContext_AimEnd
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_AimEnd* UEnvQueryContext_AimEnd::GetDefaultObj()
{
	static class UEnvQueryContext_AimEnd* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_AimEnd*>(UEnvQueryContext_AimEnd::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_Owner_AimStart
// (None)

class UClass* UEnvQueryContext_Owner_AimStart::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_Owner_AimStart");

	return Clss;
}


// EnvQueryContext_Owner_AimStart GbxGameSystemCore.Default__EnvQueryContext_Owner_AimStart
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_Owner_AimStart* UEnvQueryContext_Owner_AimStart::GetDefaultObj()
{
	static class UEnvQueryContext_Owner_AimStart* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_Owner_AimStart*>(UEnvQueryContext_Owner_AimStart::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_Owner_AimEnd
// (None)

class UClass* UEnvQueryContext_Owner_AimEnd::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_Owner_AimEnd");

	return Clss;
}


// EnvQueryContext_Owner_AimEnd GbxGameSystemCore.Default__EnvQueryContext_Owner_AimEnd
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_Owner_AimEnd* UEnvQueryContext_Owner_AimEnd::GetDefaultObj()
{
	static class UEnvQueryContext_Owner_AimEnd* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_Owner_AimEnd*>(UEnvQueryContext_Owner_AimEnd::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_LastResult
// (None)

class UClass* UEnvQueryContext_LastResult::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_LastResult");

	return Clss;
}


// EnvQueryContext_LastResult GbxGameSystemCore.Default__EnvQueryContext_LastResult
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_LastResult* UEnvQueryContext_LastResult::GetDefaultObj()
{
	static class UEnvQueryContext_LastResult* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_LastResult*>(UEnvQueryContext_LastResult::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_Origin
// (None)

class UClass* UEnvQueryContext_Origin::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_Origin");

	return Clss;
}


// EnvQueryContext_Origin GbxGameSystemCore.Default__EnvQueryContext_Origin
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_Origin* UEnvQueryContext_Origin::GetDefaultObj()
{
	static class UEnvQueryContext_Origin* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_Origin*>(UEnvQueryContext_Origin::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_PlayerMaster
// (None)

class UClass* UEnvQueryContext_PlayerMaster::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_PlayerMaster");

	return Clss;
}


// EnvQueryContext_PlayerMaster GbxGameSystemCore.Default__EnvQueryContext_PlayerMaster
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_PlayerMaster* UEnvQueryContext_PlayerMaster::GetDefaultObj()
{
	static class UEnvQueryContext_PlayerMaster* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_PlayerMaster*>(UEnvQueryContext_PlayerMaster::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_Players
// (None)

class UClass* UEnvQueryContext_Players::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_Players");

	return Clss;
}


// EnvQueryContext_Players GbxGameSystemCore.Default__EnvQueryContext_Players
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_Players* UEnvQueryContext_Players::GetDefaultObj()
{
	static class UEnvQueryContext_Players* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_Players*>(UEnvQueryContext_Players::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_QuerierAimDirection
// (None)

class UClass* UEnvQueryContext_QuerierAimDirection::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_QuerierAimDirection");

	return Clss;
}


// EnvQueryContext_QuerierAimDirection GbxGameSystemCore.Default__EnvQueryContext_QuerierAimDirection
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_QuerierAimDirection* UEnvQueryContext_QuerierAimDirection::GetDefaultObj()
{
	static class UEnvQueryContext_QuerierAimDirection* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_QuerierAimDirection*>(UEnvQueryContext_QuerierAimDirection::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_QuerierAimDirection2D
// (None)

class UClass* UEnvQueryContext_QuerierAimDirection2D::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_QuerierAimDirection2D");

	return Clss;
}


// EnvQueryContext_QuerierAimDirection2D GbxGameSystemCore.Default__EnvQueryContext_QuerierAimDirection2D
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_QuerierAimDirection2D* UEnvQueryContext_QuerierAimDirection2D::GetDefaultObj()
{
	static class UEnvQueryContext_QuerierAimDirection2D* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_QuerierAimDirection2D*>(UEnvQueryContext_QuerierAimDirection2D::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_QuerierAimLocation
// (None)

class UClass* UEnvQueryContext_QuerierAimLocation::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_QuerierAimLocation");

	return Clss;
}


// EnvQueryContext_QuerierAimLocation GbxGameSystemCore.Default__EnvQueryContext_QuerierAimLocation
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_QuerierAimLocation* UEnvQueryContext_QuerierAimLocation::GetDefaultObj()
{
	static class UEnvQueryContext_QuerierAimLocation* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_QuerierAimLocation*>(UEnvQueryContext_QuerierAimLocation::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_QuerierMoveDirection
// (None)

class UClass* UEnvQueryContext_QuerierMoveDirection::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_QuerierMoveDirection");

	return Clss;
}


// EnvQueryContext_QuerierMoveDirection GbxGameSystemCore.Default__EnvQueryContext_QuerierMoveDirection
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_QuerierMoveDirection* UEnvQueryContext_QuerierMoveDirection::GetDefaultObj()
{
	static class UEnvQueryContext_QuerierMoveDirection* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_QuerierMoveDirection*>(UEnvQueryContext_QuerierMoveDirection::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_TargetNavLocation
// (None)

class UClass* UEnvQueryContext_TargetNavLocation::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_TargetNavLocation");

	return Clss;
}


// EnvQueryContext_TargetNavLocation GbxGameSystemCore.Default__EnvQueryContext_TargetNavLocation
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_TargetNavLocation* UEnvQueryContext_TargetNavLocation::GetDefaultObj()
{
	static class UEnvQueryContext_TargetNavLocation* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_TargetNavLocation*>(UEnvQueryContext_TargetNavLocation::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryGenerator_TargetActorInfo
// (None)

class UClass* UEnvQueryGenerator_TargetActorInfo::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryGenerator_TargetActorInfo");

	return Clss;
}


// EnvQueryGenerator_TargetActorInfo GbxGameSystemCore.Default__EnvQueryGenerator_TargetActorInfo
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryGenerator_TargetActorInfo* UEnvQueryGenerator_TargetActorInfo::GetDefaultObj()
{
	static class UEnvQueryGenerator_TargetActorInfo* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryGenerator_TargetActorInfo*>(UEnvQueryGenerator_TargetActorInfo::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryItemType_Targetable
// (None)

class UClass* UEnvQueryItemType_Targetable::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryItemType_Targetable");

	return Clss;
}


// EnvQueryItemType_Targetable GbxGameSystemCore.Default__EnvQueryItemType_Targetable
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryItemType_Targetable* UEnvQueryItemType_Targetable::GetDefaultObj()
{
	static class UEnvQueryItemType_Targetable* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryItemType_Targetable*>(UEnvQueryItemType_Targetable::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryItemType_TargetActorInfo
// (None)

class UClass* UEnvQueryItemType_TargetActorInfo::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryItemType_TargetActorInfo");

	return Clss;
}


// EnvQueryItemType_TargetActorInfo GbxGameSystemCore.Default__EnvQueryItemType_TargetActorInfo
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryItemType_TargetActorInfo* UEnvQueryItemType_TargetActorInfo::GetDefaultObj()
{
	static class UEnvQueryItemType_TargetActorInfo* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryItemType_TargetActorInfo*>(UEnvQueryItemType_TargetActorInfo::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_InputTarget
// (None)

class UClass* UEnvQueryContext_InputTarget::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_InputTarget");

	return Clss;
}


// EnvQueryContext_InputTarget GbxGameSystemCore.Default__EnvQueryContext_InputTarget
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_InputTarget* UEnvQueryContext_InputTarget::GetDefaultObj()
{
	static class UEnvQueryContext_InputTarget* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_InputTarget*>(UEnvQueryContext_InputTarget::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryContext_InputTargetMoveDir
// (None)

class UClass* UEnvQueryContext_InputTargetMoveDir::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryContext_InputTargetMoveDir");

	return Clss;
}


// EnvQueryContext_InputTargetMoveDir GbxGameSystemCore.Default__EnvQueryContext_InputTargetMoveDir
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryContext_InputTargetMoveDir* UEnvQueryContext_InputTargetMoveDir::GetDefaultObj()
{
	static class UEnvQueryContext_InputTargetMoveDir* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryContext_InputTargetMoveDir*>(UEnvQueryContext_InputTargetMoveDir::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryParamsExt
// (None)

class UClass* UEnvQueryParamsExt::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryParamsExt");

	return Clss;
}


// EnvQueryParamsExt GbxGameSystemCore.Default__EnvQueryParamsExt
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryParamsExt* UEnvQueryParamsExt::GetDefaultObj()
{
	static class UEnvQueryParamsExt* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryParamsExt*>(UEnvQueryParamsExt::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForBestLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                     QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                     ResultLocation                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForBestLocation(class UObject* QueryOwner, struct FEnvQueryParams& QueryParams, struct FVector* ResultLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "RunEnvQueryForBestLocation");

	Params::UEnvQueryParamsExt_RunEnvQueryForBestLocation_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultLocation != nullptr)
		*ResultLocation = std::move(Parms.ResultLocation);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForBestActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                      ResultActor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForBestActor(class UObject* QueryOwner, struct FEnvQueryParams& QueryParams, class AActor** ResultActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "RunEnvQueryForBestActor");

	Params::UEnvQueryParamsExt_RunEnvQueryForBestActor_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultActor != nullptr)
		*ResultActor = Parms.ResultActor;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForAllLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FVector>             ResultLocations                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForAllLocations(class UObject* QueryOwner, struct FEnvQueryParams& QueryParams, TArray<struct FVector>* ResultLocations)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "RunEnvQueryForAllLocations");

	Params::UEnvQueryParamsExt_RunEnvQueryForAllLocations_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultLocations != nullptr)
		*ResultLocations = std::move(Parms.ResultLocations);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForAllActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AActor*>              ResultActors                                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForAllActors(class UObject* QueryOwner, struct FEnvQueryParams& QueryParams, TArray<class AActor*>* ResultActors)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "RunEnvQueryForAllActors");

	Params::UEnvQueryParamsExt_RunEnvQueryForAllActors_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultActors != nullptr)
		*ResultActors = std::move(Parms.ResultActors);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EnvQueryParamsExt.HasQuery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::HasQuery(struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "HasQuery");

	Params::UEnvQueryParamsExt_HasQuery_Params Parms{};

	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.EnvQueryParamsExt.GetDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEnvQueryParamsExt::GetDescription(struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("EnvQueryParamsExt", "GetDescription");

	Params::UEnvQueryParamsExt_GetDescription_Params Parms{};

	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.EnvQueryParamsProvider
// (None)

class UClass* IEnvQueryParamsProvider::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryParamsProvider");

	return Clss;
}


// EnvQueryParamsProvider GbxGameSystemCore.Default__EnvQueryParamsProvider
// (Public, ClassDefaultObject, ArchetypeObject)

class IEnvQueryParamsProvider* IEnvQueryParamsProvider::GetDefaultObj()
{
	static class IEnvQueryParamsProvider* Default = nullptr;

	if (!Default)
		Default = static_cast<IEnvQueryParamsProvider*>(IEnvQueryParamsProvider::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryTest_ProjectilesHomingTowardsTarget
// (None)

class UClass* UEnvQueryTest_ProjectilesHomingTowardsTarget::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryTest_ProjectilesHomingTowardsTarget");

	return Clss;
}


// EnvQueryTest_ProjectilesHomingTowardsTarget GbxGameSystemCore.Default__EnvQueryTest_ProjectilesHomingTowardsTarget
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryTest_ProjectilesHomingTowardsTarget* UEnvQueryTest_ProjectilesHomingTowardsTarget::GetDefaultObj()
{
	static class UEnvQueryTest_ProjectilesHomingTowardsTarget* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryTest_ProjectilesHomingTowardsTarget*>(UEnvQueryTest_ProjectilesHomingTowardsTarget::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EnvQueryTestAsset
// (None)

class UClass* UEnvQueryTestAsset::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EnvQueryTestAsset");

	return Clss;
}


// EnvQueryTestAsset GbxGameSystemCore.Default__EnvQueryTestAsset
// (Public, ClassDefaultObject, ArchetypeObject)

class UEnvQueryTestAsset* UEnvQueryTestAsset::GetDefaultObj()
{
	static class UEnvQueryTestAsset* Default = nullptr;

	if (!Default)
		Default = static_cast<UEnvQueryTestAsset*>(UEnvQueryTestAsset::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.EQSProxyInterface
// (None)

class UClass* IEQSProxyInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EQSProxyInterface");

	return Clss;
}


// EQSProxyInterface GbxGameSystemCore.Default__EQSProxyInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IEQSProxyInterface* IEQSProxyInterface::GetDefaultObj()
{
	static class IEQSProxyInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IEQSProxyInterface*>(IEQSProxyInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ExplosionBlueprintLibrary
// (None)

class UClass* UExplosionBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ExplosionBlueprintLibrary");

	return Clss;
}


// ExplosionBlueprintLibrary GbxGameSystemCore.Default__ExplosionBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UExplosionBlueprintLibrary* UExplosionBlueprintLibrary::GetDefaultObj()
{
	static class UExplosionBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UExplosionBlueprintLibrary*>(UExplosionBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ExplosionBlueprintLibrary.PlayExplosion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UExplosionData*              ExplosionData                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Size                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ExplosionLocation                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>     DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent*    ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystemComponent* UExplosionBlueprintLibrary::PlayExplosion(class UExplosionData* ExplosionData, float Size, const struct FVector& ExplosionLocation, class UObject* Context, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ExplosionBlueprintLibrary", "PlayExplosion");

	Params::UExplosionBlueprintLibrary_PlayExplosion_Params Parms{};

	Parms.ExplosionData = ExplosionData;
	Parms.Size = Size;
	Parms.ExplosionLocation = ExplosionLocation;
	Parms.Context = Context;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.DamageInfoFunctionLibrary
// (None)

class UClass* UDamageInfoFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("DamageInfoFunctionLibrary");

	return Clss;
}


// DamageInfoFunctionLibrary GbxGameSystemCore.Default__DamageInfoFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UDamageInfoFunctionLibrary* UDamageInfoFunctionLibrary::GetDefaultObj()
{
	static class UDamageInfoFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UDamageInfoFunctionLibrary*>(UDamageInfoFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetImpactForce
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              InImpactForce                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetImpactForce(struct FDamageInfo& DamageInfo, float InImpactForce)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetImpactForce");

	Params::UDamageInfoFunctionLibrary_SetImpactForce_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InImpactForce = InImpactForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  InDamageType                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageType(struct FDamageInfo& DamageInfo, TSubclassOf<class UGbxDamageType> InDamageType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamageType");

	Params::UDamageInfoFunctionLibrary_SetDamageType_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InDamageType = InDamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageSource
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>   InDamageSource                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageSource(struct FDamageInfo& DamageInfo, TSubclassOf<class UDamageSource> InDamageSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamageSource");

	Params::UDamageInfoFunctionLibrary_SetDamageSource_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InDamageSource = InDamageSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageRadius
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              InDamageRadius                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageRadius(struct FDamageInfo& DamageInfo, float InDamageRadius)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamageRadius");

	Params::UDamageInfoFunctionLibrary_SetDamageRadius_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InDamageRadius = InDamageRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageModifierComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*    InModifierComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageModifierComponent(struct FDamageInfo& DamageInfo, class UDamageModifierComponent* InModifierComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamageModifierComponent");

	Params::UDamageInfoFunctionLibrary_SetDamageModifierComponent_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InModifierComponent = InModifierComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageCauser
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                      InDamageCauser                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageCauser(struct FDamageInfo& DamageInfo, class AActor* InDamageCauser)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamageCauser");

	Params::UDamageInfoFunctionLibrary_SetDamageCauser_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InDamageCauser = InDamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              InDamage                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamage(struct FDamageInfo& DamageInfo, float InDamage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetDamage");

	Params::UDamageInfoFunctionLibrary_SetDamage_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.InDamage = InDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetCriticalHitDamageOverrides
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FCriticalHitDamageOverrides Overrides                                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetCriticalHitDamageOverrides(struct FDamageInfo& DamageInfo, struct FCriticalHitDamageOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetCriticalHitDamageOverrides");

	Params::UDamageInfoFunctionLibrary_SetCriticalHitDamageOverrides_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.Overrides = Overrides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetApplyCriticalHitModsToAoEDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               bApplyCriticalHitModsToAoEDamage                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetApplyCriticalHitModsToAoEDamage(struct FDamageInfo& DamageInfo, bool bApplyCriticalHitModsToAoEDamage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "SetApplyCriticalHitModsToAoEDamage");

	Params::UDamageInfoFunctionLibrary_SetApplyCriticalHitModsToAoEDamage_Params Parms{};

	Parms.DamageInfo = DamageInfo;
	Parms.bApplyCriticalHitModsToAoEDamage = bApplyCriticalHitModsToAoEDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetImpactForce
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetImpactForce(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetImpactForce");

	Params::UDamageInfoFunctionLibrary_GetImpactForce_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxDamageType> UDamageInfoFunctionLibrary::GetDamageType(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamageType");

	Params::UDamageInfoFunctionLibrary_GetDamageType_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageSource
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>   ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UDamageSource> UDamageInfoFunctionLibrary::GetDamageSource(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamageSource");

	Params::UDamageInfoFunctionLibrary_GetDamageSource_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageRadius
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetDamageRadius(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamageRadius");

	Params::UDamageInfoFunctionLibrary_GetDamageRadius_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageModifierComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*    ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDamageModifierComponent* UDamageInfoFunctionLibrary::GetDamageModifierComponent(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamageModifierComponent");

	Params::UDamageInfoFunctionLibrary_GetDamageModifierComponent_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageCauser
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UDamageInfoFunctionLibrary::GetDamageCauser(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamageCauser");

	Params::UDamageInfoFunctionLibrary_GetDamageCauser_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetDamage(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetDamage");

	Params::UDamageInfoFunctionLibrary_GetDamage_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetCriticalHitDamageOverrides
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FCriticalHitDamageOverrides ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCriticalHitDamageOverrides UDamageInfoFunctionLibrary::GetCriticalHitDamageOverrides(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetCriticalHitDamageOverrides");

	Params::UDamageInfoFunctionLibrary_GetCriticalHitDamageOverrides_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetApplyCriticalHitModsToAoEDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageInfoFunctionLibrary::GetApplyCriticalHitModsToAoEDamage(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("DamageInfoFunctionLibrary", "GetApplyCriticalHitModsToAoEDamage");

	Params::UDamageInfoFunctionLibrary_GetApplyCriticalHitModsToAoEDamage_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.ExplosionComponent
// (None)

class UClass* UExplosionComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ExplosionComponent");

	return Clss;
}


// ExplosionComponent GbxGameSystemCore.Default__ExplosionComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UExplosionComponent* UExplosionComponent::GetDefaultObj()
{
	static class UExplosionComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UExplosionComponent*>(UExplosionComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ExplosionComponent.SetExplosionLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     NewLocation                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExplosionComponent::SetExplosionLocation(struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ExplosionComponent", "SetExplosionLocation");

	Params::UExplosionComponent_SetExplosionLocation_Params Parms{};

	Parms.NewLocation = NewLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ExplosionComponent.Explode
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDamageInfo                 DamageInfo                                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UExplosionComponent::Explode(struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ExplosionComponent", "Explode");

	Params::UExplosionComponent_Explode_Params Parms{};

	Parms.DamageInfo = DamageInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ExplosionData
// (None)

class UClass* UExplosionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ExplosionData");

	return Clss;
}


// ExplosionData GbxGameSystemCore.Default__ExplosionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UExplosionData* UExplosionData::GetDefaultObj()
{
	static class UExplosionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UExplosionData*>(UExplosionData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ExplosionData.SelectExplosion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              Size                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>     DamageType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExplosionSizeProperties    ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FExplosionSizeProperties UExplosionData::SelectExplosion(float Size, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ExplosionData", "SelectExplosion");

	Params::UExplosionData_SelectExplosion_Params Parms{};

	Parms.Size = Size;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.ExplosionSizeSelectionData
// (None)

class UClass* UExplosionSizeSelectionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ExplosionSizeSelectionData");

	return Clss;
}


// ExplosionSizeSelectionData GbxGameSystemCore.Default__ExplosionSizeSelectionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UExplosionSizeSelectionData* UExplosionSizeSelectionData::GetDefaultObj()
{
	static class UExplosionSizeSelectionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UExplosionSizeSelectionData*>(UExplosionSizeSelectionData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ExplosionSizeSelectionData.GetExplosionPropertiesBySize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              Size                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExplosionSizeProperties    ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FExplosionSizeProperties UExplosionSizeSelectionData::GetExplosionPropertiesBySize(float Size)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ExplosionSizeSelectionData", "GetExplosionPropertiesBySize");

	Params::UExplosionSizeSelectionData_GetExplosionPropertiesBySize_Params Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.EyesOfDeathComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UEyesOfDeathComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("EyesOfDeathComponent");

	return Clss;
}


// EyesOfDeathComponent GbxGameSystemCore.Default__EyesOfDeathComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UEyesOfDeathComponent* UEyesOfDeathComponent::GetDefaultObj()
{
	static class UEyesOfDeathComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UEyesOfDeathComponent*>(UEyesOfDeathComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.FeedbackData
// (None)

class UClass* UFeedbackData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FeedbackData");

	return Clss;
}


// FeedbackData GbxGameSystemCore.Default__FeedbackData
// (Public, ClassDefaultObject, ArchetypeObject)

class UFeedbackData* UFeedbackData::GetDefaultObj()
{
	static class UFeedbackData* Default = nullptr;

	if (!Default)
		Default = static_cast<UFeedbackData*>(UFeedbackData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.FeedbackData.StopFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopFeedbackForAll(class UFeedbackData* FeedbackData, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "StopFeedbackForAll");

	Params::UFeedbackData_StopFeedbackForAll_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.StopFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopFeedback(class UFeedbackData* FeedbackData, class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "StopFeedback");

	Params::UFeedbackData_StopFeedback_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.StopDefaultFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopDefaultFeedbackForAll(const struct FFeedbackTableRowHandle& Feedback, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "StopDefaultFeedbackForAll");

	Params::UFeedbackData_StopDefaultFeedbackForAll_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.StopDefaultFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopDefaultFeedback(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "StopDefaultFeedback");

	Params::UFeedbackData_StopDefaultFeedback_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackForAllAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides    RangedDistanceOverrides                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackForAllAtLocation(class UFeedbackData* FeedbackData, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformFeedbackForAllAtLocation");

	Params::UFeedbackData_PerformFeedbackForAllAtLocation_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceLocation = SourceLocation;
	Parms.RangedDistanceOverrides = RangedDistanceOverrides;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackForAll(class UFeedbackData* FeedbackData, float Scale, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformFeedbackForAll");

	Params::UFeedbackData_PerformFeedbackForAll_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides    RangedDistanceOverrides                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackAtLocation(class UFeedbackData* FeedbackData, class APlayerController* Controller, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformFeedbackAtLocation");

	Params::UFeedbackData_PerformFeedbackAtLocation_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;
	Parms.SourceLocation = SourceLocation;
	Parms.RangedDistanceOverrides = RangedDistanceOverrides;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedback(class UFeedbackData* FeedbackData, class APlayerController* Controller, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformFeedback");

	Params::UFeedbackData_PerformFeedback_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackForAllAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides    RangedDistanceOverrides                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackForAllAtLocation(const struct FFeedbackTableRowHandle& Feedback, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformDefaultFeedbackForAllAtLocation");

	Params::UFeedbackData_PerformDefaultFeedbackForAllAtLocation_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.SourceLocation = SourceLocation;
	Parms.RangedDistanceOverrides = RangedDistanceOverrides;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackForAll(const struct FFeedbackTableRowHandle& Feedback, float Scale, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformDefaultFeedbackForAll");

	Params::UFeedbackData_PerformDefaultFeedbackForAll_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides    RangedDistanceOverrides                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ControllerToIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*               OverrideControllerFeedback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackAtLocation(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformDefaultFeedbackAtLocation");

	Params::UFeedbackData_PerformDefaultFeedbackAtLocation_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.Controller = Controller;
	Parms.SourceLocation = SourceLocation;
	Parms.RangedDistanceOverrides = RangedDistanceOverrides;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle     Feedback                                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*           Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedback(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "PerformDefaultFeedback");

	Params::UFeedbackData_PerformDefaultFeedback_Params Parms{};

	Parms.Feedback = Feedback;
	Parms.Controller = Controller;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FeedbackData.GetFeedbackDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFeedbackData::GetFeedbackDuration(class UFeedbackData* FeedbackData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "GetFeedbackDuration");

	Params::UFeedbackData_GetFeedbackDuration_Params Parms{};

	Parms.FeedbackData = FeedbackData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.FeedbackData.GetFeedbackDataRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFeedbackData*               FeedbackData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MinRange                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MaxRange                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::GetFeedbackDataRange(class UFeedbackData* FeedbackData, float* MinRange, float* MaxRange)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FeedbackData", "GetFeedbackDataRange");

	Params::UFeedbackData_GetFeedbackDataRange_Params Parms{};

	Parms.FeedbackData = FeedbackData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (MinRange != nullptr)
		*MinRange = Parms.MinRange;

	if (MaxRange != nullptr)
		*MaxRange = Parms.MaxRange;

}


// Class GbxGameSystemCore.FirstPersonConfigurationData
// (Actor)

class UClass* AFirstPersonConfigurationData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FirstPersonConfigurationData");

	return Clss;
}


// FirstPersonConfigurationData GbxGameSystemCore.Default__FirstPersonConfigurationData
// (Public, ClassDefaultObject, ArchetypeObject)

class AFirstPersonConfigurationData* AFirstPersonConfigurationData::GetDefaultObj()
{
	static class AFirstPersonConfigurationData* Default = nullptr;

	if (!Default)
		Default = static_cast<AFirstPersonConfigurationData*>(AFirstPersonConfigurationData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.FXVolumeManager
// (None)

class UClass* UFXVolumeManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FXVolumeManager");

	return Clss;
}


// FXVolumeManager GbxGameSystemCore.Default__FXVolumeManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UFXVolumeManager* UFXVolumeManager::GetDefaultObj()
{
	static class UFXVolumeManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UFXVolumeManager*>(UFXVolumeManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.FXVolumeManager.OnVolumeDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                      DestroyedActor                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFXVolumeManager::OnVolumeDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolumeManager", "OnVolumeDestroyed");

	Params::UFXVolumeManager_OnVolumeDestroyed_Params Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FXVolumeManager.OnPlayerDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                      DestroyedActor                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFXVolumeManager::OnPlayerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolumeManager", "OnPlayerDestroyed");

	Params::UFXVolumeManager_OnPlayerDestroyed_Params Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.FXVolume
// (Actor)

class UClass* AFXVolume::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FXVolume");

	return Clss;
}


// FXVolume GbxGameSystemCore.Default__FXVolume
// (Public, ClassDefaultObject, ArchetypeObject)

class AFXVolume* AFXVolume::GetDefaultObj()
{
	static class AFXVolume* Default = nullptr;

	if (!Default)
		Default = static_cast<AFXVolume*>(AFXVolume::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.FXVolume.SetVolumesActiveWithTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                               bWantsActive                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SearchTag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFXVolume::SetVolumesActiveWithTag(bool bWantsActive, class FName SearchTag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolume", "SetVolumesActiveWithTag");

	Params::AFXVolume_SetVolumesActiveWithTag_Params Parms{};

	Parms.bWantsActive = bWantsActive;
	Parms.SearchTag = SearchTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FXVolume.SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bNewActive                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFXVolume::SetActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolume", "SetActive");

	Params::AFXVolume_SetActive_Params Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FXVolume.OnActorLeftVolume
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*         OverlappedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Other                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         OtherComp                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OtherBodyIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFXVolume::OnActorLeftVolume(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolume", "OnActorLeftVolume");

	Params::AFXVolume_OnActorLeftVolume_Params Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.FXVolume.OnActorEnteredVolume
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*         OverlappedComp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Other                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         OtherComp                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OtherBodyIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bFromSweep                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  OverlapInfo                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFXVolume::OnActorEnteredVolume(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& OverlapInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("FXVolume", "OnActorEnteredVolume");

	Params::AFXVolume_OnActorEnteredVolume_Params Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.OverlapInfo = OverlapInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GameplayTagBasedAttributeValueResolver
// (None)

class UClass* UGameplayTagBasedAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameplayTagBasedAttributeValueResolver");

	return Clss;
}


// GameplayTagBasedAttributeValueResolver GbxGameSystemCore.Default__GameplayTagBasedAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameplayTagBasedAttributeValueResolver* UGameplayTagBasedAttributeValueResolver::GetDefaultObj()
{
	static class UGameplayTagBasedAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameplayTagBasedAttributeValueResolver*>(UGameplayTagBasedAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameplayTagContainerComponent
// (None)

class UClass* UGameplayTagContainerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameplayTagContainerComponent");

	return Clss;
}


// GameplayTagContainerComponent GbxGameSystemCore.Default__GameplayTagContainerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameplayTagContainerComponent* UGameplayTagContainerComponent::GetDefaultObj()
{
	static class UGameplayTagContainerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameplayTagContainerComponent*>(UGameplayTagContainerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameplayTagContainerComponent.GetGameplayTagContainerFromActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EContainsTagComponent   Branches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTagContainerComponent*ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTagContainerComponent* UGameplayTagContainerComponent::GetGameplayTagContainerFromActor(class AActor* Actor, enum class EContainsTagComponent* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTagContainerComponent", "GetGameplayTagContainerFromActor");

	Params::UGameplayTagContainerComponent_GetGameplayTagContainerFromActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GameplayTask_RunEnvQuery
// (None)

class UClass* UGameplayTask_RunEnvQuery::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameplayTask_RunEnvQuery");

	return Clss;
}


// GameplayTask_RunEnvQuery GbxGameSystemCore.Default__GameplayTask_RunEnvQuery
// (Public, ClassDefaultObject, ArchetypeObject, StrongRefOnFrame)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::GetDefaultObj()
{
	static class UGameplayTask_RunEnvQuery* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameplayTask_RunEnvQuery*>(UGameplayTask_RunEnvQuery::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQueryOnLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                     Location                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*   ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQueryOnLocation(class AActor* QueryOwner, struct FEnvQueryParams& QueryParams, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQueryOnLocation");

	Params::UGameplayTask_RunEnvQuery_RunEnvQueryOnLocation_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;
	Parms.Location = Location;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQueryOnActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*   ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQueryOnActor(class AActor* QueryOwner, struct FEnvQueryParams& QueryParams, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQueryOnActor");

	Params::UGameplayTask_RunEnvQuery_RunEnvQueryOnActor_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQuery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      QueryOwner                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams             QueryParams                                                      (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*   ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQuery(class AActor* QueryOwner, struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQuery");

	Params::UGameplayTask_RunEnvQuery_RunEnvQuery_Params Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = QueryParams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult             QueryResult                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>             ResultLocations                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultLocations(struct FEnvQueryResult& QueryResult, TArray<struct FVector>* ResultLocations)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "GetResultLocations");

	Params::UGameplayTask_RunEnvQuery_GetResultLocations_Params Parms{};

	Parms.QueryResult = QueryResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultLocations != nullptr)
		*ResultLocations = std::move(Parms.ResultLocations);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult             QueryResult                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                     ResultLocation                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultLocation(struct FEnvQueryResult& QueryResult, struct FVector* ResultLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "GetResultLocation");

	Params::UGameplayTask_RunEnvQuery_GetResultLocation_Params Parms{};

	Parms.QueryResult = QueryResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultLocation != nullptr)
		*ResultLocation = std::move(Parms.ResultLocation);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult             QueryResult                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>              ResultActors                                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultActors(struct FEnvQueryResult& QueryResult, TArray<class AActor*>* ResultActors)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "GetResultActors");

	Params::UGameplayTask_RunEnvQuery_GetResultActors_Params Parms{};

	Parms.QueryResult = QueryResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultActors != nullptr)
		*ResultActors = std::move(Parms.ResultActors);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult             QueryResult                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                      ResultActor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultActor(struct FEnvQueryResult& QueryResult, class AActor** ResultActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameplayTask_RunEnvQuery", "GetResultActor");

	Params::UGameplayTask_RunEnvQuery_GetResultActor_Params Parms{};

	Parms.QueryResult = QueryResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ResultActor != nullptr)
		*ResultActor = Parms.ResultActor;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GameResourceData
// (None)

class UClass* UGameResourceData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourceData");

	return Clss;
}


// GameResourceData GbxGameSystemCore.Default__GameResourceData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourceData* UGameResourceData::GetDefaultObj()
{
	static class UGameResourceData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourceData*>(UGameResourceData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolAttributePropertyValueResolver
// (None)

class UClass* UGameResourcePoolAttributePropertyValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolAttributePropertyValueResolver");

	return Clss;
}


// GameResourcePoolAttributePropertyValueResolver GbxGameSystemCore.Default__GameResourcePoolAttributePropertyValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolAttributePropertyValueResolver* UGameResourcePoolAttributePropertyValueResolver::GetDefaultObj()
{
	static class UGameResourcePoolAttributePropertyValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolAttributePropertyValueResolver*>(UGameResourcePoolAttributePropertyValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolClampedMaxValueResolver
// (None)

class UClass* UGameResourcePoolClampedMaxValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolClampedMaxValueResolver");

	return Clss;
}


// GameResourcePoolClampedMaxValueResolver GbxGameSystemCore.Default__GameResourcePoolClampedMaxValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolClampedMaxValueResolver* UGameResourcePoolClampedMaxValueResolver::GetDefaultObj()
{
	static class UGameResourcePoolClampedMaxValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolClampedMaxValueResolver*>(UGameResourcePoolClampedMaxValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolClampedValueResolver
// (None)

class UClass* UGameResourcePoolClampedValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolClampedValueResolver");

	return Clss;
}


// GameResourcePoolClampedValueResolver GbxGameSystemCore.Default__GameResourcePoolClampedValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolClampedValueResolver* UGameResourcePoolClampedValueResolver::GetDefaultObj()
{
	static class UGameResourcePoolClampedValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolClampedValueResolver*>(UGameResourcePoolClampedValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolCurrentValueResolver
// (None)

class UClass* UGameResourcePoolCurrentValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolCurrentValueResolver");

	return Clss;
}


// GameResourcePoolCurrentValueResolver GbxGameSystemCore.Default__GameResourcePoolCurrentValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolCurrentValueResolver* UGameResourcePoolCurrentValueResolver::GetDefaultObj()
{
	static class UGameResourcePoolCurrentValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolCurrentValueResolver*>(UGameResourcePoolCurrentValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolCurrentValueNoPauseOnHealResolver
// (None)

class UClass* UGameResourcePoolCurrentValueNoPauseOnHealResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolCurrentValueNoPauseOnHealResolver");

	return Clss;
}


// GameResourcePoolCurrentValueNoPauseOnHealResolver GbxGameSystemCore.Default__GameResourcePoolCurrentValueNoPauseOnHealResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolCurrentValueNoPauseOnHealResolver* UGameResourcePoolCurrentValueNoPauseOnHealResolver::GetDefaultObj()
{
	static class UGameResourcePoolCurrentValueNoPauseOnHealResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolCurrentValueNoPauseOnHealResolver*>(UGameResourcePoolCurrentValueNoPauseOnHealResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolData
// (None)

class UClass* UGameResourcePoolData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolData");

	return Clss;
}


// GameResourcePoolData GbxGameSystemCore.Default__GameResourcePoolData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolData* UGameResourcePoolData::GetDefaultObj()
{
	static class UGameResourcePoolData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolData*>(UGameResourcePoolData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameResourcePoolManagerComponent
// (None)

class UClass* UGameResourcePoolManagerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolManagerComponent");

	return Clss;
}


// GameResourcePoolManagerComponent GbxGameSystemCore.Default__GameResourcePoolManagerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolManagerComponent* UGameResourcePoolManagerComponent::GetDefaultObj()
{
	static class UGameResourcePoolManagerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolManagerComponent*>(UGameResourcePoolManagerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.RemoveResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*           InResourceData                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        DelegatePropertyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 ScriptDelegate                                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::RemoveResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName, UDelegateProperty_ ScriptDelegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "RemoveResourcePoolDelegate");

	Params::UGameResourcePoolManagerComponent_RemoveResourcePoolDelegate_Params Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;
	Parms.ScriptDelegate = ScriptDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.RecalculateAttributeInitializedPoolProperties
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:

void UGameResourcePoolManagerComponent::RecalculateAttributeInitializedPoolProperties()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "RecalculateAttributeInitializedPoolProperties");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.OnOwnerExperienceLevelChanged
// (Final, Native, Private)
// Parameters:
// int32                              OldExperienceLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::OnOwnerExperienceLevelChanged(int32 OldExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "OnOwnerExperienceLevelChanged");

	Params::UGameResourcePoolManagerComponent_OnOwnerExperienceLevelChanged_Params Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.GetResourcePoolByResource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameResourceData*           Resource                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference  ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameResourcePoolReference UGameResourcePoolManagerComponent::GetResourcePoolByResource(class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "GetResourcePoolByResource");

	Params::UGameResourcePoolManagerComponent_GetResourcePoolByResource_Params Parms{};

	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.CreatePool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameResourcePoolData*       PoolData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReinitializeExistingPool                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference  ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameResourcePoolReference UGameResourcePoolManagerComponent::CreatePool(class UGameResourcePoolData* PoolData, bool bReinitializeExistingPool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "CreatePool");

	Params::UGameResourcePoolManagerComponent_CreatePool_Params Parms{};

	Parms.PoolData = PoolData;
	Parms.bReinitializeExistingPool = bReinitializeExistingPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.ClearResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*           InResourceData                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        DelegatePropertyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::ClearResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "ClearResourcePoolDelegate");

	Params::UGameResourcePoolManagerComponent_ClearResourcePoolDelegate_Params Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.AddResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*           InResourceData                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        DelegatePropertyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 ScriptDelegate                                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::AddResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName, UDelegateProperty_ ScriptDelegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "AddResourcePoolDelegate");

	Params::UGameResourcePoolManagerComponent_AddResourcePoolDelegate_Params Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;
	Parms.ScriptDelegate = ScriptDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GameResourcePoolFunctionLibrary
// (None)

class UClass* UGameResourcePoolFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameResourcePoolFunctionLibrary");

	return Clss;
}


// GameResourcePoolFunctionLibrary GbxGameSystemCore.Default__GameResourcePoolFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameResourcePoolFunctionLibrary* UGameResourcePoolFunctionLibrary::GetDefaultObj()
{
	static class UGameResourcePoolFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameResourcePoolFunctionLibrary*>(UGameResourcePoolFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.SetResourcePoolValue
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              InValue                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::SetResourcePoolValue(const struct FGameResourcePoolReference& InPool, float InValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "SetResourcePoolValue");

	Params::UGameResourcePoolFunctionLibrary_SetResourcePoolValue_Params Parms{};

	Parms.InPool = InPool;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ResetResourcePoolRegenDelayByGameResourceData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameResourceData*           Resource                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ResetResourcePoolRegenDelayByGameResourceData(class AActor* Actor, class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "ResetResourcePoolRegenDelayByGameResourceData");

	Params::UGameResourcePoolFunctionLibrary_ResetResourcePoolRegenDelayByGameResourceData_Params Parms{};

	Parms.Actor = Actor;
	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ResetResourcePoolRegenDelay
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ResetResourcePoolRegenDelay(const struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "ResetResourcePoolRegenDelay");

	Params::UGameResourcePoolFunctionLibrary_ResetResourcePoolRegenDelay_Params Parms{};

	Parms.InPool = InPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.RefillResourcePoolByPercentage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Percentage                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MaxPercentage                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::RefillResourcePoolByPercentage(const struct FGameResourcePoolReference& InPool, float Percentage, float MaxPercentage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "RefillResourcePoolByPercentage");

	Params::UGameResourcePoolFunctionLibrary_RefillResourcePoolByPercentage_Params Parms{};

	Parms.InPool = InPool;
	Parms.Percentage = Percentage;
	Parms.MaxPercentage = MaxPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.IsResourcePoolInState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// enum class EGameResourcePoolState  InState                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::IsResourcePoolInState(const struct FGameResourcePoolReference& InPool, enum class EGameResourcePoolState InState)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "IsResourcePoolInState");

	Params::UGameResourcePoolFunctionLibrary_IsResourcePoolInState_Params Parms{};

	Parms.InPool = InPool;
	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.GetDelegatePrefixForResourceEvent
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGameResourceUserEvent      InResourceUserEvent                                              (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                        ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGameResourcePoolFunctionLibrary::GetDelegatePrefixForResourceEvent(struct FGameResourceUserEvent* InResourceUserEvent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "GetDelegatePrefixForResourceEvent");

	Params::UGameResourcePoolFunctionLibrary_GetDelegatePrefixForResourceEvent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (InResourceUserEvent != nullptr)
		*InResourceUserEvent = std::move(Parms.InResourceUserEvent);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourcePoolReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference  A                                                                (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference  B                                                                (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourcePoolReference(const struct FGameResourcePoolReference& A, const struct FGameResourcePoolReference& B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourcePoolReference");

	Params::UGameResourcePoolFunctionLibrary_EqualEqual_ResourcePoolReference_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourcePoolData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference  ResourcePoolReference                                            (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameResourcePoolData*       ResourcePoolData                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourcePoolData(const struct FGameResourcePoolReference& ResourcePoolReference, class UGameResourcePoolData* ResourcePoolData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourcePoolData");

	Params::UGameResourcePoolFunctionLibrary_EqualEqual_ResourcePoolData_Params Parms{};

	Parms.ResourcePoolReference = ResourcePoolReference;
	Parms.ResourcePoolData = ResourcePoolData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourceData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference  ResourcePoolReference                                            (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameResourceData*           ResourceData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourceData(const struct FGameResourcePoolReference& ResourcePoolReference, class UGameResourceData* ResourceData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourceData");

	Params::UGameResourcePoolFunctionLibrary_EqualEqual_ResourceData_Params Parms{};

	Parms.ResourcePoolReference = ResourcePoolReference;
	Parms.ResourceData = ResourceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.DrainResourcePoolByPercentage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Percentage                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MinPercentage                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::DrainResourcePoolByPercentage(const struct FGameResourcePoolReference& InPool, float Percentage, float MinPercentage)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "DrainResourcePoolByPercentage");

	Params::UGameResourcePoolFunctionLibrary_DrainResourcePoolByPercentage_Params Parms{};

	Parms.InPool = InPool;
	Parms.Percentage = Percentage;
	Parms.MinPercentage = MinPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.DeleteResourcePool
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::DeleteResourcePool(struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "DeleteResourcePool");

	Params::UGameResourcePoolFunctionLibrary_DeleteResourcePool_Params Parms{};

	Parms.InPool = InPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ClearResourcePoolRegenDelayByGameResourceData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameResourceData*           Resource                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ClearResourcePoolRegenDelayByGameResourceData(class AActor* Actor, class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "ClearResourcePoolRegenDelayByGameResourceData");

	Params::UGameResourcePoolFunctionLibrary_ClearResourcePoolRegenDelayByGameResourceData_Params Parms{};

	Parms.Actor = Actor;
	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ClearResourcePoolRegenDelay
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ClearResourcePoolRegenDelay(const struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "ClearResourcePoolRegenDelay");

	Params::UGameResourcePoolFunctionLibrary_ClearResourcePoolRegenDelay_Params Parms{};

	Parms.InPool = InPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.BreakResourcePoolReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               bValid                                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CurrentValue                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MinValue                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MaxValue                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::BreakResourcePoolReference(const struct FGameResourcePoolReference& InPool, bool* bValid, float* CurrentValue, float* MinValue, float* MaxValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "BreakResourcePoolReference");

	Params::UGameResourcePoolFunctionLibrary_BreakResourcePoolReference_Params Parms{};

	Parms.InPool = InPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (MinValue != nullptr)
		*MinValue = Parms.MinValue;

	if (MaxValue != nullptr)
		*MaxValue = Parms.MaxValue;

}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.AdjustResourcePoolValue
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference  InPool                                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              InValue                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::AdjustResourcePoolValue(const struct FGameResourcePoolReference& InPool, float InValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameResourcePoolFunctionLibrary", "AdjustResourcePoolValue");

	Params::UGameResourcePoolFunctionLibrary_AdjustResourcePoolValue_Params Parms{};

	Parms.InPool = InPool;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GameStatChannel
// (None)

class UClass* UGameStatChannel::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStatChannel");

	return Clss;
}


// GameStatChannel GbxGameSystemCore.Default__GameStatChannel
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameStatChannel* UGameStatChannel::GetDefaultObj()
{
	static class UGameStatChannel* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameStatChannel*>(UGameStatChannel::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameStatData
// (None)

class UClass* UGameStatData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStatData");

	return Clss;
}


// GameStatData GbxGameSystemCore.Default__GameStatData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameStatData* UGameStatData::GetDefaultObj()
{
	static class UGameStatData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameStatData*>(UGameStatData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameStateAttributeContextResolver
// (None)

class UClass* UGameStateAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStateAttributeContextResolver");

	return Clss;
}


// GameStateAttributeContextResolver GbxGameSystemCore.Default__GameStateAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameStateAttributeContextResolver* UGameStateAttributeContextResolver::GetDefaultObj()
{
	static class UGameStateAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameStateAttributeContextResolver*>(UGameStateAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameStatList
// (None)

class UClass* UGameStatList::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStatList");

	return Clss;
}


// GameStatList GbxGameSystemCore.Default__GameStatList
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameStatList* UGameStatList::GetDefaultObj()
{
	static class UGameStatList* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameStatList*>(UGameStatList::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GameStatsComponent
// (None)

class UClass* UGameStatsComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStatsComponent");

	return Clss;
}


// GameStatsComponent GbxGameSystemCore.Default__GameStatsComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGameStatsComponent* UGameStatsComponent::GetDefaultObj()
{
	static class UGameStatsComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGameStatsComponent*>(UGameStatsComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameStatsComponent.UpdateStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewValue                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStatsComponent::UpdateStat(class UGameStatData* GameStat, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsComponent", "UpdateStat");

	Params::UGameStatsComponent_UpdateStat_Params Parms{};

	Parms.GameStat = GameStat;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameStatsComponent.IncrementStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStatsComponent::IncrementStat(class UGameStatData* GameStat, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsComponent", "IncrementStat");

	Params::UGameStatsComponent_IncrementStat_Params Parms{};

	Parms.GameStat = GameStat;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameStatsComponent.GetStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGameStatsComponent::GetStatValue(class UGameStatData* GameStat)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsComponent", "GetStatValue");

	Params::UGameStatsComponent_GetStatValue_Params Parms{};

	Parms.GameStat = GameStat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GameStatsComponent.GetGameStats
// (Final, Native, Public, Const)
// Parameters:
// TArray<struct FGameStat>           ReturnValue                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

TArray<struct FGameStat> UGameStatsComponent::GetGameStats()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsComponent", "GetGameStats");

	Params::UGameStatsComponent_GetGameStats_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GameStatsManager
// (Actor)

class UClass* AGameStatsManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GameStatsManager");

	return Clss;
}


// GameStatsManager GbxGameSystemCore.Default__GameStatsManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AGameStatsManager* AGameStatsManager::GetDefaultObj()
{
	static class AGameStatsManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AGameStatsManager*>(AGameStatsManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GameStatsManager.UpdateStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      StatContext                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewValue                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStatsManager::UpdateStat(class AActor* StatContext, class UGameStatData* GameStat, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsManager", "UpdateStat");

	Params::AGameStatsManager_UpdateStat_Params Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameStatsManager.IncrementStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      StatContext                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              IncrementAmount                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStatsManager::IncrementStat(class AActor* StatContext, class UGameStatData* GameStat, int32 IncrementAmount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsManager", "IncrementStat");

	Params::AGameStatsManager_IncrementStat_Params Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;
	Parms.IncrementAmount = IncrementAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GameStatsManager.GetStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      StatContext                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               GameStat                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGameStatsManager::GetStatValue(class AActor* StatContext, class UGameStatData* GameStat)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GameStatsManager", "GetStatValue");

	Params::AGameStatsManager_GetStatValue_Params Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxAction_AICharge
// (None)

class UClass* UGbxAction_AICharge::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_AICharge");

	return Clss;
}


// GbxAction_AICharge GbxGameSystemCore.Default__GbxAction_AICharge
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_AICharge* UGbxAction_AICharge::GetDefaultObj()
{
	static class UGbxAction_AICharge* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_AICharge*>(UGbxAction_AICharge::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnStrike
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnStrike(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnStrike");

	Params::UGbxAction_AICharge_OnStrike_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_AICharge.OnStopForFriendly
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnStopForFriendly(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnStopForFriendly");

	Params::UGbxAction_AICharge_OnStopForFriendly_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_AICharge.OnReachCliff
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnReachCliff(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnReachCliff");

	Params::UGbxAction_AICharge_OnReachCliff_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_AICharge.OnMiss
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnMiss(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnMiss");

	Params::UGbxAction_AICharge_OnMiss_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_AICharge.OnLoop
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnLoop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnLoop");

	Params::UGbxAction_AICharge_OnLoop_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAction_AICharge.OnHitWall
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnHitWall(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAction_AICharge", "OnHitWall");

	Params::UGbxAction_AICharge_OnHitWall_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAction_BlueprintBase
// (None)

class UClass* UGbxAction_BlueprintBase::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_BlueprintBase");

	return Clss;
}


// GbxAction_BlueprintBase GbxGameSystemCore.Default__GbxAction_BlueprintBase
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_BlueprintBase* UGbxAction_BlueprintBase::GetDefaultObj()
{
	static class UGbxAction_BlueprintBase* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_BlueprintBase*>(UGbxAction_BlueprintBase::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_ConditionContainer
// (None)

class UClass* UGbxAction_ConditionContainer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_ConditionContainer");

	return Clss;
}


// GbxAction_ConditionContainer GbxGameSystemCore.Default__GbxAction_ConditionContainer
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_ConditionContainer* UGbxAction_ConditionContainer::GetDefaultObj()
{
	static class UGbxAction_ConditionContainer* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_ConditionContainer*>(UGbxAction_ConditionContainer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_DirectionContainer
// (None)

class UClass* UGbxAction_DirectionContainer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_DirectionContainer");

	return Clss;
}


// GbxAction_DirectionContainer GbxGameSystemCore.Default__GbxAction_DirectionContainer
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_DirectionContainer* UGbxAction_DirectionContainer::GetDefaultObj()
{
	static class UGbxAction_DirectionContainer* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_DirectionContainer*>(UGbxAction_DirectionContainer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_DodgePicker
// (None)

class UClass* UGbxAction_DodgePicker::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_DodgePicker");

	return Clss;
}


// GbxAction_DodgePicker GbxGameSystemCore.Default__GbxAction_DodgePicker
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_DodgePicker* UGbxAction_DodgePicker::GetDefaultObj()
{
	static class UGbxAction_DodgePicker* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_DodgePicker*>(UGbxAction_DodgePicker::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_DropshipSpawn
// (None)

class UClass* UGbxAction_DropshipSpawn::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_DropshipSpawn");

	return Clss;
}


// GbxAction_DropshipSpawn GbxGameSystemCore.Default__GbxAction_DropshipSpawn
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_DropshipSpawn* UGbxAction_DropshipSpawn::GetDefaultObj()
{
	static class UGbxAction_DropshipSpawn* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_DropshipSpawn*>(UGbxAction_DropshipSpawn::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_KeyedContainer
// (None)

class UClass* UGbxAction_KeyedContainer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_KeyedContainer");

	return Clss;
}


// GbxAction_KeyedContainer GbxGameSystemCore.Default__GbxAction_KeyedContainer
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_KeyedContainer* UGbxAction_KeyedContainer::GetDefaultObj()
{
	static class UGbxAction_KeyedContainer* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_KeyedContainer*>(UGbxAction_KeyedContainer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_Launch
// (None)

class UClass* UGbxAction_Launch::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_Launch");

	return Clss;
}


// GbxAction_Launch GbxGameSystemCore.Default__GbxAction_Launch
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_Launch* UGbxAction_Launch::GetDefaultObj()
{
	static class UGbxAction_Launch* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_Launch*>(UGbxAction_Launch::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.MotionMatchedAnimationTable
// (None)

class UClass* UMotionMatchedAnimationTable::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("MotionMatchedAnimationTable");

	return Clss;
}


// MotionMatchedAnimationTable GbxGameSystemCore.Default__MotionMatchedAnimationTable
// (Public, ClassDefaultObject, ArchetypeObject)

class UMotionMatchedAnimationTable* UMotionMatchedAnimationTable::GetDefaultObj()
{
	static class UMotionMatchedAnimationTable* Default = nullptr;

	if (!Default)
		Default = static_cast<UMotionMatchedAnimationTable*>(UMotionMatchedAnimationTable::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_Ragdoll
// (None)

class UClass* UGbxAction_Ragdoll::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_Ragdoll");

	return Clss;
}


// GbxAction_Ragdoll GbxGameSystemCore.Default__GbxAction_Ragdoll
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_Ragdoll* UGbxAction_Ragdoll::GetDefaultObj()
{
	static class UGbxAction_Ragdoll* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_Ragdoll*>(UGbxAction_Ragdoll::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_RandomContainer
// (None)

class UClass* UGbxAction_RandomContainer::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_RandomContainer");

	return Clss;
}


// GbxAction_RandomContainer GbxGameSystemCore.Default__GbxAction_RandomContainer
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_RandomContainer* UGbxAction_RandomContainer::GetDefaultObj()
{
	static class UGbxAction_RandomContainer* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_RandomContainer*>(UGbxAction_RandomContainer::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAction_StretchBones
// (None)

class UClass* UGbxAction_StretchBones::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAction_StretchBones");

	return Clss;
}


// GbxAction_StretchBones GbxGameSystemCore.Default__GbxAction_StretchBones
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAction_StretchBones* UGbxAction_StretchBones::GetDefaultObj()
{
	static class UGbxAction_StretchBones* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAction_StretchBones*>(UGbxAction_StretchBones::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StretchBonesBlueprintLibrary
// (None)

class UClass* UStretchBonesBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StretchBonesBlueprintLibrary");

	return Clss;
}


// StretchBonesBlueprintLibrary GbxGameSystemCore.Default__StretchBonesBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UStretchBonesBlueprintLibrary* UStretchBonesBlueprintLibrary::GetDefaultObj()
{
	static class UStretchBonesBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UStretchBonesBlueprintLibrary*>(UStretchBonesBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StretchBonesBlueprintLibrary.SetStretchBonesTarget
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetPosition                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UStretchBonesBlueprintLibrary::SetStretchBonesTarget(TArray<struct FGbxActionRegister>& GbxActionRegisters, class AActor* TargetActor, const struct FVector& TargetPosition)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StretchBonesBlueprintLibrary", "SetStretchBonesTarget");

	Params::UStretchBonesBlueprintLibrary_SetStretchBonesTarget_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.TargetActor = TargetActor;
	Parms.TargetPosition = TargetPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StretchBonesBlueprintLibrary.SetStretchBonesDistance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                              Distance                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UStretchBonesBlueprintLibrary::SetStretchBonesDistance(TArray<struct FGbxActionRegister>& GbxActionRegisters, float Distance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StretchBonesBlueprintLibrary", "SetStretchBonesDistance");

	Params::UStretchBonesBlueprintLibrary_SetStretchBonesDistance_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxActionBlueprintLibrary
// (None)

class UClass* UGbxActionBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxActionBlueprintLibrary");

	return Clss;
}


// GbxActionBlueprintLibrary GbxGameSystemCore.Default__GbxActionBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxActionBlueprintLibrary* UGbxActionBlueprintLibrary::GetDefaultObj()
{
	static class UGbxActionBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxActionBlueprintLibrary*>(UGbxActionBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopLoopingActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction_Loop> ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopLoopingActionClass(TSubclassOf<class UGbxAction_Loop> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "StopLoopingActionClass");

	Params::UGbxActionBlueprintLibrary_StopLoopingActionClass_Params Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActionSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                        ActionSlotName                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActionSlot(class FName ActionSlotName, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "StopActionSlot");

	Params::UGbxActionBlueprintLibrary_StopActionSlot_Params Parms{};

	Parms.ActionSlotName = ActionSlotName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActions(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "StopActions");

	Params::UGbxActionBlueprintLibrary_StopActions_Params Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActionClass(TSubclassOf<class UGbxAction> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "StopActionClass");

	Params::UGbxActionBlueprintLibrary_StopActionClass_Params Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetObjectGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                        RegisterKey                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicates                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetObjectGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, class UObject* Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "SetObjectGbxActionRegister");

	Params::UGbxActionBlueprintLibrary_SetObjectGbxActionRegister_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetNameGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                        RegisterKey                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicates                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetNameGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, class FName Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "SetNameGbxActionRegister");

	Params::UGbxActionBlueprintLibrary_SetNameGbxActionRegister_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetIntGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                        RegisterKey                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicates                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetIntGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, int32 Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "SetIntGbxActionRegister");

	Params::UGbxActionBlueprintLibrary_SetIntGbxActionRegister_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetFloatGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>  GbxActionRegisters                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                        RegisterKey                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicates                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetFloatGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, float Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "SetFloatGbxActionRegister");

	Params::UGbxActionBlueprintLibrary_SetFloatGbxActionRegister_Params Parms{};

	Parms.GbxActionRegisters = GbxActionRegisters;
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_UpdateActionPlayRate
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              PlayRate                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_UpdateActionPlayRate(class UGbxAction* Action, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_UpdateActionPlayRate");

	Params::UGbxActionBlueprintLibrary_K2_UpdateActionPlayRate_Params Parms{};

	Parms.Action = Action;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_UpdateActionDirection
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Direction                                                        (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_UpdateActionDirection(class UGbxAction* Action, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_UpdateActionDirection");

	Params::UGbxActionBlueprintLibrary_K2_UpdateActionDirection_Params Parms{};

	Parms.Action = Action;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_StopActionObj
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_StopActionObj(class UGbxAction* Action, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_StopActionObj");

	Params::UGbxActionBlueprintLibrary_K2_StopActionObj_Params Parms{};

	Parms.Action = Action;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ShowGbxActionScreenLogs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                               bShowLogsOnScreen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ShowGbxActionScreenLogs(bool bShowLogsOnScreen)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_ShowGbxActionScreenLogs");

	Params::UGbxActionBlueprintLibrary_K2_ShowGbxActionScreenLogs_Params Parms{};

	Parms.bShowLogsOnScreen = bShowLogsOnScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_Resume
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_Resume(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_Resume");

	Params::UGbxActionBlueprintLibrary_K2_Resume_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ReplicatedProceedToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ReplicatedProceedToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_ReplicatedProceedToNextSection");

	Params::UGbxActionBlueprintLibrary_K2_ReplicatedProceedToNextSection_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ReplicatedJumpToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ReplicatedJumpToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_ReplicatedJumpToNextSection");

	Params::UGbxActionBlueprintLibrary_K2_ReplicatedJumpToNextSection_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ProceedToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ProceedToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_ProceedToNextSection");

	Params::UGbxActionBlueprintLibrary_K2_ProceedToNextSection_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_Pause
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_Pause(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_Pause");

	Params::UGbxActionBlueprintLibrary_K2_Pause_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_JumpToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_JumpToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_JumpToNextSection");

	Params::UGbxActionBlueprintLibrary_K2_JumpToNextSection_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetTimeRemaining
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxActionBlueprintLibrary::K2_GetTimeRemaining(class UGbxAction* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_GetTimeRemaining");

	Params::UGbxActionBlueprintLibrary_K2_GetTimeRemaining_Params Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetMaxCurrentTime
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxActionBlueprintLibrary::K2_GetMaxCurrentTime(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_GetMaxCurrentTime");

	Params::UGbxActionBlueprintLibrary_K2_GetMaxCurrentTime_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetActionByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionBlueprintLibrary::K2_GetActionByClass(TSubclassOf<class UGbxAction> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "K2_GetActionByClass");

	Params::UGbxActionBlueprintLibrary_K2_GetActionByClass_Params Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.GetSummary_AnimActionDef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimActionDef              AnimActionDef                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxActionBlueprintLibrary::GetSummary_AnimActionDef(struct FAnimActionDef& AnimActionDef)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "GetSummary_AnimActionDef");

	Params::UGbxActionBlueprintLibrary_GetSummary_AnimActionDef_Params Parms{};

	Parms.AnimActionDef = AnimActionDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.GetKeyedActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                ActionKey                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxAction>      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxAction> UGbxActionBlueprintLibrary::GetKeyedActionClass(const struct FGameplayTag& ActionKey, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionBlueprintLibrary", "GetKeyedActionClass");

	Params::UGbxActionBlueprintLibrary_GetKeyedActionClass_Params Parms{};

	Parms.ActionKey = ActionKey;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxActionComponent
// (None)

class UClass* UGbxActionComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxActionComponent");

	return Clss;
}


// GbxActionComponent GbxGameSystemCore.Default__GbxActionComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxActionComponent* UGbxActionComponent::GetDefaultObj()
{
	static class UGbxActionComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxActionComponent*>(UGbxActionComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxActionComponent.UpdateActionRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FActionState_Base           ActionData                                                       (Parm, NativeAccessSpecifierPublic)

void UGbxActionComponent::UpdateActionRemoteServer(const struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "UpdateActionRemoteServer");

	Params::UGbxActionComponent_UpdateActionRemoteServer_Params Parms{};

	Parms.ActionData = ActionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.StopOnRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                              ManagerRepId                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxActionEndState      EndState                                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopOnRemoteServer(int32 ManagerRepId, enum class EGbxActionEndState& EndState)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "StopOnRemoteServer");

	Params::UGbxActionComponent_StopOnRemoteServer_Params Parms{};

	Parms.ManagerRepId = ManagerRepId;
	Parms.EndState = EndState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.StopLoopingActionClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction_Loop> ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopLoopingActionClass(TSubclassOf<class UGbxAction_Loop> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "StopLoopingActionClass");

	Params::UGbxActionComponent_StopLoopingActionClass_Params Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.StopActionSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                        ActionSlotName                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopActionSlot(class FName ActionSlotName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "StopActionSlot");

	Params::UGbxActionComponent_StopActionSlot_Params Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.StopActions
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UGbxActionComponent::StopActions()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "StopActions");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.StopActionClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopActionClass(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "StopActionClass");

	Params::UGbxActionComponent_StopActionClass_Params Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.PlayOnRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActionState_Base           ActionData                                                       (Parm, NativeAccessSpecifierPublic)

void UGbxActionComponent::PlayOnRemoteServer(TSubclassOf<class UGbxAction> ActionClass, const struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "PlayOnRemoteServer");

	Params::UGbxActionComponent_PlayOnRemoteServer_Params Parms{};

	Parms.ActionClass = ActionClass;
	Parms.ActionData = ActionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentUnregistered
// (Final, Native, Private)
// Parameters:
// class UActorComponent*             ActorComponent                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentUnregistered(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentUnregistered");

	Params::UGbxActionComponent_OnComponentUnregistered_Params Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentDetached
// (Final, Native, Private)
// Parameters:
// class USceneComponent*             SceneComponent                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentDetached(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentDetached");

	Params::UGbxActionComponent_OnComponentDetached_Params Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentAttached
// (Final, Native, Private)
// Parameters:
// class USceneComponent*             SceneComponent                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentAttached(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentAttached");

	Params::UGbxActionComponent_OnComponentAttached_Params Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.NotifyInterruptRequest
// (Final, Native, Public)
// Parameters:

void UGbxActionComponent::NotifyInterruptRequest()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "NotifyInterruptRequest");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxActionComponent.K2_Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_Play(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "K2_Play");

	Params::UGbxActionComponent_K2_Play_Params Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionComponent.K2_IsPlayingObj
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::K2_IsPlayingObj(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "K2_IsPlayingObj");

	Params::UGbxActionComponent_K2_IsPlayingObj_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionComponent.K2_GetActionBySlot
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        ActionSlotName                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_GetActionBySlot(class FName ActionSlotName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "K2_GetActionBySlot");

	Params::UGbxActionComponent_K2_GetActionBySlot_Params Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionComponent.K2_GetActionByClass
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                  ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_GetActionByClass(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "K2_GetActionByClass");

	Params::UGbxActionComponent_K2_GetActionByClass_Params Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionComponent.IsPlayingSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        ActionSlotName                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::IsPlayingSlot(class FName& ActionSlotName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "IsPlayingSlot");

	Params::UGbxActionComponent_IsPlayingSlot_Params Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxActionComponent.IsPlayingClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAction>      ActionClass                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::IsPlayingClass(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxActionComponent", "IsPlayingClass");

	Params::UGbxActionComponent_IsPlayingClass_Params Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxActionDataAsset
// (None)

class UClass* UGbxActionDataAsset::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxActionDataAsset");

	return Clss;
}


// GbxActionDataAsset GbxGameSystemCore.Default__GbxActionDataAsset
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxActionDataAsset* UGbxActionDataAsset::GetDefaultObj()
{
	static class UGbxActionDataAsset* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxActionDataAsset*>(UGbxActionDataAsset::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxActionManager
// (Actor)

class UClass* AGbxActionManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxActionManager");

	return Clss;
}


// GbxActionManager GbxGameSystemCore.Default__GbxActionManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxActionManager* AGbxActionManager::GetDefaultObj()
{
	static class AGbxActionManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxActionManager*>(AGbxActionManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAnimBlueprintProfile
// (None)

class UClass* UGbxAnimBlueprintProfile::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimBlueprintProfile");

	return Clss;
}


// GbxAnimBlueprintProfile GbxGameSystemCore.Default__GbxAnimBlueprintProfile
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimBlueprintProfile* UGbxAnimBlueprintProfile::GetDefaultObj()
{
	static class UGbxAnimBlueprintProfile* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimBlueprintProfile*>(UGbxAnimBlueprintProfile::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAnimBlueprintProfile.RebuildBoneLists
// (Final, Native, Private)
// Parameters:

void UGbxAnimBlueprintProfile::RebuildBoneLists()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAnimBlueprintProfile", "RebuildBoneLists");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAnimBlueprintProfile.AnimBlueprintImportFunction
// (Final, Native, Private)
// Parameters:
// enum class EAnimBPProfileImport    ImportType                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAnimBlueprintProfile::AnimBlueprintImportFunction(enum class EAnimBPProfileImport ImportType)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAnimBlueprintProfile", "AnimBlueprintImportFunction");

	Params::UGbxAnimBlueprintProfile_AnimBlueprintImportFunction_Params Parms{};

	Parms.ImportType = ImportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxAnimStateMachineDefinition
// (None)

class UClass* UGbxAnimStateMachineDefinition::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimStateMachineDefinition");

	return Clss;
}


// GbxAnimStateMachineDefinition GbxGameSystemCore.Default__GbxAnimStateMachineDefinition
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimStateMachineDefinition* UGbxAnimStateMachineDefinition::GetDefaultObj()
{
	static class UGbxAnimStateMachineDefinition* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimStateMachineDefinition*>(UGbxAnimStateMachineDefinition::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAnimStateManager_Falling
// (None)

class UClass* UGbxAnimStateManager_Falling::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimStateManager_Falling");

	return Clss;
}


// GbxAnimStateManager_Falling GbxGameSystemCore.Default__GbxAnimStateManager_Falling
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimStateManager_Falling* UGbxAnimStateManager_Falling::GetDefaultObj()
{
	static class UGbxAnimStateManager_Falling* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimStateManager_Falling*>(UGbxAnimStateManager_Falling::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAnimStateManager_RootMotion
// (None)

class UClass* UGbxAnimStateManager_RootMotion::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAnimStateManager_RootMotion");

	return Clss;
}


// GbxAnimStateManager_RootMotion GbxGameSystemCore.Default__GbxAnimStateManager_RootMotion
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAnimStateManager_RootMotion* UGbxAnimStateManager_RootMotion::GetDefaultObj()
{
	static class UGbxAnimStateManager_RootMotion* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAnimStateManager_RootMotion*>(UGbxAnimStateManager_RootMotion::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAttributeData
// (None)

class UClass* UGbxAttributeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeData");

	return Clss;
}


// GbxAttributeData GbxGameSystemCore.Default__GbxAttributeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeData* UGbxAttributeData::GetDefaultObj()
{
	static class UGbxAttributeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeData*>(UGbxAttributeData::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAttributeData.CanSetBaseValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanSetBaseValue()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeData", "CanSetBaseValue");

	Params::UGbxAttributeData_CanSetBaseValue_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeData.CanBindToOnChangedEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanBindToOnChangedEvent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeData", "CanBindToOnChangedEvent");

	Params::UGbxAttributeData_CanBindToOnChangedEvent_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeData.CanAddModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanAddModifiers()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeData", "CanAddModifiers");

	Params::UGbxAttributeData_CanAddModifiers_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeData.CanAddAndRemoveModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanAddAndRemoveModifiers()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeData", "CanAddAndRemoveModifiers");

	Params::UGbxAttributeData_CanAddAndRemoveModifiers_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxAttributeFunctionLibrary
// (None)

class UClass* UGbxAttributeFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeFunctionLibrary");

	return Clss;
}


// GbxAttributeFunctionLibrary GbxGameSystemCore.Default__GbxAttributeFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeFunctionLibrary* UGbxAttributeFunctionLibrary::GetDefaultObj()
{
	static class UGbxAttributeFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeFunctionLibrary*>(UGbxAttributeFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindFromOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeDelegateBindingHandleBindingHandle                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindFromOnAttributeChanged(struct FGbxAttributeDelegateBindingHandle& BindingHandle)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "UnbindFromOnAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_UnbindFromOnAttributeChanged_Params Parms{};

	Parms.BindingHandle = BindingHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindEventFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 Delegate                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindEventFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute, UDelegateProperty_& Delegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "UnbindEventFromOnIntegerAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_UnbindEventFromOnIntegerAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindEventFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 Delegate                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindEventFromOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute, UDelegateProperty_& Delegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "UnbindEventFromOnFloatAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_UnbindEventFromOnFloatAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindAllEventsFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindAllEventsFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "UnbindAllEventsFromOnIntegerAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_UnbindAllEventsFromOnIntegerAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindAllEventsFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindAllEventsFromOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "UnbindAllEventsFromOnFloatAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_UnbindAllEventsFromOnFloatAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveMultipleAttributeModifiers
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxAttributeModifierHandle>ModifierHandles                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::RemoveMultipleAttributeModifiers(TArray<struct FGbxAttributeModifierHandle>& ModifierHandles)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "RemoveMultipleAttributeModifiers");

	Params::UGbxAttributeFunctionLibrary_RemoveMultipleAttributeModifiers_Params Parms{};

	Parms.ModifierHandles = ModifierHandles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveModifierFromGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle ModifierHandle                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// enum class EGbxAttributeModifierActionExecOutputModifierActionResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::RemoveModifierFromGbxAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource, struct FGbxAttributeModifierHandle& ModifierHandle, enum class EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "RemoveModifierFromGbxAttribute");

	Params::UGbxAttributeFunctionLibrary_RemoveModifierFromGbxAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.ModifierHandle = ModifierHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveAttributeModifier
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeModifierHandle ModifierHandle                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::RemoveAttributeModifier(struct FGbxAttributeModifierHandle& ModifierHandle)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "RemoveAttributeModifier");

	Params::UGbxAttributeFunctionLibrary_RemoveAttributeModifier_Params Parms{};

	Parms.ModifierHandle = ModifierHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RefreshBindingToOnAttributeChangedEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeDelegateBindingHandleBindingHandle                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeFunctionLibrary::RefreshBindingToOnAttributeChangedEvent(struct FGbxAttributeDelegateBindingHandle& BindingHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "RefreshBindingToOnAttributeChangedEvent");

	Params::UGbxAttributeFunctionLibrary_RefreshBindingToOnAttributeChangedEvent_Params Parms{};

	Parms.BindingHandle = BindingHandle;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.MakeGbxAttributeInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                              BaseValue                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeInteger        ReturnValue                                                      (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxAttributeInteger UGbxAttributeFunctionLibrary::MakeGbxAttributeInteger(int32 BaseValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "MakeGbxAttributeInteger");

	Params::UGbxAttributeFunctionLibrary_MakeGbxAttributeInteger_Params Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.MakeGbxAttributeFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                              BaseValue                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeFloat          ReturnValue                                                      (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxAttributeFloat UGbxAttributeFunctionLibrary::MakeGbxAttributeFloat(float BaseValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "MakeGbxAttributeFloat");

	Params::UGbxAttributeFunctionLibrary_MakeGbxAttributeFloat_Params Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttributeAsInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              DefaultValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeFunctionLibrary::GetValueOfAttributeAsInteger(class UGbxAttributeData* Attribute, class UObject* ContextSource, int32 DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttributeAsInteger");

	Params::UGbxAttributeFunctionLibrary_GetValueOfAttributeAsInteger_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttributeAsBoolean
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               DefaultValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::GetValueOfAttributeAsBoolean(class UGbxAttributeData* Attribute, class UObject* ContextSource, bool DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttributeAsBoolean");

	Params::UGbxAttributeFunctionLibrary_GetValueOfAttributeAsBoolean_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DefaultValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::GetValueOfAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttribute");

	Params::UGbxAttributeFunctionLibrary_GetValueOfAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueFromAttributeDefinedRow
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableRowHandle         RowHandle                                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::GetValueFromAttributeDefinedRow(struct FDataTableRowHandle& RowHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "GetValueFromAttributeDefinedRow");

	Params::UGbxAttributeFunctionLibrary_GetValueFromAttributeDefinedRow_Params Parms{};

	Parms.RowHandle = RowHandle;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EvaluateAttributeInitializer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UAttributeInitializer>Initializer                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::EvaluateAttributeInitializer(TSubclassOf<class UAttributeInitializer> Initializer, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EvaluateAttributeInitializer");

	Params::UGbxAttributeFunctionLibrary_EvaluateAttributeInitializer_Params Parms{};

	Parms.Initializer = Initializer;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EvaluateAttributeInitializationData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAttributeInitializationDataInitializationData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::EvaluateAttributeInitializationData(struct FAttributeInitializationData& InitializationData, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EvaluateAttributeInitializationData");

	Params::UGbxAttributeFunctionLibrary_EvaluateAttributeInitializationData_Params Parms{};

	Parms.InitializationData = InitializationData;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeIntegerValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger        A                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              B                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeIntegerValue(struct FGbxAttributeInteger& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeIntegerValue");

	Params::UGbxAttributeFunctionLibrary_EqualEqual_GbxAttributeIntegerValue_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger        A                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeInteger        B                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeInteger(struct FGbxAttributeInteger& A, struct FGbxAttributeInteger& B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeInteger");

	Params::UGbxAttributeFunctionLibrary_EqualEqual_GbxAttributeInteger_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat          A                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              B                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeFloatValue(struct FGbxAttributeFloat& A, float B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeFloatValue");

	Params::UGbxAttributeFunctionLibrary_EqualEqual_GbxAttributeFloatValue_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat          A                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeFloat          B                                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeFloat(struct FGbxAttributeFloat& A, struct FGbxAttributeFloat& B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeFloat");

	Params::UGbxAttributeFunctionLibrary_EqualEqual_GbxAttributeFloat_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeModifierHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeModifierHandle Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeModifierHandleToString(struct FGbxAttributeModifierHandle& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeModifierHandleToString");

	Params::UGbxAttributeFunctionLibrary_Conv_GbxAttributeModifierHandleToString_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeIntegerToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeIntegerToString(struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeIntegerToString");

	Params::UGbxAttributeFunctionLibrary_Conv_GbxAttributeIntegerToString_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeIntegerToInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeFunctionLibrary::Conv_GbxAttributeIntegerToInteger(struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeIntegerToInteger");

	Params::UGbxAttributeFunctionLibrary_Conv_GbxAttributeIntegerToInteger_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeFloatToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeFloatToString(struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeFloatToString");

	Params::UGbxAttributeFunctionLibrary_Conv_GbxAttributeFloatToString_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeFloatToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::Conv_GbxAttributeFloatToFloat(struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeFloatToFloat");

	Params::UGbxAttributeFunctionLibrary_Conv_GbxAttributeFloatToFloat_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_AttributeInitializationDataToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAttributeInitializationDataInitData                                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_AttributeInitializationDataToString(struct FAttributeInitializationData& InitData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "Conv_AttributeInitializationDataToString");

	Params::UGbxAttributeFunctionLibrary_Conv_AttributeInitializationDataToString_Params Parms{};

	Parms.InitData = InitData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BreakGbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Value                                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              BaseValue                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BreakGbxAttributeInteger(struct FGbxAttributeInteger& Attribute, int32* Value, int32* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "BreakGbxAttributeInteger");

	Params::UGbxAttributeFunctionLibrary_BreakGbxAttributeInteger_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BreakGbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              BaseValue                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BreakGbxAttributeFloat(struct FGbxAttributeFloat& Attribute, float* Value, float* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "BreakGbxAttributeFloat");

	Params::UGbxAttributeFunctionLibrary_BreakGbxAttributeFloat_Params Parms{};

	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger        Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 Delegate                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BindEventToOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute, UDelegateProperty_& Delegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnIntegerAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_BindEventToOnIntegerAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat          Attribute                                                        (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 Delegate                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BindEventToOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute, UDelegateProperty_& Delegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnFloatAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_BindEventToOnFloatAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// UDelegateProperty_                 Delegate                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeFunctionLibrary::BindEventToOnAttributeChanged(class UGbxAttributeData* Attribute, class UObject* ContextSource, UDelegateProperty_& Delegate)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnAttributeChanged");

	Params::UGbxAttributeFunctionLibrary_BindEventToOnAttributeChanged_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyMultipleAttributeEffects
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAttributeEffectData>Effects                                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                     ModifierValueContext                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     AttributeToModifyContextSource                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxAttributeModifierHandle>ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxAttributeModifierHandle> UGbxAttributeFunctionLibrary::ApplyMultipleAttributeEffects(TArray<struct FAttributeEffectData>& Effects, class UObject* ModifierValueContext, class UObject* AttributeToModifyContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "ApplyMultipleAttributeEffects");

	Params::UGbxAttributeFunctionLibrary_ApplyMultipleAttributeEffects_Params Parms{};

	Parms.Effects = Effects;
	Parms.ModifierValueContext = ModifierValueContext;
	Parms.AttributeToModifyContextSource = AttributeToModifyContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyMultipleAttributeBaseValueData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAttributeBaseValueData>BaseValueData                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                     AttributeToSetContextSource                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ValueContext                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::ApplyMultipleAttributeBaseValueData(TArray<struct FAttributeBaseValueData>& BaseValueData, class UObject* AttributeToSetContextSource, class UObject* ValueContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "ApplyMultipleAttributeBaseValueData");

	Params::UGbxAttributeFunctionLibrary_ApplyMultipleAttributeBaseValueData_Params Parms{};

	Parms.BaseValueData = BaseValueData;
	Parms.AttributeToSetContextSource = AttributeToSetContextSource;
	Parms.ValueContext = ValueContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyAttributeEffect
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAttributeEffectData        Effect                                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     ModifierValueContext                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     AttributeToModifyContextSource                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxAttributeModifierActionExecOutputModifierActionResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeModifierHandle UGbxAttributeFunctionLibrary::ApplyAttributeEffect(struct FAttributeEffectData& Effect, class UObject* ModifierValueContext, class UObject* AttributeToModifyContextSource, enum class EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "ApplyAttributeEffect");

	Params::UGbxAttributeFunctionLibrary_ApplyAttributeEffect_Params Parms{};

	Parms.Effect = Effect;
	Parms.ModifierValueContext = ModifierValueContext;
	Parms.AttributeToModifyContextSource = AttributeToModifyContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyAttributeBaseValueData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAttributeBaseValueData     BaseValueData                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     AttributeToSetContextSource                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ValueContext                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxAttributeModifierActionExecOutputModifierActionResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::ApplyAttributeBaseValueData(struct FAttributeBaseValueData& BaseValueData, class UObject* AttributeToSetContextSource, class UObject* ValueContext, enum class EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "ApplyAttributeBaseValueData");

	Params::UGbxAttributeFunctionLibrary_ApplyAttributeBaseValueData_Params Parms{};

	Parms.BaseValueData = BaseValueData;
	Parms.AttributeToSetContextSource = AttributeToSetContextSource;
	Parms.ValueContext = ValueContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.AddModifierToGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*           Attribute                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxAttributeModifierTypeModifierType                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ModifierValue                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EGbxAttributeModifierActionExecOutputModifierActionResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeModifierHandle UGbxAttributeFunctionLibrary::AddModifierToGbxAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource, enum class EGbxAttributeModifierType ModifierType, float ModifierValue, enum class EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributeFunctionLibrary", "AddModifierToGbxAttribute");

	Params::UGbxAttributeFunctionLibrary_AddModifierToGbxAttribute_Params Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.ModifierType = ModifierType;
	Parms.ModifierValue = ModifierValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxAttributesComponent
// (None)

class UClass* UGbxAttributesComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributesComponent");

	return Clss;
}


// GbxAttributesComponent GbxGameSystemCore.Default__GbxAttributesComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributesComponent* UGbxAttributesComponent::GetDefaultObj()
{
	static class UGbxAttributesComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributesComponent*>(UGbxAttributesComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxAttributesComponent.IsAttributeSetClassUnrelatedToExistingSet
// (Final, Native, Public, Const)
// Parameters:
// class UClass*                      AttributeSetClass                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributesComponent::IsAttributeSetClassUnrelatedToExistingSet(class UClass* AttributeSetClass)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxAttributesComponent", "IsAttributeSetClassUnrelatedToExistingSet");

	Params::UGbxAttributesComponent_IsAttributeSetClassUnrelatedToExistingSet_Params Parms{};

	Parms.AttributeSetClass = AttributeSetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxAttributeSet
// (None)

class UClass* UGbxAttributeSet::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeSet");

	return Clss;
}


// GbxAttributeSet GbxGameSystemCore.Default__GbxAttributeSet
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeSet* UGbxAttributeSet::GetDefaultObj()
{
	static class UGbxAttributeSet* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeSet*>(UGbxAttributeSet::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAttributeSetBlueprint
// (Blueprint)

class UClass* UGbxAttributeSetBlueprint::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeSetBlueprint");

	return Clss;
}


// GbxAttributeSetBlueprint GbxGameSystemCore.Default__GbxAttributeSetBlueprint
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeSetBlueprint* UGbxAttributeSetBlueprint::GetDefaultObj()
{
	static class UGbxAttributeSetBlueprint* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeSetBlueprint*>(UGbxAttributeSetBlueprint::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAttributeSetContextResolver
// (None)

class UClass* UGbxAttributeSetContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeSetContextResolver");

	return Clss;
}


// GbxAttributeSetContextResolver GbxGameSystemCore.Default__GbxAttributeSetContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeSetContextResolver* UGbxAttributeSetContextResolver::GetDefaultObj()
{
	static class UGbxAttributeSetContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeSetContextResolver*>(UGbxAttributeSetContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxAttributeSetValueResolver
// (None)

class UClass* UGbxAttributeSetValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxAttributeSetValueResolver");

	return Clss;
}


// GbxAttributeSetValueResolver GbxGameSystemCore.Default__GbxAttributeSetValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxAttributeSetValueResolver* UGbxAttributeSetValueResolver::GetDefaultObj()
{
	static class UGbxAttributeSetValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxAttributeSetValueResolver*>(UGbxAttributeSetValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxBlackboardKeySelectorExt
// (None)

class UClass* UGbxBlackboardKeySelectorExt::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxBlackboardKeySelectorExt");

	return Clss;
}


// GbxBlackboardKeySelectorExt GbxGameSystemCore.Default__GbxBlackboardKeySelectorExt
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxBlackboardKeySelectorExt* UGbxBlackboardKeySelectorExt::GetDefaultObj()
{
	static class UGbxBlackboardKeySelectorExt* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxBlackboardKeySelectorExt*>(UGbxBlackboardKeySelectorExt::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Value                                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsVector(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsVector");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsVector_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsTargetActorInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo            Value                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsTargetActorInfo(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, struct FTargetActorInfo& Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsTargetActorInfo");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsTargetActorInfo_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      Value                                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsString(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsString");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsString_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    Value                                                            (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsRotator(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsRotator");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsRotator_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsObject(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class UObject* Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsObject");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsObject_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsName(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class FName Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsName");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsName_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsInt(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsInt");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsInt_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsFloat(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, float Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsFloat");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsFloat_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsFlag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               Value                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsFlag(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, bool Value, float Duration)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsFlag");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsFlag_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsEnum(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsEnum");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsEnum_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                      Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsClass(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class UClass* Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsClass");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsClass_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsBool(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, bool Value)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsBool");

	Params::UGbxBlackboardKeySelectorExt_SetValueAsBool_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxBlackboardKeySelectorExt::GetValueAsVector(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsVector");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsVector_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsTargetActorInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo            ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FTargetActorInfo UGbxBlackboardKeySelectorExt::GetValueAsTargetActorInfo(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsTargetActorInfo");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsTargetActorInfo_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardKeySelectorExt::GetValueAsString(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsString");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsString_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxBlackboardKeySelectorExt::GetValueAsRotator(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsRotator");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsRotator_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxBlackboardKeySelectorExt::GetValueAsObject(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsObject");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsObject_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxBlackboardKeySelectorExt::GetValueAsName(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsName");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsName_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxBlackboardKeySelectorExt::GetValueAsInt(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsInt");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsInt_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxBlackboardKeySelectorExt::GetValueAsFloat(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsFloat");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsFloat_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGbxBlackboardKeySelectorExt::GetValueAsEnum(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsEnum");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsEnum_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGbxBlackboardKeySelectorExt::GetValueAsClass(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsClass");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsClass_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardKeySelectorExt::GetValueAsBool(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsBool");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsBool_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxBlackboardKeySelectorExt::GetValueAsActor(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsActor");

	Params::UGbxBlackboardKeySelectorExt_GetValueAsActor_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetPropertyDescription
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGbxBlackboardKeySelector   BBKey                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UProperty*                   Property                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardKeySelectorExt::GetPropertyDescription(struct FGbxBlackboardKeySelector& BBKey, class UProperty* Property)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "GetPropertyDescription");

	Params::UGbxBlackboardKeySelectorExt_GetPropertyDescription_Params Parms{};

	Parms.BBKey = BBKey;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.ClearValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector   Key                                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*        BlackboardComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::ClearValue(struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxBlackboardKeySelectorExt", "ClearValue");

	Params::UGbxBlackboardKeySelectorExt_ClearValue_Params Parms{};

	Parms.Key = Key;
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxBoneModifyProfile
// (None)

class UClass* UGbxBoneModifyProfile::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxBoneModifyProfile");

	return Clss;
}


// GbxBoneModifyProfile GbxGameSystemCore.Default__GbxBoneModifyProfile
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxBoneModifyProfile* UGbxBoneModifyProfile::GetDefaultObj()
{
	static class UGbxBoneModifyProfile* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxBoneModifyProfile*>(UGbxBoneModifyProfile::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCameraShake
// (None)

class UClass* UGbxCameraShake::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCameraShake");

	return Clss;
}


// GbxCameraShake GbxGameSystemCore.Default__GbxCameraShake
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCameraShake* UGbxCameraShake::GetDefaultObj()
{
	static class UGbxCameraShake* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCameraShake*>(UGbxCameraShake::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_ActorIsOfClass
// (None)

class UClass* UGbxCondition_ActorIsOfClass::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_ActorIsOfClass");

	return Clss;
}


// GbxCondition_ActorIsOfClass GbxGameSystemCore.Default__GbxCondition_ActorIsOfClass
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_ActorIsOfClass* UGbxCondition_ActorIsOfClass::GetDefaultObj()
{
	static class UGbxCondition_ActorIsOfClass* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_ActorIsOfClass*>(UGbxCondition_ActorIsOfClass::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_AttackedRecently
// (None)

class UClass* UGbxCondition_AttackedRecently::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_AttackedRecently");

	return Clss;
}


// GbxCondition_AttackedRecently GbxGameSystemCore.Default__GbxCondition_AttackedRecently
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_AttackedRecently* UGbxCondition_AttackedRecently::GetDefaultObj()
{
	static class UGbxCondition_AttackedRecently* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_AttackedRecently*>(UGbxCondition_AttackedRecently::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_Blueprint
// (None)

class UClass* UGbxCondition_Blueprint::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_Blueprint");

	return Clss;
}


// GbxCondition_Blueprint GbxGameSystemCore.Default__GbxCondition_Blueprint
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_Blueprint* UGbxCondition_Blueprint::GetDefaultObj()
{
	static class UGbxCondition_Blueprint* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_Blueprint*>(UGbxCondition_Blueprint::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCondition_Blueprint.EvaluateCondition
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     OptionalContext                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCondition_Blueprint::EvaluateCondition(class UObject* Context, class UObject* OptionalContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCondition_Blueprint", "EvaluateCondition");

	Params::UGbxCondition_Blueprint_EvaluateCondition_Params Parms{};

	Parms.Context = Context;
	Parms.OptionalContext = OptionalContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxCondition_CharacterMass
// (None)

class UClass* UGbxCondition_CharacterMass::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_CharacterMass");

	return Clss;
}


// GbxCondition_CharacterMass GbxGameSystemCore.Default__GbxCondition_CharacterMass
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_CharacterMass* UGbxCondition_CharacterMass::GetDefaultObj()
{
	static class UGbxCondition_CharacterMass* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_CharacterMass*>(UGbxCondition_CharacterMass::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_Comparison
// (None)

class UClass* UGbxCondition_Comparison::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_Comparison");

	return Clss;
}


// GbxCondition_Comparison GbxGameSystemCore.Default__GbxCondition_Comparison
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_Comparison* UGbxCondition_Comparison::GetDefaultObj()
{
	static class UGbxCondition_Comparison* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_Comparison*>(UGbxCondition_Comparison::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_Compound
// (None)

class UClass* UGbxCondition_Compound::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_Compound");

	return Clss;
}


// GbxCondition_Compound GbxGameSystemCore.Default__GbxCondition_Compound
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_Compound* UGbxCondition_Compound::GetDefaultObj()
{
	static class UGbxCondition_Compound* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_Compound*>(UGbxCondition_Compound::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_Flag
// (None)

class UClass* UGbxCondition_Flag::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_Flag");

	return Clss;
}


// GbxCondition_Flag GbxGameSystemCore.Default__GbxCondition_Flag
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_Flag* UGbxCondition_Flag::GetDefaultObj()
{
	static class UGbxCondition_Flag* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_Flag*>(UGbxCondition_Flag::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_HasActorTags
// (None)

class UClass* UGbxCondition_HasActorTags::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_HasActorTags");

	return Clss;
}


// GbxCondition_HasActorTags GbxGameSystemCore.Default__GbxCondition_HasActorTags
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_HasActorTags* UGbxCondition_HasActorTags::GetDefaultObj()
{
	static class UGbxCondition_HasActorTags* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_HasActorTags*>(UGbxCondition_HasActorTags::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_HasGameplayTags
// (None)

class UClass* UGbxCondition_HasGameplayTags::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_HasGameplayTags");

	return Clss;
}


// GbxCondition_HasGameplayTags GbxGameSystemCore.Default__GbxCondition_HasGameplayTags
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_HasGameplayTags* UGbxCondition_HasGameplayTags::GetDefaultObj()
{
	static class UGbxCondition_HasGameplayTags* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_HasGameplayTags*>(UGbxCondition_HasGameplayTags::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_HasInstigatedStatusEffect
// (None)

class UClass* UGbxCondition_HasInstigatedStatusEffect::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_HasInstigatedStatusEffect");

	return Clss;
}


// GbxCondition_HasInstigatedStatusEffect GbxGameSystemCore.Default__GbxCondition_HasInstigatedStatusEffect
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_HasInstigatedStatusEffect* UGbxCondition_HasInstigatedStatusEffect::GetDefaultObj()
{
	static class UGbxCondition_HasInstigatedStatusEffect* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_HasInstigatedStatusEffect*>(UGbxCondition_HasInstigatedStatusEffect::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_IsBlackboardTarget
// (None)

class UClass* UGbxCondition_IsBlackboardTarget::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_IsBlackboardTarget");

	return Clss;
}


// GbxCondition_IsBlackboardTarget GbxGameSystemCore.Default__GbxCondition_IsBlackboardTarget
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_IsBlackboardTarget* UGbxCondition_IsBlackboardTarget::GetDefaultObj()
{
	static class UGbxCondition_IsBlackboardTarget* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_IsBlackboardTarget*>(UGbxCondition_IsBlackboardTarget::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_IsLowOnHealth
// (None)

class UClass* UGbxCondition_IsLowOnHealth::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_IsLowOnHealth");

	return Clss;
}


// GbxCondition_IsLowOnHealth GbxGameSystemCore.Default__GbxCondition_IsLowOnHealth
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_IsLowOnHealth* UGbxCondition_IsLowOnHealth::GetDefaultObj()
{
	static class UGbxCondition_IsLowOnHealth* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_IsLowOnHealth*>(UGbxCondition_IsLowOnHealth::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_IsPlayerController
// (None)

class UClass* UGbxCondition_IsPlayerController::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_IsPlayerController");

	return Clss;
}


// GbxCondition_IsPlayerController GbxGameSystemCore.Default__GbxCondition_IsPlayerController
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_IsPlayerController* UGbxCondition_IsPlayerController::GetDefaultObj()
{
	static class UGbxCondition_IsPlayerController* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_IsPlayerController*>(UGbxCondition_IsPlayerController::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_IsTargetAimedAtMe
// (None)

class UClass* UGbxCondition_IsTargetAimedAtMe::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_IsTargetAimedAtMe");

	return Clss;
}


// GbxCondition_IsTargetAimedAtMe GbxGameSystemCore.Default__GbxCondition_IsTargetAimedAtMe
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_IsTargetAimedAtMe* UGbxCondition_IsTargetAimedAtMe::GetDefaultObj()
{
	static class UGbxCondition_IsTargetAimedAtMe* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_IsTargetAimedAtMe*>(UGbxCondition_IsTargetAimedAtMe::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_IsTrue
// (None)

class UClass* UGbxCondition_IsTrue::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_IsTrue");

	return Clss;
}


// GbxCondition_IsTrue GbxGameSystemCore.Default__GbxCondition_IsTrue
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_IsTrue* UGbxCondition_IsTrue::GetDefaultObj()
{
	static class UGbxCondition_IsTrue* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_IsTrue*>(UGbxCondition_IsTrue::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_List
// (None)

class UClass* UGbxCondition_List::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_List");

	return Clss;
}


// GbxCondition_List GbxGameSystemCore.Default__GbxCondition_List
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_List* UGbxCondition_List::GetDefaultObj()
{
	static class UGbxCondition_List* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_List*>(UGbxCondition_List::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxCondition_List.RequiresNativeClass
// (Native, Public, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCondition_List::RequiresNativeClass()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCondition_List", "RequiresNativeClass");

	Params::UGbxCondition_List_RequiresNativeClass_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxCondition_List.GetRequiredInterface
// (Native, Public, Const)
// Parameters:
// class UClass*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGbxCondition_List::GetRequiredInterface()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxCondition_List", "GetRequiredInterface");

	Params::UGbxCondition_List_GetRequiredInterface_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxCondition_SensedRecently
// (None)

class UClass* UGbxCondition_SensedRecently::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_SensedRecently");

	return Clss;
}


// GbxCondition_SensedRecently GbxGameSystemCore.Default__GbxCondition_SensedRecently
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_SensedRecently* UGbxCondition_SensedRecently::GetDefaultObj()
{
	static class UGbxCondition_SensedRecently* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_SensedRecently*>(UGbxCondition_SensedRecently::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_TeamAttitude
// (None)

class UClass* UGbxCondition_TeamAttitude::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_TeamAttitude");

	return Clss;
}


// GbxCondition_TeamAttitude GbxGameSystemCore.Default__GbxCondition_TeamAttitude
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_TeamAttitude* UGbxCondition_TeamAttitude::GetDefaultObj()
{
	static class UGbxCondition_TeamAttitude* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_TeamAttitude*>(UGbxCondition_TeamAttitude::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCondition_TeamCheck
// (None)

class UClass* UGbxCondition_TeamCheck::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCondition_TeamCheck");

	return Clss;
}


// GbxCondition_TeamCheck GbxGameSystemCore.Default__GbxCondition_TeamCheck
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCondition_TeamCheck* UGbxCondition_TeamCheck::GetDefaultObj()
{
	static class UGbxCondition_TeamCheck* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCondition_TeamCheck*>(UGbxCondition_TeamCheck::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCustomizationCollectionData
// (None)

class UClass* UGbxCustomizationCollectionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationCollectionData");

	return Clss;
}


// GbxCustomizationCollectionData GbxGameSystemCore.Default__GbxCustomizationCollectionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationCollectionData* UGbxCustomizationCollectionData::GetDefaultObj()
{
	static class UGbxCustomizationCollectionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationCollectionData*>(UGbxCustomizationCollectionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCustomizationInterface
// (None)

class UClass* IGbxCustomizationInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationInterface");

	return Clss;
}


// GbxCustomizationInterface GbxGameSystemCore.Default__GbxCustomizationInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxCustomizationInterface* IGbxCustomizationInterface::GetDefaultObj()
{
	static class IGbxCustomizationInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxCustomizationInterface*>(IGbxCustomizationInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCustomizationMorphTargetSetData
// (None)

class UClass* UGbxCustomizationMorphTargetSetData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationMorphTargetSetData");

	return Clss;
}


// GbxCustomizationMorphTargetSetData GbxGameSystemCore.Default__GbxCustomizationMorphTargetSetData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationMorphTargetSetData* UGbxCustomizationMorphTargetSetData::GetDefaultObj()
{
	static class UGbxCustomizationMorphTargetSetData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationMorphTargetSetData*>(UGbxCustomizationMorphTargetSetData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxCustomizationTargetData
// (None)

class UClass* UGbxCustomizationTargetData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxCustomizationTargetData");

	return Clss;
}


// GbxCustomizationTargetData GbxGameSystemCore.Default__GbxCustomizationTargetData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxCustomizationTargetData* UGbxCustomizationTargetData::GetDefaultObj()
{
	static class UGbxCustomizationTargetData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxCustomizationTargetData*>(UGbxCustomizationTargetData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxDataTableFunctionLibrary
// (None)

class UClass* UGbxDataTableFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxDataTableFunctionLibrary");

	return Clss;
}


// GbxDataTableFunctionLibrary GbxGameSystemCore.Default__GbxDataTableFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxDataTableFunctionLibrary* UGbxDataTableFunctionLibrary::GetDefaultObj()
{
	static class UGbxDataTableFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxDataTableFunctionLibrary*>(UGbxDataTableFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.GetDataTableValueFromHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableValueHandle       ValueHandle                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DefaultValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxDataTableFunctionLibrary::GetDataTableValueFromHandle(struct FDataTableValueHandle& ValueHandle, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxDataTableFunctionLibrary", "GetDataTableValueFromHandle");

	Params::UGbxDataTableFunctionLibrary_GetDataTableValueFromHandle_Params Parms{};

	Parms.ValueHandle = ValueHandle;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.GetDataTableValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDataTable*                  Table                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        RowName                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ValueName                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptStruct*               ValueInStructType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              OutValue                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxDataTableFunctionLibrary::GetDataTableValue(class UDataTable* Table, class FName RowName, class FName ValueName, class UScriptStruct* ValueInStructType, int32* OutValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxDataTableFunctionLibrary", "GetDataTableValue");

	Params::UGbxDataTableFunctionLibrary_GetDataTableValue_Params Parms{};

	Parms.Table = Table;
	Parms.RowName = RowName;
	Parms.ValueName = ValueName;
	Parms.ValueInStructType = ValueInStructType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.Conv_DataTableValueHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableValueHandle       ValueHandle                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxDataTableFunctionLibrary::Conv_DataTableValueHandleToString(struct FDataTableValueHandle& ValueHandle)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxDataTableFunctionLibrary", "Conv_DataTableValueHandleToString");

	Params::UGbxDataTableFunctionLibrary_Conv_DataTableValueHandleToString_Params Parms{};

	Parms.ValueHandle = ValueHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxEnvQueryHotSpotProviderInterface
// (None)

class UClass* IGbxEnvQueryHotSpotProviderInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxEnvQueryHotSpotProviderInterface");

	return Clss;
}


// GbxEnvQueryHotSpotProviderInterface GbxGameSystemCore.Default__GbxEnvQueryHotSpotProviderInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxEnvQueryHotSpotProviderInterface* IGbxEnvQueryHotSpotProviderInterface::GetDefaultObj()
{
	static class IGbxEnvQueryHotSpotProviderInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxEnvQueryHotSpotProviderInterface*>(IGbxEnvQueryHotSpotProviderInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxEqsRenderingComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UGbxEqsRenderingComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxEqsRenderingComponent");

	return Clss;
}


// GbxEqsRenderingComponent GbxGameSystemCore.Default__GbxEqsRenderingComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxEqsRenderingComponent* UGbxEqsRenderingComponent::GetDefaultObj()
{
	static class UGbxEqsRenderingComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxEqsRenderingComponent*>(UGbxEqsRenderingComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxEqsRenderingComponent.GetAvailableEnvQueryParamRefNames
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FString>              Names                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxEqsRenderingComponent::GetAvailableEnvQueryParamRefNames(TArray<class FString>* Names)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxEqsRenderingComponent", "GetAvailableEnvQueryParamRefNames");

	Params::UGbxEqsRenderingComponent_GetAvailableEnvQueryParamRefNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);

}


// Class GbxGameSystemCore.GbxEventDelegateBinding
// (None)

class UClass* UGbxEventDelegateBinding::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxEventDelegateBinding");

	return Clss;
}


// GbxEventDelegateBinding GbxGameSystemCore.Default__GbxEventDelegateBinding
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxEventDelegateBinding* UGbxEventDelegateBinding::GetDefaultObj()
{
	static class UGbxEventDelegateBinding* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxEventDelegateBinding*>(UGbxEventDelegateBinding::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFeedbackBase
// (None)

class UClass* UGbxFeedbackBase::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFeedbackBase");

	return Clss;
}


// GbxFeedbackBase GbxGameSystemCore.Default__GbxFeedbackBase
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFeedbackBase* UGbxFeedbackBase::GetDefaultObj()
{
	static class UGbxFeedbackBase* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFeedbackBase*>(UGbxFeedbackBase::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxFeedbackBase.StopGbxFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*            FeedbackData                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*        Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::StopGbxFeedback(class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFeedbackBase", "StopGbxFeedback");

	Params::UGbxFeedbackBase_StopGbxFeedback_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFeedbackBase.PlayGbxFeedbackData3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*            FeedbackData                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*        Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     SourceLocation                                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnoreController                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              EffectFalloffMinDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              EffectFalloffMaxDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::PlayGbxFeedbackData3D(class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller, const struct FVector& SourceLocation, bool bLoop, bool bIgnoreController, float Scale, class UObject* SourceContext, float EffectFalloffMinDistance, float EffectFalloffMaxDistance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFeedbackBase", "PlayGbxFeedbackData3D");

	Params::UGbxFeedbackBase_PlayGbxFeedbackData3D_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;
	Parms.SourceLocation = SourceLocation;
	Parms.bLoop = bLoop;
	Parms.bIgnoreController = bIgnoreController;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;
	Parms.EffectFalloffMinDistance = EffectFalloffMinDistance;
	Parms.EffectFalloffMaxDistance = EffectFalloffMaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFeedbackBase.PlayGbxFeedbackData2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*            FeedbackData                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*        Controller                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLoop                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnoreController                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Scale                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     SourceContext                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::PlayGbxFeedbackData2D(class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller, bool bLoop, bool bIgnoreController, float Scale, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFeedbackBase", "PlayGbxFeedbackData2D");

	Params::UGbxFeedbackBase_PlayGbxFeedbackData2D_Params Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;
	Parms.bLoop = bLoop;
	Parms.bIgnoreController = bIgnoreController;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxFeedbackData
// (None)

class UClass* UGbxFeedbackData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFeedbackData");

	return Clss;
}


// GbxFeedbackData GbxGameSystemCore.Default__GbxFeedbackData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFeedbackData* UGbxFeedbackData::GetDefaultObj()
{
	static class UGbxFeedbackData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFeedbackData*>(UGbxFeedbackData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFeedbackList
// (None)

class UClass* UGbxFeedbackList::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFeedbackList");

	return Clss;
}


// GbxFeedbackList GbxGameSystemCore.Default__GbxFeedbackList
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFeedbackList* UGbxFeedbackList::GetDefaultObj()
{
	static class UGbxFeedbackList* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFeedbackList*>(UGbxFeedbackList::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFeedbackManager
// (None)

class UClass* UGbxFeedbackManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFeedbackManager");

	return Clss;
}


// GbxFeedbackManager GbxGameSystemCore.Default__GbxFeedbackManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFeedbackManager* UGbxFeedbackManager::GetDefaultObj()
{
	static class UGbxFeedbackManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFeedbackManager*>(UGbxFeedbackManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFlagData
// (None)

class UClass* UGbxFlagData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFlagData");

	return Clss;
}


// GbxFlagData GbxGameSystemCore.Default__GbxFlagData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFlagData* UGbxFlagData::GetDefaultObj()
{
	static class UGbxFlagData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFlagData*>(UGbxFlagData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFlagFunctionLibrary
// (None)

class UClass* UGbxFlagFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFlagFunctionLibrary");

	return Clss;
}


// GbxFlagFunctionLibrary GbxGameSystemCore.Default__GbxFlagFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFlagFunctionLibrary* UGbxFlagFunctionLibrary::GetDefaultObj()
{
	static class UGbxFlagFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFlagFunctionLibrary*>(UGbxFlagFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bNewValue                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagValue(class UObject* WorldContextObject, struct FGbxFlag& Flag, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "SetFlagValue");

	Params::UGbxFlagFunctionLibrary_SetFlagValue_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagTrueTimed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagTrueTimed(class UObject* WorldContextObject, struct FGbxFlag& Flag, float Duration)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "SetFlagTrueTimed");

	Params::UGbxFlagFunctionLibrary_SetFlagTrueTimed_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagDataValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bNewValue                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagDataValue(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "SetFlagDataValue");

	Params::UGbxFlagFunctionLibrary_SetFlagDataValue_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagDataTrueTimed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagDataTrueTimed(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, float Duration)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "SetFlagDataTrueTimed");

	Params::UGbxFlagFunctionLibrary_SetFlagDataTrueTimed_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.GetFlagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::GetFlagValue(class UObject* WorldContextObject, struct FGbxFlag& Flag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "GetFlagValue");

	Params::UGbxFlagFunctionLibrary_GetFlagValue_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.GetFlagDataValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::GetFlagDataValue(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "GetFlagDataValue");

	Params::UGbxFlagFunctionLibrary_GetFlagDataValue_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagTrueWithin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagTrueWithin(class UObject* WorldContextObject, struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagTrueWithin");

	Params::UGbxFlagFunctionLibrary_FlagTrueWithin_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagTrueFor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagTrueFor(class UObject* WorldContextObject, struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagTrueFor");

	Params::UGbxFlagFunctionLibrary_FlagTrueFor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagFalseWithin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagFalseWithin(class UObject* WorldContextObject, struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagFalseWithin");

	Params::UGbxFlagFunctionLibrary_FlagFalseWithin_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagFalseFor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                    Flag                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagFalseFor(class UObject* WorldContextObject, struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagFalseFor");

	Params::UGbxFlagFunctionLibrary_FlagFalseFor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = Flag;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataTrueWithin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataTrueWithin(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagDataTrueWithin");

	Params::UGbxFlagFunctionLibrary_FlagDataTrueWithin_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataTrueFor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataTrueFor(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagDataTrueFor");

	Params::UGbxFlagFunctionLibrary_FlagDataTrueFor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataFalseWithin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataFalseWithin(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagDataFalseWithin");

	Params::UGbxFlagFunctionLibrary_FlagDataFalseWithin_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataFalseFor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                FlagData                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ContextSource                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CheckTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataFalseFor(class UObject* WorldContextObject, class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxFlagFunctionLibrary", "FlagDataFalseFor");

	Params::UGbxFlagFunctionLibrary_FlagDataFalseFor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.FlagPropertyTestContext
// (None)

class UClass* UFlagPropertyTestContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FlagPropertyTestContext");

	return Clss;
}


// FlagPropertyTestContext GbxGameSystemCore.Default__FlagPropertyTestContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UFlagPropertyTestContext* UFlagPropertyTestContext::GetDefaultObj()
{
	static class UFlagPropertyTestContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UFlagPropertyTestContext*>(UFlagPropertyTestContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.FlagPropertyTestContextResolver
// (None)

class UClass* UFlagPropertyTestContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("FlagPropertyTestContextResolver");

	return Clss;
}


// FlagPropertyTestContextResolver GbxGameSystemCore.Default__FlagPropertyTestContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UFlagPropertyTestContextResolver* UFlagPropertyTestContextResolver::GetDefaultObj()
{
	static class UFlagPropertyTestContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UFlagPropertyTestContextResolver*>(UFlagPropertyTestContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFlagValueResolver
// (None)

class UClass* UGbxFlagValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFlagValueResolver");

	return Clss;
}


// GbxFlagValueResolver GbxGameSystemCore.Default__GbxFlagValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFlagValueResolver* UGbxFlagValueResolver::GetDefaultObj()
{
	static class UGbxFlagValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFlagValueResolver*>(UGbxFlagValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxFlagValueResolver_Property
// (None)

class UClass* UGbxFlagValueResolver_Property::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxFlagValueResolver_Property");

	return Clss;
}


// GbxFlagValueResolver_Property GbxGameSystemCore.Default__GbxFlagValueResolver_Property
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxFlagValueResolver_Property* UGbxFlagValueResolver_Property::GetDefaultObj()
{
	static class UGbxFlagValueResolver_Property* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxFlagValueResolver_Property*>(UGbxFlagValueResolver_Property::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.BaseMenuStackMenuInfo
// (None)

class UClass* UBaseMenuStackMenuInfo::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("BaseMenuStackMenuInfo");

	return Clss;
}


// BaseMenuStackMenuInfo GbxGameSystemCore.Default__BaseMenuStackMenuInfo
// (Public, ClassDefaultObject, ArchetypeObject)

class UBaseMenuStackMenuInfo* UBaseMenuStackMenuInfo::GetDefaultObj()
{
	static class UBaseMenuStackMenuInfo* Default = nullptr;

	if (!Default)
		Default = static_cast<UBaseMenuStackMenuInfo*>(UBaseMenuStackMenuInfo::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxGameplayStatics
// (None)

class UClass* UGbxGameplayStatics::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameplayStatics");

	return Clss;
}


// GbxGameplayStatics GbxGameSystemCore.Default__GbxGameplayStatics
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameplayStatics* UGbxGameplayStatics::GetDefaultObj()
{
	static class UGbxGameplayStatics* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameplayStatics*>(UGbxGameplayStatics::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionResponseWith
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TeamActor                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnore                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionResponseWith(class AActor* Actor, class AActor* TeamActor, bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetTeamCollisionResponseWith");

	Params::UGbxGameplayStatics_SetTeamCollisionResponseWith_Params Parms{};

	Parms.Actor = Actor;
	Parms.TeamActor = TeamActor;
	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionResponseToChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamCollisionChannel   Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnore                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionResponseToChannel(class AActor* Actor, enum class ETeamCollisionChannel Channel, bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetTeamCollisionResponseToChannel");

	Params::UGbxGameplayStatics_SetTeamCollisionResponseToChannel_Params Parms{};

	Parms.Actor = Actor;
	Parms.Channel = Channel;
	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionChannelFrom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TeamActor                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOn                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionChannelFrom(class AActor* Actor, class AActor* TeamActor, bool bOn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetTeamCollisionChannelFrom");

	Params::UGbxGameplayStatics_SetTeamCollisionChannelFrom_Params Parms{};

	Parms.Actor = Actor;
	Parms.TeamActor = TeamActor;
	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamCollisionChannel   Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOn                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionChannel(class AActor* Actor, enum class ETeamCollisionChannel Channel, bool bOn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetTeamCollisionChannel");

	Params::UGbxGameplayStatics_SetTeamCollisionChannel_Params Parms{};

	Parms.Actor = Actor;
	Parms.Channel = Channel;
	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetPlayerMaster
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      AIActor                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      PlayerMaster                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameplayStatics::SetPlayerMaster(class AActor* AIActor, class AActor* PlayerMaster)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetPlayerMaster");

	Params::UGbxGameplayStatics_SetPlayerMaster_Params Parms{};

	Parms.AIActor = AIActor;
	Parms.PlayerMaster = PlayerMaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionResponseWith
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TeamActor                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnore                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bPropagateToChildren                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionResponseWith(class USceneComponent* Component, class AActor* TeamActor, bool bIgnore, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionResponseWith");

	Params::UGbxGameplayStatics_SetComponentTeamCollisionResponseWith_Params Parms{};

	Parms.Component = Component;
	Parms.TeamActor = TeamActor;
	Parms.bIgnore = bIgnore;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionResponseToChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamCollisionChannel   Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bIgnore                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bPropagateToChildren                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionResponseToChannel(class USceneComponent* Component, enum class ETeamCollisionChannel Channel, bool bIgnore, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionResponseToChannel");

	Params::UGbxGameplayStatics_SetComponentTeamCollisionResponseToChannel_Params Parms{};

	Parms.Component = Component;
	Parms.Channel = Channel;
	Parms.bIgnore = bIgnore;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamCollisionChannel   Channel                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOn                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bPropagateToChildren                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionChannel(class USceneComponent* Component, enum class ETeamCollisionChannel Channel, bool bOn, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionChannel");

	Params::UGbxGameplayStatics_SetComponentTeamCollisionChannel_Params Parms{};

	Parms.Component = Component;
	Parms.Channel = Channel;
	Parms.bOn = bOn;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.ProjectFromQueryToSimulation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxSkeletalMeshComponent*   Component                                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BodyName                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     InOutHitPoint                                                    (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     InOutHitNormal                                                   (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::ProjectFromQueryToSimulation(class UGbxSkeletalMeshComponent* Component, class FName& BodyName, struct FVector& InOutHitPoint, struct FVector& InOutHitNormal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "ProjectFromQueryToSimulation");

	Params::UGbxGameplayStatics_ProjectFromQueryToSimulation_Params Parms{};

	Parms.Component = Component;
	Parms.BodyName = BodyName;
	Parms.InOutHitPoint = InOutHitPoint;
	Parms.InOutHitNormal = InOutHitNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.GetPrimaryPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*           ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* UGbxGameplayStatics::GetPrimaryPlayerController(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "GetPrimaryPlayerController");

	Params::UGbxGameplayStatics_GetPrimaryPlayerController_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameplayStatics.GetAssociatedPrimaryCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxCharacter*               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxCharacter* UGbxGameplayStatics::GetAssociatedPrimaryCharacter(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "GetAssociatedPrimaryCharacter");

	Params::UGbxGameplayStatics_GetAssociatedPrimaryCharacter_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameplayStatics.GetAssociatedCurrentlyUsedCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxCharacter*               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxCharacter* UGbxGameplayStatics::GetAssociatedCurrentlyUsedCharacter(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "GetAssociatedCurrentlyUsedCharacter");

	Params::UGbxGameplayStatics_GetAssociatedCurrentlyUsedCharacter_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameplayStatics.ExternalProfilerStop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:

void UGbxGameplayStatics::ExternalProfilerStop()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "ExternalProfilerStop");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.ExternalProfilerStart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:

void UGbxGameplayStatics::ExternalProfilerStart()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "ExternalProfilerStart");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.ExternalProfilerBookmark
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                      Mark                                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::ExternalProfilerBookmark(const class FString& Mark)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "ExternalProfilerBookmark");

	Params::UGbxGameplayStatics_ExternalProfilerBookmark_Params Parms{};

	Parms.Mark = Mark;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameplayStatics.AlignTransformToSurface
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform                  Transform                                                        (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     SurfaceNormal                                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                  ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGameplayStatics::AlignTransformToSurface(const struct FTransform& Transform, const struct FVector& SurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameplayStatics", "AlignTransformToSurface");

	Params::UGbxGameplayStatics_AlignTransformToSurface_Params Parms{};

	Parms.Transform = Transform;
	Parms.SurfaceNormal = SurfaceNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxGameStatsBlueprintLibrary
// (None)

class UClass* UGbxGameStatsBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameStatsBlueprintLibrary");

	return Clss;
}


// GbxGameStatsBlueprintLibrary GbxGameSystemCore.Default__GbxGameStatsBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameStatsBlueprintLibrary* UGbxGameStatsBlueprintLibrary::GetDefaultObj()
{
	static class UGbxGameStatsBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameStatsBlueprintLibrary*>(UGbxGameStatsBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.UpdateStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewValue                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::UpdateStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "UpdateStatForParty");

	Params::UGbxGameStatsBlueprintLibrary_UpdateStatForParty_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.UpdateStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              NewValue                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::UpdateStat(class AActor* ContextActor, class UGameStatData* StatData, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "UpdateStat");

	Params::UGbxGameStatsBlueprintLibrary_UpdateStat_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.IncrementStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::IncrementStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "IncrementStatForParty");

	Params::UGbxGameStatsBlueprintLibrary_IncrementStatForParty_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.IncrementStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::IncrementStat(class AActor* ContextActor, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "IncrementStat");

	Params::UGbxGameStatsBlueprintLibrary_IncrementStat_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.GetStatValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxGameStatsBlueprintLibrary::GetStatValue(class AActor* ContextActor, class UGameStatData* StatData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "GetStatValue");

	Params::UGbxGameStatsBlueprintLibrary_GetStatValue_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.DecrementStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::DecrementStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "DecrementStatForParty");

	Params::UGbxGameStatsBlueprintLibrary_DecrementStatForParty_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.DecrementStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      ContextActor                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*               StatData                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              Amount                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::DecrementStat(class AActor* ContextActor, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameStatsBlueprintLibrary", "DecrementStat");

	Params::UGbxGameStatsBlueprintLibrary_DecrementStat_Params Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary
// (None)

class UClass* UGbxGameSystemCoreBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxGameSystemCoreBlueprintLibrary");

	return Clss;
}


// GbxGameSystemCoreBlueprintLibrary GbxGameSystemCore.Default__GbxGameSystemCoreBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxGameSystemCoreBlueprintLibrary* UGbxGameSystemCoreBlueprintLibrary::GetDefaultObj()
{
	static class UGbxGameSystemCoreBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxGameSystemCoreBlueprintLibrary*>(UGbxGameSystemCoreBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.SetComponentPhysicalRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*         Target                                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              PitchRotation                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              YawRotation                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              RollRotation                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BoneName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::SetComponentPhysicalRotation(class UPrimitiveComponent* Target, float PitchRotation, float YawRotation, float RollRotation, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "SetComponentPhysicalRotation");

	Params::UGbxGameSystemCoreBlueprintLibrary_SetComponentPhysicalRotation_Params Parms{};

	Parms.Target = Target;
	Parms.PitchRotation = PitchRotation;
	Parms.YawRotation = YawRotation;
	Parms.RollRotation = RollRotation;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockTurns
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockTurns(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockTurns");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockTurns_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockTickAndRefreshBones
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockTickAndRefreshBones(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockTickAndRefreshBones");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockTickAndRefreshBones_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockTargeting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockTargeting(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockTargeting");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockTargeting_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockRotation");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockRotation_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMovement");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockMovement_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMomentum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMomentum(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMomentum");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockMomentum_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMantling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMantling(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMantling");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockMantling_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockLookAtTargetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockLookAtTargetLocation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockLookAtTargetLocation");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockLookAtTargetLocation_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockLookAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockLookAt(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockLookAt");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockLookAt_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockLadderMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockLadderMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockLadderMovement");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockLadderMovement_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockJumping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockJumping(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockJumping");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockJumping_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockHandIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockHandIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockHandIk");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockHandIk_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockGod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockGod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockGod");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockGod_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockFootIkTracing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockFootIkTracing(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockFootIkTracing");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockFootIkTracing_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockFootIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockFootIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockFootIk");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockFootIk_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockDodging
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockDodging(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockDodging");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockDodging_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockDemigod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockDemigod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockDemigod");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockDemigod_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockCrouching
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockCrouching(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockCrouching");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockCrouching_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockAIThinking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockAIThinking(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockAIThinking");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockAIThinking_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockAiming(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockAiming");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceUnlockAiming_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTurns
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTurns(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTurns");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockTurns_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTickAndRefreshBones
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTickAndRefreshBones(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTickAndRefreshBones");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockTickAndRefreshBones_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTargeting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTargeting(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTargeting");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockTargeting_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTargetableByNonPlayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bTargetable                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTargetableByNonPlayers(class AActor* Actor, class FName Reason, bool bTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTargetableByNonPlayers");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockTargetableByNonPlayers_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;
	Parms.bTargetable = bTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTargetable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bTargetable                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTargetable(class AActor* Actor, class FName Reason, bool bTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTargetable");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockTargetable_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;
	Parms.bTargetable = bTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockRotation");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockRotation_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockPhysicsRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockPhysicsRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockPhysicsRotation");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockPhysicsRotation_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMovement");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockMovement_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMomentum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMomentum(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMomentum");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockMomentum_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMantling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMantling(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMantling");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockMantling_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockLookAtTargetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockLookAtTargetLocation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockLookAtTargetLocation");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockLookAtTargetLocation_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockLookAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockLookAt(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockLookAt");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockLookAt_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockLadderMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockLadderMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockLadderMovement");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockLadderMovement_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockJumping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockJumping(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockJumping");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockJumping_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockHandIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockHandIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockHandIk");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockHandIk_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockGod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockGod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockGod");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockGod_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockFootIkTracing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockFootIkTracing(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockFootIkTracing");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockFootIkTracing_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockFootIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockFootIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockFootIk");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockFootIk_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockDodging
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockDodging(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockDodging");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockDodging_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockDemigod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockDemigod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockDemigod");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockDemigod_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockCrouching
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockCrouching(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockCrouching");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockCrouching_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockAIThinking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAbort                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockAIThinking(class AActor* Actor, class FName Reason, bool bAbort)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockAIThinking");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockAIThinking_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;
	Parms.bAbort = bAbort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockAiming(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockAiming");

	Params::UGbxGameSystemCoreBlueprintLibrary_ResourceLockAiming_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsSplitScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*               GameInstance                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsSplitScreen(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsSplitScreen");

	Params::UGbxGameSystemCoreBlueprintLibrary_IsSplitScreen_Params Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsPlayer(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsPlayer");

	Params::UGbxGameSystemCoreBlueprintLibrary_IsPlayer_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsContentCensored
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsContentCensored(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsContentCensored");

	Params::UGbxGameSystemCoreBlueprintLibrary_IsContentCensored_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.HoverComponentAtActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Altitude                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Radius                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              AccelerationTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Speed                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Duration                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo           LatentInfo                                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::HoverComponentAtActor(class USceneComponent* Component, class AActor* TargetActor, float Altitude, float Radius, float AccelerationTime, float Speed, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "HoverComponentAtActor");

	Params::UGbxGameSystemCoreBlueprintLibrary_HoverComponentAtActor_Params Parms{};

	Parms.Component = Component;
	Parms.TargetActor = TargetActor;
	Parms.Altitude = Altitude;
	Parms.Radius = Radius;
	Parms.AccelerationTime = AccelerationTime;
	Parms.Speed = Speed;
	Parms.Duration = Duration;
	Parms.LatentInfo = LatentInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetRelativeDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRelativeDirectionData      RelativeDirectionData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                     DefaultDirection                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      SourceActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SourceSocketName                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      TargetActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxGameSystemCoreBlueprintLibrary::GetRelativeDirection(struct FRelativeDirectionData& RelativeDirectionData, struct FVector& DefaultDirection, class AActor* SourceActor, class FName& SourceSocketName, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetRelativeDirection");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetRelativeDirection_Params Parms{};

	Parms.RelativeDirectionData = RelativeDirectionData;
	Parms.DefaultDirection = DefaultDirection;
	Parms.SourceActor = SourceActor;
	Parms.SourceSocketName = SourceSocketName;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetCurveFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRuntimeFloatCurve          Curve                                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                              InTime                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxGameSystemCoreBlueprintLibrary::GetCurveFloatValue(struct FRuntimeFloatCurve& Curve, float InTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetCurveFloatValue");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetCurveFloatValue_Params Parms{};

	Parms.Curve = Curve;
	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAnyPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              Actors                                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAnyPlayersOverlappingActors(class UObject* WorldContextObject, TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAnyPlayersOverlappingActors");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetAreAnyPlayersOverlappingActors_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = Actors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAnyPlayersOverlappingActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAnyPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAnyPlayersOverlappingActor");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetAreAnyPlayersOverlappingActor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAllPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              Actors                                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAllPlayersOverlappingActors(class UObject* WorldContextObject, TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAllPlayersOverlappingActors");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetAreAllPlayersOverlappingActors_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = Actors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAllPlayersOverlappingActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAllPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAllPlayersOverlappingActor");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetAreAllPlayersOverlappingActor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetActorListTrimmedToBestCluster
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AActor*>              OutputActors                                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FVector                     ClusterMidpoint                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              InputActors                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                      SourceActor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ClusterRadius                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bPreferClusterContainingCurrentTarget                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::GetActorListTrimmedToBestCluster(TArray<class AActor*>* OutputActors, struct FVector* ClusterMidpoint, TArray<class AActor*>& InputActors, class AActor* SourceActor, float ClusterRadius, bool bPreferClusterContainingCurrentTarget)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetActorListTrimmedToBestCluster");

	Params::UGbxGameSystemCoreBlueprintLibrary_GetActorListTrimmedToBestCluster_Params Parms{};

	Parms.InputActors = InputActors;
	Parms.SourceActor = SourceActor;
	Parms.ClusterRadius = ClusterRadius;
	Parms.bPreferClusterContainingCurrentTarget = bPreferClusterContainingCurrentTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutputActors != nullptr)
		*OutputActors = std::move(Parms.OutputActors);

	if (ClusterMidpoint != nullptr)
		*ClusterMidpoint = std::move(Parms.ClusterMidpoint);

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.BranchOnIsPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EIsPlayerExecOutput     Branches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::BranchOnIsPlayer(class AActor* Actor, enum class EIsPlayerExecOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "BranchOnIsPlayer");

	Params::UGbxGameSystemCoreBlueprintLibrary_BranchOnIsPlayer_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.BranchOnIsAutonomous
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EIsAutonomousOuput      Branches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::BranchOnIsAutonomous(class AActor* Actor, enum class EIsAutonomousOuput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "BranchOnIsAutonomous");

	Params::UGbxGameSystemCoreBlueprintLibrary_BranchOnIsAutonomous_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              Actors                                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// enum class EPlayersOverlappingActorOutputBranches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersOverlappingActors(class UObject* WorldContextObject, TArray<class AActor*>& Actors, enum class EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersOverlappingActors");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAnyPlayersOverlappingActors_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = Actors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersOverlappingActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EPlayersOverlappingActorOutputBranches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor, enum class EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersOverlappingActor");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAnyPlayersOverlappingActor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersInVolume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AVolume*>             Volumes                                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// enum class EPlayersInVolumeOutput  Branches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersInVolume(class UObject* WorldContextObject, TArray<class AVolume*>& Volumes, enum class EPlayersInVolumeOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersInVolume");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAnyPlayersInVolume_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Volumes = Volumes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>              Actors                                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// enum class EPlayersOverlappingActorOutputBranches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersOverlappingActors(class UObject* WorldContextObject, TArray<class AActor*>& Actors, enum class EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersOverlappingActors");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAllPlayersOverlappingActors_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = Actors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersOverlappingActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EPlayersOverlappingActorOutputBranches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor, enum class EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersOverlappingActor");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAllPlayersOverlappingActor_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersInVolume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AVolume*>             Volumes                                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// enum class EPlayersInVolumeOutput  Branches                                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersInVolume(class UObject* WorldContextObject, TArray<class AVolume*>& Volumes, enum class EPlayersInVolumeOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersInVolume");

	Params::UGbxGameSystemCoreBlueprintLibrary_AreAllPlayersInVolume_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Volumes = Volumes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

}


// Class GbxGameSystemCore.GbxHUDFeedbackData
// (None)

class UClass* UGbxHUDFeedbackData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxHUDFeedbackData");

	return Clss;
}


// GbxHUDFeedbackData GbxGameSystemCore.Default__GbxHUDFeedbackData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxHUDFeedbackData* UGbxHUDFeedbackData::GetDefaultObj()
{
	static class UGbxHUDFeedbackData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxHUDFeedbackData*>(UGbxHUDFeedbackData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxInputRebindContextProvider
// (None)

class UClass* IGbxInputRebindContextProvider::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxInputRebindContextProvider");

	return Clss;
}


// GbxInputRebindContextProvider GbxGameSystemCore.Default__GbxInputRebindContextProvider
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxInputRebindContextProvider* IGbxInputRebindContextProvider::GetDefaultObj()
{
	static class IGbxInputRebindContextProvider* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxInputRebindContextProvider*>(IGbxInputRebindContextProvider::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxInventoryCategoryData
// (None)

class UClass* UGbxInventoryCategoryData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxInventoryCategoryData");

	return Clss;
}


// GbxInventoryCategoryData GbxGameSystemCore.Default__GbxInventoryCategoryData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxInventoryCategoryData* UGbxInventoryCategoryData::GetDefaultObj()
{
	static class UGbxInventoryCategoryData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxInventoryCategoryData*>(UGbxInventoryCategoryData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxLevelSequenceControllableInterface
// (None)

class UClass* IGbxLevelSequenceControllableInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxLevelSequenceControllableInterface");

	return Clss;
}


// GbxLevelSequenceControllableInterface GbxGameSystemCore.Default__GbxLevelSequenceControllableInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxLevelSequenceControllableInterface* IGbxLevelSequenceControllableInterface::GetDefaultObj()
{
	static class IGbxLevelSequenceControllableInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxLevelSequenceControllableInterface*>(IGbxLevelSequenceControllableInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxMediaData
// (None)

class UClass* UGbxMediaData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxMediaData");

	return Clss;
}


// GbxMediaData GbxGameSystemCore.Default__GbxMediaData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxMediaData* UGbxMediaData::GetDefaultObj()
{
	static class UGbxMediaData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxMediaData*>(UGbxMediaData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxMediaManager
// (None)

class UClass* UGbxMediaManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxMediaManager");

	return Clss;
}


// GbxMediaManager GbxGameSystemCore.Default__GbxMediaManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxMediaManager* UGbxMediaManager::GetDefaultObj()
{
	static class UGbxMediaManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxMediaManager*>(UGbxMediaManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieMediaOpenFailed
// (Final, Native, Private)
// Parameters:
// class FString                      DeviceUrl                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMediaManager::OnMovieMediaOpenFailed(const class FString& DeviceUrl)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieMediaOpenFailed");

	Params::UGbxMediaManager_OnMovieMediaOpenFailed_Params Parms{};

	Parms.DeviceUrl = DeviceUrl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieMediaClosed
// (Final, Native, Private)
// Parameters:

void UGbxMediaManager::OnMovieMediaClosed()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieMediaClosed");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieEndReached
// (Final, Native, Private)
// Parameters:

void UGbxMediaManager::OnMovieEndReached()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieEndReached");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxMediaManager.GbxPlayMovie
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     WorldContextObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxMediaData*               InMediaData                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMediaPlayer*                ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMediaPlayer* UGbxMediaManager::GbxPlayMovie(class UObject* WorldContextObject, class UGbxMediaData* InMediaData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxMediaManager", "GbxPlayMovie");

	Params::UGbxMediaManager_GbxPlayMovie_Params Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InMediaData = InMediaData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxNavAvoidanceInterface
// (None)

class UClass* IGbxNavAvoidanceInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxNavAvoidanceInterface");

	return Clss;
}


// GbxNavAvoidanceInterface GbxGameSystemCore.Default__GbxNavAvoidanceInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxNavAvoidanceInterface* IGbxNavAvoidanceInterface::GetDefaultObj()
{
	static class IGbxNavAvoidanceInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxNavAvoidanceInterface*>(IGbxNavAvoidanceInterface::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxNavAvoidanceInterface.SetObstacleAvoidanceLock
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                               bDisable                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxNavAvoidanceInterface::SetObstacleAvoidanceLock(bool bDisable, class FName& Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxNavAvoidanceInterface", "SetObstacleAvoidanceLock");

	Params::IGbxNavAvoidanceInterface_SetObstacleAvoidanceLock_Params Parms{};

	Parms.bDisable = bDisable;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxPainCausingVolume
// (Actor)

class UClass* AGbxPainCausingVolume::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPainCausingVolume");

	return Clss;
}


// GbxPainCausingVolume GbxGameSystemCore.Default__GbxPainCausingVolume
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxPainCausingVolume* AGbxPainCausingVolume::GetDefaultObj()
{
	static class AGbxPainCausingVolume* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxPainCausingVolume*>(AGbxPainCausingVolume::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxParamExt
// (None)

class UClass* UGbxParamExt::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxParamExt");

	return Clss;
}


// GbxParamExt GbxGameSystemCore.Default__GbxParamExt
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxParamExt* UGbxParamExt::GetDefaultObj()
{
	static class UGbxParamExt* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxParamExt*>(UGbxParamExt::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxParamExt.IsValueInRangePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::IsValueInRangePure(struct FGbxParam& Param, float Value, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "IsValueInRangePure");

	Params::UGbxParamExt_IsValueInRangePure_Params Parms{};

	Parms.Param = Param;
	Parms.Value = Value;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.IsValueInRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Value                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::IsValueInRange(struct FGbxParam& Param, float Value, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "IsValueInRange");

	Params::UGbxParamExt_IsValueInRange_Params Parms{};

	Parms.Param = Param;
	Parms.Value = Value;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.GetParamPropertyDescription
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UProperty*                   Property                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetParamPropertyDescription(struct FGbxParam& Param, class UProperty* Property)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "GetParamPropertyDescription");

	Params::UGbxParamExt_GetParamPropertyDescription_Params Parms{};

	Parms.Param = Param;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.GetParamDescriptionText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxParamExt::GetParamDescriptionText(struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "GetParamDescriptionText");

	Params::UGbxParamExt_GetParamDescriptionText_Params Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.GetParamDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetParamDescription(struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "GetParamDescription");

	Params::UGbxParamExt_GetParamDescription_Params Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.GetNamedParamDescriptionText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxNamedParam              Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxParamExt::GetNamedParamDescriptionText(struct FGbxNamedParam& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "GetNamedParamDescriptionText");

	Params::UGbxParamExt_GetNamedParamDescriptionText_Params Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.GetNamedParamDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxNamedParam              Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetNamedParamDescription(struct FGbxNamedParam& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "GetNamedParamDescription");

	Params::UGbxParamExt_GetNamedParamDescription_Params Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.EvaluatePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluatePure(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "EvaluatePure");

	Params::UGbxParamExt_EvaluatePure_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.EvaluateIntPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluateIntPure(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "EvaluateIntPure");

	Params::UGbxParamExt_EvaluateIntPure_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.EvaluateInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluateInt(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "EvaluateInt");

	Params::UGbxParamExt_EvaluateInt_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.EvaluateBoolPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::EvaluateBoolPure(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "EvaluateBoolPure");

	Params::UGbxParamExt_EvaluateBoolPure_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.EvaluateBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::EvaluateBool(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "EvaluateBool");

	Params::UGbxParamExt_EvaluateBool_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.GbxParamExt.Evaluate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                   Param                                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::Evaluate(struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParamExt", "Evaluate");

	Params::UGbxParamExt_Evaluate_Params Parms{};

	Parms.Param = Param;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxParticleSystemComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UGbxParticleSystemComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxParticleSystemComponent");

	return Clss;
}


// GbxParticleSystemComponent GbxGameSystemCore.Default__GbxParticleSystemComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxParticleSystemComponent* UGbxParticleSystemComponent::GetDefaultObj()
{
	static class UGbxParticleSystemComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxParticleSystemComponent*>(UGbxParticleSystemComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxParticleSystemComponent.IsCustomizationTargetFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxCustomizationTargetData* TargetToTest                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParticleSystemComponent::IsCustomizationTargetFor(class UGbxCustomizationTargetData* TargetToTest)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxParticleSystemComponent", "IsCustomizationTargetFor");

	Params::UGbxParticleSystemComponent_IsCustomizationTargetFor_Params Parms{};

	Parms.TargetToTest = TargetToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GbxPerceptionComponent
// (None)

class UClass* UGbxPerceptionComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPerceptionComponent");

	return Clss;
}


// GbxPerceptionComponent GbxGameSystemCore.Default__GbxPerceptionComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxPerceptionComponent* UGbxPerceptionComponent::GetDefaultObj()
{
	static class UGbxPerceptionComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxPerceptionComponent*>(UGbxPerceptionComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxPhysicsCollisionHandler
// (None)

class UClass* UGbxPhysicsCollisionHandler::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPhysicsCollisionHandler");

	return Clss;
}


// GbxPhysicsCollisionHandler GbxGameSystemCore.Default__GbxPhysicsCollisionHandler
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxPhysicsCollisionHandler* UGbxPhysicsCollisionHandler::GetDefaultObj()
{
	static class UGbxPhysicsCollisionHandler* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxPhysicsCollisionHandler*>(UGbxPhysicsCollisionHandler::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxPhysicsSettings
// (None)

class UClass* UGbxPhysicsSettings::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxPhysicsSettings");

	return Clss;
}


// GbxPhysicsSettings GbxGameSystemCore.Default__GbxPhysicsSettings
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxPhysicsSettings* UGbxPhysicsSettings::GetDefaultObj()
{
	static class UGbxPhysicsSettings* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxPhysicsSettings*>(UGbxPhysicsSettings::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxPhysicsSettings.StaticSetRigidDynamicDominance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*         Comp                                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAesthetic                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BodyName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsSettings::StaticSetRigidDynamicDominance(class UPrimitiveComponent* Comp, bool bAesthetic, class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPhysicsSettings", "StaticSetRigidDynamicDominance");

	Params::UGbxPhysicsSettings_StaticSetRigidDynamicDominance_Params Parms{};

	Parms.Comp = Comp;
	Parms.bAesthetic = bAesthetic;
	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.GbxPhysicsSettings.StaticSetRigidBodySimulationInteractability
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*      Comp                                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAesthetic                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BodyName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsSettings::StaticSetRigidBodySimulationInteractability(class USkeletalMeshComponent* Comp, bool bAesthetic, class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxPhysicsSettings", "StaticSetRigidBodySimulationInteractability");

	Params::UGbxPhysicsSettings_StaticSetRigidBodySimulationInteractability_Params Parms{};

	Parms.Comp = Comp;
	Parms.bAesthetic = bAesthetic;
	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxQueryManager
// (None)

class UClass* UGbxQueryManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxQueryManager");

	return Clss;
}


// GbxQueryManager GbxGameSystemCore.Default__GbxQueryManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxQueryManager* UGbxQueryManager::GetDefaultObj()
{
	static class UGbxQueryManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxQueryManager*>(UGbxQueryManager::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxQueryManager.NotifyAIHotSpotListChangedFor
// (Final, Native, Public)
// Parameters:
// class AActor*                      OwnerActor                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxQueryManager::NotifyAIHotSpotListChangedFor(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxQueryManager", "NotifyAIHotSpotListChangedFor");

	Params::UGbxQueryManager_NotifyAIHotSpotListChangedFor_Params Parms{};

	Parms.OwnerActor = OwnerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GbxSignificanceSettings
// (None)

class UClass* UGbxSignificanceSettings::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSignificanceSettings");

	return Clss;
}


// GbxSignificanceSettings GbxGameSystemCore.Default__GbxSignificanceSettings
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSignificanceSettings* UGbxSignificanceSettings::GetDefaultObj()
{
	static class UGbxSignificanceSettings* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSignificanceSettings*>(UGbxSignificanceSettings::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxSignificanceSettings.EnumerateSignificanceEvents
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class FName>                OutEvents                                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxSignificanceSettings::EnumerateSignificanceEvents(TArray<class FName>* OutEvents)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSignificanceSettings", "EnumerateSignificanceEvents");

	Params::UGbxSignificanceSettings_EnumerateSignificanceEvents_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutEvents != nullptr)
		*OutEvents = std::move(Parms.OutEvents);

}


// Class GbxGameSystemCore.GbxSimpleMotionLibrary
// (None)

class UClass* UGbxSimpleMotionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSimpleMotionLibrary");

	return Clss;
}


// GbxSimpleMotionLibrary GbxGameSystemCore.Default__GbxSimpleMotionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxSimpleMotionLibrary* UGbxSimpleMotionLibrary::GetDefaultObj()
{
	static class UGbxSimpleMotionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxSimpleMotionLibrary*>(UGbxSimpleMotionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateVectorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     CurrentValue                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetValue                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateVectorMotion(float DeltaTime, struct FVector* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, struct FVector& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "UpdateVectorMotion");

	Params::UGbxSimpleMotionLibrary_UpdateVectorMotion_Params Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateRotatorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    CurrentValue                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    TargetValue                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                               bShortestRotation                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateRotatorMotion(float DeltaTime, struct FRotator* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, struct FRotator& TargetValue, bool bShortestRotation, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "UpdateRotatorMotion");

	Params::UGbxSimpleMotionLibrary_UpdateRotatorMotion_Params Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;
	Parms.bShortestRotation = bShortestRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateFloatMotion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              CurrentValue                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              TargetValue                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateFloatMotion(float DeltaTime, float* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, float TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "UpdateFloatMotion");

	Params::UGbxSimpleMotionLibrary_UpdateFloatMotion_Params Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportVectorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     CurrentValue                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetValue                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportVectorMotion(struct FVector* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, struct FVector& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "TeleportVectorMotion");

	Params::UGbxSimpleMotionLibrary_TeleportVectorMotion_Params Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportRotatorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                    CurrentValue                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    TargetValue                                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportRotatorMotion(struct FRotator* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, struct FRotator& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "TeleportRotatorMotion");

	Params::UGbxSimpleMotionLibrary_TeleportRotatorMotion_Params Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportFloatMotion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                              CurrentValue                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ControlValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState          Data                                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              SpeedScale                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              TargetValue                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportFloatMotion(float* CurrentValue, float ControlValue, struct FSimpleMotionState& Data, float SpeedScale, float TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "TeleportFloatMotion");

	Params::UGbxSimpleMotionLibrary_TeleportFloatMotion_Params Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = Data;
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.ResetMotionState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleMotionInstanceState  State                                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::ResetMotionState(struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxSimpleMotionLibrary", "ResetMotionState");

	Params::UGbxSimpleMotionLibrary_ResetMotionState_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (State != nullptr)
		*State = std::move(Parms.State);

}


// Class GbxGameSystemCore.GbxSkeletalMeshActor
// (Actor)

class UClass* AGbxSkeletalMeshActor::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSkeletalMeshActor");

	return Clss;
}


// GbxSkeletalMeshActor GbxGameSystemCore.Default__GbxSkeletalMeshActor
// (Public, ClassDefaultObject, ArchetypeObject)

class AGbxSkeletalMeshActor* AGbxSkeletalMeshActor::GetDefaultObj()
{
	static class AGbxSkeletalMeshActor* Default = nullptr;

	if (!Default)
		Default = static_cast<AGbxSkeletalMeshActor*>(AGbxSkeletalMeshActor::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxStaticMeshComponent
// (SceneComponent, PrimitiveComponent, StaticMeshComponent)

class UClass* UGbxStaticMeshComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxStaticMeshComponent");

	return Clss;
}


// GbxStaticMeshComponent GbxGameSystemCore.Default__GbxStaticMeshComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxStaticMeshComponent* UGbxStaticMeshComponent::GetDefaultObj()
{
	static class UGbxStaticMeshComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxStaticMeshComponent*>(UGbxStaticMeshComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxSubtitleManagerInterface
// (None)

class UClass* IGbxSubtitleManagerInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxSubtitleManagerInterface");

	return Clss;
}


// GbxSubtitleManagerInterface GbxGameSystemCore.Default__GbxSubtitleManagerInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxSubtitleManagerInterface* IGbxSubtitleManagerInterface::GetDefaultObj()
{
	static class IGbxSubtitleManagerInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxSubtitleManagerInterface*>(IGbxSubtitleManagerInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxThreatSystemInterface
// (None)

class UClass* IGbxThreatSystemInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxThreatSystemInterface");

	return Clss;
}


// GbxThreatSystemInterface GbxGameSystemCore.Default__GbxThreatSystemInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxThreatSystemInterface* IGbxThreatSystemInterface::GetDefaultObj()
{
	static class IGbxThreatSystemInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxThreatSystemInterface*>(IGbxThreatSystemInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxUIFormattableParameter
// (None)

class UClass* IGbxUIFormattableParameter::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxUIFormattableParameter");

	return Clss;
}


// GbxUIFormattableParameter GbxGameSystemCore.Default__GbxUIFormattableParameter
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxUIFormattableParameter* IGbxUIFormattableParameter::GetDefaultObj()
{
	static class IGbxUIFormattableParameter* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxUIFormattableParameter*>(IGbxUIFormattableParameter::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxUIName
// (None)

class UClass* UGbxUIName::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxUIName");

	return Clss;
}


// GbxUIName GbxGameSystemCore.Default__GbxUIName
// (Public, ClassDefaultObject, ArchetypeObject)

class UGbxUIName* UGbxUIName::GetDefaultObj()
{
	static class UGbxUIName* Default = nullptr;

	if (!Default)
		Default = static_cast<UGbxUIName*>(UGbxUIName::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GbxUIName.GetFormattedText
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                        ReturnValue                                                      (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUIName::GetFormattedText()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GbxUIName", "GetFormattedText");

	Params::UGbxUIName_GetFormattedText_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.GestaltPartData
// (None)

class UClass* UGestaltPartData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GestaltPartData");

	return Clss;
}


// GestaltPartData GbxGameSystemCore.Default__GestaltPartData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGestaltPartData* UGestaltPartData::GetDefaultObj()
{
	static class UGestaltPartData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGestaltPartData*>(UGestaltPartData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GestaltPartData_Mesh
// (None)

class UClass* UGestaltPartData_Mesh::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GestaltPartData_Mesh");

	return Clss;
}


// GestaltPartData_Mesh GbxGameSystemCore.Default__GestaltPartData_Mesh
// (Public, ClassDefaultObject, ArchetypeObject)

class UGestaltPartData_Mesh* UGestaltPartData_Mesh::GetDefaultObj()
{
	static class UGestaltPartData_Mesh* Default = nullptr;

	if (!Default)
		Default = static_cast<UGestaltPartData_Mesh*>(UGestaltPartData_Mesh::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GestaltPartData_Mesh.EnumerateGestaltMeshPartNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                OutPartNameList                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGestaltPartData_Mesh::EnumerateGestaltMeshPartNames(TArray<class FName>* OutPartNameList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GestaltPartData_Mesh", "EnumerateGestaltMeshPartNames");

	Params::UGestaltPartData_Mesh_EnumerateGestaltMeshPartNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutPartNameList != nullptr)
		*OutPartNameList = std::move(Parms.OutPartNameList);

}


// Class GbxGameSystemCore.GestaltPartData_Random
// (None)

class UClass* UGestaltPartData_Random::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GestaltPartData_Random");

	return Clss;
}


// GestaltPartData_Random GbxGameSystemCore.Default__GestaltPartData_Random
// (Public, ClassDefaultObject, ArchetypeObject)

class UGestaltPartData_Random* UGestaltPartData_Random::GetDefaultObj()
{
	static class UGestaltPartData_Random* Default = nullptr;

	if (!Default)
		Default = static_cast<UGestaltPartData_Random*>(UGestaltPartData_Random::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GestaltPartListData
// (None)

class UClass* UGestaltPartListData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GestaltPartListData");

	return Clss;
}


// GestaltPartListData GbxGameSystemCore.Default__GestaltPartListData
// (Public, ClassDefaultObject, ArchetypeObject)

class UGestaltPartListData* UGestaltPartListData::GetDefaultObj()
{
	static class UGestaltPartListData* Default = nullptr;

	if (!Default)
		Default = static_cast<UGestaltPartListData*>(UGestaltPartListData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GlobalBoneModifyProfileState
// (None)

class UClass* UGlobalBoneModifyProfileState::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GlobalBoneModifyProfileState");

	return Clss;
}


// GlobalBoneModifyProfileState GbxGameSystemCore.Default__GlobalBoneModifyProfileState
// (Public, ClassDefaultObject, ArchetypeObject)

class UGlobalBoneModifyProfileState* UGlobalBoneModifyProfileState::GetDefaultObj()
{
	static class UGlobalBoneModifyProfileState* Default = nullptr;

	if (!Default)
		Default = static_cast<UGlobalBoneModifyProfileState*>(UGlobalBoneModifyProfileState::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GlobalBoneModifyProfile
// (None)

class UClass* UGlobalBoneModifyProfile::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GlobalBoneModifyProfile");

	return Clss;
}


// GlobalBoneModifyProfile GbxGameSystemCore.Default__GlobalBoneModifyProfile
// (Public, ClassDefaultObject, ArchetypeObject)

class UGlobalBoneModifyProfile* UGlobalBoneModifyProfile::GetDefaultObj()
{
	static class UGlobalBoneModifyProfile* Default = nullptr;

	if (!Default)
		Default = static_cast<UGlobalBoneModifyProfile*>(UGlobalBoneModifyProfile::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GlobalBoneModBlueprintLibrary
// (None)

class UClass* UGlobalBoneModBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GlobalBoneModBlueprintLibrary");

	return Clss;
}


// GlobalBoneModBlueprintLibrary GbxGameSystemCore.Default__GlobalBoneModBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UGlobalBoneModBlueprintLibrary* UGlobalBoneModBlueprintLibrary::GetDefaultObj()
{
	static class UGlobalBoneModBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UGlobalBoneModBlueprintLibrary*>(UGlobalBoneModBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.GlobalBoneModBlueprintLibrary.K2_SetGBMP
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGlobalBoneModifyProfileState*State                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bEnabled                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalBoneModBlueprintLibrary::K2_SetGBMP(class UGlobalBoneModifyProfileState* State, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("GlobalBoneModBlueprintLibrary", "K2_SetGBMP");

	Params::UGlobalBoneModBlueprintLibrary_K2_SetGBMP_Params Parms{};

	Parms.State = State;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.GravityOverrideVolume
// (Actor)

class UClass* AGravityOverrideVolume::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GravityOverrideVolume");

	return Clss;
}


// GravityOverrideVolume GbxGameSystemCore.Default__GravityOverrideVolume
// (Public, ClassDefaultObject, ArchetypeObject)

class AGravityOverrideVolume* AGravityOverrideVolume::GetDefaultObj()
{
	static class AGravityOverrideVolume* Default = nullptr;

	if (!Default)
		Default = static_cast<AGravityOverrideVolume*>(AGravityOverrideVolume::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HealthResourcePoolModifierAttributeValueResolver
// (None)

class UClass* UHealthResourcePoolModifierAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HealthResourcePoolModifierAttributeValueResolver");

	return Clss;
}


// HealthResourcePoolModifierAttributeValueResolver GbxGameSystemCore.Default__HealthResourcePoolModifierAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UHealthResourcePoolModifierAttributeValueResolver* UHealthResourcePoolModifierAttributeValueResolver::GetDefaultObj()
{
	static class UHealthResourcePoolModifierAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UHealthResourcePoolModifierAttributeValueResolver*>(UHealthResourcePoolModifierAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HealthTypeData
// (None)

class UClass* UHealthTypeData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HealthTypeData");

	return Clss;
}


// HealthTypeData GbxGameSystemCore.Default__HealthTypeData
// (Public, ClassDefaultObject, ArchetypeObject)

class UHealthTypeData* UHealthTypeData::GetDefaultObj()
{
	static class UHealthTypeData* Default = nullptr;

	if (!Default)
		Default = static_cast<UHealthTypeData*>(UHealthTypeData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionBlueprintLibrary
// (None)

class UClass* UHitReactionBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionBlueprintLibrary");

	return Clss;
}


// HitReactionBlueprintLibrary GbxGameSystemCore.Default__HitReactionBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionBlueprintLibrary* UHitReactionBlueprintLibrary::GetDefaultObj()
{
	static class UHitReactionBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionBlueprintLibrary*>(UHitReactionBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.SetHitReactionData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionData*            HitReactionData                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::SetHitReactionData(class AActor* Actor, class UHitReactionData* HitReactionData)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "SetHitReactionData");

	Params::UHitReactionBlueprintLibrary_SetHitReactionData_Params Parms{};

	Parms.Actor = Actor;
	Parms.HitReactionData = HitReactionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ScriptHitReaction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Causer                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*             Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     LocalHitDirection                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BoneName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection             Force                                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ScriptHitReaction(class AActor* Actor, class AActor* Causer, class UHitReactionTag* Tag, const struct FVector& LocalHitDirection, class FName BoneName, const struct FForceSelection& Force)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "ScriptHitReaction");

	Params::UHitReactionBlueprintLibrary_ScriptHitReaction_Params Parms{};

	Parms.Actor = Actor;
	Parms.Causer = Causer;
	Parms.Tag = Tag;
	Parms.LocalHitDirection = LocalHitDirection;
	Parms.BoneName = BoneName;
	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ScriptDeath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Causer                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*             Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     LocalHitDirection                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BoneName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection             Force                                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ScriptDeath(class AActor* Actor, class AActor* Causer, class UHitReactionTag* Tag, const struct FVector& LocalHitDirection, class FName BoneName, const struct FForceSelection& Force)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "ScriptDeath");

	Params::UHitReactionBlueprintLibrary_ScriptDeath_Params Parms{};

	Parms.Actor = Actor;
	Parms.Causer = Causer;
	Parms.Tag = Tag;
	Parms.LocalHitDirection = LocalHitDirection;
	Parms.BoneName = BoneName;
	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ResourceUnlockHitReactions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ResourceUnlockHitReactions(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "ResourceUnlockHitReactions");

	Params::UHitReactionBlueprintLibrary_ResourceUnlockHitReactions_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ResourceLockHitReactions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Reason                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ResourceLockHitReactions(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "ResourceLockHitReactions");

	Params::UHitReactionBlueprintLibrary_ResourceLockHitReactions_Params Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.RemoveHitReactionLiveLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::RemoveHitReactionLiveLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "RemoveHitReactionLiveLayer");

	Params::UHitReactionBlueprintLibrary_RemoveHitReactionLiveLayer_Params Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.RemoveHitReactionDeathLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::RemoveHitReactionDeathLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "RemoveHitReactionDeathLayer");

	Params::UHitReactionBlueprintLibrary_RemoveHitReactionDeathLayer_Params Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitLocationFromAction
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHitReactionBlueprintLibrary::K2_GetHitLocationFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitLocationFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetHitLocationFromAction_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitDirectionFromAction
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLocalSpace                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHitReactionBlueprintLibrary::K2_GetHitDirectionFromAction(class UGbxAction* Action, bool bLocalSpace)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitDirectionFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetHitDirectionFromAction_Params Parms{};

	Parms.Action = Action;
	Parms.bLocalSpace = bLocalSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitCauserFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                     ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UHitReactionBlueprintLibrary::K2_GetHitCauserFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitCauserFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetHitCauserFromAction_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHealthPercentFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitReactionBlueprintLibrary::K2_GetHealthPercentFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetHealthPercentFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetHealthPercentFromAction_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetForceFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitReactionBlueprintLibrary::K2_GetForceFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetForceFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetForceFromAction_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetBoneIndexFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                  Action                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHitReactionBlueprintLibrary::K2_GetBoneIndexFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "K2_GetBoneIndexFromAction");

	Params::UHitReactionBlueprintLibrary_K2_GetBoneIndexFromAction_Params Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.IsHitReactionTagActive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*             Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHitReactionBlueprintLibrary::IsHitReactionTagActive(class AActor* Actor, class UHitReactionTag* Tag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "IsHitReactionTagActive");

	Params::UHitReactionBlueprintLibrary_IsHitReactionTagActive_Params Parms{};

	Parms.Actor = Actor;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.AddHitReactionLiveLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::AddHitReactionLiveLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "AddHitReactionLiveLayer");

	Params::UHitReactionBlueprintLibrary_AddHitReactionLiveLayer_Params Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.AddHitReactionDeathLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::AddHitReactionDeathLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionBlueprintLibrary", "AddHitReactionDeathLayer");

	Params::UHitReactionBlueprintLibrary_AddHitReactionDeathLayer_Params Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.HitReactionData
// (None)

class UClass* UHitReactionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionData");

	return Clss;
}


// HitReactionData GbxGameSystemCore.Default__HitReactionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionData* UHitReactionData::GetDefaultObj()
{
	static class UHitReactionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionData*>(UHitReactionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer_Blueprint
// (None)

class UClass* UHitReactionLayer_Blueprint::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Blueprint");

	return Clss;
}


// HitReactionLayer_Blueprint GbxGameSystemCore.Default__HitReactionLayer_Blueprint
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Blueprint* UHitReactionLayer_Blueprint::GetDefaultObj()
{
	static class UHitReactionLayer_Blueprint* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Blueprint*>(UHitReactionLayer_Blueprint::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.HitReactionLayer_Blueprint.EvaluateTag
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UDamageComponent*            Receiver                                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageCauserComponent*      Causer                                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DamageAmount                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDamageType*              DamageType                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*               DamageSource                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Force                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*             PreviousTag                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHitReactionTag* UHitReactionLayer_Blueprint::EvaluateTag(class UDamageComponent* Receiver, class UDamageCauserComponent* Causer, float DamageAmount, class UGbxDamageType* DamageType, class UDamageSource* DamageSource, class UHitRegionData* HitRegion, float Force, class UHitReactionTag* PreviousTag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitReactionLayer_Blueprint", "EvaluateTag");

	Params::UHitReactionLayer_Blueprint_EvaluateTag_Params Parms{};

	Parms.Receiver = Receiver;
	Parms.Causer = Causer;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.HitRegion = HitRegion;
	Parms.Force = Force;
	Parms.PreviousTag = PreviousTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.HitReactionLayer_Combine
// (None)

class UClass* UHitReactionLayer_Combine::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Combine");

	return Clss;
}


// HitReactionLayer_Combine GbxGameSystemCore.Default__HitReactionLayer_Combine
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Combine* UHitReactionLayer_Combine::GetDefaultObj()
{
	static class UHitReactionLayer_Combine* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Combine*>(UHitReactionLayer_Combine::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer_Condition
// (None)

class UClass* UHitReactionLayer_Condition::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Condition");

	return Clss;
}


// HitReactionLayer_Condition GbxGameSystemCore.Default__HitReactionLayer_Condition
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Condition* UHitReactionLayer_Condition::GetDefaultObj()
{
	static class UHitReactionLayer_Condition* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Condition*>(UHitReactionLayer_Condition::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer_Cooldown
// (None)

class UClass* UHitReactionLayer_Cooldown::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Cooldown");

	return Clss;
}


// HitReactionLayer_Cooldown GbxGameSystemCore.Default__HitReactionLayer_Cooldown
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Cooldown* UHitReactionLayer_Cooldown::GetDefaultObj()
{
	static class UHitReactionLayer_Cooldown* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Cooldown*>(UHitReactionLayer_Cooldown::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer_Map
// (None)

class UClass* UHitReactionLayer_Map::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Map");

	return Clss;
}


// HitReactionLayer_Map GbxGameSystemCore.Default__HitReactionLayer_Map
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Map* UHitReactionLayer_Map::GetDefaultObj()
{
	static class UHitReactionLayer_Map* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Map*>(UHitReactionLayer_Map::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionLayer_Priority
// (None)

class UClass* UHitReactionLayer_Priority::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionLayer_Priority");

	return Clss;
}


// HitReactionLayer_Priority GbxGameSystemCore.Default__HitReactionLayer_Priority
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionLayer_Priority* UHitReactionLayer_Priority::GetDefaultObj()
{
	static class UHitReactionLayer_Priority* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionLayer_Priority*>(UHitReactionLayer_Priority::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitReactionTag
// (None)

class UClass* UHitReactionTag::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitReactionTag");

	return Clss;
}


// HitReactionTag GbxGameSystemCore.Default__HitReactionTag
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitReactionTag* UHitReactionTag::GetDefaultObj()
{
	static class UHitReactionTag* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitReactionTag*>(UHitReactionTag::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.HitRegionFunctionLibrary
// (None)

class UClass* UHitRegionFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("HitRegionFunctionLibrary");

	return Clss;
}


// HitRegionFunctionLibrary GbxGameSystemCore.Default__HitRegionFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UHitRegionFunctionLibrary* UHitRegionFunctionLibrary::GetDefaultObj()
{
	static class UHitRegionFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UHitRegionFunctionLibrary*>(UHitRegionFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.ResetHitRegionHealth
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::ResetHitRegionHealth(class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionFunctionLibrary", "ResetHitRegionHealth");

	Params::UHitRegionFunctionLibrary_ResetHitRegionHealth_Params Parms{};

	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.ResetAllHitRegionHealth
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::ResetAllHitRegionHealth(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionFunctionLibrary", "ResetAllHitRegionHealth");

	Params::UHitRegionFunctionLibrary_ResetAllHitRegionHealth_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.RefillHitRegionHealthByPercent
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                              RefillPercent                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::RefillHitRegionHealthByPercent(float RefillPercent, class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionFunctionLibrary", "RefillHitRegionHealthByPercent");

	Params::UHitRegionFunctionLibrary_RefillHitRegionHealthByPercent_Params Parms{};

	Parms.RefillPercent = RefillPercent;
	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.RefillHitRegionHealthByAmount
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                              RefillAmount                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         AssociatedComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::RefillHitRegionHealthByAmount(float RefillAmount, class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionFunctionLibrary", "RefillHitRegionHealthByAmount");

	Params::UHitRegionFunctionLibrary_RefillHitRegionHealthByAmount_Params Parms{};

	Parms.RefillAmount = RefillAmount;
	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.AssociateComponentWithHitRegion
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*         ComponentToAssociate                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*              HitRegion                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::AssociateComponentWithHitRegion(class AActor* Actor, class UPrimitiveComponent* ComponentToAssociate, class UHitRegionData* HitRegion)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("HitRegionFunctionLibrary", "AssociateComponentWithHitRegion");

	Params::UHitRegionFunctionLibrary_AssociateComponentWithHitRegion_Params Parms{};

	Parms.Actor = Actor;
	Parms.ComponentToAssociate = ComponentToAssociate;
	Parms.HitRegion = HitRegion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.IGbxProjectileManager
// (None)

class UClass* UIGbxProjectileManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("IGbxProjectileManager");

	return Clss;
}


// IGbxProjectileManager GbxGameSystemCore.Default__IGbxProjectileManager
// (Public, ClassDefaultObject, ArchetypeObject)

class UIGbxProjectileManager* UIGbxProjectileManager::GetDefaultObj()
{
	static class UIGbxProjectileManager* Default = nullptr;

	if (!Default)
		Default = static_cast<UIGbxProjectileManager*>(UIGbxProjectileManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.GbxReplicatorProxyData
// (None)

class UClass* IGbxReplicatorProxyData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("GbxReplicatorProxyData");

	return Clss;
}


// GbxReplicatorProxyData GbxGameSystemCore.Default__GbxReplicatorProxyData
// (Public, ClassDefaultObject, ArchetypeObject)

class IGbxReplicatorProxyData* IGbxReplicatorProxyData::GetDefaultObj()
{
	static class IGbxReplicatorProxyData* Default = nullptr;

	if (!Default)
		Default = static_cast<IGbxReplicatorProxyData*>(IGbxReplicatorProxyData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.InspectionInfoProvider
// (None)

class UClass* IInspectionInfoProvider::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("InspectionInfoProvider");

	return Clss;
}


// InspectionInfoProvider GbxGameSystemCore.Default__InspectionInfoProvider
// (Public, ClassDefaultObject, ArchetypeObject)

class IInspectionInfoProvider* IInspectionInfoProvider::GetDefaultObj()
{
	static class IInspectionInfoProvider* Default = nullptr;

	if (!Default)
		Default = static_cast<IInspectionInfoProvider*>(IInspectionInfoProvider::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.InspectionInfoProvider.GetInspectionInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FInspectionInfo             InspectionInfo                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInspectionInfoProvider::GetInspectionInfo(struct FInspectionInfo& InspectionInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InspectionInfoProvider", "GetInspectionInfo");

	Params::IInspectionInfoProvider_GetInspectionInfo_Params Parms{};

	Parms.InspectionInfo = InspectionInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ImpactData
// (None)

class UClass* UImpactData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactData");

	return Clss;
}


// ImpactData GbxGameSystemCore.Default__ImpactData
// (Public, ClassDefaultObject, ArchetypeObject)

class UImpactData* UImpactData::GetDefaultObj()
{
	static class UImpactData* Default = nullptr;

	if (!Default)
		Default = static_cast<UImpactData*>(UImpactData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ImpactExpansionData
// (None)

class UClass* UImpactExpansionData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactExpansionData");

	return Clss;
}


// ImpactExpansionData GbxGameSystemCore.Default__ImpactExpansionData
// (Public, ClassDefaultObject, ArchetypeObject)

class UImpactExpansionData* UImpactExpansionData::GetDefaultObj()
{
	static class UImpactExpansionData* Default = nullptr;

	if (!Default)
		Default = static_cast<UImpactExpansionData*>(UImpactExpansionData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ImpactDataOverride
// (None)

class UClass* IImpactDataOverride::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactDataOverride");

	return Clss;
}


// ImpactDataOverride GbxGameSystemCore.Default__ImpactDataOverride
// (Public, ClassDefaultObject, ArchetypeObject)

class IImpactDataOverride* IImpactDataOverride::GetDefaultObj()
{
	static class IImpactDataOverride* Default = nullptr;

	if (!Default)
		Default = static_cast<IImpactDataOverride*>(IImpactDataOverride::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ImpactDecalManager
// (Actor)

class UClass* AImpactDecalManager::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactDecalManager");

	return Clss;
}


// ImpactDecalManager GbxGameSystemCore.Default__ImpactDecalManager
// (Public, ClassDefaultObject, ArchetypeObject)

class AImpactDecalManager* AImpactDecalManager::GetDefaultObj()
{
	static class AImpactDecalManager* Default = nullptr;

	if (!Default)
		Default = static_cast<AImpactDecalManager*>(AImpactDecalManager::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.PooledImpactDecalComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UPooledImpactDecalComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PooledImpactDecalComponent");

	return Clss;
}


// PooledImpactDecalComponent GbxGameSystemCore.Default__PooledImpactDecalComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UPooledImpactDecalComponent* UPooledImpactDecalComponent::GetDefaultObj()
{
	static class UPooledImpactDecalComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UPooledImpactDecalComponent*>(UPooledImpactDecalComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ImpactEffectFunctionLibrary
// (None)

class UClass* UImpactEffectFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactEffectFunctionLibrary");

	return Clss;
}


// ImpactEffectFunctionLibrary GbxGameSystemCore.Default__ImpactEffectFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UImpactEffectFunctionLibrary* UImpactEffectFunctionLibrary::GetDefaultObj()
{
	static class UImpactEffectFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UImpactEffectFunctionLibrary*>(UImpactEffectFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayTraceImpactAndGetParticleSystemComponents
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UImpactData*                 ImpactData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TraceStart                                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TraceEnd                                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UParticleSystemComponent*>SpawnedParticleSystemComponents                                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// enum class ECollisionChannel       TraceChannel                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayTraceImpactAndGetParticleSystemComponents(class UImpactData* ImpactData, class AActor* Instigator, struct FVector& TraceStart, struct FVector& TraceEnd, TArray<class UParticleSystemComponent*>* SpawnedParticleSystemComponents, enum class ECollisionChannel TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactEffectFunctionLibrary", "PlayTraceImpactAndGetParticleSystemComponents");

	Params::UImpactEffectFunctionLibrary_PlayTraceImpactAndGetParticleSystemComponents_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.TraceStart = TraceStart;
	Parms.TraceEnd = TraceEnd;
	Parms.TraceChannel = TraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (SpawnedParticleSystemComponents != nullptr)
		*SpawnedParticleSystemComponents = std::move(Parms.SpawnedParticleSystemComponents);

}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayTraceImpact
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UImpactData*                 ImpactData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TraceStart                                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TraceEnd                                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ECollisionChannel       TraceChannel                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bReplicated                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayTraceImpact(class UImpactData* ImpactData, class AActor* Instigator, struct FVector& TraceStart, struct FVector& TraceEnd, enum class ECollisionChannel TraceChannel, bool bReplicated)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactEffectFunctionLibrary", "PlayTraceImpact");

	Params::UImpactEffectFunctionLibrary_PlayTraceImpact_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.TraceStart = TraceStart;
	Parms.TraceEnd = TraceEnd;
	Parms.TraceChannel = TraceChannel;
	Parms.bReplicated = bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayHitResultImpactGetParticleSystemComponents
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImpactData*                 ImpactData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  HitInfo                                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UParticleSystemComponent*>SpawnedParticleSystemComponents                                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayHitResultImpactGetParticleSystemComponents(class UImpactData* ImpactData, class AActor* Instigator, struct FHitResult& HitInfo, TArray<class UParticleSystemComponent*>* SpawnedParticleSystemComponents)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactEffectFunctionLibrary", "PlayHitResultImpactGetParticleSystemComponents");

	Params::UImpactEffectFunctionLibrary_PlayHitResultImpactGetParticleSystemComponents_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.HitInfo = HitInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (SpawnedParticleSystemComponents != nullptr)
		*SpawnedParticleSystemComponents = std::move(Parms.SpawnedParticleSystemComponents);

}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayHitResultImpact
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImpactData*                 ImpactData                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Instigator                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  HitInfo                                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               bReplicated                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayHitResultImpact(class UImpactData* ImpactData, class AActor* Instigator, struct FHitResult& HitInfo, bool bReplicated)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactEffectFunctionLibrary", "PlayHitResultImpact");

	Params::UImpactEffectFunctionLibrary_PlayHitResultImpact_Params Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.HitInfo = HitInfo;
	Parms.bReplicated = bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ImpactFXManagerComponent
// (None)

class UClass* UImpactFXManagerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ImpactFXManagerComponent");

	return Clss;
}


// ImpactFXManagerComponent GbxGameSystemCore.Default__ImpactFXManagerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UImpactFXManagerComponent* UImpactFXManagerComponent::GetDefaultObj()
{
	static class UImpactFXManagerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UImpactFXManagerComponent*>(UImpactFXManagerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ImpactFXManagerComponent.SetEffectsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bEnabled                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::SetEffectsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactFXManagerComponent", "SetEffectsEnabled");

	Params::UImpactFXManagerComponent_SetEffectsEnabled_Params Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnTrackedParticleSystemFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*    PSC                                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnTrackedParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnTrackedParticleSystemFinished");

	Params::UImpactFXManagerComponent_OnTrackedParticleSystemFinished_Params Parms{};

	Parms.PSC = PSC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnTrackedComponentDeactivated
// (Final, Native, Protected)
// Parameters:
// class UActorComponent*             Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnTrackedComponentDeactivated(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnTrackedComponentDeactivated");

	Params::UImpactFXManagerComponent_OnTrackedComponentDeactivated_Params Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnHit
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                      SelfActor                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      OtherActor                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     NormalImpulse                                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                  Hit                                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnHit");

	Params::UImpactFXManagerComponent_OnHit_Params Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = NormalImpulse;
	Parms.Hit = Hit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.InspectionInfoFunctionLibrary
// (None)

class UClass* UInspectionInfoFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("InspectionInfoFunctionLibrary");

	return Clss;
}


// InspectionInfoFunctionLibrary GbxGameSystemCore.Default__InspectionInfoFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UInspectionInfoFunctionLibrary* UInspectionInfoFunctionLibrary::GetDefaultObj()
{
	static class UInspectionInfoFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UInspectionInfoFunctionLibrary*>(UInspectionInfoFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.InspectionInfoFunctionLibrary.AddScreenOutput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectionInfo             InspectionInfo                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                      String                                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EDebugDisplayVerbosityLevelVerbosity                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectionInfoFunctionLibrary::AddScreenOutput(struct FInspectionInfo& InspectionInfo, const class FString& String, enum class EDebugDisplayVerbosityLevel Verbosity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InspectionInfoFunctionLibrary", "AddScreenOutput");

	Params::UInspectionInfoFunctionLibrary_AddScreenOutput_Params Parms{};

	Parms.InspectionInfo = InspectionInfo;
	Parms.String = String;
	Parms.Verbosity = Verbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InspectionInfoFunctionLibrary.AddAboveActorOutput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectionInfo             InspectionInfo                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                      String                                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EDebugDisplayVerbosityLevelVerbosity                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectionInfoFunctionLibrary::AddAboveActorOutput(struct FInspectionInfo& InspectionInfo, const class FString& String, enum class EDebugDisplayVerbosityLevel Verbosity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InspectionInfoFunctionLibrary", "AddAboveActorOutput");

	Params::UInspectionInfoFunctionLibrary_AddAboveActorOutput_Params Parms{};

	Parms.InspectionInfo = InspectionInfo;
	Parms.String = String;
	Parms.Verbosity = Verbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.InterpComponent
// (None)

class UClass* UInterpComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("InterpComponent");

	return Clss;
}


// InterpComponent GbxGameSystemCore.Default__InterpComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UInterpComponent* UInterpComponent::GetDefaultObj()
{
	static class UInterpComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UInterpComponent*>(UInterpComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.InterpComponent.Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UInterpComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "Stop");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.SetUpdateVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bNewUpdateVelocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetUpdateVelocity(bool bNewUpdateVelocity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "SetUpdateVelocity");

	Params::UInterpComponent_SetUpdateVelocity_Params Parms{};

	Parms.bNewUpdateVelocity = bNewUpdateVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.SetRemoveOnCompletion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bRemove                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetRemoveOnCompletion(bool bRemove)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "SetRemoveOnCompletion");

	Params::UInterpComponent_SetRemoveOnCompletion_Params Parms{};

	Parms.bRemove = bRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.SetManualTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bManual                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetManualTick(bool bManual)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "SetManualTick");

	Params::UInterpComponent_SetManualTick_Params Parms{};

	Parms.bManual = bManual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.SetClearVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bNewClearVelocity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetClearVelocity(bool bNewClearVelocity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "SetClearVelocity");

	Params::UInterpComponent_SetClearVelocity_Params Parms{};

	Parms.bNewClearVelocity = bNewClearVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.MatchRotationToVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               bInSetToInitialWhenFinished                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::MatchRotationToVelocity(bool bInSetToInitialWhenFinished)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "MatchRotationToVelocity");

	Params::UInterpComponent_MatchRotationToVelocity_Params Parms{};

	Parms.bInSetToInitialWhenFinished = bInSetToInitialWhenFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.ManualTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::ManualTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "ManualTick");

	Params::UInterpComponent_ManualTick_Params Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.IsFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterpComponent::IsFinished()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "IsFinished");

	Params::UInterpComponent_IsFinished_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.InterpComponent.InterpRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                    NewRot                                                           (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              InterpTime                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLinear                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bYawOnly                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInRelative                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpRotation(const struct FRotator& NewRot, float InterpTime, bool bLinear, bool bYawOnly, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpRotation");

	Params::UInterpComponent_InterpRotation_Params Parms{};

	Parms.NewRot = NewRot;
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bYawOnly = bYawOnly;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.InterpLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     NewLoc                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InterpTime                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLinear                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bNoZ                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInRelative                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpLocation(const struct FVector& NewLoc, float InterpTime, bool bLinear, bool bNoZ, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpLocation");

	Params::UInterpComponent_InterpLocation_Params Parms{};

	Parms.NewLoc = NewLoc;
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bNoZ = bNoZ;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.InterpDeltaRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                    DeltaRot                                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              InterpTime                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLinear                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bYawOnly                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInRelative                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpDeltaRotation(const struct FRotator& DeltaRot, float InterpTime, bool bLinear, bool bYawOnly, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpDeltaRotation");

	Params::UInterpComponent_InterpDeltaRotation_Params Parms{};

	Parms.DeltaRot = DeltaRot;
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bYawOnly = bYawOnly;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.InterpDeltaLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     DeltaLoc                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              InterpTime                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bLinear                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bNoZ                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInRelative                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpDeltaLocation(const struct FVector& DeltaLoc, float InterpTime, bool bLinear, bool bNoZ, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpDeltaLocation");

	Params::UInterpComponent_InterpDeltaLocation_Params Parms{};

	Parms.DeltaLoc = DeltaLoc;
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bNoZ = bNoZ;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.InterpComponent.InterpBallisticsByTime
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     StartLoc                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     EndLoc                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LeapTime                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LeapGravity                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UInterpComponent::InterpBallisticsByTime(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapTime, float LeapGravity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpBallisticsByTime");

	Params::UInterpComponent_InterpBallisticsByTime_Params Parms{};

	Parms.StartLoc = StartLoc;
	Parms.EndLoc = EndLoc;
	Parms.LeapTime = LeapTime;
	Parms.LeapGravity = LeapGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.InterpComponent.InterpBallistics
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                     StartLoc                                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     EndLoc                                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LeapSpeed                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              LeapAngle                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInterpComponent::InterpBallistics(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapSpeed, float LeapAngle)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("InterpComponent", "InterpBallistics");

	Params::UInterpComponent_InterpBallistics_Params Parms{};

	Parms.StartLoc = StartLoc;
	Parms.EndLoc = EndLoc;
	Parms.LeapSpeed = LeapSpeed;
	Parms.LeapAngle = LeapAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.Ladder
// (Actor)

class UClass* ALadder::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("Ladder");

	return Clss;
}


// Ladder GbxGameSystemCore.Default__Ladder
// (Public, ClassDefaultObject, ArchetypeObject)

class ALadder* ALadder::GetDefaultObj()
{
	static class ALadder* Default = nullptr;

	if (!Default)
		Default = static_cast<ALadder*>(ALadder::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.LadderInterface
// (None)

class UClass* ILadderInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LadderInterface");

	return Clss;
}


// LadderInterface GbxGameSystemCore.Default__LadderInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ILadderInterface* ILadderInterface::GetDefaultObj()
{
	static class ILadderInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ILadderInterface*>(ILadderInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.LadderVolume
// (Actor)

class UClass* ALadderVolume::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LadderVolume");

	return Clss;
}


// LadderVolume GbxGameSystemCore.Default__LadderVolume
// (Public, ClassDefaultObject, ArchetypeObject)

class ALadderVolume* ALadderVolume::GetDefaultObj()
{
	static class ALadderVolume* Default = nullptr;

	if (!Default)
		Default = static_cast<ALadderVolume*>(ALadderVolume::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.LandingData
// (None)

class UClass* ULandingData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("LandingData");

	return Clss;
}


// LandingData GbxGameSystemCore.Default__LandingData
// (Public, ClassDefaultObject, ArchetypeObject)

class ULandingData* ULandingData::GetDefaultObj()
{
	static class ULandingData* Default = nullptr;

	if (!Default)
		Default = static_cast<ULandingData*>(ULandingData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.MantleData
// (None)

class UClass* UMantleData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("MantleData");

	return Clss;
}


// MantleData GbxGameSystemCore.Default__MantleData
// (Public, ClassDefaultObject, ArchetypeObject)

class UMantleData* UMantleData::GetDefaultObj()
{
	static class UMantleData* Default = nullptr;

	if (!Default)
		Default = static_cast<UMantleData*>(UMantleData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ModifierMathAttributeValueResolver
// (None)

class UClass* UModifierMathAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ModifierMathAttributeValueResolver");

	return Clss;
}


// ModifierMathAttributeValueResolver GbxGameSystemCore.Default__ModifierMathAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UModifierMathAttributeValueResolver* UModifierMathAttributeValueResolver::GetDefaultObj()
{
	static class UModifierMathAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UModifierMathAttributeValueResolver*>(UModifierMathAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.MotionControlLibrary
// (None)

class UClass* UMotionControlLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("MotionControlLibrary");

	return Clss;
}


// MotionControlLibrary GbxGameSystemCore.Default__MotionControlLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UMotionControlLibrary* UMotionControlLibrary::GetDefaultObj()
{
	static class UMotionControlLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UMotionControlLibrary*>(UMotionControlLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.MotionControlLibrary.UpdateSpeed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                              CurrentSpeed                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              TargetSpeed                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Acceleration                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMotionControlLibrary::UpdateSpeed(float CurrentSpeed, float TargetSpeed, float Acceleration, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("MotionControlLibrary", "UpdateSpeed");

	Params::UMotionControlLibrary_UpdateSpeed_Params Parms{};

	Parms.CurrentSpeed = CurrentSpeed;
	Parms.TargetSpeed = TargetSpeed;
	Parms.Acceleration = Acceleration;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.MotionControlLibrary.Spin
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                    CurrentRotation                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                              RotationRate                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     RotationAxis                                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              DeltaTime                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                    ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UMotionControlLibrary::Spin(struct FRotator& CurrentRotation, float RotationRate, const struct FVector& RotationAxis, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("MotionControlLibrary", "Spin");

	Params::UMotionControlLibrary_Spin_Params Parms{};

	Parms.CurrentRotation = CurrentRotation;
	Parms.RotationRate = RotationRate;
	Parms.RotationAxis = RotationAxis;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputAction
// (None)

class UClass* UNexusConfigStoreGbxInputAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputAction");

	return Clss;
}


// NexusConfigStoreGbxInputAction GbxGameSystemCore.Default__NexusConfigStoreGbxInputAction
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputAction* UNexusConfigStoreGbxInputAction::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputAction* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputAction*>(UNexusConfigStoreGbxInputAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputContext
// (None)

class UClass* UNexusConfigStoreGbxInputContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputContext");

	return Clss;
}


// NexusConfigStoreGbxInputContext GbxGameSystemCore.Default__NexusConfigStoreGbxInputContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputContext* UNexusConfigStoreGbxInputContext::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputContext*>(UNexusConfigStoreGbxInputContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputFeel
// (None)

class UClass* UNexusConfigStoreGbxInputFeel::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputFeel");

	return Clss;
}


// NexusConfigStoreGbxInputFeel GbxGameSystemCore.Default__NexusConfigStoreGbxInputFeel
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputFeel* UNexusConfigStoreGbxInputFeel::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputFeel* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputFeel*>(UNexusConfigStoreGbxInputFeel::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputKeyRebind
// (None)

class UClass* UNexusConfigStoreGbxInputKeyRebind::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputKeyRebind");

	return Clss;
}


// NexusConfigStoreGbxInputKeyRebind GbxGameSystemCore.Default__NexusConfigStoreGbxInputKeyRebind
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputKeyRebind* UNexusConfigStoreGbxInputKeyRebind::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputKeyRebind* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputKeyRebind*>(UNexusConfigStoreGbxInputKeyRebind::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputRebindContext
// (None)

class UClass* UNexusConfigStoreGbxInputRebindContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputRebindContext");

	return Clss;
}


// NexusConfigStoreGbxInputRebindContext GbxGameSystemCore.Default__NexusConfigStoreGbxInputRebindContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputRebindContext* UNexusConfigStoreGbxInputRebindContext::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputRebindContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputRebindContext*>(UNexusConfigStoreGbxInputRebindContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.NexusConfigStoreGbxInputSchema
// (None)

class UClass* UNexusConfigStoreGbxInputSchema::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("NexusConfigStoreGbxInputSchema");

	return Clss;
}


// NexusConfigStoreGbxInputSchema GbxGameSystemCore.Default__NexusConfigStoreGbxInputSchema
// (Public, ClassDefaultObject, ArchetypeObject)

class UNexusConfigStoreGbxInputSchema* UNexusConfigStoreGbxInputSchema::GetDefaultObj()
{
	static class UNexusConfigStoreGbxInputSchema* Default = nullptr;

	if (!Default)
		Default = static_cast<UNexusConfigStoreGbxInputSchema*>(UNexusConfigStoreGbxInputSchema::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.OrbitingActorComponent
// (None)

class UClass* UOrbitingActorComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("OrbitingActorComponent");

	return Clss;
}


// OrbitingActorComponent GbxGameSystemCore.Default__OrbitingActorComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UOrbitingActorComponent* UOrbitingActorComponent::GetDefaultObj()
{
	static class UOrbitingActorComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UOrbitingActorComponent*>(UOrbitingActorComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.OrbitingActorComponent.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      NewTarget                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrbitingActorComponent::SetTargetActor(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("OrbitingActorComponent", "SetTargetActor");

	Params::UOrbitingActorComponent_SetTargetActor_Params Parms{};

	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.OrbitingActorComponent.OnRep_TargetActor
// (Final, Native, Protected)
// Parameters:
// class AActor*                      LastTarget                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrbitingActorComponent::OnRep_TargetActor(class AActor* LastTarget)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("OrbitingActorComponent", "OnRep_TargetActor");

	Params::UOrbitingActorComponent_OnRep_TargetActor_Params Parms{};

	Parms.LastTarget = LastTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ParentChallenge
// (None)

class UClass* UParentChallenge::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ParentChallenge");

	return Clss;
}


// ParentChallenge GbxGameSystemCore.Default__ParentChallenge
// (Public, ClassDefaultObject, ArchetypeObject)

class UParentChallenge* UParentChallenge::GetDefaultObj()
{
	static class UParentChallenge* Default = nullptr;

	if (!Default)
		Default = static_cast<UParentChallenge*>(UParentChallenge::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ParticleAttributeParameterEvaluator
// (None)

class UClass* UParticleAttributeParameterEvaluator::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ParticleAttributeParameterEvaluator");

	return Clss;
}


// ParticleAttributeParameterEvaluator GbxGameSystemCore.Default__ParticleAttributeParameterEvaluator
// (Public, ClassDefaultObject, ArchetypeObject)

class UParticleAttributeParameterEvaluator* UParticleAttributeParameterEvaluator::GetDefaultObj()
{
	static class UParticleAttributeParameterEvaluator* Default = nullptr;

	if (!Default)
		Default = static_cast<UParticleAttributeParameterEvaluator*>(UParticleAttributeParameterEvaluator::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ParticleConditionalEmitterEvaluator
// (None)

class UClass* UParticleConditionalEmitterEvaluator::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ParticleConditionalEmitterEvaluator");

	return Clss;
}


// ParticleConditionalEmitterEvaluator GbxGameSystemCore.Default__ParticleConditionalEmitterEvaluator
// (Public, ClassDefaultObject, ArchetypeObject)

class UParticleConditionalEmitterEvaluator* UParticleConditionalEmitterEvaluator::GetDefaultObj()
{
	static class UParticleConditionalEmitterEvaluator* Default = nullptr;

	if (!Default)
		Default = static_cast<UParticleConditionalEmitterEvaluator*>(UParticleConditionalEmitterEvaluator::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ParticlePropertyTrackingData
// (None)

class UClass* UParticlePropertyTrackingData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ParticlePropertyTrackingData");

	return Clss;
}


// ParticlePropertyTrackingData GbxGameSystemCore.Default__ParticlePropertyTrackingData
// (Public, ClassDefaultObject, ArchetypeObject)

class UParticlePropertyTrackingData* UParticlePropertyTrackingData::GetDefaultObj()
{
	static class UParticlePropertyTrackingData* Default = nullptr;

	if (!Default)
		Default = static_cast<UParticlePropertyTrackingData*>(UParticlePropertyTrackingData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.PawnAttachmentFunctionLibrary
// (None)

class UClass* UPawnAttachmentFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PawnAttachmentFunctionLibrary");

	return Clss;
}


// PawnAttachmentFunctionLibrary GbxGameSystemCore.Default__PawnAttachmentFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UPawnAttachmentFunctionLibrary* UPawnAttachmentFunctionLibrary::GetDefaultObj()
{
	static class UPawnAttachmentFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UPawnAttachmentFunctionLibrary*>(UPawnAttachmentFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.RequestDetachPawnFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SlotName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::RequestDetachPawnFromSlot(class AActor* Actor, class FName SlotName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "RequestDetachPawnFromSlot");

	Params::UPawnAttachmentFunctionLibrary_RequestDetachPawnFromSlot_Params Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.RequestDetachPawnFromActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                       Pawn                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::RequestDetachPawnFromActor(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "RequestDetachPawnFromActor");

	Params::UPawnAttachmentFunctionLibrary_RequestDetachPawnFromActor_Params Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.QueryPawnAttachment
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                       Pawn                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPawnAttachmentQueryResult  ReturnValue                                                      (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPawnAttachmentQueryResult UPawnAttachmentFunctionLibrary::QueryPawnAttachment(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "QueryPawnAttachment");

	Params::UPawnAttachmentFunctionLibrary_QueryPawnAttachment_Params Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.FindPawnAttachSlotComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                       Pawn                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPawnAttachSlotComponent*    ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPawnAttachSlotComponent* UPawnAttachmentFunctionLibrary::FindPawnAttachSlotComponent(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "FindPawnAttachSlotComponent");

	Params::UPawnAttachmentFunctionLibrary_FindPawnAttachSlotComponent_Params Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.DetachPawnFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SlotName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInstant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::DetachPawnFromSlot(class AActor* Actor, class FName SlotName, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "DetachPawnFromSlot");

	Params::UPawnAttachmentFunctionLibrary_DetachPawnFromSlot_Params Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.DetachPawnFromActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                       Pawn                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInstant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::DetachPawnFromActor(class APawn* Pawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "DetachPawnFromActor");

	Params::UPawnAttachmentFunctionLibrary_DetachPawnFromActor_Params Parms{};

	Parms.Pawn = Pawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.AttachPawnToSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SlotName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                       Pawn                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bInstant                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::AttachPawnToSlot(class AActor* Actor, class FName SlotName, class APawn* Pawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("PawnAttachmentFunctionLibrary", "AttachPawnToSlot");

	Params::UPawnAttachmentFunctionLibrary_AttachPawnToSlot_Params Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;
	Parms.Pawn = Pawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.PawnAttributeContextResolver
// (None)

class UClass* UPawnAttributeContextResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PawnAttributeContextResolver");

	return Clss;
}


// PawnAttributeContextResolver GbxGameSystemCore.Default__PawnAttributeContextResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UPawnAttributeContextResolver* UPawnAttributeContextResolver::GetDefaultObj()
{
	static class UPawnAttributeContextResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UPawnAttributeContextResolver*>(UPawnAttributeContextResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.PhysicalAnimationProfileAsset
// (None)

class UClass* UPhysicalAnimationProfileAsset::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PhysicalAnimationProfileAsset");

	return Clss;
}


// PhysicalAnimationProfileAsset GbxGameSystemCore.Default__PhysicalAnimationProfileAsset
// (Public, ClassDefaultObject, ArchetypeObject)

class UPhysicalAnimationProfileAsset* UPhysicalAnimationProfileAsset::GetDefaultObj()
{
	static class UPhysicalAnimationProfileAsset* Default = nullptr;

	if (!Default)
		Default = static_cast<UPhysicalAnimationProfileAsset*>(UPhysicalAnimationProfileAsset::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent
// (None)

class UClass* UProjectileAimViewPointHomingTargetComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ProjectileAimViewPointHomingTargetComponent");

	return Clss;
}


// ProjectileAimViewPointHomingTargetComponent GbxGameSystemCore.Default__ProjectileAimViewPointHomingTargetComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UProjectileAimViewPointHomingTargetComponent* UProjectileAimViewPointHomingTargetComponent::GetDefaultObj()
{
	static class UProjectileAimViewPointHomingTargetComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UProjectileAimViewPointHomingTargetComponent*>(UProjectileAimViewPointHomingTargetComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.SetTargetController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                 InTargetController                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileAimViewPointHomingTargetComponent::SetTargetController(class AController* InTargetController)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "SetTargetController");

	Params::UProjectileAimViewPointHomingTargetComponent_SetTargetController_Params Parms{};

	Parms.InTargetController = InTargetController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                      InTargetActor                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileAimViewPointHomingTargetComponent::SetTargetActor(class AActor* InTargetActor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "SetTargetActor");

	Params::UProjectileAimViewPointHomingTargetComponent_SetTargetActor_Params Parms{};

	Parms.InTargetActor = InTargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.GetTargetController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* UProjectileAimViewPointHomingTargetComponent::GetTargetController()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "GetTargetController");

	Params::UProjectileAimViewPointHomingTargetComponent_GetTargetController_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.GetCurrentHomingLoc
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UProjectileAimViewPointHomingTargetComponent::GetCurrentHomingLoc()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "GetCurrentHomingLoc");

	Params::UProjectileAimViewPointHomingTargetComponent_GetCurrentHomingLoc_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.PropertyUtilsTestContext
// (None)

class UClass* UPropertyUtilsTestContext::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("PropertyUtilsTestContext");

	return Clss;
}


// PropertyUtilsTestContext GbxGameSystemCore.Default__PropertyUtilsTestContext
// (Public, ClassDefaultObject, ArchetypeObject)

class UPropertyUtilsTestContext* UPropertyUtilsTestContext::GetDefaultObj()
{
	static class UPropertyUtilsTestContext* Default = nullptr;

	if (!Default)
		Default = static_cast<UPropertyUtilsTestContext*>(UPropertyUtilsTestContext::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.RangedFeedbackData
// (None)

class UClass* URangedFeedbackData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("RangedFeedbackData");

	return Clss;
}


// RangedFeedbackData GbxGameSystemCore.Default__RangedFeedbackData
// (Public, ClassDefaultObject, ArchetypeObject)

class URangedFeedbackData* URangedFeedbackData::GetDefaultObj()
{
	static class URangedFeedbackData* Default = nullptr;

	if (!Default)
		Default = static_cast<URangedFeedbackData*>(URangedFeedbackData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ReferenceActor
// (Actor)

class UClass* AReferenceActor::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ReferenceActor");

	return Clss;
}


// ReferenceActor GbxGameSystemCore.Default__ReferenceActor
// (Public, ClassDefaultObject, ArchetypeObject)

class AReferenceActor* AReferenceActor::GetDefaultObj()
{
	static class AReferenceActor* Default = nullptr;

	if (!Default)
		Default = static_cast<AReferenceActor*>(AReferenceActor::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ReferenceActor.EnumeratePreviewClasses
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                ClasssList                                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AReferenceActor::EnumeratePreviewClasses(TArray<class FName>* ClasssList)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReferenceActor", "EnumeratePreviewClasses");

	Params::AReferenceActor_EnumeratePreviewClasses_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (ClasssList != nullptr)
		*ClasssList = std::move(Parms.ClasssList);

}


// Class GbxGameSystemCore.ReplicatedEmitter
// (Actor)

class UClass* AReplicatedEmitter::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ReplicatedEmitter");

	return Clss;
}


// ReplicatedEmitter GbxGameSystemCore.Default__ReplicatedEmitter
// (Public, ClassDefaultObject, ArchetypeObject)

class AReplicatedEmitter* AReplicatedEmitter::GetDefaultObj()
{
	static class AReplicatedEmitter* Default = nullptr;

	if (!Default)
		Default = static_cast<AReplicatedEmitter*>(AReplicatedEmitter::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_TemplateOptions
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_TemplateOptions()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_TemplateOptions");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedWwiseEvent
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_ReplicatedWwiseEvent()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedWwiseEvent");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedVectorParams
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_ReplicatedVectorParams()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedVectorParams");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedFloatParams
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_ReplicatedFloatParams()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedFloatParams");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedColorParams
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_ReplicatedColorParams()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedColorParams");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_OwnerNoSeeEmitter
// (Final, Native, Protected)
// Parameters:

void AReplicatedEmitter::OnRep_OwnerNoSeeEmitter()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_OwnerNoSeeEmitter");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.ResourceWeightAttributeValueResolver
// (None)

class UClass* UResourceWeightAttributeValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ResourceWeightAttributeValueResolver");

	return Clss;
}


// ResourceWeightAttributeValueResolver GbxGameSystemCore.Default__ResourceWeightAttributeValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UResourceWeightAttributeValueResolver* UResourceWeightAttributeValueResolver::GetDefaultObj()
{
	static class UResourceWeightAttributeValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UResourceWeightAttributeValueResolver*>(UResourceWeightAttributeValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.RigidBodyActor
// (Actor)

class UClass* ARigidBodyActor::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("RigidBodyActor");

	return Clss;
}


// RigidBodyActor GbxGameSystemCore.Default__RigidBodyActor
// (Public, ClassDefaultObject, ArchetypeObject)

class ARigidBodyActor* ARigidBodyActor::GetDefaultObj()
{
	static class ARigidBodyActor* Default = nullptr;

	if (!Default)
		Default = static_cast<ARigidBodyActor*>(ARigidBodyActor::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.RigidBodyComponent
// (SceneComponent, PrimitiveComponent, StaticMeshComponent)

class UClass* URigidBodyComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("RigidBodyComponent");

	return Clss;
}


// RigidBodyComponent GbxGameSystemCore.Default__RigidBodyComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class URigidBodyComponent* URigidBodyComponent::GetDefaultObj()
{
	static class URigidBodyComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<URigidBodyComponent*>(URigidBodyComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.RigidBodyComponent.SetKinematic
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*         SleepingComponent                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        BoneName                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URigidBodyComponent::SetKinematic(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("RigidBodyComponent", "SetKinematic");

	Params::URigidBodyComponent_SetKinematic_Params Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.SaveGameActorInterface
// (None)

class UClass* ISaveGameActorInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SaveGameActorInterface");

	return Clss;
}


// SaveGameActorInterface GbxGameSystemCore.Default__SaveGameActorInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ISaveGameActorInterface* ISaveGameActorInterface::GetDefaultObj()
{
	static class ISaveGameActorInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ISaveGameActorInterface*>(ISaveGameActorInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SceneBodySwitchAction
// (None)

class UClass* USceneBodySwitchAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SceneBodySwitchAction");

	return Clss;
}


// SceneBodySwitchAction GbxGameSystemCore.Default__SceneBodySwitchAction
// (Public, ClassDefaultObject, ArchetypeObject)

class USceneBodySwitchAction* USceneBodySwitchAction::GetDefaultObj()
{
	static class USceneBodySwitchAction* Default = nullptr;

	if (!Default)
		Default = static_cast<USceneBodySwitchAction*>(USceneBodySwitchAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SceneBodySwitchComponent
// (SceneComponent)

class UClass* USceneBodySwitchComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SceneBodySwitchComponent");

	return Clss;
}


// SceneBodySwitchComponent GbxGameSystemCore.Default__SceneBodySwitchComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class USceneBodySwitchComponent* USceneBodySwitchComponent::GetDefaultObj()
{
	static class USceneBodySwitchComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<USceneBodySwitchComponent*>(USceneBodySwitchComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.SceneBodySwitchComponent.OnRep_ReplicatedState
// (Final, Native, Private)
// Parameters:

void USceneBodySwitchComponent::OnRep_ReplicatedState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchComponent", "OnRep_ReplicatedState");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.SceneBodySwitchComponent.HandleWwiseEventFinished
// (Final, Native, Private)
// Parameters:
// class UWwiseAudioComponent*        WAC                                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                 WwiseEvent                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::HandleWwiseEventFinished(class UWwiseAudioComponent* WAC, class UWwiseEvent* WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchComponent", "HandleWwiseEventFinished");

	Params::USceneBodySwitchComponent_HandleWwiseEventFinished_Params Parms{};

	Parms.WAC = WAC;
	Parms.WwiseEvent = WwiseEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.SceneBodySwitchComponent.HandleParticleSystemFinished
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*    PSC                                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::HandleParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchComponent", "HandleParticleSystemFinished");

	Params::USceneBodySwitchComponent_HandleParticleSystemFinished_Params Parms{};

	Parms.PSC = PSC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.SceneBodySwitchComponent.GetValidSwitchStateNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                OutNames                                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::GetValidSwitchStateNames(TArray<class FName>* OutNames)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchComponent", "GetValidSwitchStateNames");

	Params::USceneBodySwitchComponent_GetValidSwitchStateNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutNames != nullptr)
		*OutNames = std::move(Parms.OutNames);

}


// Class GbxGameSystemCore.SceneBodySwitchFunctionLibrary
// (None)

class UClass* USceneBodySwitchFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SceneBodySwitchFunctionLibrary");

	return Clss;
}


// SceneBodySwitchFunctionLibrary GbxGameSystemCore.Default__SceneBodySwitchFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class USceneBodySwitchFunctionLibrary* USceneBodySwitchFunctionLibrary::GetDefaultObj()
{
	static class USceneBodySwitchFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<USceneBodySwitchFunctionLibrary*>(USceneBodySwitchFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.EnumerateValidSwitchStateNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// class FName                        SwitchName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                Names                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::EnumerateValidSwitchStateNames(class FName SwitchName, TArray<class FName>* Names)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "EnumerateValidSwitchStateNames");

	Params::USceneBodySwitchFunctionLibrary_EnumerateValidSwitchStateNames_Params Parms{};

	Parms.SwitchName = SwitchName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);

}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.EnumerateValidSwitchNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Names                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::EnumerateValidSwitchNames(TArray<class FName>* Names)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "EnumerateValidSwitchNames");

	Params::USceneBodySwitchFunctionLibrary_EnumerateValidSwitchNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);

}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.ChangeSwitchExternal
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SwitchName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        StateName                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::ChangeSwitchExternal(class AActor* Actor, class FName SwitchName, class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "ChangeSwitchExternal");

	Params::USceneBodySwitchFunctionLibrary_ChangeSwitchExternal_Params Parms{};

	Parms.Actor = Actor;
	Parms.SwitchName = SwitchName;
	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.ChangeSwitch
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        SwitchName                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        StateName                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::ChangeSwitch(class UObject* Context, class FName SwitchName, class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "ChangeSwitch");

	Params::USceneBodySwitchFunctionLibrary_ChangeSwitch_Params Parms{};

	Parms.Context = Context;
	Parms.SwitchName = SwitchName;
	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.SceneBodySwitchManagerComponent
// (None)

class UClass* USceneBodySwitchManagerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SceneBodySwitchManagerComponent");

	return Clss;
}


// SceneBodySwitchManagerComponent GbxGameSystemCore.Default__SceneBodySwitchManagerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class USceneBodySwitchManagerComponent* USceneBodySwitchManagerComponent::GetDefaultObj()
{
	static class USceneBodySwitchManagerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<USceneBodySwitchManagerComponent*>(USceneBodySwitchManagerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.ScreenParticleManagerComponent
// (None)

class UClass* UScreenParticleManagerComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("ScreenParticleManagerComponent");

	return Clss;
}


// ScreenParticleManagerComponent GbxGameSystemCore.Default__ScreenParticleManagerComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UScreenParticleManagerComponent* UScreenParticleManagerComponent::GetDefaultObj()
{
	static class UScreenParticleManagerComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UScreenParticleManagerComponent*>(UScreenParticleManagerComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ShowScreenParticleForActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHideWhenFinished                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                   ContentDims                                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ParticleDepth                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EScreenParticleScalingModeScalingMode                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOnlyOwnerSee                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAlwaysVisible                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAllowMultipleInstances                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bServerAuthority                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bTickEvenWhenPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHideDuringInGameMenu                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ShowScreenParticleForActor(class AActor* Actor, class UParticleSystem* Template, bool bHideWhenFinished, const struct FVector2D& ContentDims, float ParticleDepth, enum class EScreenParticleScalingMode ScalingMode, bool bOnlyOwnerSee, bool bAlwaysVisible, class FName Tag, bool bAllowMultipleInstances, bool bServerAuthority, bool bTickEvenWhenPaused, bool bHideDuringInGameMenu)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ShowScreenParticleForActor");

	Params::UScreenParticleManagerComponent_ShowScreenParticleForActor_Params Parms{};

	Parms.Actor = Actor;
	Parms.Template = Template;
	Parms.bHideWhenFinished = bHideWhenFinished;
	Parms.ContentDims = ContentDims;
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.bOnlyOwnerSee = bOnlyOwnerSee;
	Parms.bAlwaysVisible = bAlwaysVisible;
	Parms.Tag = Tag;
	Parms.bAllowMultipleInstances = bAllowMultipleInstances;
	Parms.bServerAuthority = bServerAuthority;
	Parms.bTickEvenWhenPaused = bTickEvenWhenPaused;
	Parms.bHideDuringInGameMenu = bHideDuringInGameMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.OnScreenParticleFinished
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*    Component                                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::OnScreenParticleFinished(class UParticleSystemComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "OnScreenParticleFinished");

	Params::UScreenParticleManagerComponent_OnScreenParticleFinished_Params Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.HideScreenParticleForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAllowParticleToFinish                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bServerAuthority                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::HideScreenParticleForActor(class AActor* Actor, class UParticleSystem* Template, class FName Tag, bool bAllowParticleToFinish, bool bServerAuthority)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "HideScreenParticleForActor");

	Params::UScreenParticleManagerComponent_HideScreenParticleForActor_Params Parms{};

	Parms.Actor = Actor;
	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.bAllowParticleToFinish = bAllowParticleToFinish;
	Parms.bServerAuthority = bServerAuthority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientTrackParticleProperty
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticlePropertyTrackingData*TrackingData                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        PropertyName                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              PropertyValue                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAddToValue                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*          UsedMaterialProperty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        MaterialPropertyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientTrackParticleProperty(class UParticlePropertyTrackingData* TrackingData, class UParticleSystem* Template, class FName Tag, class FName PropertyName, float PropertyValue, bool bAddToValue, class UMaterialInterface* UsedMaterialProperty, class FName MaterialPropertyName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientTrackParticleProperty");

	Params::UScreenParticleManagerComponent_ClientTrackParticleProperty_Params Parms{};

	Parms.TrackingData = TrackingData;
	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.PropertyName = PropertyName;
	Parms.PropertyValue = PropertyValue;
	Parms.bAddToValue = bAddToValue;
	Parms.UsedMaterialProperty = UsedMaterialProperty;
	Parms.MaterialPropertyName = MaterialPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientShowScreenParticleEx
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                              InitFlags                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                   ContentDims                                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ParticleDepth                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EScreenParticleScalingModeScalingMode                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientShowScreenParticleEx(class UParticleSystem* Template, uint8 InitFlags, const struct FVector2D& ContentDims, float ParticleDepth, enum class EScreenParticleScalingMode ScalingMode, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientShowScreenParticleEx");

	Params::UScreenParticleManagerComponent_ClientShowScreenParticleEx_Params Parms{};

	Parms.Template = Template;
	Parms.InitFlags = InitFlags;
	Parms.ContentDims = ContentDims;
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientShowScreenParticle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHideWhenFinished                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                   ContentDims                                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              ParticleDepth                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EScreenParticleScalingModeScalingMode                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bOnlyOwnerSee                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAlwaysVisible                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAllowMultipleInstances                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bTickEvenWhenPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bHideDuringInGameMenu                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bDepthPriorityWorld                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientShowScreenParticle(class UParticleSystem* Template, bool bHideWhenFinished, const struct FVector2D& ContentDims, float ParticleDepth, enum class EScreenParticleScalingMode ScalingMode, bool bOnlyOwnerSee, bool bAlwaysVisible, class FName Tag, bool bAllowMultipleInstances, bool bTickEvenWhenPaused, bool bHideDuringInGameMenu, bool bDepthPriorityWorld)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientShowScreenParticle");

	Params::UScreenParticleManagerComponent_ClientShowScreenParticle_Params Parms{};

	Parms.Template = Template;
	Parms.bHideWhenFinished = bHideWhenFinished;
	Parms.ContentDims = ContentDims;
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.bOnlyOwnerSee = bOnlyOwnerSee;
	Parms.bAlwaysVisible = bAlwaysVisible;
	Parms.Tag = Tag;
	Parms.bAllowMultipleInstances = bAllowMultipleInstances;
	Parms.bTickEvenWhenPaused = bTickEvenWhenPaused;
	Parms.bHideDuringInGameMenu = bHideDuringInGameMenu;
	Parms.bDepthPriorityWorld = bDepthPriorityWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleVectorParameter
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ParameterName                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Param                                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleVectorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, const struct FVector& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleVectorParameter");

	Params::UScreenParticleManagerComponent_ClientSetScreenParticleVectorParameter_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleMaterialParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ParameterName                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*          Param                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleMaterialParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, class UMaterialInterface* Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleMaterialParameter");

	Params::UScreenParticleManagerComponent_ClientSetScreenParticleMaterialParameter_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleFloatParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ParameterName                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              Param                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleFloatParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, float Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleFloatParameter");

	Params::UScreenParticleManagerComponent_ClientSetScreenParticleFloatParameter_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleColorParameter
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ParameterName                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                Param                                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleColorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, const struct FLinearColor& Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleColorParameter");

	Params::UScreenParticleManagerComponent_ClientSetScreenParticleColorParameter_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleActorParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        ParameterName                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      Param                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleActorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, class AActor* Param)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleActorParameter");

	Params::UScreenParticleManagerComponent_ClientSetScreenParticleActorParameter_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientHideScreenParticle
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*             Template                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        Tag                                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bAllowParticleToFinish                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientHideScreenParticle(class UParticleSystem* Template, class FName Tag, bool bAllowParticleToFinish)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientHideScreenParticle");

	Params::UScreenParticleManagerComponent_ClientHideScreenParticle_Params Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.bAllowParticleToFinish = bAllowParticleToFinish;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.SenseConfigProviderInterface
// (None)

class UClass* ISenseConfigProviderInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SenseConfigProviderInterface");

	return Clss;
}


// SenseConfigProviderInterface GbxGameSystemCore.Default__SenseConfigProviderInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ISenseConfigProviderInterface* ISenseConfigProviderInterface::GetDefaultObj()
{
	static class ISenseConfigProviderInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ISenseConfigProviderInterface*>(ISenseConfigProviderInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SignificanceInterface
// (None)

class UClass* ISignificanceInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SignificanceInterface");

	return Clss;
}


// SignificanceInterface GbxGameSystemCore.Default__SignificanceInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ISignificanceInterface* ISignificanceInterface::GetDefaultObj()
{
	static class ISignificanceInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ISignificanceInterface*>(ISignificanceInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SimpleMathValueResolver
// (None)

class UClass* USimpleMathValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SimpleMathValueResolver");

	return Clss;
}


// SimpleMathValueResolver GbxGameSystemCore.Default__SimpleMathValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class USimpleMathValueResolver* USimpleMathValueResolver::GetDefaultObj()
{
	static class USimpleMathValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<USimpleMathValueResolver*>(USimpleMathValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SocketComponent
// (SceneComponent)

class UClass* USocketComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SocketComponent");

	return Clss;
}


// SocketComponent GbxGameSystemCore.Default__SocketComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class USocketComponent* USocketComponent::GetDefaultObj()
{
	static class USocketComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<USocketComponent*>(USocketComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SpawnSimulatedActorSwitchAction
// (None)

class UClass* USpawnSimulatedActorSwitchAction::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SpawnSimulatedActorSwitchAction");

	return Clss;
}


// SpawnSimulatedActorSwitchAction GbxGameSystemCore.Default__SpawnSimulatedActorSwitchAction
// (Public, ClassDefaultObject, ArchetypeObject)

class USpawnSimulatedActorSwitchAction* USpawnSimulatedActorSwitchAction::GetDefaultObj()
{
	static class USpawnSimulatedActorSwitchAction* Default = nullptr;

	if (!Default)
		Default = static_cast<USpawnSimulatedActorSwitchAction*>(USpawnSimulatedActorSwitchAction::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.SprintData
// (None)

class UClass* USprintData::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("SprintData");

	return Clss;
}


// SprintData GbxGameSystemCore.Default__SprintData
// (Public, ClassDefaultObject, ArchetypeObject)

class USprintData* USprintData::GetDefaultObj()
{
	static class USprintData* Default = nullptr;

	if (!Default)
		Default = static_cast<USprintData*>(USprintData::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StanceBlueprintLibrary
// (None)

class UClass* UStanceBlueprintLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceBlueprintLibrary");

	return Clss;
}


// StanceBlueprintLibrary GbxGameSystemCore.Default__StanceBlueprintLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceBlueprintLibrary* UStanceBlueprintLibrary::GetDefaultObj()
{
	static class UStanceBlueprintLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceBlueprintLibrary*>(UStanceBlueprintLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.TryGetStanceComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AAIController*               AIController                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceComponent*            ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceComponent* UStanceBlueprintLibrary::TryGetStanceComponent(class AAIController* AIController)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "TryGetStanceComponent");

	Params::UStanceBlueprintLibrary_TryGetStanceComponent_Params Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.SetStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*         Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceBlueprintLibrary::SetStance(class AActor* Target, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "SetStance");

	Params::UStanceBlueprintLibrary_SetStance_Params Parms{};

	Parms.Target = Target;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.IsStanceComponentInStance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceComponent*            StanceComponent                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*         Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::IsStanceComponentInStance(class UStanceComponent* StanceComponent, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "IsStanceComponentInStance");

	Params::UStanceBlueprintLibrary_IsStanceComponentInStance_Params Parms{};

	Parms.StanceComponent = StanceComponent;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.IsInStance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*               AnimInstance                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*         Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::IsInStance(class UAnimInstance* AnimInstance, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "IsInStance");

	Params::UStanceBlueprintLibrary_IsInStance_Params Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.EqualEqual_StanceTypeStanceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceType*                 A                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceType*                 B                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::EqualEqual_StanceTypeStanceType(class UStanceType* A, class UStanceType* B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "EqualEqual_StanceTypeStanceType");

	Params::UStanceBlueprintLibrary_EqualEqual_StanceTypeStanceType_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.EqualEqual_StanceDataStanceData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceData*                 A                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                 B                                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::EqualEqual_StanceDataStanceData(class UStanceData* A, class UStanceData* B)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "EqualEqual_StanceDataStanceData");

	Params::UStanceBlueprintLibrary_EqualEqual_StanceDataStanceData_Params Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceBlueprintLibrary.ClearStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceBlueprintLibrary::ClearStance(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceBlueprintLibrary", "ClearStance");

	Params::UStanceBlueprintLibrary_ClearStance_Params Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.StanceComponent
// (None)

class UClass* UStanceComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceComponent");

	return Clss;
}


// StanceComponent GbxGameSystemCore.Default__StanceComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceComponent* UStanceComponent::GetDefaultObj()
{
	static class UStanceComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceComponent*>(UStanceComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StanceComponent.StackStanceChangedCallback
// (Final, Native, Private)
// Parameters:
// enum class EStanceStackLayer       PreviousLayer                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                 PreviousStance                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EStanceStackLayer       NextLayer                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                 NextStance                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::StackStanceChangedCallback(enum class EStanceStackLayer PreviousLayer, class UStanceData* PreviousStance, enum class EStanceStackLayer NextLayer, class UStanceData* NextStance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "StackStanceChangedCallback");

	Params::UStanceComponent_StackStanceChangedCallback_Params Parms{};

	Parms.PreviousLayer = PreviousLayer;
	Parms.PreviousStance = PreviousStance;
	Parms.NextLayer = NextLayer;
	Parms.NextStance = NextStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceComponent.SetStanceLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EStanceStackLayer       Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*         NewStance                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::SetStanceLayer(enum class EStanceStackLayer Layer, class UStanceDataProvider* NewStance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "SetStanceLayer");

	Params::UStanceComponent_SetStanceLayer_Params Parms{};

	Parms.Layer = Layer;
	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceComponent.SetBlueprintStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStanceDataProvider*         NewStance                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::SetBlueprintStance(class UStanceDataProvider* NewStance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "SetBlueprintStance");

	Params::UStanceComponent_SetBlueprintStance_Params Parms{};

	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceComponent.OnRep_StanceState
// (Final, Native, Private)
// Parameters:

void UStanceComponent::OnRep_StanceState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "OnRep_StanceState");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceComponent.IsInStanceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceType*                 Type                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStanceType(class UStanceType* Type)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "IsInStanceType");

	Params::UStanceComponent_IsInStanceType_Params Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.IsInStanceLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EStanceStackLayer       Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStanceLayer(enum class EStanceStackLayer Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "IsInStanceLayer");

	Params::UStanceComponent_IsInStanceLayer_Params Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.IsInStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceDataProvider*         Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStance(class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "IsInStance");

	Params::UStanceComponent_IsInStance_Params Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.IsInAnimStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceDataProvider*         Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInAnimStance(class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "IsInAnimStance");

	Params::UStanceComponent_IsInAnimStance_Params Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.GetTimeSpentInCurrentStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStanceComponent::GetTimeSpentInCurrentStance()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "GetTimeSpentInCurrentStance");

	Params::UStanceComponent_GetTimeSpentInCurrentStance_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.GetStanceLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// enum class EStanceStackLayer       ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class EStanceStackLayer UStanceComponent::GetStanceLayer()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "GetStanceLayer");

	Params::UStanceComponent_GetStanceLayer_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.GetStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceData*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceData* UStanceComponent::GetStance()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "GetStance");

	Params::UStanceComponent_GetStance_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.FindTypeForStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceData*                 Stance                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceType*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceType* UStanceComponent::FindTypeForStance(class UStanceData* Stance)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "FindTypeForStance");

	Params::UStanceComponent_FindTypeForStance_Params Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.FindStanceForType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceType*                 Type                                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                 ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceData* UStanceComponent::FindStanceForType(class UStanceType* Type)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "FindStanceForType");

	Params::UStanceComponent_FindStanceForType_Params Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.StanceComponent.ClearStanceLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// enum class EStanceStackLayer       Layer                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::ClearStanceLayer(enum class EStanceStackLayer Layer)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "ClearStanceLayer");

	Params::UStanceComponent_ClearStanceLayer_Params Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.StanceComponent.ClearBlueprintStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:

void UStanceComponent::ClearBlueprintStance()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StanceComponent", "ClearBlueprintStance");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.StanceType
// (None)

class UClass* UStanceType::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StanceType");

	return Clss;
}


// StanceType GbxGameSystemCore.Default__StanceType
// (Public, ClassDefaultObject, ArchetypeObject)

class UStanceType* UStanceType::GetDefaultObj()
{
	static class UStanceType* Default = nullptr;

	if (!Default)
		Default = static_cast<UStanceType*>(UStanceType::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffect
// (None)

class UClass* UStatusEffect::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffect");

	return Clss;
}


// StatusEffect GbxGameSystemCore.Default__StatusEffect
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffect* UStatusEffect::GetDefaultObj()
{
	static class UStatusEffect* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffect*>(UStatusEffect::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.StatusEffect.OnEndEffect
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusEffect::OnEndEffect(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffect", "OnEndEffect");

	Params::UStatusEffect_OnEndEffect_Params Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

}


// Function GbxGameSystemCore.StatusEffect.OnBeginEffect
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                      Target                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusEffect::OnBeginEffect(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("StatusEffect", "OnBeginEffect");

	Params::UStatusEffect_OnBeginEffect_Params Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

}


// Class GbxGameSystemCore.StatusEffectModifierAttributePropertyValueResolver
// (None)

class UClass* UStatusEffectModifierAttributePropertyValueResolver::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectModifierAttributePropertyValueResolver");

	return Clss;
}


// StatusEffectModifierAttributePropertyValueResolver GbxGameSystemCore.Default__StatusEffectModifierAttributePropertyValueResolver
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectModifierAttributePropertyValueResolver* UStatusEffectModifierAttributePropertyValueResolver::GetDefaultObj()
{
	static class UStatusEffectModifierAttributePropertyValueResolver* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectModifierAttributePropertyValueResolver*>(UStatusEffectModifierAttributePropertyValueResolver::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.StatusEffectStackingStrategyData_Capped
// (None)

class UClass* UStatusEffectStackingStrategyData_Capped::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("StatusEffectStackingStrategyData_Capped");

	return Clss;
}


// StatusEffectStackingStrategyData_Capped GbxGameSystemCore.Default__StatusEffectStackingStrategyData_Capped
// (Public, ClassDefaultObject, ArchetypeObject)

class UStatusEffectStackingStrategyData_Capped* UStatusEffectStackingStrategyData_Capped::GetDefaultObj()
{
	static class UStatusEffectStackingStrategyData_Capped* Default = nullptr;

	if (!Default)
		Default = static_cast<UStatusEffectStackingStrategyData_Capped*>(UStatusEffectStackingStrategyData_Capped::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.TargetableComponent
// (None)

class UClass* UTargetableComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TargetableComponent");

	return Clss;
}


// TargetableComponent GbxGameSystemCore.Default__TargetableComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTargetableComponent* UTargetableComponent::GetDefaultObj()
{
	static class UTargetableComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTargetableComponent*>(UTargetableComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.TargetableComponent.SetTargetUINameGender
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// enum class ETextGender             NewTargetUINameGender                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetTargetUINameGender(enum class ETextGender NewTargetUINameGender)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetTargetUINameGender");

	Params::UTargetableComponent_SetTargetUINameGender_Params Parms{};

	Parms.NewTargetUINameGender = NewTargetUINameGender;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetTargetUIName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIName*                  NewTargetUIName                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetTargetUIName(class UGbxUIName* NewTargetUIName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetTargetUIName");

	Params::UTargetableComponent_SetTargetUIName_Params Parms{};

	Parms.NewTargetUIName = NewTargetUIName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetTargetName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                        NewTargetName                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetableComponent::SetTargetName(class FText& NewTargetName)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetTargetName");

	Params::UTargetableComponent_SetTargetName_Params Parms{};

	Parms.NewTargetName = NewTargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByNonPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               IsTargetable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByNonPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByNonPlayers");

	Params::UTargetableComponent_SetIsTargetableByNonPlayers_Params Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByHumanPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               IsTargetable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByHumanPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByHumanPlayers");

	Params::UTargetableComponent_SetIsTargetableByHumanPlayers_Params Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByAIPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               IsTargetable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByAIPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByAIPlayers");

	Params::UTargetableComponent_SetIsTargetableByAIPlayers_Params Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                               IsTargetable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetable(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetable");

	Params::UTargetableComponent_SetIsTargetable_Params Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.PrefixTargetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIName*                  TargetUINamePrefix                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::PrefixTargetName(class UGbxUIName* TargetUINamePrefix)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "PrefixTargetName");

	Params::UTargetableComponent_PrefixTargetName_Params Parms{};

	Parms.TargetUINamePrefix = TargetUINamePrefix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.OnRep_TargetUIName
// (Final, Native, Private)
// Parameters:

void UTargetableComponent::OnRep_TargetUIName()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "OnRep_TargetUIName");



	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                       Pawn                                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByPawn(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByPawn");

	Params::UTargetableComponent_IsTargetableByPawn_Params Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByNonPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByNonPlayers()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByNonPlayers");

	Params::UTargetableComponent_IsTargetableByNonPlayers_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByHumanPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByHumanPlayers()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByHumanPlayers");

	Params::UTargetableComponent_IsTargetableByHumanPlayers_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                 Controller                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByController(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByController");

	Params::UTargetableComponent_IsTargetableByController_Params Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByAIPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByAIPlayers()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByAIPlayers");

	Params::UTargetableComponent_IsTargetableByAIPlayers_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByActor");

	Params::UTargetableComponent_IsTargetableByActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.IsTargetable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetable()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "IsTargetable");

	Params::UTargetableComponent_IsTargetable_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                        ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTargetableComponent::GetTargetSocketName()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetSocketName");

	Params::UTargetableComponent_GetTargetSocketName_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetProxyComponentNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetableComponent::GetTargetProxyComponentNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetProxyComponentNames");

	Params::UTargetableComponent_GetTargetProxyComponentNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetNameString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetableComponent::GetTargetNameString()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetNameString");

	Params::UTargetableComponent_GetTargetNameString_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                        ReturnValue                                                      (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTargetableComponent::GetTargetName()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetName");

	Params::UTargetableComponent_GetTargetName_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>             ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UTargetableComponent::GetTargetLocations()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetLocations");

	Params::UTargetableComponent_GetTargetLocations_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetableComponent::GetTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetTargetLocation");

	Params::UTargetableComponent_GetTargetLocation_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetClosestTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     Origin                                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     Direction                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetableComponent::GetClosestTargetLocation(struct FVector& Origin, struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetClosestTargetLocation");

	Params::UTargetableComponent_GetClosestTargetLocation_Params Parms{};

	Parms.Origin = Origin;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetableComponent.GetAvailableSocketNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                Array                                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetableComponent::GetAvailableSocketNames(TArray<class FName>* Array)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetableComponent", "GetAvailableSocketNames");

	Params::UTargetableComponent_GetAvailableSocketNames_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

}


// Class GbxGameSystemCore.TargetActorInfoLibrary
// (None)

class UClass* UTargetActorInfoLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TargetActorInfoLibrary");

	return Clss;
}


// TargetActorInfoLibrary GbxGameSystemCore.Default__TargetActorInfoLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UTargetActorInfoLibrary* UTargetActorInfoLibrary::GetDefaultObj()
{
	static class UTargetActorInfoLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UTargetActorInfoLibrary*>(UTargetActorInfoLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsSenseActive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsSenseActive(struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "IsSenseActive");

	Params::UTargetActorInfoLibrary_IsSenseActive_Params Parms{};

	Parms.Info = Info;
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsExistingTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsExistingTarget(struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "IsExistingTarget");

	Params::UTargetActorInfoLibrary_IsExistingTarget_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsDirectlySensed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsDirectlySensed(struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "IsDirectlySensed");

	Params::UTargetActorInfoLibrary_IsDirectlySensed_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.HasStimulusForSense
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::HasStimulusForSense(struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "HasStimulusForSense");

	Params::UTargetActorInfoLibrary_HasStimulusForSense_Params Parms{};

	Parms.Info = Info;
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.HasAnyKnownStimuli
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::HasAnyKnownStimuli(struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "HasAnyKnownStimuli");

	Params::UTargetActorInfoLibrary_HasAnyKnownStimuli_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetStimulusLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetStimulusLocation(struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetStimulusLocation");

	Params::UTargetActorInfoLibrary_GetStimulusLocation_Params Parms{};

	Parms.Info = Info;
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetStimulusForSense
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAIStimulus                 Stimulus                                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::GetStimulusForSense(struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense, struct FAIStimulus* Stimulus)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetStimulusForSense");

	Params::UTargetActorInfoLibrary_GetStimulusForSense_Params Parms{};

	Parms.Info = Info;
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Stimulus != nullptr)
		*Stimulus = std::move(Parms.Stimulus);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetReceiverLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetReceiverLocation(struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetReceiverLocation");

	Params::UTargetActorInfoLibrary_GetReceiverLocation_Params Parms{};

	Parms.Info = Info;
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestStimulusLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                              Age                                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetBestStimulusLocation(struct FTargetActorInfo& Info, float* Age)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetBestStimulusLocation");

	Params::UTargetActorInfoLibrary_GetBestStimulusLocation_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Age != nullptr)
		*Age = Parms.Age;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestStimulus
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FAIStimulus                 Stimulus                                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::GetBestStimulus(struct FTargetActorInfo& Info, struct FAIStimulus* Stimulus)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetBestStimulus");

	Params::UTargetActorInfoLibrary_GetBestStimulus_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (Stimulus != nullptr)
		*Stimulus = std::move(Parms.Stimulus);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestAttackLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo            Info                                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                     OutTargetVelocity                                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetBestAttackLocation(struct FTargetActorInfo& Info, struct FVector* OutTargetVelocity)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "GetBestAttackLocation");

	Params::UTargetActorInfoLibrary_GetBestAttackLocation_Params Parms{};

	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutTargetVelocity != nullptr)
		*OutTargetVelocity = std::move(Parms.OutTargetVelocity);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetActorInfoLibrary.FindActorTargetingComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetingComponent*         ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* UTargetActorInfoLibrary::FindActorTargetingComponent(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetActorInfoLibrary", "FindActorTargetingComponent");

	Params::UTargetActorInfoLibrary_FindActorTargetingComponent_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.TargetingComponent
// (None)

class UClass* UTargetingComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TargetingComponent");

	return Clss;
}


// TargetingComponent GbxGameSystemCore.Default__TargetingComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTargetingComponent* UTargetingComponent::GetDefaultObj()
{
	static class UTargetingComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTargetingComponent*>(UTargetingComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.TargetingComponent.ServerSetBestTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                      NewBestTarget                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingComponent::ServerSetBestTarget(class AActor* NewBestTarget)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "ServerSetBestTarget");

	Params::UTargetingComponent_ServerSetBestTarget_Params Parms{};

	Parms.NewBestTarget = NewBestTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.TargetingComponent.IsBestTargetDirectlySensed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::IsBestTargetDirectlySensed(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "IsBestTargetDirectlySensed");

	Params::UTargetingComponent_IsBestTargetDirectlySensed_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.HasTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::HasTargets()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "HasTargets");

	Params::UTargetingComponent_HasTargets_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.HasTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::HasTarget(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "HasTarget");

	Params::UTargetingComponent_HasTarget_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetTargetLocationForActor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     TargetLocation                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetLocationForActor(class AActor* Actor, struct FVector* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetTargetLocationForActor");

	Params::UTargetingComponent_GetTargetLocationForActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoForActor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                      Actor                                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo            TargetInfo                                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetInfoForActor(class AActor* Actor, struct FTargetActorInfo* TargetInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoForActor");

	Params::UTargetingComponent_GetTargetInfoForActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTargetingComponent::GetTargetInfoCount()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoCount");

	Params::UTargetingComponent_GetTargetInfoCount_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoAt
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo            TargetInfo                                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetInfoAt(int32 TargetIndex, struct FTargetActorInfo* TargetInfo)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoAt");

	Params::UTargetingComponent_GetTargetInfoAt_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetTargetActorAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetTargetActorAt(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetTargetActorAt");

	Params::UTargetingComponent_GetTargetActorAt_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestThreatActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               bRequireFirsthandKnowledge                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetBestThreatActor(bool bRequireFirsthandKnowledge)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestThreatActor");

	Params::UTargetingComponent_GetBestThreatActor_Params Parms{};

	Parms.bRequireFirsthandKnowledge = bRequireFirsthandKnowledge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingComponent::GetBestTargetLocation(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetLocation");

	Params::UTargetingComponent_GetBestTargetLocation_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTargetActorInfo            TargetInfo                                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetBestTargetInfo(struct FTargetActorInfo* TargetInfo, int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetInfo");

	Params::UTargetingComponent_GetBestTargetInfo_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                      ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetBestTargetActor(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetActor");

	Params::UTargetingComponent_GetBestTargetActor_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetableComponent*        ReturnValue                                                      (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* UTargetingComponent::GetBestTargetableComponent(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetableComponent");

	Params::UTargetingComponent_GetBestTargetableComponent_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.GetBestAttackTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                     OutTargetVelocity                                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                     ReturnValue                                                      (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingComponent::GetBestAttackTargetLocation(struct FVector* OutTargetVelocity, int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "GetBestAttackTargetLocation");

	Params::UTargetingComponent_GetBestAttackTargetLocation_Params Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	if (OutTargetVelocity != nullptr)
		*OutTargetVelocity = std::move(Parms.OutTargetVelocity);

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.TargetingComponent.DoesBestTargetHaveStimulusForSense
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAISense>        Sense                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                              MaxAge                                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                              TargetIndex                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::DoesBestTargetHaveStimulusForSense(TSubclassOf<class UAISense> Sense, float MaxAge, int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingComponent", "DoesBestTargetHaveStimulusForSense");

	Params::UTargetingComponent_DoesBestTargetHaveStimulusForSense_Params Parms{};

	Parms.Sense = Sense;
	Parms.MaxAge = MaxAge;
	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.TargetingDebugServerRpcComponent
// (None)

class UClass* UTargetingDebugServerRpcComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TargetingDebugServerRpcComponent");

	return Clss;
}


// TargetingDebugServerRpcComponent GbxGameSystemCore.Default__TargetingDebugServerRpcComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTargetingDebugServerRpcComponent* UTargetingDebugServerRpcComponent::GetDefaultObj()
{
	static class UTargetingDebugServerRpcComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTargetingDebugServerRpcComponent*>(UTargetingDebugServerRpcComponent::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.TargetingDebugServerRpcComponent.SetInspectedActor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingDebugServerRpcComponent::SetInspectedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("TargetingDebugServerRpcComponent", "SetInspectedActor");

	Params::UTargetingDebugServerRpcComponent_SetInspectedActor_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.Team
// (None)

class UClass* UTeam::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("Team");

	return Clss;
}


// Team GbxGameSystemCore.Default__Team
// (Public, ClassDefaultObject, ArchetypeObject)

class UTeam* UTeam::GetDefaultObj()
{
	static class UTeam* Default = nullptr;

	if (!Default)
		Default = static_cast<UTeam*>(UTeam::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.Team.GetAttitudeToward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                       Team                                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class ETeamAttitude           ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

enum class ETeamAttitude UTeam::GetAttitudeToward(class UTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("Team", "GetAttitudeToward");

	Params::UTeam_GetAttitudeToward_Params Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.TeleportInterface
// (None)

class UClass* ITeleportInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TeleportInterface");

	return Clss;
}


// TeleportInterface GbxGameSystemCore.Default__TeleportInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class ITeleportInterface* ITeleportInterface::GetDefaultObj()
{
	static class ITeleportInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<ITeleportInterface*>(ITeleportInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.TerritoryComponent
// (SceneComponent, PrimitiveComponent)

class UClass* UTerritoryComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TerritoryComponent");

	return Clss;
}


// TerritoryComponent GbxGameSystemCore.Default__TerritoryComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTerritoryComponent* UTerritoryComponent::GetDefaultObj()
{
	static class UTerritoryComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTerritoryComponent*>(UTerritoryComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.TrivialFoleyImplementationComponent
// (None)

class UClass* UTrivialFoleyImplementationComponent::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("TrivialFoleyImplementationComponent");

	return Clss;
}


// TrivialFoleyImplementationComponent GbxGameSystemCore.Default__TrivialFoleyImplementationComponent
// (Public, ClassDefaultObject, ArchetypeObject)

class UTrivialFoleyImplementationComponent* UTrivialFoleyImplementationComponent::GetDefaultObj()
{
	static class UTrivialFoleyImplementationComponent* Default = nullptr;

	if (!Default)
		Default = static_cast<UTrivialFoleyImplementationComponent*>(UTrivialFoleyImplementationComponent::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UIStatData_Numeric_Formula
// (None)

class UClass* UUIStatData_Numeric_Formula::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatData_Numeric_Formula");

	return Clss;
}


// UIStatData_Numeric_Formula GbxGameSystemCore.Default__UIStatData_Numeric_Formula
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatData_Numeric_Formula* UUIStatData_Numeric_Formula::GetDefaultObj()
{
	static class UUIStatData_Numeric_Formula* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatData_Numeric_Formula*>(UUIStatData_Numeric_Formula::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UIStatData_Text
// (None)

class UClass* UUIStatData_Text::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatData_Text");

	return Clss;
}


// UIStatData_Text GbxGameSystemCore.Default__UIStatData_Text
// (Public, ClassDefaultObject, ArchetypeObject)

class UUIStatData_Text* UUIStatData_Text::GetDefaultObj()
{
	static class UUIStatData_Text* Default = nullptr;

	if (!Default)
		Default = static_cast<UUIStatData_Text*>(UUIStatData_Text::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UIStatAttributeEffectProvider
// (None)

class UClass* IUIStatAttributeEffectProvider::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UIStatAttributeEffectProvider");

	return Clss;
}


// UIStatAttributeEffectProvider GbxGameSystemCore.Default__UIStatAttributeEffectProvider
// (Public, ClassDefaultObject, ArchetypeObject)

class IUIStatAttributeEffectProvider* IUIStatAttributeEffectProvider::GetDefaultObj()
{
	static class IUIStatAttributeEffectProvider* Default = nullptr;

	if (!Default)
		Default = static_cast<IUIStatAttributeEffectProvider*>(IUIStatAttributeEffectProvider::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UsabilityDataSelection
// (None)

class UClass* UUsabilityDataSelection::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UsabilityDataSelection");

	return Clss;
}


// UsabilityDataSelection GbxGameSystemCore.Default__UsabilityDataSelection
// (Public, ClassDefaultObject, ArchetypeObject)

class UUsabilityDataSelection* UUsabilityDataSelection::GetDefaultObj()
{
	static class UUsabilityDataSelection* Default = nullptr;

	if (!Default)
		Default = static_cast<UUsabilityDataSelection*>(UUsabilityDataSelection::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UsableTypeDefinition
// (None)

class UClass* UUsableTypeDefinition::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UsableTypeDefinition");

	return Clss;
}


// UsableTypeDefinition GbxGameSystemCore.Default__UsableTypeDefinition
// (Public, ClassDefaultObject, ArchetypeObject)

class UUsableTypeDefinition* UUsableTypeDefinition::GetDefaultObj()
{
	static class UUsableTypeDefinition* Default = nullptr;

	if (!Default)
		Default = static_cast<UUsableTypeDefinition*>(UUsableTypeDefinition::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UseOwnerInterface
// (None)

class UClass* IUseOwnerInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UseOwnerInterface");

	return Clss;
}


// UseOwnerInterface GbxGameSystemCore.Default__UseOwnerInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IUseOwnerInterface* IUseOwnerInterface::GetDefaultObj()
{
	static class IUseOwnerInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IUseOwnerInterface*>(IUseOwnerInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.UserStatesInterface
// (None)

class UClass* IUserStatesInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UserStatesInterface");

	return Clss;
}


// UserStatesInterface GbxGameSystemCore.Default__UserStatesInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IUserStatesInterface* IUserStatesInterface::GetDefaultObj()
{
	static class IUserStatesInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IUserStatesInterface*>(IUserStatesInterface::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UserStatesInterface.HasEnableConditionsSetForAnyUserState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IUserStatesInterface::HasEnableConditionsSetForAnyUserState()
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UserStatesInterface", "HasEnableConditionsSetForAnyUserState");

	Params::IUserStatesInterface_HasEnableConditionsSetForAnyUserState_Params Parms{};


	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Function GbxGameSystemCore.UserStatesInterface.BlueprintStateHandler
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                               bFromLoad                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUserStatesInterface::BlueprintStateHandler(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UserStatesInterface", "BlueprintStateHandler");

	Params::IUserStatesInterface_BlueprintStateHandler_Params Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);

}


// Class GbxGameSystemCore.UserStatesFunctionLibrary
// (None)

class UClass* UUserStatesFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UserStatesFunctionLibrary");

	return Clss;
}


// UserStatesFunctionLibrary GbxGameSystemCore.Default__UserStatesFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UUserStatesFunctionLibrary* UUserStatesFunctionLibrary::GetDefaultObj()
{
	static class UUserStatesFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UUserStatesFunctionLibrary*>(UUserStatesFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UserStatesFunctionLibrary.HasEnableConditionsSetForSpecificUserState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                     Context                                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                        UserStateProperty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               ReturnValue                                                      (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUserStatesFunctionLibrary::HasEnableConditionsSetForSpecificUserState(class UObject* Context, class FName UserStateProperty)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UserStatesFunctionLibrary", "HasEnableConditionsSetForSpecificUserState");

	Params::UUserStatesFunctionLibrary_HasEnableConditionsSetForSpecificUserState_Params Parms{};

	Parms.Context = Context;
	Parms.UserStateProperty = UserStateProperty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;

}


// Class GbxGameSystemCore.UseSystemFunctionLibrary
// (None)

class UClass* UUseSystemFunctionLibrary::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("UseSystemFunctionLibrary");

	return Clss;
}


// UseSystemFunctionLibrary GbxGameSystemCore.Default__UseSystemFunctionLibrary
// (Public, ClassDefaultObject, ArchetypeObject)

class UUseSystemFunctionLibrary* UUseSystemFunctionLibrary::GetDefaultObj()
{
	static class UUseSystemFunctionLibrary* Default = nullptr;

	if (!Default)
		Default = static_cast<UUseSystemFunctionLibrary*>(UUseSystemFunctionLibrary::StaticClass()->DefaultObject);

	return Default;
}


// Function GbxGameSystemCore.UseSystemFunctionLibrary.SetIsUsable
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                               bNewIsUsable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseSystemFunctionLibrary::SetIsUsable(class AActor* Actor, bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseSystemFunctionLibrary", "SetIsUsable");

	Params::UUseSystemFunctionLibrary_SetIsUsable_Params Parms{};

	Parms.Actor = Actor;
	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Function GbxGameSystemCore.UseSystemFunctionLibrary.ResetUseCount
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                      Actor                                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseSystemFunctionLibrary::ResetUseCount(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (!Func)
		Func = Class->GetFunction("UseSystemFunctionLibrary", "ResetUseCount");

	Params::UUseSystemFunctionLibrary_ResetUseCount_Params Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);


	Func->FunctionFlags = Flgs;

}


// Class GbxGameSystemCore.WeaponInterface
// (None)

class UClass* IWeaponInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("WeaponInterface");

	return Clss;
}


// WeaponInterface GbxGameSystemCore.Default__WeaponInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IWeaponInterface* IWeaponInterface::GetDefaultObj()
{
	static class IWeaponInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IWeaponInterface*>(IWeaponInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.WeaponUserInterface
// (None)

class UClass* IWeaponUserInterface::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("WeaponUserInterface");

	return Clss;
}


// WeaponUserInterface GbxGameSystemCore.Default__WeaponUserInterface
// (Public, ClassDefaultObject, ArchetypeObject)

class IWeaponUserInterface* IWeaponUserInterface::GetDefaultObj()
{
	static class IWeaponUserInterface* Default = nullptr;

	if (!Default)
		Default = static_cast<IWeaponUserInterface*>(IWeaponUserInterface::StaticClass()->DefaultObject);

	return Default;
}


// Class GbxGameSystemCore.WeatherTemplate
// (None)

class UClass* UWeatherTemplate::StaticClass()
{
	static class UClass* Clss = nullptr;

	if (!Clss)
		Clss = UObject::FindClassFast("WeatherTemplate");

	return Clss;
}


// WeatherTemplate GbxGameSystemCore.Default__WeatherTemplate
// (Public, ClassDefaultObject, ArchetypeObject)

class UWeatherTemplate* UWeatherTemplate::GetDefaultObj()
{
	static class UWeatherTemplate* Default = nullptr;

	if (!Default)
		Default = static_cast<UWeatherTemplate*>(UWeatherTemplate::StaticClass()->DefaultObject);

	return Default;
}

}


