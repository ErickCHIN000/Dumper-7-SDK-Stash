#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x0 (0x28 - 0x28)
// BlueprintGeneratedClass CharacterUpgradeLib.CharacterUpgradeLib_C
class UCharacterUpgradeLib_C : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCharacterUpgradeLib_C* GetDefaultObj();

	void IsShellMaxedOut(enum class EArmorTypes Index, class UObject* __WorldContext, bool* bYes, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class FName>& CallFunc_GetUpgradeRowNamesFromShell_OutRowNames, class FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsUpgradeUnlocked_bUnlocked, bool CallFunc_Less_IntInt_ReturnValue);
	void GetAxatanaOreID(class UObject* __WorldContext, class FName* ID);
	void GetAxatanaResolveCost(class UObject* __WorldContext, float* ResolveCost);
	void IsAxatanaUnlocked_StormMode(class UObject* __WorldContext, bool* bUnlocked, int32 Local_Value, class FName Temp_name_Variable, class APlayerController* CallFunc_GetPlayerController_ReturnValue, TScriptInterface<class IBPI_StormMode_PC_C> K2Node_DynamicCast_AsBPI_Storm_Mode_PC, bool K2Node_DynamicCast_bSuccess, TMap<class FName, int32> CallFunc_StormMode_GetNamedInts_NamedInts, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void IsAxatanaUnlocked(class UObject* __WorldContext, bool* bUnlocked, class FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void IsWeaponUnlocked(enum class EComboTypes Weapon, class UObject* __WorldContext, bool* bUnlocked, class FName CallFunc_GetCharacterWeaponIDFromEnum_ID, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void GetSuper2ResolveCost(bool CostReduction_, class UObject* __WorldContext, float* ResolveCost);
	void ShowFancyUpgradeNotification(class FName RowName, class UObject* __WorldContext, class APlayerController* CallFunc_GetPlayerController_ReturnValue, class AHUD* CallFunc_GetHUD_ReturnValue, class AYourHUD_C* K2Node_DynamicCast_AsYour_HUD, bool K2Node_DynamicCast_bSuccess);
	void HandleMoneyOnDeathStatueInteract(class UObject* __WorldContext, class ABarbarous_C* CallFunc_GetCharacterAsBarbarous_AsBarbarous, bool CallFunc_ShouldLooseMoneyOnDeath_bShould, class FName CallFunc_GetLostMoneyName_MoneyName, int32 CallFunc_GetNamedPCInt_Value);
	void GetLostMoneyName(class UObject* __WorldContext, class FName* MoneyName);
	void GetMoneyName(class UObject* __WorldContext, class FName* MoneyName);
	void ShouldLooseMoneyOnDeath(class UObject* __WorldContext, bool* bShould);
	void GetShellUnlockID(enum class EArmorTypes Shell, class UObject* __WorldContext, class FName* ShellUnlockID, enum class EArmorTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName K2Node_Select_Default);
	void GetShellTagline(enum class EArmorTypes Index, class UObject* __WorldContext, class FText* ShellTagline, enum class EArmorTypes Temp_byte_Variable, class FText Temp_text_Variable, class FText Temp_text_Variable_1, class FText Temp_text_Variable_2, class FText Temp_text_Variable_3, class FText Temp_text_Variable_4, class FText Temp_text_Variable_5, class FName CallFunc_GetShellNameUnlockIDFromShell_ShellNameUnlockID, class FText K2Node_Select_Default, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void GetShellNameUnlockIDFromShell(enum class EArmorTypes Index, class UObject* __WorldContext, class FName* ShellNameUnlockID, enum class EArmorTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName K2Node_Select_Default);
	void GetShellName(enum class EArmorTypes Index, class UObject* __WorldContext, class FText* ShellName, enum class EArmorTypes Temp_byte_Variable, class FText Temp_text_Variable, class FText Temp_text_Variable_1, class FText Temp_text_Variable_2, class FText Temp_text_Variable_3, class FText Temp_text_Variable_4, class FText Temp_text_Variable_5, class FName CallFunc_GetShellNameUnlockIDFromShell_ShellNameUnlockID, class FText K2Node_Select_Default, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void GetUpgradeNameParry(class UObject* __WorldContext, class FName* UpgradeName);
	void LockUpgrade(class FName& UpgradeName, class UObject* __WorldContext, class AGameplayPC_C* CallFunc_GetControllerAsGameplayPC_AsGameplay_PC, bool CallFunc_Array_RemoveItem_ReturnValue);
	void SetShellLost(enum class EArmorTypes Armor, bool bLost, class UObject* __WorldContext, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class AUsable_Armor_C*>& CallFunc_GetAllActorsOfClass_OutActors, class FName CallFunc_GetShellLostID_ShellLostID, class AUsable_Armor_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void GetShellLostID(enum class EArmorTypes Shell, class UObject* __WorldContext, class FName* ShellLostID, enum class EArmorTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName K2Node_Select_Default);
	void IsShellLost(enum class EArmorTypes Armor, class UObject* __WorldContext, bool* bLost, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class FName CallFunc_GetShellLostID_ShellLostID, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void GetSuper1ResolveCost(bool CostReduction_, class UObject* __WorldContext, float* ResolveCost);
	void IsPowerUnlocked(enum class EPowerTypes Power, class UObject* __WorldContext, bool* bUnlocked);
	void GetUpgradeNamePower(enum class EPowerTypes Power, class UObject* __WorldContext, class FName* UpgradeName, enum class EPowerTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName K2Node_Select_Default);
	void GetPowerCryptParryBackfireDamage(class UObject* __WorldContext, float* Dmg, int32 Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable_1, float Temp_float_Variable_2, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName_1, int32 CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_IsUpgradeUnlocked_bUnlocked_1, int32 CallFunc_Conv_BoolToInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_Select_Default);
	void GetUpgradeNameKnowledge(class UObject* __WorldContext, class FName* UpgradeName);
	void ApplyKnowledgeBonus(float BaseValue, class UObject* __WorldContext, float* BoostedValue, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, class FName CallFunc_GetUpgradeNameKnowledge_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue);
	void GetFireGrenadeFullChargeDuration(class UObject* __WorldContext, float* PlayRate, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, class FName CallFunc_GetUpgradeNamePowerUnique_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default);
	void GetFireGrenadeAnimRateMultiplier(class UObject* __WorldContext, float* PlayRate, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, class FName CallFunc_GetUpgradeNamePowerUnique_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default);
	void GetCryptParryWindow(class UObject* __WorldContext, float* Window, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, class FName CallFunc_GetUpgradeNamePowerUnique_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default);
	void GetPowerFireBackfireUpgradeParams(class UObject* __WorldContext, float* DmgPerSec, float* Duration, int32 Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable_1, float Temp_float_Variable_2, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName_1, int32 CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_IsUpgradeUnlocked_bUnlocked_1, int32 CallFunc_Conv_BoolToInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_Select_Default);
	void GetHPAfterCathedralBackfire(class UObject* __WorldContext, float* HP, int32 Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable_1, class AGameplayPC_C* CallFunc_GetControllerAsGameplayPC_AsGameplay_PC, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_IsUpgradeUnlocked_bUnlocked, int32 CallFunc_Conv_BoolToInt_ReturnValue, class FName CallFunc_GetUpgradeNamePowerBackfire_UpgradeName_1, bool CallFunc_IsUpgradeUnlocked_bUnlocked_1, int32 CallFunc_Conv_BoolToInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_Select_Default);
	void GetPowerResolveReduction(enum class EPowerTypes Power, class UObject* __WorldContext, float* ReductionValue, bool Temp_bool_Variable, enum class EPowerTypes Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable_1, float Temp_float_Variable_2, float Temp_float_Variable_3, enum class EPowerTypes Temp_byte_Variable_1, float K2Node_Select_Default, float Temp_float_Variable_4, float Temp_float_Variable_5, float Temp_float_Variable_6, float Temp_float_Variable_7, float K2Node_Select_Default_1, class FName CallFunc_GetUpgradeNamePowerResolve_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default_2);
	void ApplyUpgradeCathedralWalkSpeedModifier(float BasicModifier, bool bApply, class UObject* __WorldContext, float* Boosted, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, bool Temp_bool_Variable_1, float K2Node_Select_Default, float Temp_float_Variable_2, float Temp_float_Variable_3, bool Temp_bool_Variable_2, float K2Node_Select_Default_1, class FName CallFunc_GetUpgradeNamePowerUnique_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked, float K2Node_Select_Default_2, float CallFunc_Multiply_FloatFloat_ReturnValue);
	void GetUpgradeNamePowerUnique(enum class EPowerTypes Power, class UObject* __WorldContext, class FName* UpgradeName, enum class EPowerTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName K2Node_Select_Default);
	void GetUpgradeNamePowerResolve(enum class EPowerTypes Power, class UObject* __WorldContext, class FName* UpgradeName, enum class EPowerTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName K2Node_Select_Default);
	void GetUpgradeNamePowerBackfire(enum class EPowerTypes Power, int32 Index, class UObject* __WorldContext, class FName* UpgradeName, enum class EPowerTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, enum class EPowerTypes Temp_byte_Variable_1, class FName K2Node_Select_Default, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName Temp_name_Variable_6, class FName Temp_name_Variable_7, int32 Temp_int_Variable, class FName K2Node_Select_Default_1, class FName K2Node_Select_Default_2);
	void GetUpgradedMaxShellDeterioration(class UObject* __WorldContext, int32* BoosedMaxCount, class AZero_Base_C* CallFunc_GetCharacterAs0_Base_As0_Base, bool CallFunc_IsShellUpgradeUnlocked_bUnlocked, bool CallFunc_IsShellUpgradeUnlocked_bUnlocked_1, int32 CallFunc_Conv_BoolToInt_ReturnValue, int32 CallFunc_Conv_BoolToInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1);
	void IsShellUpgradeUnlocked(enum class EArmorTypes Armor, int32 Index, class UObject* __WorldContext, bool* bUnlocked, class FName CallFunc_GetUpgradeNameShell_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void UnlockUpgrade(class FName UpgradeName, class UObject* __WorldContext, class FName Local_ID, class AGameplayPC_C* CallFunc_GetControllerAsGameplayPC_AsGameplay_PC, const class FString& CallFunc_Conv_NameToString_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue);
	void GetUpgradeNameShell(enum class EArmorTypes Armor, int32 Index, class UObject* __WorldContext, class FName* UpgradeName, enum class EArmorTypes Temp_byte_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, enum class EArmorTypes Temp_byte_Variable_1, class FName K2Node_Select_Default, class FName Temp_name_Variable_6, class FName Temp_name_Variable_7, class FName Temp_name_Variable_8, class FName Temp_name_Variable_9, class FName Temp_name_Variable_10, class FName Temp_name_Variable_11, int32 Temp_int_Variable, class FName K2Node_Select_Default_1, class FName K2Node_Select_Default_2);
	void IsUpgradeUnlocked(class FName& UpgradeName, class UObject* __WorldContext, bool* bUnlocked, class AGameplayPC_C* CallFunc_GetControllerAsGameplayPC_AsGameplay_PC, bool CallFunc_Array_Contains_ReturnValue);
	void IsSuperAttackUnlocked(int32 SuperIndex, class UObject* __WorldContext, bool* bUnlocked, class AZero_Base_C* CallFunc_GetCharacterAs0_Base_As0_Base, class FName CallFunc_GetUpgradeNameWeaponSuper_UpgradeName, bool CallFunc_IsUpgradeUnlocked_bUnlocked);
	void GetUpgradeNameWeaponSuper(enum class EComboTypes WeaponType, int32 Index, class UObject* __WorldContext, class FName* UpgradeName, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName Temp_name_Variable_6, int32 Temp_int_Variable, enum class EComboTypes Temp_byte_Variable, class FName Temp_name_Variable_7, class FName Temp_name_Variable_8, class FName Temp_name_Variable_9, class FName Temp_name_Variable_10, class FName Temp_name_Variable_11, class FName Temp_name_Variable_12, class FName Temp_name_Variable_13, enum class EComboTypes Temp_byte_Variable_1, class FName K2Node_Select_Default, class FName K2Node_Select_Default_1, class FName K2Node_Select_Default_2);
	void ApplyUpgradeDmgBoost(float BaseDmg, class UObject* __WorldContext, float* BoostedDmg, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable_1, bool Temp_bool_Variable_1, float Temp_float_Variable_2, float Temp_float_Variable_3, class AZero_Base_C* CallFunc_GetCharacterAs0_Base_As0_Base, class AZero_Base_C* CallFunc_GetCharacterAs0_Base_As0_Base_1, class FName CallFunc_GetUpgradeNameWeaponDamage_UpgradeName, class FName CallFunc_GetUpgradeNameWeaponDamage_UpgradeName_1, bool CallFunc_IsUpgradeUnlocked_bUnlocked, bool CallFunc_IsUpgradeUnlocked_bUnlocked_1, float K2Node_Select_Default, float K2Node_Select_Default_1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue_1);
	void GetUpgradeNameWeaponDamage(enum class EComboTypes WeaponType, int32 Index, class UObject* __WorldContext, class FName* UpgradeName, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName Temp_name_Variable_6, int32 Temp_int_Variable, enum class EComboTypes Temp_byte_Variable, class FName Temp_name_Variable_7, class FName Temp_name_Variable_8, class FName Temp_name_Variable_9, class FName Temp_name_Variable_10, class FName Temp_name_Variable_11, class FName Temp_name_Variable_12, class FName Temp_name_Variable_13, enum class EComboTypes Temp_byte_Variable_1, class FName K2Node_Select_Default, class FName K2Node_Select_Default_1, class FName K2Node_Select_Default_2);
};

}


