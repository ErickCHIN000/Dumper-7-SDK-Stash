#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x4 (0x54 - 0x50)
// BlueprintGeneratedClass BP_SnapRulesEnforcer.BP_SnapRulesEnforcer_C
class UBP_SnapRulesEnforcer_C : public USnapRulesEnforcer
{
public:
	int32                                        DefaultSnapPointIndex;                             // 0x50(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

	static class UClass* StaticClass();
	static class UBP_SnapRulesEnforcer_C* GetDefaultObj();

	void IsRoofCornerInnerSnapType(const struct FGridPoint& SnapPoint, bool* IsRoofCornerInner, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsDecorationSnapType(const struct FGridPoint& SnapPoint, bool* IsDecoration, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	bool AreRulesSatisfied(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint, const struct FSnapRules& SnapRules, const struct FSnapRules& CallFunc_GetSnapRuleForPoints_ReturnValue, const struct FTransform& CallFunc_GetGridPointWorldTransform_ReturnValue, const struct FVector& CallFunc_BreakTransform_Location, const struct FRotator& CallFunc_BreakTransform_Rotation, const struct FVector& CallFunc_BreakTransform_Scale, const struct FTransform& CallFunc_GetGridPointWorldTransform_ReturnValue_1, const struct FVector& CallFunc_BreakTransform_Location_1, const struct FRotator& CallFunc_BreakTransform_Rotation_1, const struct FVector& CallFunc_BreakTransform_Scale_1, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, const struct FRotator& CallFunc_InvertForwardAxisOrNot_Rot, const struct FVector& CallFunc_MakeVector_ReturnValue, float CallFunc_BreakRotator_Roll_1, float CallFunc_BreakRotator_Pitch_1, float CallFunc_BreakRotator_Yaw_1, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, double CallFunc_MakeVector_X_ImplicitCast, double CallFunc_MakeVector_Y_ImplicitCast, double CallFunc_MakeVector_Z_ImplicitCast, double CallFunc_MakeVector_X_ImplicitCast_1, double CallFunc_MakeVector_Y_ImplicitCast_1, double CallFunc_MakeVector_Z_ImplicitCast_1);
	void IsRoofFillerSnapType(const struct FGridPoint& SnapPoint, bool* IsRoofFiller, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsRoofConvexSnapType(const struct FGridPoint& SnapPoint, bool* IsRoofConvex, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsRoofFlatSnapType(const struct FGridPoint& SnapPoint, bool* IsRoofFlat, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsAwningSnapType(const struct FGridPoint& SnapPoint, bool* IsAwning, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	bool IsFoundationBottomSnapPointId(struct FGridPoint& SnapPoint, const class FString& FoundationBottomId, bool CallFunc_EqualEqual_StrStr_ReturnValue);
	bool IsFoundationTopSnapPointId(struct FGridPoint& SnapPoint, const class FString& FoundationTopId, bool CallFunc_EqualEqual_StrStr_ReturnValue);
	void Find_Indexes_with_Id(class UObject* SnapPointOwner, TArray<int32>& InitialIndexArray, const class FString& IdSpecified, TArray<int32>* FilteredArray, const TArray<int32>& LFilteredArray, class UObject* LSnapPointOwner, int32 CurrentSnapPointIndex, const class FString& LIdSpecified, int32 Temp_int_Array_Index_Variable, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<int32>& K2Node_MakeArray_Array, int32 CallFunc_Array_Add_ReturnValue, const struct FGridPoint& CallFunc_GetSnapPointFromIndexAndOwner_OutSnapPoint, bool CallFunc_IsGridPointOccupied_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void IsWallSnapType(const struct FGridPoint& SnapPoint, bool* IsWall, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsRoofAngleSnapType(const struct FGridPoint& SnapPoint, bool* IsRoofAngle, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsPillarSnapType(const struct FGridPoint& SnapPoint, bool* IsPillar, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void IsFoundationSnapType(const struct FGridPoint& SnapPoint, bool* IsFoundation, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	enum class ESnapPointQuadrant GetDesiredQuadrantFromTargetPoint(struct FGridPoint& TargetPoint, enum class ESnapPointQuadrant CallFunc_GetMirrorQuadrant_ReturnValue);
	void FindSnapPointIndexWithQuadrant(enum class ESnapPointQuadrant Quadrant, class UObject* SnapPointsOwner, TArray<int32>& SnapPointIndexes, int32* Array_Index, int32 CurrentSnapPointIndex, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, const struct FGridPoint& CallFunc_GetSnapPointFromIndexAndOwner_OutSnapPoint, bool CallFunc_IsGridPointValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void GetAcceptableQuadrants(const struct FGridPoint& TargetPoint, TSet<enum class ESnapPointQuadrant>* AcceptableQuadrants, TSet<enum class ESnapPointQuadrant> K2Node_MakeSet_Set);
	TArray<int32> FilterSourcePointIndexes(struct FGridPoint& TargetPoint, class UCompositePieceSnapObject* SnapObject, TArray<int32>& SourcePointIndexes, const TArray<int32>& FilteredSourceIndexes, int32 CurrentSnapPointIndex, class UObject* SnapPointOwner, TSet<enum class ESnapPointQuadrant> AcceptableQuadrants, class UObject* CallFunc_GetOwner_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, TSet<enum class ESnapPointQuadrant> CallFunc_GetAcceptableQuadrants_AcceptableQuadrants, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, const struct FGridPoint& CallFunc_GetSnapPointFromIndexAndOwner_OutSnapPoint, int32 CallFunc_Array_Get_Item, bool CallFunc_Set_Contains_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	int32 ChooseSnapPoint(struct FGridPoint& TargetPoint, TArray<int32>& SourcePointIndexes, class UCompositePieceSnapObject* SnapObject, int32 DefaultIndex, int32 ChosenIndex, int32 CurrentSourcePointIndex, enum class ESnapPointQuadrant DesiredQuadrant, class UObject* SourcePointsOwner, bool Temp_bool_Variable, int32 CallFunc_Array_Get_Item, bool CallFunc_Array_IsEmpty_ReturnValue, class UObject* CallFunc_GetOwner_ReturnValue, enum class ESnapPointQuadrant CallFunc_GetDesiredQuadrantFromTargetPoint_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int32 CallFunc_FindSnapPointIndexWithQuadrant_Array_Index, int32 K2Node_Select_Default);
	enum class ESnapType GetSnapTypeFromSnapPoint(struct FGridPoint& Point, enum class ESnapType CallFunc_GetOwnerSnapType_ReturnValue);
	void InvertForwardAxisOrNot(const struct FRotator& InRot, struct FSnapRules& SnapRule, struct FRotator* Rot, const struct FRotator& CallFunc_InvertRotatorForwardAxis_ReturnValue, const struct FRotator& CallFunc_SelectRotator_ReturnValue);
	struct FTransform CalculateSnapTransformForPoints(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint, const struct FVector& OptionalRotation, const struct FSnapRules& SnapRules, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FSnapRules& CallFunc_GetSnapRuleForPoints_ReturnValue, const struct FTransform& CallFunc_GetGridPointWorldTransform_ReturnValue, const struct FVector& CallFunc_BreakTransform_Location, const struct FRotator& CallFunc_BreakTransform_Rotation, const struct FVector& CallFunc_BreakTransform_Scale, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, class UObject* CallFunc_GetGridPointOwner_OutOwner, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FTransform& CallFunc_GetObjectTransform_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, const struct FTransform& CallFunc_GetGridPointWorldTransform_ReturnValue_1, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, const struct FTransform& CallFunc_MakeRelativeTransform_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FRotator& CallFunc_InvertForwardAxisOrNot_Rot, const struct FTransform& CallFunc_MakeTransform_ReturnValue, const struct FTransform& CallFunc_ComposeTransforms_ReturnValue, double CallFunc_MakeVector_X_ImplicitCast, double CallFunc_MakeVector_Y_ImplicitCast, double CallFunc_MakeVector_Z_ImplicitCast, float CallFunc_MakeRotator_Roll_ImplicitCast, float CallFunc_MakeRotator_Pitch_ImplicitCast, float CallFunc_MakeRotator_Yaw_ImplicitCast);
};

}


