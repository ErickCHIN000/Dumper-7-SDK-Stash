#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0xB8 (0x1B0 - 0xF8)
// BlueprintGeneratedClass BP_HUDGoalTrackingComponent.BP_HUDGoalTrackingComponent_C
class UBP_HUDGoalTrackingComponent_C : public UPersistentDataComponent
{
public:
	struct FPointerToUberGraphFrame              UberGraphFrame;                                    // 0xF8(0x8)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class FName, struct FS_UI_HUD_GoalTrackGroup> QuestTracks;                                       // 0x100(0x50)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FS_UI_HUD_GoalTrackGroup>      StructureTracks;                                   // 0x150(0x10)(Edit, BlueprintVisible, Net, DisableEditOnInstance, SaveGame, RepNotify, ContainsInstancedReference)
	int32                                        MaxStructureTrackCount;                            // 0x160(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                        Pad_42CB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FS_UI_HUD_GoalTrackGroup>      RecipeTracks;                                      // 0x168(0x10)(Edit, BlueprintVisible, Net, DisableEditOnInstance, SaveGame, RepNotify, ContainsInstancedReference)
	int32                                        MaxRecipeTrackCount;                               // 0x178(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                        Pad_42CE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            QuestTracksUpdated;                                // 0x180(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_            StructureTracksUpdated;                            // 0x190(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_            RecipeTracksUpdated;                               // 0x1A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

	static class UClass* StaticClass();
	static class UBP_HUDGoalTrackingComponent_C* GetDefaultObj();

	void IsCardNotificationQueueEmpty(bool* bIsEmpty);
	void IsEntityPinned(class FName ID, bool* IsPinned, bool CallFunc_IsStructureTracked_bIsTracked, int32 CallFunc_IsStructureTracked_TrackGroupIndex, bool CallFunc_IsRecipeTracked_bIsTracked, int32 CallFunc_IsRecipeTracked_TrackGroupIndex, bool CallFunc_Map_Contains_ReturnValue);
	void GetTrackedStructureCounts(int32* CurrentTrackedQty, int32* MaxTrackedQty, int32 CallFunc_Array_Length_ReturnValue);
	void GetTrackedRecipeCounts(int32* CurrentTrackedQty, int32* MaxTrackedQty, int32 CallFunc_Array_Length_ReturnValue);
	void GetStructureTracks(TArray<struct FS_UI_HUD_GoalTrackGroup>* StructureTracks);
	void GetRecipeTracks(TArray<struct FS_UI_HUD_GoalTrackGroup>* RecipeTracks);
	void GetAllInventoryItemsRelevantToCrafting(TArray<struct FInventoryEntry>* InventoryEntries, const TArray<struct FInventoryEntry>& AllItems, class UInventoryComponentBase* InventoryComponent, TScriptInterface<class IItemContainer> CallFunc_GetEssencePouch_Container, bool CallFunc_GetEssencePouch_ReturnValue, TScriptInterface<class IItemContainer> CallFunc_GetBackpack_Container, bool CallFunc_GetBackpack_ReturnValue, TArray<struct FInventoryEntry>& CallFunc_GetAllItems_Entries, TArray<struct FInventoryEntry>& CallFunc_GetAllItems_Entries_1, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UInventoryComponentBase* CallFunc_GetComponentByClass_ReturnValue);
	void GetMaxItemCountFromFilteredEntries(TArray<struct FInventoryEntry>& EntriesMeetConstraint, TArray<struct FInventoryEntry>& EntriesRelevant, int32* MaxCount, int32 MaxQuantity, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsEmpty_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, const struct FInventoryEntry& CallFunc_Array_Get_Item, int32 Temp_int_Array_Index_Variable_1, const struct FInventoryEntry& CallFunc_Array_Get_Item_1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable_1, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue_1);
	void GetTotalItemCountFromFilteredEntries(TArray<struct FInventoryEntry>& EntriesMeetConstraint, TArray<struct FInventoryEntry>& EntriesRelevant, int32* TotalCount, int32 TotalQuantity, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Array_Index_Variable_1, const struct FInventoryEntry& CallFunc_Array_Get_Item, const struct FInventoryEntry& CallFunc_Array_Get_Item_1, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue_2, int32 CallFunc_Add_IntInt_ReturnValue_3);
	void AddNewStructureTrack(struct FStructureData& StructureData, class FName StructureId, bool* bWasAdded, int32 ItemCount, const struct FItemConstraint& CurrentConstraint, const TArray<struct FInventoryEntry>& AllItems, class UInventoryComponentBase* InventoryComponent, enum class E_UI_HudTrackingTypes StructureTrackType, const TArray<struct FS_UI_HUD_GoalTracking>& NewTracks, const struct FStructureResourceRequirements& CurrentRequirement, class UStructureResourceRequirementsData* StructureRequirements, const struct FS_UI_HUD_GoalTrackGroup& NewTrackGroup, int32 Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const struct FItemConstraint& CallFunc_GetConstraint_ReturnValue, TScriptInterface<class IItemContainer> CallFunc_GetBackpack_Container, bool CallFunc_GetBackpack_ReturnValue, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesMeetConstraint, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesRelevant, int32 CallFunc_GetTotalItemCountFromFilteredEntries_TotalCount, TArray<struct FInventoryEntry>& CallFunc_GetAllItems_Entries, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue_2, class UInventoryComponentBase* CallFunc_GetComponentByClass_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& K2Node_MakeStruct_S_UI_HUD_GoalTrackGroup, int32 CallFunc_GetQuantityRequired_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, const struct FItemConstraintPresentationData& CallFunc_GetPresentationData_ReturnValue, const struct FS_UI_HUD_GoalTracking& K2Node_MakeStruct_S_UI_HUD_GoalTracking, int32 CallFunc_Array_Add_ReturnValue_1, const struct FStructureResourceRequirements& CallFunc_Array_Get_Item, bool CallFunc_Array_IsNotEmpty_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void AddNewRecipeTrack(struct FCraftingRecipe& RecipeData, class FName RecipeId, bool* bWasAdded, const struct FCraftingConstraintSlot& CurrentSlot, int32 ItemCount, const struct FItemConstraint& CurrentConstraint, const TArray<struct FInventoryEntry>& AllItems, class UInventoryComponentBase* InventoryComponent, enum class E_UI_HudTrackingTypes RecipeTrackType, const TArray<struct FS_UI_HUD_GoalTracking>& NewTracks, const struct FS_UI_HUD_GoalTrackGroup& NewTrackGroup, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<struct FInventoryEntry>& CallFunc_GetAllInventoryItemsRelevantToCrafting_InventoryEntries, int32 CallFunc_GetItemConstraintQuantityRequired_ReturnValue, const struct FItemConstraintPresentationData& CallFunc_GetItemConstraintUIData_OutPresentationData, const struct FCraftingConstraintSlot& CallFunc_Array_Get_Item, bool CallFunc_Array_IsNotEmpty_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesMeetConstraint, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesRelevant, int32 CallFunc_GetMaxItemCountFromFilteredEntries_MaxCount, const struct FS_UI_HUD_GoalTracking& K2Node_MakeStruct_S_UI_HUD_GoalTracking, const struct FS_UI_HUD_GoalTrackGroup& K2Node_MakeStruct_S_UI_HUD_GoalTrackGroup, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1);
	void IsRecipeTracked(class FName RecipeId, bool* bIsTracked, int32* TrackGroupIndex, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
	void IsStructureTracked(class FName StructureId, bool* bIsTracked, int32* TrackGroupIndex, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
	void OnRep_RecipeTracks(class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);
	void OnRep_StructureTracks(class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);
	void RemoveStructureTrack(const struct FStructureAssetReference& StructureReference, bool* bWasRemoved, int32 CurrentStackCount, int32 TrackGroupIndex, class FName StructureId, const struct FGuid& CallFunc_GetUniqueIDFromStructureAssetReference_ReturnValue, const class FString& CallFunc_Conv_GuidToString_ReturnValue, class FName CallFunc_Conv_StringToName_ReturnValue, class APlayerState* CallFunc_GetPlayerState_PlayerState, bool CallFunc_IsStructureTracked_bIsTracked, int32 CallFunc_IsStructureTracked_TrackGroupIndex, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void AddStructureTrack(const struct FStructureAssetReference& StructureReference, class FName StructureId, int32 TrackGroupIndex, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsStructureTracked_bIsTracked, int32 CallFunc_IsStructureTracked_TrackGroupIndex, bool CallFunc_GetStructureDataFromStructureAssetReference_IsValid, const struct FStructureData& CallFunc_GetStructureDataFromStructureAssetReference_OutData, bool CallFunc_AddNewStructureTrack_bWasAdded, int32 CallFunc_Array_Length_ReturnValue, class APlayerState* CallFunc_GetPlayerState_PlayerState, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, const struct FGuid& CallFunc_GetUniqueIDFromStructureAssetReference_ReturnValue, const class FString& CallFunc_Conv_GuidToString_ReturnValue, class FName CallFunc_Conv_StringToName_ReturnValue);
	void RemoveRecipeTrack(const struct FCraftingRecipeReference& RecipeReference, int32 QuantityToRemove, bool* bWasRemoved, int32 NewStackCount, int32 TrackGroupIndex, class FName RecipeId, bool CallFunc_Greater_IntInt_ReturnValue, const struct FGuid& CallFunc_GetID_ReturnValue, const class FString& CallFunc_Conv_GuidToString_ReturnValue, class FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsRecipeTracked_bIsTracked, int32 CallFunc_IsRecipeTracked_TrackGroupIndex, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, class APlayerState* CallFunc_GetPlayerState_PlayerState, int32 CallFunc_Subtract_IntInt_ReturnValue);
	void AddRecipeTrack(const struct FCraftingRecipeReference& RecipeReference, int32 TrackGroupIndex, class FName RecipeId, int32 CallFunc_Array_Length_ReturnValue, const struct FGuid& CallFunc_GetID_ReturnValue, const struct FCraftingRecipe& CallFunc_TryGetCraftingRecipe_CraftingRecipe, enum class EGetResult CallFunc_TryGetCraftingRecipe_Branches, const class FString& CallFunc_Conv_GuidToString_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsRecipeTracked_bIsTracked, int32 CallFunc_IsRecipeTracked_TrackGroupIndex, bool CallFunc_AddNewRecipeTrack_bWasAdded, class APlayerState* CallFunc_GetPlayerState_PlayerState, int32 CallFunc_Add_IntInt_ReturnValue);
	void RemoveQuestTrack(const struct FQuestAssetReference& QuestReference, bool* bWasRemoved, bool CallFunc_Internal_RemoveQuestTrack_bWasRemoved);
	void AddQuestTrack(const struct FOngoingTaskProgress& TaskProgress, bool* bWasAdded, bool CallFunc_Internal_AddQuestTrack_bWasAdded);
	void GetQuestTracks(TMap<class FName, struct FS_UI_HUD_GoalTrackGroup>* QuestTracks);
	void Internal_RemoveQuestTrack(const struct FQuestAssetReference& QuestReference, bool* bWasRemoved, class FName QuestID, class FName CallFunc_GetUniqueNameFromQuestAssetReference_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, const class FString& CallFunc_Conv_NameToString_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_1);
	void Internal_AddQuestTrack(const struct FOngoingTaskProgress& TaskProgress, bool* bWasAdded, const struct FS_UI_HUD_GoalTrackGroup& NewTaskGroup, enum class EQuestTaskCompletionRequirements TaskCompletionRequirement, const TArray<struct FS_UI_HUD_GoalTracking>& QuestTaskTracks, const struct FQuestTaskPresentationData& QuestTaskPresentation, class UQuestTrackerComponent* QuestTracker, class FName QuestID, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const struct FQuestAssetReference& CallFunc_GetQuestReferenceFromOngoingTask_ReturnValue, class FName CallFunc_GetUniqueNameFromQuestAssetReference_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& K2Node_MakeStruct_S_UI_HUD_GoalTrackGroup, const struct FQuestTaskConditionPresentationData& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const struct FS_UI_HUD_GoalTracking& K2Node_MakeStruct_S_UI_HUD_GoalTracking, int32 CallFunc_Array_Add_ReturnValue, const struct FQuestTaskPresentationData& CallFunc_MakeQuestTaskPresentationDataFromTaskProgress_OutQuestTaskPresentationData, bool CallFunc_MakeQuestTaskPresentationDataFromTaskProgress_ReturnValue, const struct FS_UI_HUD_GoalTracking& K2Node_MakeStruct_S_UI_HUD_GoalTracking_1, int32 CallFunc_Array_Add_ReturnValue_1, const class FString& CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_1);
	void UpdateRecipeTracks(struct FInventoryEntry& UpdatedEntry, int32 QuantityChange, const TArray<struct FInventoryEntry>& AllItems, bool bWasUpdated, int32 CurrentTrackIndex, int32 CurrentGroupIndex, const struct FS_UI_HUD_GoalTracking& CurrentTrackCopy, const TArray<struct FS_UI_HUD_GoalTracking>& TracksCopy, int32 Temp_int_Loop_Counter_Variable, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 Temp_int_Array_Index_Variable, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Array_Index_Variable_1, bool CallFunc_Less_IntInt_ReturnValue, const struct FS_UI_HUD_GoalTracking& CallFunc_Array_Get_Item, TArray<struct FInventoryEntry>& CallFunc_GetAllInventoryItemsRelevantToCrafting_InventoryEntries, bool CallFunc_Array_IsEmpty_ReturnValue, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesMeetConstraint, TArray<struct FInventoryEntry>& CallFunc_FilterEntriesBasedOnConstraint_OutEntriesRelevant, int32 CallFunc_GetMaxItemCountFromFilteredEntries_MaxCount, enum class EGetResult CallFunc_IsItemRelevantForConstraint_OutBranch, int32 CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_GreaterEqual_IntInt_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& CallFunc_Array_Get_Item_1, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1);
	void UpdateStructureTracks(struct FInventoryEntry& UpdatedEntry, int32 QuantityChange, bool bWasUpdated, int32 CurrentTrackIndex, const struct FS_UI_HUD_GoalTracking& CurrentTrackCopy, const TArray<struct FS_UI_HUD_GoalTracking>& TracksCopy, int32 CurrentGroupIndex, class AActor* CallFunc_GetOwner_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_HasAuthority_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Array_Index_Variable_1, const struct FS_UI_HUD_GoalTracking& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const struct FS_UI_HUD_GoalTrackGroup& CallFunc_Array_Get_Item_1, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue_2, enum class EGetResult CallFunc_IsItemRelevantForConstraint_OutBranch, bool K2Node_SwitchEnum_CmpSuccess);
	void OnEssencePouchItemRemoved(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity, int32 QuantityRemoved, int32 CallFunc_Multiply_IntInt_ReturnValue, int32 Temp_int_Variable);
	void OnEssencePouchItemAdded(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void OnBackpackItemRemoved(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity, int32 QuantityRemoved, int32 CallFunc_Multiply_IntInt_ReturnValue, int32 Temp_int_Variable);
	void OnBackpackItemAdded(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void OnCraftedItemReceived(const struct FCraftingRecipeReference& RecipeReference, const struct FInventoryEntry& ReceivedItem, int32 ReceivedRecipeQuantity, bool CallFunc_RemoveRecipeTrack_bWasRemoved, const struct FGuid& CallFunc_GetID_ReturnValue, const class FString& CallFunc_Conv_GuidToString_ReturnValue, class APlayerState* CallFunc_GetPlayerState_PlayerState, class FName CallFunc_Conv_StringToName_ReturnValue);
	void AddQuestTrackIfTracked(class UQuestTrackerComponent* QuestTracker, const struct FOngoingTaskProgress& TaskProgress, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Internal_AddQuestTrack_bWasAdded, bool CallFunc_FindQuestHUDVisibilityFromTask_ReturnValue);
	void RefreshAllQuestTasks(class UQuestTrackerComponent* QuestTracker, int32 Temp_int_Loop_Counter_Variable, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int32 Temp_int_Array_Index_Variable_1, class APlayerState* CallFunc_GetPlayerState_PlayerState, TScriptInterface<class IQuestTrackerInterface> CallFunc_GetAllTaskProgress_self_CastInput, TArray<struct FOngoingTaskProgress>& CallFunc_GetAllTaskProgress_OngoingTasks, TArray<struct FOngoingTaskProgress>& CallFunc_GetAllTaskProgress_ReadyToCompleteTasks, class UQuestTrackerComponent* CallFunc_GetComponentByClass_ReturnValue, const struct FOngoingTaskProgress& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, const struct FOngoingTaskProgress& CallFunc_Array_Get_Item_1, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1);
	void OnStructureCompleted(class AActor* OwningActor, int32 PieceId, const struct FStructureAssetReference& StructureReference, class FName StructureId, class AStructureComposite* K2Node_DynamicCast_AsStructure_Composite, bool K2Node_DynamicCast_bSuccess, TScriptInterface<class IStructureDataProviderInterface> K2Node_DynamicCast_AsStructure_Data_Provider_Interface, bool K2Node_DynamicCast_bSuccess_1, class UStructureCompositeComponent* CallFunc_GetCompositeComponent_ReturnValue, bool CallFunc_GetStructureAssetReference_IsValid, const struct FStructureAssetReference& CallFunc_GetStructureAssetReference_OutStructureReference, bool CallFunc_RemoveStructureTrack_bWasRemoved, class APlayerState* CallFunc_GetPlayerState_PlayerState, class UStructureCompositePiece* CallFunc_GetCompositePieceById_ReturnValue, TScriptInterface<class IStructureDataProviderInterface> CallFunc_GetStructureAssetReference_self_CastInput, bool CallFunc_GetStructureAssetReference_IsValid_1, const struct FStructureAssetReference& CallFunc_GetStructureAssetReference_OutStructureReference_1);
	void BindInventoryEvents(TScriptInterface<class IItemContainer> EssencePouch, TScriptInterface<class IItemContainer> Backpack, class UInventoryComponentBase* InventoryComponent, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_GetInitialInventoryReceived_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UInventoryComponentBase* CallFunc_GetComponentByClass_ReturnValue, const class FString& CallFunc_GetFunctionName_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_2, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_3, TScriptInterface<class IItemContainer> CallFunc_GetEssencePouch_Container, bool CallFunc_GetEssencePouch_ReturnValue, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_4, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_5, const class FString& CallFunc_GetFunctionName_ReturnValue_1, const class FString& CallFunc_Concat_StrStr_ReturnValue_1, TScriptInterface<class IItemContainer> CallFunc_GetBackpack_Container, bool CallFunc_GetBackpack_ReturnValue, const class FString& CallFunc_GetFunctionName_ReturnValue_2, const class FString& CallFunc_GetFunctionName_ReturnValue_3, const class FString& CallFunc_Concat_StrStr_ReturnValue_2, const class FString& CallFunc_Concat_StrStr_ReturnValue_3, bool CallFunc_IsValid_ReturnValue_1);
	void GetPlayerState(class APlayerState** PlayerState, class AActor* CallFunc_GetOwner_ReturnValue, class APlayerController* K2Node_DynamicCast_AsPlayer_Controller, bool K2Node_DynamicCast_bSuccess);
	void Update_Quest_Goal_Tracking(class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue);
	void DisplayHUD(bool ShowingHUD);
	void CreateMarker(class AActor* ActorToMark, class ACharacter* PlayerCharacter, class UCameraComponent* PlayerCamera, const struct FLinearColor& Colour, double IconDistance, const struct FDataTableRowHandle& Row);
	void RemoveMarker(class AActor* ActorToMark);
	void UpdateMarker(class AActor* ActorToMark, double MarkerPrecision, bool ParticlesVisible, const struct FLinearColor& ParticlesColor);
	void DisplayCompass(bool bVisible, bool PlayFX);
	void DisplayQuestNotification(double DisplayTime, const struct FS_QuestNotificatorInfo& Quest_Notificator_Info, bool DisplayToolTip, class UObject* ToolTipIcon, class FText ToolTipText, bool ToolTipOnly);
	void DisplayIngameTutorial(double DisplayTime, const struct FS_IngameTutorial& Row1, const struct FS_IngameTutorial& Row2, const struct FLinearColor& BackgroundColor);
	void DisplayCrosshair(enum class E_CrosshairTypes Crosshair_Type, bool CrosshairVisibility, const struct FLinearColor& Crosshair_Color, enum class E_HitIndicatorTypes HitIndicator_Type, bool HitIndicatorVisibility);
	void DisplayHitIndicator(double IndicatorTime, const struct FLinearColor& IndicatorColor, enum class E_HitType Hit_Type);
	void RemoveQuestNotification();
	void DisplayRecoil(bool IsRecoil);
	void DisplaySingleRecoil();
	void DisplayBigLootNotification(const struct FS_BigLootNotificationInfo& Big_Loot_Notify_Info);
	void RemoveBigLootNotification();
	void DisplayToolTip(double DisplayTime, const struct FS_IngameTutorial& Row1, const struct FS_IngameTutorial& Row2);
	void RemoveToolTip();
	void DisplayGlobalNotification(double DisplayTime, class FText TypeText, class FText HeadlineText);
	void RemoveGlobalNotification();
	void CrosshairVisibility(bool bVisible);
	void HUD_FocusChatInput();
	void HUD_InputChatCommand();
	void Chat_Message_SendToServer(const class FString& ChatMessage);
	void Chat_Message_ReceiveFromServer(const struct FS_ChatMessage& ChatMessageS);
	void Chat_LeaveChannel(int32 ChannelID);
	void Chat_JoinChannel(int32 ChannelID);
	void Chat_PM_SendToServer(int32 PlayerId, const class FString& Message);
	void Chat_PM_ReceiveFromServer(int32 PlayerId, const class FString& Message);
	void Chat_SetStatus(bool Away);
	void Chat_ServerCommand(const class FString& Message);
	void Chat_Yell_SendToServer(const class FString& Message);
	void Chat_Yell_ReceiveFromServer(const class FString& Message);
	void Crosshair_ShowReloadText(bool Show);
	void Crosshair_UpdateReload(double Time);
	void ShowSpyglass(bool Show_);
	void HUD_UpdateInteractText(struct FInteractionUIContext& InteractionContext);
	void HUD_DisplayApexCreature_BossBar(bool Display_);
	void HUD_UpdateBossBar(const class FString& Bar_Label, class FText Whatever_, double Health, class FText Bar_Header);
	void HUD_AddNewBossBar(const struct FLinearColor& Progress_Bar_Tint, enum class EProgressBarFillType Progress_Bar_Direction, const class FString& Bar_Label, class FText Bar_Header, class FText Bar_Sub_Header);
	void HUD_RemoveBossBar(const class FString& Label);
	void HUD_Damage_CreateIndicator(const struct FDamageEffectContextData& DamageContextData, double Time_to_Display, double Damage_Intensity__Amount_, const struct FLinearColor& Colour);
	void HUD_UpdateActionProgressBar(bool Visible, double CurrentProgress, class FText Label, bool ShowImage, TSoftObjectPtr<class UTexture2D> Image);
	void HUD_ChangeHudMode(enum class E_UI_HUD_Modes HUD_Mode);
	void DisplayEncounterUpdate(TScriptInterface<class IEncounterUIDataInterface> EncounterData, const struct FNotificationEncounter& EncounterMessage);
	void HUD_SetRealmStartTime(double RealmStartTime);
	void Crosshair_UpdateWeaponSpread(double Spread);
	void ShowContextualControls(bool IsVisible, const struct FS_ContextualControlsData& ContextualControlsData);
	void HUD_Encounter_MiniMessage_Timed(const struct FNotificationEncounter& Message_Content, double TimeToDisplay);
	void HUD_Encounter_MiniMessage_Pinned(const struct FNotificationEncounter& MessageContent, bool Pin_or_Unpin__Pin_true_will_add_);
	void HUD_GeneralNotification(const struct FS_UpdaterNotificatorInfo& Content, bool Remove_Manually, double Time_to_Display);
	void HUD_StatusEffect_TextNotificationUpdate(bool ManuallyRemove_, double TimeToDisplay, const struct FS_UpdaterNotificatorInfo& Content);
	void HUD_StatusEffect_TextNotification_Remove();
	void UI_Spyglass_AdjustZoomLevel();
	void UI_VFX_CraftingSuccess(const struct FVector& Location, enum class EItemQuality Quality);
	void UI_VFX_CC_ChangeCharacter();
	void DisplayErrorNotification(class FText MainText, class FText BodyText);
	void FadeToBlack_andBack(double TimeToStayBlack);
	void FadeToBlack_Manual(bool To_Black_true__From_Black__False);
	void BuildUX_Feedback_Invalid_Intersecting(const struct FStructurePlacementFeedback_Collision& Feedback);
	void BuildUX_Feedback_Invalid(const struct FStructurePlacementFeedback& Feedback);
	void BuildUX_Feedback_RotationControls(bool CanRotate, double CurrentRotation);
	void BuildUX_Feedback_HeightControls(bool CanAdjustHeight, double Height_Current, double Height_Max, double Height_Min);
	void ClearNotificationCardQueue();
	void UpdateNextNotificationCard();
	void ReceiveBeginPlay();
	void RefreshHUD();
	void GameStateReady_Begin();
	void OnGameStateReady(bool Success);
	void TrackCraftingEntity(const struct FCraftingRecipeReference& CraftingRecipeRef, bool IsAdding);
	void TrackBuildingEntity(const struct FStructureAssetReference& StructureAssetRef, bool IsAdding);
	void Server_TrackCraft(const struct FCraftingRecipeReference& RecipeReference, bool bIsAdding);
	void Server_TrackStructure(const struct FStructureAssetReference& StructureReference, bool bIsAdding);
	void ExecuteUbergraph_BP_HUDGoalTrackingComponent(int32 EntryPoint, bool K2Node_Event_ShowingHUD, class AActor* K2Node_Event_ActorToMark_2, class ACharacter* K2Node_Event_PlayerCharacter, class UCameraComponent* K2Node_Event_PlayerCamera, const struct FLinearColor& K2Node_Event_Colour_1, double K2Node_Event_IconDistance, const struct FDataTableRowHandle& K2Node_Event_Row, class AActor* K2Node_Event_ActorToMark_1, class AActor* K2Node_Event_ActorToMark, double K2Node_Event_MarkerPrecision, bool K2Node_Event_ParticlesVisible, const struct FLinearColor& K2Node_Event_ParticlesColor, bool K2Node_Event_bVisible_1, bool K2Node_Event_PlayFX, double K2Node_Event_DisplayTime_3, const struct FS_QuestNotificatorInfo& K2Node_Event_Quest_Notificator_Info, bool K2Node_Event_DisplayToolTip, class UObject* K2Node_Event_ToolTipIcon, class FText K2Node_Event_ToolTipText, bool K2Node_Event_ToolTipOnly, double K2Node_Event_DisplayTime_2, const struct FS_IngameTutorial& K2Node_Event_Row1_1, const struct FS_IngameTutorial& K2Node_Event_Row2_1, const struct FLinearColor& K2Node_Event_BackgroundColor, enum class E_CrosshairTypes K2Node_Event_Crosshair_Type, bool K2Node_Event_CrosshairVisibility, const struct FLinearColor& K2Node_Event_Crosshair_Color, enum class E_HitIndicatorTypes K2Node_Event_HitIndicator_Type, bool K2Node_Event_HitIndicatorVisibility, double K2Node_Event_IndicatorTime, const struct FLinearColor& K2Node_Event_IndicatorColor, enum class E_HitType K2Node_Event_Hit_Type, bool K2Node_Event_IsRecoil, const struct FS_BigLootNotificationInfo& K2Node_Event_Big_Loot_Notify_Info, double K2Node_Event_DisplayTime_1, const struct FS_IngameTutorial& K2Node_Event_Row1, const struct FS_IngameTutorial& K2Node_Event_Row2, double K2Node_Event_DisplayTime, class FText K2Node_Event_TypeText, class FText K2Node_Event_HeadlineText, bool K2Node_Event_bVisible, const class FString& K2Node_Event_ChatMessage, const struct FS_ChatMessage& K2Node_Event_ChatMessageS, int32 K2Node_Event_ChannelID_1, int32 K2Node_Event_ChannelID, int32 K2Node_Event_PlayerID_1, const class FString& K2Node_Event_message_4, int32 K2Node_Event_PlayerID, const class FString& K2Node_Event_message_3, bool K2Node_Event_Away, const class FString& K2Node_Event_message_2, const class FString& K2Node_Event_message_1, const class FString& K2Node_Event_message, bool K2Node_Event_Show, double K2Node_Event_Time, bool K2Node_Event_Show_, const struct FInteractionUIContext& K2Node_Event_InteractionContext, bool K2Node_Event_Display_, const class FString& K2Node_Event_Bar_Label_1, class FText K2Node_Event_Sub_Text__Status_Creature_Type_Whatever_, double K2Node_Event_Health, class FText K2Node_Event_Bar_Header_1, const struct FLinearColor& K2Node_Event_Progress_Bar_Tint, enum class EProgressBarFillType K2Node_Event_Progress_Bar_Direction, const class FString& K2Node_Event_Bar_Label, class FText K2Node_Event_Bar_Header, class FText K2Node_Event_Bar_Sub_Header, const class FString& K2Node_Event_Label_1, const struct FDamageEffectContextData& K2Node_Event_DamageContextData, double K2Node_Event_Time_to_Display_1, double K2Node_Event_Damage_Intensity__Amount_, const struct FLinearColor& K2Node_Event_Colour, bool K2Node_Event_Visible, double K2Node_Event_CurrentProgress, class FText K2Node_Event_Label, bool K2Node_Event_ShowImage, TSoftObjectPtr<class UTexture2D> K2Node_Event_Image, enum class E_UI_HUD_Modes K2Node_Event_HUD_Mode, TScriptInterface<class IEncounterUIDataInterface> K2Node_Event_EncounterData, const struct FNotificationEncounter& K2Node_Event_EncounterMessage, double K2Node_Event_RealmStartTime, double K2Node_Event_Spread, bool K2Node_Event_IsVisible, const struct FS_ContextualControlsData& K2Node_Event_ContextualControlsData, const struct FNotificationEncounter& K2Node_Event_Message_Content, double K2Node_Event_TimeToDisplay_1, const struct FNotificationEncounter& K2Node_Event_MessageContent, bool K2Node_Event_Pin_or_Unpin__Pin_true_will_add_, const struct FS_UpdaterNotificatorInfo& K2Node_Event_Content_1, bool K2Node_Event_Remove_Manually, double K2Node_Event_Time_to_Display, bool K2Node_Event_ManuallyRemove_, double K2Node_Event_TimeToDisplay, const struct FS_UpdaterNotificatorInfo& K2Node_Event_Content, const struct FVector& K2Node_Event_Location, enum class EItemQuality K2Node_Event_Quality, class FText K2Node_Event_MainText, class FText K2Node_Event_BodyText, double K2Node_Event_TimeToStayBlack, bool K2Node_Event_To_Black_true__From_Black__False, const struct FStructurePlacementFeedback_Collision& K2Node_Event_Feedback_1, const struct FStructurePlacementFeedback& K2Node_Event_Feedback, bool K2Node_Event_CanRotate, double K2Node_Event_CurrentRotation, bool K2Node_Event_CanAdjustHeight, double K2Node_Event_Height_Current, double K2Node_Event_Height_Max, double K2Node_Event_Height_Min, class AGameStateBase* CallFunc_GetGameState_ReturnValue, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate, class ANWXGameStateBase* K2Node_DynamicCast_AsNWXGame_State_Base, bool K2Node_DynamicCast_bSuccess, class AActor* CallFunc_GetOwner_ReturnValue, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_HasAuthority_ReturnValue, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_2, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_3, class AGameStateBase* CallFunc_GetGameState_ReturnValue_1, bool K2Node_CustomEvent_Success, class ANWXGameStateBase* K2Node_DynamicCast_AsNWXGame_State_Base_1, bool K2Node_DynamicCast_bSuccess_1, FDelegateProperty_ K2Node_CreateDelegate_OutputDelegate_4, TScriptInterface<class IAwaitable> CallFunc_AwaitBP_Awaitable_CastInput, const struct FDelegateHandleBPWrapper& CallFunc_AwaitBP_Handle, const struct FCraftingRecipeReference& K2Node_Event_CraftingRecipeRef, bool K2Node_Event_IsAdding_1, const struct FStructureAssetReference& K2Node_Event_StructureAssetRef, bool K2Node_Event_IsAdding, const class FString& CallFunc_GetFunctionName_ReturnValue, bool CallFunc_IsServer_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue_1, class APlayerState* CallFunc_GetPlayerState_PlayerState, bool CallFunc_IsValid_ReturnValue, class ABP_PlayerState_C* K2Node_DynamicCast_AsBP_Player_State, bool K2Node_DynamicCast_bSuccess_2, class UBP_CraftingComponent_C* CallFunc_GetComponentByClass_ReturnValue, class APlayerState* CallFunc_GetPlayerState_PlayerState_1, TScriptInterface<class IQuestTrackerProviderInterface> K2Node_DynamicCast_AsQuest_Tracker_Provider_Interface, bool K2Node_DynamicCast_bSuccess_3, bool CallFunc_IsValid_ReturnValue_1, TScriptInterface<class IQuestTrackerInterface> CallFunc_GetQuestTracker_ReturnValue, const struct FCraftingRecipeReference& K2Node_CustomEvent_RecipeReference, bool K2Node_CustomEvent_bIsAdding_1, const struct FStructureAssetReference& K2Node_CustomEvent_StructureReference, bool K2Node_CustomEvent_bIsAdding, bool CallFunc_RemoveStructureTrack_bWasRemoved, bool CallFunc_RemoveRecipeTrack_bWasRemoved, class AActor* CallFunc_GetOwner_ReturnValue_2, class AActor* CallFunc_GetOwner_ReturnValue_3, bool CallFunc_HasAuthority_ReturnValue_1, bool CallFunc_HasAuthority_ReturnValue_2);
	void RecipeTracksUpdated__DelegateSignature();
	void StructureTracksUpdated__DelegateSignature();
	void QuestTracksUpdated__DelegateSignature();
};

}


