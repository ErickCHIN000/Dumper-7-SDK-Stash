#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x70 (0xB8 - 0x48)
// Class NWX.SkillDataAsset
class USkillDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	uint8                                        Pad_183[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSkillPresentationData                UIData;                                            // 0x50(0x58)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkillReferenceContainer              SkillUnlockables;                                  // 0xA8(0x10)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USkillDataAsset* GetDefaultObj();

};

// 0x130 (0x178 - 0x48)
// Class NWX.CraftingRecipeAsset
class UCraftingRecipeAsset : public UUniquelyIdentifiableDataAsset
{
public:
	uint8                                        Pad_186[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsUnlockable;                                     // 0x50(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_189[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCraftingRecipe                       Recipe;                                            // 0x58(0x120)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingRecipeAsset* GetDefaultObj();

};

// 0x3F8 (0x440 - 0x48)
// Class NWX.StructureDataAsset
class UStructureDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	uint8                                        Pad_195[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsUnlockable;                                     // 0x50(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_196[0xF];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureData                        Data;                                              // 0x60(0x3E0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureDataAsset* GetDefaultObj();

	bool IsSupported();
	struct FGuid GetUniqueStructureID();
	class FName GetAssetName();
};

// 0x88 (0xD0 - 0x48)
// Class NWX.EmoteDataAsset
class UEmoteDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	uint8                                        Pad_19A[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  DisplayName;                                       // 0x50(0x18)(Edit, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x68(0x18)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x80(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>           AnimationMontage;                                  // 0xA8(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEmoteDataAsset* GetDefaultObj();

};

// 0x40 (0xC0 - 0x80)
// Class NWX.AbilityTask_NWXWaitTargetData
class UAbilityTask_NWXWaitTargetData : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            ValidData;                                         // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Cancelled;                                         // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> TargetClass;                                       // 0xA0(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGameplayAbilityTargetActor*           TargetActor;                                       // 0xA8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1BF[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAbilityTask_NWXWaitTargetData* GetDefaultObj();

	void OnTargetDataReplicatedCancelledCallback();
	void OnTargetDataReplicatedCallback(struct FGameplayAbilityTargetDataHandle& Data, const struct FGameplayTag& ActivationTag);
	void OnTargetDataReadyCallback(struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataCancelledCallback(struct FGameplayAbilityTargetDataHandle& Data);
	class UAbilityTask_NWXWaitTargetData* NWXWaitTargetData(class UGameplayAbility* OwningAbility, class FName& TaskInstanceName, enum class ENWXGameplayTargetConfirmation ConfirmationType, TSubclassOf<class AGameplayAbilityTargetActor> Class);
	void FinishSpawningActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor* SpawnedActor);
	bool BeginSpawningActor(class UGameplayAbility* OwningAbility, TSubclassOf<class AGameplayAbilityTargetActor> Class, class AGameplayAbilityTargetActor** SpawnedActor);
};

// 0x30 (0xD8 - 0xA8)
// Class NWX.AbilityTask_WaitGameplayTagsAdded
class UAbilityTask_WaitGameplayTagsAdded : public UAbilityTask_WaitGameplayTag
{
public:
	FMulticastInlineDelegateProperty_            Added;                                             // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1C2[0x20];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAbilityTask_WaitGameplayTagsAdded* GetDefaultObj();

	class UAbilityTask_WaitGameplayTagsAdded* WaitGameplayTagsAdd(class UGameplayAbility* OwningAbility, struct FGameplayTagContainer& Tags, class AActor* InOptionalExternalTarget, bool OnlyTriggerOnce);
};

// 0x30 (0xD8 - 0xA8)
// Class NWX.AbilityTask_WaitGameplayTagsRemoved
class UAbilityTask_WaitGameplayTagsRemoved : public UAbilityTask_WaitGameplayTag
{
public:
	FMulticastInlineDelegateProperty_            Removed;                                           // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1CC[0x20];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAbilityTask_WaitGameplayTagsRemoved* GetDefaultObj();

	class UAbilityTask_WaitGameplayTagsRemoved* WaitGameplayTagsRemove(class UGameplayAbility* OwningAbility, struct FGameplayTagContainer& Tags, class AActor* InOptionalExternalTarget, bool OnlyTriggerOnce);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AbstractPlayerStartStrategy
class UAbstractPlayerStartStrategy : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAbstractPlayerStartStrategy* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.AccumulationAccessInterface
class IAccumulationAccessInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAccumulationAccessInterface* GetDefaultObj();

	bool TryUpdateAccumulationInstance(struct FAccumulationHandle& Handle, float NewValue);
	bool TryGetHandleForAsset(TSoftObjectPtr<class UAccumulationDataAsset>& Asset, struct FAccumulationHandle* OutHandle);
	bool TryGetAllAccumulationHandles(TArray<struct FAccumulationHandle>* OutHandles);
	bool TryGetAccumulationInstanceValue(struct FAccumulationHandle& Handle, float* OutValue);
	bool TryGetAccumulationInstanceUIData(struct FAccumulationHandle& Handle, struct FAccumulationUIData* OutData);
	bool TryAddAccumulationInstance(TSoftObjectPtr<class UAccumulationDataAsset>& ReferenceAsset, struct FAccumulationHandle* OutHandle);
	void RegisterForAccumulationInstanceUpdated(FDelegateProperty_& Delegate);
	void RegisterForAccumulationInstanceCompleted(FDelegateProperty_& Delegate);
	void RegisterForAccumulationInstanceAdded(FDelegateProperty_& Delegate);
};

// 0x38 (0x68 - 0x30)
// Class NWX.AccumulationDataAsset
class UAccumulationDataAsset : public UDataAsset
{
public:
	struct FAccumulationUIData                   UIData;                                            // 0x30(0x38)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAccumulationDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ActionBindingBPFunctionLibrary
class UActionBindingBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UActionBindingBPFunctionLibrary* GetDefaultObj();

	void UpdateExistingActionBindingRow(class UDataTable* DataTable, class FName& RowName, struct FS_ActionKeyBinding& UserKeyBinding, struct FInputChord& SelectedKey);
	bool SaveActionKeyBindingMap(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex);
	void ResetActionBindingsToDefault(class UDataTable* DataTable, class UOptionsControls* OptionsControls);
	bool LoadActionKeyBindingMap(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex);
	bool Equals(struct FS_ActionKeyBinding& A, struct FS_ActionKeyBinding& B);
	void ApplyActionKeyBindings(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex, bool* bIsSuccess);
};

// 0x30 (0x60 - 0x30)
// Class NWX.ActivationVolumeDataAsset
class UActivationVolumeDataAsset : public UDataAsset
{
public:
	class URequirement*                          TriggerRequirements;                               // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanBeActivatedMultipleTimes;                      // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseClientPredictedAVFX;                           // 0x39(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F3[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UVolumeAVFXDataAsset*                  LoopAVFX;                                          // 0x40(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  TriggeredAVFX;                                     // 0x48(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  ReturnToIdleAVFX;                                  // 0x50(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTelemetryDataAsset*             TriggeredTelemetry;                                // 0x58(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UActivationVolumeDataAsset* GetDefaultObj();

};

// 0x70 (0x310 - 0x2A0)
// Class NWX.ActivationVolume
class AActivationVolume : public AActor
{
public:
	uint8                                        Pad_1FB[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UActivationVolumeDataAsset*            DataAsset;                                         // 0x2B8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2C0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2C8(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsDisabled;                                       // 0x2D8(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1FC[0x37];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AActivationVolume* GetDefaultObj();

	void RegisterToActivationEvent(FDelegateProperty_& Delegate);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void Multicast_PlayTriggeredAVFX();
	void Multicast_PlayReturnToIdleAVFX();
	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
	void DeregisterFromActivationEvent(FDelegateProperty_& Delegate);
};

// 0x50 (0x80 - 0x30)
// Class NWX.ActivityGameInstanceSubsystem
class UActivityGameInstanceSubsystem : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnActivityRequestedEvent;                          // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FE[0x40];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActivityGameInstanceSubsystem* GetDefaultObj();

	void TerminateAllActivityTasks();
	void StartLocalActivity(enum class EActivityTask& ETask);
	void ResumeActivity(enum class EActivityTask& ETask, bool bSuccess);
	void ResetIsActivityRequested();
	bool GetIsActivityRequested();
	void EndLocalActivity(enum class EActivityTask& ETask, bool bSuccess);
};

// 0x128 (0x1C8 - 0xA0)
// Class NWX.AddResourcesComponent
class UAddResourcesComponent : public UActorComponent
{
public:
	uint8                                        Pad_200[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnClientResourcesUpdated;                          // 0xA8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FStructureCompositeRequirementsTrackers RequirementsTrackers;                              // 0xB8(0x30)(Net, SaveGame, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FStructureCompositeRequirementsTrackers ClientRequirementsTrackers;                        // 0xE8(0x30)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int32, class UStructureResourcesManagerObject*> ResourcesManagers;                                 // 0x118(0x50)(Protected, NativeAccessSpecifierProtected)
	struct FStructureAddResourcesContext         LastAddedResourceContext;                          // 0x168(0x28)(NativeAccessSpecifierPrivate)
	struct FStructureRemoveResourcesContext      LastRemovedResourceContext;                        // 0x190(0x20)(NativeAccessSpecifierPrivate)
	bool                                         bIsPostConstructionComponent;                      // 0x1B0(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_201[0x17];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAddResourcesComponent* GetDefaultObj();

	void OnRep_RequirementsTracker();
	class UStructureResourcesManagerObject* GetResourcesManager(int32 TrackerId);
};

// 0x8 (0x30 - 0x28)
// Class NWX.AIActionBase
class UAIActionBase : public UObject
{
public:
	uint8                                        Pad_205[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIActionBase* GetDefaultObj();

	void SetDebugString(const class FString& String);
	bool Initialize();
	class APawn* GetOwnerPawn();
	class AAIController* GetOwnerAIController();
	class UAIActionComponent* GetOwner();
	bool CheckTargetRequirements(class AActor* Target);
	bool CheckStaticTargetRequirements(class AActor* Target);
	bool CheckOwnerRequirements();
};

// 0x38 (0x68 - 0x30)
// Class NWX.AIAction
class UAIAction : public UAIActionBase
{
public:
	TSubclassOf<class UAIActionCategory>         Category;                                          // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTree*                         BehaviorTree;                                      // 0x38(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRestartBTreeOnTargetChange;                       // 0x40(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCancelIfRequirementsFail;                         // 0x41(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_20B[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UAIActionRequirement>> SharedRequirements;                                // 0x48(0x10)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                        EvaluationDelay;                                   // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETicketType                       RequiredTicketType;                                // 0x5C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETicketType                       AwaitedTicketType;                                 // 0x5D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCancelImmediatelyOnTicketLost;                    // 0x5E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRegisterFlanker;                                  // 0x5F(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanPause;                                         // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_20C[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIAction* GetDefaultObj();

	void Stop(class AActor* Target);
	void Start(class AActor* Target);
	bool ShouldRestartBTreeOnTargetChange();
	bool ShouldRegisterFlanker();
	bool ShouldCancelImmediatelyOnTicketLost();
	bool ShouldCancelIfRequirementsFail();
	void OnTargetChanged(class AActor* OldTarget, class AActor* NewTarget);
	int32 GetTicketPriority(class AActor* Target);
	TArray<TSubclassOf<class UAIActionRequirement>> GetSharedRequirementClasses();
	float GetScore(class AActor* Target);
	float GetRunPriority(class AActor* Target);
	enum class ETicketType GetRequiredTicketType();
	float GetNormalizedScore(class AActor* Target);
	float GetNormalizedRunPriority(class AActor* Target);
	float GetEvaluationDelay();
	TSubclassOf<class UAIActionCategory> GetCategoryClass();
	class UAIActionCategory* GetCategory();
	class UBehaviorTree* GetBehaviorTree();
	enum class ETicketType GetAwaitedTicketType();
	bool CanPause();
};

// 0x28 (0x50 - 0x28)
// Class NWX.AIActionCategory
class UAIActionCategory : public UObject
{
public:
	float                                        MinimumScore;                                      // 0x28(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaximumScore;                                      // 0x2C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinimumPriority;                                   // 0x30(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaximumPriority;                                   // 0x34(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EvaluationDelay;                                   // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_20D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UAIActionRequirement>> SharedRequirements;                                // 0x40(0x10)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAIActionCategory* GetDefaultObj();

	TArray<TSubclassOf<class UAIActionRequirement>> GetSharedRequirementClasses();
	float GetMinimumScore();
	float GetMinimumPriority();
	float GetMaximumScore();
	float GetMaximumPriority();
	float GetEvaluationDelay();
};

// 0x3A0 (0x440 - 0xA0)
// Class NWX.AIActionComponent
class UAIActionComponent : public UActorComponent
{
public:
	TArray<TSubclassOf<class UAIAction>>         ActionClasses;                                     // 0xA0(0x10)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UBehaviorTree*                         FallbackBehavior;                                  // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  TargetKeyName;                                     // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        UpdateInterval;                                    // 0xC0(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFloatRange                           InitialWaitTime;                                   // 0xC4(0x10)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxEvaluationsPerTick;                             // 0xD4(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                       MaxTimeSlicePerTick;                               // 0xD8(0x8)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinEvaluationsPerTimeSliceCheck;                   // 0xE0(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22E[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActionChanged;                                   // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UAIActionRequirement>, class UAIActionRequirement*> SharedRequirements;                                // 0xF8(0x50)(Protected, NativeAccessSpecifierProtected)
	TArray<class UAIAction*>                     Actions;                                           // 0x148(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UNWXSquadMemberAction*>         SquadMemberActions;                                // 0x158(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UAIAction>, struct FTargetedAIAction> TargetedActions;                                   // 0x168(0x50)(Protected, NativeAccessSpecifierProtected)
	TSet<TSubclassOf<class UAIAction>>           ActionClassesToAdd;                                // 0x1B8(0x50)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSet<class AActor*>                          TargetsToAdd;                                      // 0x208(0x50)(Protected, NativeAccessSpecifierProtected)
	TSet<class AActor*>                          TargetsToRemove;                                   // 0x258(0x50)(Protected, NativeAccessSpecifierProtected)
	TSet<class AActor*>                          KnownActors;                                       // 0x2A8(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_234[0x90];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class UAIActionCategory*, struct FCachedCategoryRequirementChecks> CategoryRequirementsCache;                         // 0x388(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<class UAIAction*, struct FCachedRequirementCheck> OwnerRequirementsCache;                            // 0x3D8(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_235[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIActionComponent* GetDefaultObj();

	void Stop();
	void SetSuppressedTargetPattern(const class FString& Pattern);
	void SetSuppressedActionPattern(const class FString& Pattern);
	void SetSquad(class UNWXSquadComponent* SquadComponent);
	void SetForcedTargetPattern(const class FString& Pattern);
	void SetForcedActionPattern(const class FString& Pattern);
	void Restart();
	bool RemoveActionClass(TSubclassOf<class UAIAction> ActionClass);
	void OnTicketReleased(enum class ETicketType TicketType, class AActor* Target);
	void OnTargetTicketReturned(enum class ETicketType TicketType);
	void OnSquadPerceptionUpdated(class AActor* Target, bool WasSensed);
	void OnAIPerceptionUpdated(class AActor* Target, const struct FAIStimulus& Stimulus);
	bool IsStopped();
	bool HasAction(TSubclassOf<class UAIAction> Action);
	float GetUpdateInterval();
	float GetLastQueueUpdateTime();
	int32 GetEvaluationQueueSize();
	class AActor* GetCurrentTarget();
	class UAIAction* GetCurrentAction();
	TSet<TSubclassOf<class UAIAction>> GetActionClasses();
	void ForceFullEvaluationBeforeStartingAction();
	void CancelCurrentAction(bool bAllowRetry, bool bImmediate, bool bStartBest);
	bool AddActionClass(TSubclassOf<class UAIAction> ActionClass);
};

// 0x60 (0x90 - 0x30)
// Class NWX.AIActionRequirement
class UAIActionRequirement : public UAIActionBase
{
public:
	float                                        CacheLength;                                       // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERequirementContext               Context;                                           // 0x34(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_239[0x5B];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIActionRequirement* GetDefaultObj();

};

// 0x10 (0xC8 - 0xB8)
// Class NWX.AIActionTargetComponent
class UAIActionTargetComponent : public UAIPerceptionStimuliSourceComponent
{
public:
	TArray<TSubclassOf<class UAIAction>>         TargetedActionClasses;                             // 0xB8(0x10)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAIActionTargetComponent* GetDefaultObj();

};

// 0x110 (0x1A0 - 0x90)
// Class NWX.AIAR_AggressiveToTarget
class UAIAR_AggressiveToTarget : public UAIActionRequirement
{
public:
	class ANWXAIController*                      NWXAIController;                                   // 0x90(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXAICharacter*                       Creature;                                          // 0x98(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*               AbilitySystem;                                     // 0xA0(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AggressionCenterOffsetPercentage;                  // 0xA8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ConeAngle;                                         // 0xAC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AggressionSphereConeSizePercentage;                // 0xB0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AggressionMemoryTimeout;                           // 0xB4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2E0[0xE8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIAR_AggressiveToTarget* GetDefaultObj();

	void SetNWXAIController(class ANWXAIController* AIController);
	void SetCreature(class ANWXAICharacter* NWXCreature);
	void SetAbilitySystem(class UAbilitySystemComponent* NWXAbilitySystem);
	bool IsHostileTowardsTarget(class AActor* TargetActor, class AActor* InCreature);
	bool IsForceAggressiveToTarget(class AActor* TargetActor, class ANWXAICharacter* InCreature);
	bool IsAggressiveAfterModifyingAggressionRange(class AActor* Target, class ANWXAICharacter* InCreature, float AggressionRange);
	class ANWXAIController* GetNWXAIController();
	class ANWXAICharacter* GetCreature();
	class UAbilitySystemComponent* GetAbilitySystem();
	bool CheckAggresiveToTarget(class AActor* TargetActor, class ANWXAICharacter* InCreature);
	bool CanBeAggressiveToTarget(class AActor* TargetActor, class ANWXAICharacter* InCreature);
	float CalculateAggressionModifier(class AActor* Target, class ANWXAICharacter* InCreature);
	bool AggressiveIfSquadInCombatWithTarget(class AActor* TargetActor, class ANWXAICharacter* InCreature, class ANWXAISpawner* Spawner, float AggressionRange);
};

// 0x18 (0xA8 - 0x90)
// Class NWX.AIAR_TargetInRange_Base
class UAIAR_TargetInRange_Base : public UAIActionRequirement
{
public:
	uint8                                        Pad_2ED[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIAR_TargetInRange_Base* GetDefaultObj();

};

// 0x0 (0xA8 - 0xA8)
// Class NWX.AIAR_TargetInMeleeRange
class UAIAR_TargetInMeleeRange : public UAIAR_TargetInRange_Base
{
public:

	static class UClass* StaticClass();
	static class UAIAR_TargetInMeleeRange* GetDefaultObj();

};

// 0x0 (0xA8 - 0xA8)
// Class NWX.AIAR_TargetInRangedRange
class UAIAR_TargetInRangedRange : public UAIAR_TargetInRange_Base
{
public:

	static class UClass* StaticClass();
	static class UAIAR_TargetInRangedRange* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class NWX.AIAR_TargetReachableOnNavMesh
class UAIAR_TargetReachableOnNavMesh : public UAIActionRequirement
{
public:

	static class UClass* StaticClass();
	static class UAIAR_TargetReachableOnNavMesh* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.AICCreatureDataInterface
class IAICCreatureDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAICCreatureDataInterface* GetDefaultObj();

	void SetAICCreatureDataFromStruct(struct FAICCreatureData& CreatureData);
	float GetSleepDurationMin();
	float GetSleepDurationMax();
	float GetRunningMeleeAttackDistance();
	float GetRangedCombatRangeMin();
	float GetRangedCombatRangeMax();
	float GetRangedCombatDistance();
	float GetRangedAttackCooldown();
	TSoftObjectPtr<class ULiveServicesDataTable> GetPhaseMap();
	TSubclassOf<class UNavigationQueryFilter> GetNavFilter();
	float GetMeleeCombatRangeMin();
	float GetMeleeCombatRangeMax();
	float GetMeleeCombatDistance();
	float GetMeleeAttackCooldown();
	float GetLoiterDurationMin();
	float GetLoiterDurationMax();
	float GetFleeCombatRangeMin();
	float GetFleeCombatRangeMax();
	float GetEvadeChance();
	float GetEnemyAlertDistance();
	float GetCreatureRunDistance();
	float GetCreatureDispersionRadius();
	struct FCarTurnData GetCarTurnsData();
	struct FAICCreatureData GetAICCreatureDataFromStruct();
	TArray<TSoftClassPtr<class UAIAction>> GetAIActions();
	float GetAggressionRangeWhileMaxHealth();
};

// 0x0 (0x28 - 0x28)
// Class NWX.AiCheats
class UAiCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UAiCheats* GetDefaultObj();

	void ToggleInfiniteTickets();
	void ToggleDebugACA();
	void ToggleACA();
	void SuppressAIActionTarget(const class FString& Pattern);
	void SuppressAIAction(const class FString& Pattern);
	void SetSignificance(float SigLevel);
	void SetInvisible(bool IsInvisible);
	void SetCarTurnsEnabled(bool CarTurnsOverride);
	void ListAIActions();
	void KillAllWildlife();
	void KillAllNPCs();
	void KillAllEncounterAI();
	void KillAllCritters();
	void KillAllAI();
	void FreezeAI(bool bFreezeAI);
	void ForceAIActionTarget(const class FString& Pattern);
	void ForceAIAction(const class FString& Pattern);
	void DumpSignificance();
};

// 0xB0 (0x150 - 0xA0)
// Class NWX.AICompanionComponent
class UAICompanionComponent : public UActorComponent
{
public:
	uint8                                        Pad_563[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCompanionCanBeRecruited;                         // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCompanionRecruited;                              // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCompanionDismissed;                              // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        FollowRadius;                                      // 0xD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TeleportRadius;                                    // 0xDC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LastLeaderPlayerID;                                // 0xE0(0x10)(BlueprintVisible, Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           LeaderController;                                  // 0xF0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                LeaderPlayerID;                                    // 0xF8(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCompanionDisabled;                                // 0x108(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_579[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanBeRecruited;                                   // 0x10A(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_57C[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                HomeRealmID;                                       // 0x110(0x10)(BlueprintVisible, Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_57D[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CompanionTimeoutDuration;                          // 0x130(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_57E[0x1C];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAICompanionComponent* GetDefaultObj();

	bool ShouldSpawnDeathChest();
	void SetLeader(class AController* NewLeader);
	void SetHomeRealmID(const class FString& InHomeRealmID);
	void SetCanBeRecruited(bool InCanBeRecruited);
	void RemoveLeader();
	void OnRep_LeaderPlayer(const class FString& PreviousLeaderPlayer);
	void OnRep_CompanionDisabled();
	void OnRep_CanBeRecruited(bool PreviousCanBeRecruited);
	void OnLeaderRespawn(class ANWXCharacter* PlayerCharacter);
	bool IsPreviousLeader(class AActor* DesiredLeader);
	bool IsInHomeRealm();
	bool IsCompanionDisabled();
	bool IsCompanion();
	bool GetLeaderName(class FString* LeaderName);
	class AController* GetLeaderController();
	class ANWXCharacter* GetLeader();
	class FString GetHomeRealmID();
	bool GetCanBeRecruited();
};

// 0x0 (0x28 - 0x28)
// Class NWX.AICompanionInterface
class IAICompanionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAICompanionInterface* GetDefaultObj();

	void TryReviveCompanion();
	bool TryRecruitCompanion(class AController* Recruiter);
	bool TryDismissCompanion(class AController* Recruiter);
	void ResetInventory();
	void ReloadPersistenceCache(struct FCompanionPersistenceData& PersistenceCache);
	void PreReloadPersistenceCache(struct FCompanionPersistenceData& PersistenceCache);
	bool HasLeader();
	bool GetLeaderName(class FString* LeaderName);
	class ANWXCharacter* GetLeader();
	struct FVector GetHomeLocation();
	class AEquippableItem* GetEquippedItem();
	float GetDistanceToHome(struct FVector& Location);
	class FString GetAIFaction();
	void FillPersistenceCache(struct FCompanionPersistenceData* PersistenceCache);
	void EmptyInventory();
	bool CanBeRecruited(class AActor* DesiredLeader, enum class ERecruitmentFailureReason* OutFailureReason);
	bool CanBeDismissed(class AController* Recruiter);
	void AssignOnCompanionRecruitedDelegate(FDelegateProperty_& InDelegate);
	void AssignOnCompanionDismissedDelegate(FDelegateProperty_& InDelegate);
	float AdjustMaxDistance(float DesiredDistance);
};

// 0x80 (0x120 - 0xA0)
// Class NWX.AILoadoutComponentBase
class UAILoadoutComponentBase : public UActorComponent
{
public:
	uint8                                        Pad_AA8[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInitialized;                                     // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         EquippedItemIDs;                                   // 0xE0(0x10)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	class AActor*                                LoadoutOwner;                                      // 0xF0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadoutComponentBase*                 AILoadout;                                         // 0xF8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInWorldItemContainerComponent*        AIInventory;                                       // 0x100(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInventoryEntryIdAndQuantity>  TargetInventoryEntries;                            // 0x108(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_ABC[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAILoadoutComponentBase* GetDefaultObj();

	bool WithdrawItemFromContainerByTag(TScriptInterface<class IItemContainer>& ItemContainer, struct FGameplayTag& GameplayTag);
	bool UnequipEquippedItem(bool ClearInventory, struct FGameplayTag& SlotTag);
	void TryUnequipItem(struct FInventoryEntry& Item, bool RemoveFromInventory);
	bool TransferHeldItemFromPlayerToCreature(class APawn* PlayerPawn);
	bool TransferBetweenWorldItemContainerActors(bool TransferToOtherActor, class AActor* OtherActor, class AEquippableItem* Item);
	bool TransferBetweenContainers(TScriptInterface<class IItemContainer> SourceContainer, TScriptInterface<class IItemContainer> DestinationContainer, struct FGuid& ItemIDToTransfer);
	bool TargetInventoryEntryCooldown(double Cooldown);
	bool SpawnLoadoutItem(struct FInventoryEntry& ItemEntry, struct FGameplayTag& SlotTag, class AEquippableItem** OutGrantedItem);
	void SetTargetInventoryEntries(TArray<struct FInventoryEntryIdAndQuantity>& InTargetEntries);
	void SetAndEquipCachedItemIDs(TArray<struct FGuid>& ItemInstanceIDs);
	bool RetrieveTargetItemsFromContainer(TScriptInterface<class IItemContainer>& IItemContainer);
	void PrintComponent(const class FString& Message, enum class ENWXLogLevel NWXLogLevel, enum class ELogCategory LogCategory);
	bool PickUpItemProxy(class AItemProxyBase* ItemProxyActor);
	bool IsInitialized();
	bool HasAnyResource();
	bool GrantItemToLoadout(struct FGameplayTag& SlotTag, struct FInventoryEntry& ItemEntry, struct FGameplayTag* OutEquippedSlot, class AEquippableItem** OutGrantedItem);
	class AActor* GetLoadoutOwner();
	class ULoadoutComponentBase* GetAILoadout();
	class UInWorldItemContainerComponent* GetAIInventory();
	bool EquipItemByItemID(struct FItemDataReference& ItemId);
	bool EquipItemByInstanceID(struct FGuid& InstanceID);
	bool EquipItemByEntry(struct FInventoryEntry& Entry);
	bool DepositResourcesInContainer(TScriptInterface<class IItemContainer>& IItemContainer);
	void CreateAndEquipItemByItemID(struct FItemDataReference& ItemReference, struct FDynamicTypedStructs& InstancedData);
	void ClearSlotWithTag(struct FGameplayTag& SlotTag);
	void AddItemAndEquipByEntry(struct FInventoryEntry& Entry);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AIPersistenceFunctionLibrary
class UAIPersistenceFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAIPersistenceFunctionLibrary* GetDefaultObj();

	void RawNPCNameToStringTableRef(class FText& NPCName, struct FStringTableEntryHandle* OutNameHandle);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AIPPOIInteractionInterface
class IAIPPOIInteractionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAIPPOIInteractionInterface* GetDefaultObj();

	void UpdateActorsLocation(class AActor* Actor, struct FVector& Location);
	void RemoveActorFromPOI(class AActor* Actor);
	void HandleNewLocation(class UObject* Target, struct FVector& Location, bool FoundLocation, int32 QueryID);
	void GetPotentialNewLocationForObject(class UObject* QueryOwner, float Radius, bool bGenerateInitialRandomLocation, int32* QueryID);
	class AActor* GetPOIOwner();
	int32 GetNumberOfActors();
	class UEnvQuery* GetLoiterEQSQueryForSpawner(class UObject* Spawner);
	bool GetLocationForActor(class AActor* Actor, struct FVector* Location);
	class UNWXAIPOI_Component* GetCurrentPOIImplementer();
	void GetCurrentActors(TSet<class AActor*>* CurrentActors);
	void GetCurrentActorLocations(TArray<struct FVector>* CurrentLocations);
	void AddActorToPOI(class AActor* Actor, struct FVector& Location);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AISpawnerInterface
class IAISpawnerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAISpawnerInterface* GetDefaultObj();

	int32 GetMaxAICount();
	TArray<class AActor*> GetDamagers();
	int32 GetAICount();
	void AddCreatureToSpawner(class ANWXAICharacter* AICharacter);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AIStructureTargetProvider
class IAIStructureTargetProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAIStructureTargetProvider* GetDefaultObj();

	bool GetClosestDamagedTargetData(class APawn* AIPawn, struct FAIStructureTargetData* OutTargetData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AITargetingInterface
class IAITargetingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAITargetingInterface* GetDefaultObj();

	void GetAIRootmotionTargetTransform(struct FTransform* TargetTransform);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AIUIData
class IAIUIData : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAIUIData* GetDefaultObj();

	class FText GetAIName();
};

// 0x18 (0xB8 - 0xA0)
// Class NWX.AlertnessComponent
class UAlertnessComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnAlertnessChanged;                                // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	enum class EAlertnessLevelType               Alertness;                                         // 0xB0(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EA2[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAlertnessComponent* GetDefaultObj();

	void SetAlertness(enum class EAlertnessLevelType NewAlertness);
	void OnRep_Alertness(enum class EAlertnessLevelType& OldAlertness);
	enum class EAlertnessLevelType GetAlertness();
};

// 0xA0 (0x140 - 0xA0)
// Class NWX.AmbienceManager
class UAmbienceManager : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnWindOneShot;                                     // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         WindSurfaceOneShotEvent;                           // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRtpc*                               WindSpeedSurfaceRTPC;                              // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, struct FIIMInstanceFilterCache> CachedFilteredLocalInstances;                      // 0xC0(0x50)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_115D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeOfDay;                                         // 0x114(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_115E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSpyglassState_WildlifeEnter;                     // 0x120(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnSpyglassState_WildlifeExit;                      // 0x130(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAmbienceManager* GetDefaultObj();

	void SetTimeOfDay(float Value);
	void SetSeason(float Value);
	void SetIsPlayerInCombat(bool IsInCombat);
	void RemoveRiverPointSmallSlow(class AActor* RiverWaterAudio);
	void RemoveRiverPointSmallMedium(class AActor* RiverWaterAudio);
	void RemoveRiverPointSmallFast(class AActor* RiverWaterAudio);
	void RemoveRiverPointMediumSlow(class AActor* RiverWaterAudio);
	void RemoveRiverPointMediumMedium(class AActor* RiverWaterAudio);
	void RemoveRiverPointMediumFast(class AActor* RiverWaterAudio);
	void RemoveRiverPointLargeSlow(class AActor* RiverWaterAudio);
	void RemoveRiverPointLargeMedium(class AActor* RiverWaterAudio);
	void RemoveRiverPointLargeFast(class AActor* RiverWaterAudio);
	float GetWindSpeed();
	float GetTreeStandardDensityInner();
	float GetTimeOfDay();
	bool GetShowTreeFeelingDebug();
	bool GetShowRiverAudioDebug();
	float GetSeason();
	float GetPrecipitationAmount();
	bool GetIsPlayerInCombat();
	class UAkComponent* GetAk2DComponent();
	void AddRiverPointSmallSlow(class AActor* RiverWaterAudio);
	void AddRiverPointSmallMedium(class AActor* RiverWaterAudio);
	void AddRiverPointSmallFast(class AActor* RiverWaterAudio);
	void AddRiverPointMediumSlow(class AActor* RiverWaterAudio);
	void AddRiverPointMediumMedium(class AActor* RiverWaterAudio);
	void AddRiverPointMediumFast(class AActor* RiverWaterAudio);
	void AddRiverPointLargeSlow(class AActor* RiverWaterAudio);
	void AddRiverPointLargeMedium(class AActor* RiverWaterAudio);
	void AddRiverPointLargeFast(class AActor* RiverWaterAudio);
	void AddAmbientBird(class AActor* AmbientBird);
};

// 0x68 (0x90 - 0x28)
// Class NWX.RadialMenuEntry
class URadialMenuEntry : public UObject
{
public:
	uint8                                        Pad_1251[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            IconTexture;                                       // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsEnabled;                                        // 0x38(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1259[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  EntryName;                                         // 0x40(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class FText                                  EntryDescription;                                  // 0x58(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class FText                                  DisabledDescription;                               // 0x70(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	enum class ERadialButtonType                 ButtonType;                                        // 0x88(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1267[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialMenuEntry* GetDefaultObj();

	void SetName(class FText& InName);
	void SetIconTexture(class UTexture2D* InTexture);
	void SetEnabled(bool InIsEnabled);
	void SetDisabledDescription(class FText& InDescription);
	void SetDescription(class FText& InDescription);
	void SetButtonType(enum class ERadialButtonType InButtonType);
};

// 0x3A0 (0x430 - 0x90)
// Class NWX.AmmoRadialMenuEntry
class UAmmoRadialMenuEntry : public URadialMenuEntry
{
public:
	FMulticastInlineDelegateProperty_            OnAmmoChanged;                                     // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1294[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       AmmoEntry;                                         // 0x130(0x2F0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_1295[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAmmoRadialMenuEntry* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class NWX.AnimNotifyState_AISocketTrace
class UAnimNotifyState_AISocketTrace : public UAnimNotifyState
{
public:
	uint8                                        Pad_1394[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 TraceGuid;                                         // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffectDataAsset*                StatusEffect;                                      // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStatusEffectDOT                      StatusEffectDOT;                                   // 0x50(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        StatusLevel;                                       // 0x68(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StatusDuration;                                    // 0x6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotifyState_AISocketTrace* GetDefaultObj();

	bool TargetIsFriendly(class ANWXAICharacter* AICharacter, class AActor* Target);
	void HandleHits(class ANWXAICharacter* AICharacter, TArray<struct FHitResult>& HitResults);
	void HandleHitActor(struct FHitResult& HitResult, class ANWXAICharacter* AICharacter, class AActor* HitActor, TArray<struct FHitResult>& AllHits);
	void ApplyStatusEffectDotToTarget(class ANWXAICharacter* AICharacter, class AActor* Target, struct FStatusEffectDOT& StatusEffectDOTs);
};

// 0x8 (0x38 - 0x30)
// Class NWX.AnimNotifyState_FPTP
class UAnimNotifyState_FPTP : public UAnimNotifyState
{
public:
	bool                                         bAlwaysAllowNotifyEnd;                             // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13C2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState_FPTP* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.AnimNotifyState_MotionWarpTrackTarget
class UAnimNotifyState_MotionWarpTrackTarget : public UAnimNotifyState
{
public:
	uint8                                        Pad_13FD[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState_MotionWarpTrackTarget* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.AnimNotifyState_SquashTranslation
class UAnimNotifyState_SquashTranslation : public UAnimNotifyState
{
public:
	bool                                         AlignRotationToFaceTargetLocation;                 // 0x30(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EMovementMode                     MovementMode;                                      // 0x31(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1419[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxSpeedMultiplier;                                // 0x34(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAnimNotifyState_SquashTranslation* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.AnimNotifyState_SquashRotation
class UAnimNotifyState_SquashRotation : public UAnimNotifyState
{
public:

	static class UClass* StaticClass();
	static class UAnimNotifyState_SquashRotation* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.AnimNotifyState_TimeRemaining
class UAnimNotifyState_TimeRemaining : public UAnimNotifyState
{
public:
	float                                        Duration;                                          // 0x30(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeRemaining;                                     // 0x34(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotifyState_TimeRemaining* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXRagdollInterface
class INWXRagdollInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INWXRagdollInterface* GetDefaultObj();

	void UpdateRagdollTransition(float RagdollPercentage);
	void FinishRagdollTransition();
	void BeginRagdollTransition(float RagdollBlendTime);
};

// 0x8 (0x38 - 0x30)
// Class NWX.AnimNotifyState_TransitionToRagdoll
class UAnimNotifyState_TransitionToRagdoll : public UAnimNotifyState
{
public:
	float                                        NotifyStateDuration;                               // 0x30(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentDuration;                                   // 0x34(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotifyState_TransitionToRagdoll* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.AnimNotifyState_TryActivateAbility
class UAnimNotifyState_TryActivateAbility : public UAnimNotifyState
{
public:
	struct FGameplayTag                          BeginGamePlayTag;                                  // 0x30(0x8)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                          EndGamePlayTag;                                    // 0x38(0x8)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotifyState_TryActivateAbility* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.AnimNotify_FPTP
class UAnimNotify_FPTP : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_FPTP* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.AnimNotify_FootstepBase
class UAnimNotify_FootstepBase : public UAnimNotify_FPTP
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_FootstepBase* GetDefaultObj();

	void SpawnVFXDisplay(class AActor* SteppingActor, class USkeletalMeshComponent* MeshComp, const struct FGameplayTag& FootstepTypeTag, float WaterDepth, const struct FVector& WaterHitNormal, const struct FVector& WaterHitLocation);
	void ScheduleCallToVFXDisplay(float Delay, class AActor* SteppingActor, class USkeletalMeshComponent* MeshComp, struct FGameplayTag& FootstepTypeTag, float WaterDepth, struct FVector& WaterHitNormal, struct FVector& WaterHitLocation);
};

// 0x30 (0x68 - 0x38)
// Class NWX.AnimNotify_NPCDamageAction
class UAnimNotify_NPCDamageAction : public UAnimNotify
{
public:
	int32                                        DamageTargetTypes;                                 // 0x38(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1601[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 GameplayEffectTags;                                // 0x40(0x20)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                         bIncludeAbilitySystemTags;                         // 0x60(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseHitComponent;                                  // 0x61(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_160B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultDamage;                                     // 0x64(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotify_NPCDamageAction* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.AnimNotify_RootMotionMatchTime
class UAnimNotify_RootMotionMatchTime : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_RootMotionMatchTime* GetDefaultObj();

};

// 0x50 (0xF0 - 0xA0)
// Class NWX.ApexMusicComponent
class UApexMusicComponent : public UActorComponent
{
public:
	class UAkStateValue*                         ApexTensionState;                                  // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         AmbientStingerEvent;                               // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRtpc*                               ApexStingerDistanceRTPC;                           // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRtpc*                               ApexStingerAzimuthRTPC;                            // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinTimeBetweenStingers;                            // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTimeBetweenStingers;                            // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayerTriggerDistance;                             // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1782[0x24];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UApexMusicComponent* GetDefaultObj();

	bool TryPlayAmbientStinger();
	bool TryApplyApexTensionState();
	void RemoveApexTensionState();
	bool IsPCInRangeForStingers();
	bool IsApexCreatureOutOfCombat();
	bool IsApexCreatureAlive();
	void HandleDeath(struct FGameplayTag& Tag, int32 Count);
	class APlayerController* GetLocalPC();
	class UMusicManager* GetLocalMusicManager();
};

// 0x8 (0x2B8 - 0x2B0)
// Class NWX.POISocketVisualizer
class APOISocketVisualizer : public AStaticMeshActor
{
public:
	int32                                        SocketRadius;                                      // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESocketShape                      SocketShape;                                       // 0x2B4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17B8[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APOISocketVisualizer* GetDefaultObj();

};

// 0x48 (0x420 - 0x3D8)
// Class NWX.NWXGameplayAbility
class UNWXGameplayAbility : public UGameplayAbility
{
public:
	TArray<struct FAbilityEffectTriggerData>     EffectTagTriggers;                                 // 0x3D8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         AllowMultipleGrants;                               // 0x3E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_19AD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 SourceCancellationTags;                            // 0x3F0(0x20)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                        Pad_19B1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGameplayAbility* GetDefaultObj();

	bool ValidateTriggeredAbilities(class UClass* AbilityClass, class FString* Error);
	bool ValidateActivateHierarchyNodes(class UClass* AbilityClass);
	void RemoveGameplayCueFromActor(class AActor* Actor, struct FGameplayTag& GameplayCueTag);
	bool HasAbilityTag(struct FGameplayTag& Tag, bool bExactMatch);
	TSubclassOf<class UGameplayEffect> GetCostGameplayEffectClass();
	void ExecuteGameplayCueWithParamsOnActor(class AActor* Actor, struct FGameplayTag& GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteGameplayCueOnActor(class AActor* Actor, struct FGameplayTag& GameplayCueTag, struct FGameplayEffectContextHandle& Context);
	void AddGameplayCueWithParamsToActor(class AActor* Actor, const struct FGameplayTag& GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameter, bool bRemoveOnAbilityEnd);
	void AddGameplayCueToActor(class AActor* Actor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayEffectContextHandle& Context, bool bRemoveOnAbilityEnd);
};

// 0x0 (0x420 - 0x420)
// Class NWX.ApplyAbilityDamage
class UApplyAbilityDamage : public UNWXGameplayAbility
{
public:

	static class UClass* StaticClass();
	static class UApplyAbilityDamage* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.SyncAssetLoaderComponent
class USyncAssetLoaderComponent : public UActorComponent
{
public:
	uint8                                        Pad_1A1C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USyncAssetLoaderComponent* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.AsyncAssetLoaderComponent
class UAsyncAssetLoaderComponent : public UActorComponent
{
public:
	uint8                                        Pad_1A37[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAsyncAssetLoaderComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.AssetLoaderFunctions
class UAssetLoaderFunctions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAssetLoaderFunctions* GetDefaultObj();

	void LoadSingle(TScriptInterface<class IAssetLoaderProvider>& LoaderProvider, TSoftObjectPtr<class UObject>& AssetPtr, FDelegateProperty_& OnLoadComplete);
	void LoadMany(TScriptInterface<class IAssetLoaderProvider>& LoaderProvider, TArray<TSoftObjectPtr<class UObject>>& AssetPtrs, FDelegateProperty_& OnLoadComplete);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AssetLoaderProvider
class IAssetLoaderProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAssetLoaderProvider* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class NWX.AttributeAboveThresholdRequirement
class UAttributeAboveThresholdRequirement : public URequirement
{
public:
	struct FGameplayAttribute                    Attribute;                                         // 0x28(0x38)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Threshold;                                         // 0x60(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B3F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAttributeAboveThresholdRequirement* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.AttributeChangedInterface
class IAttributeChangedInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAttributeChangedInterface* GetDefaultObj();

	void OnStaminaMaxChanged(float Delta);
	void OnStaminaDepleted();
	void OnStaminaChanged(float Delta);
	void OnRestedMaxChanged(float Delta);
	void OnRestedChanged(float Delta);
	void OnReachedMinSchematicTimeout();
	void OnQuestScoreChanged(float Delta);
	void OnMaxSpeedWalkFastChanged(float Delta);
	void OnMaxSpeedWalkChanged(float Delta);
	void OnMaxSpeedRunChanged(float Delta);
	void OnMaxSpeedBonusChanged(float Delta);
	void OnLoadoutLevelChanged(float Delta);
	void OnHopeMinChanged(float Delta);
	void OnHopeMaxChanged(float Delta);
	void OnHopeChanged(float Delta);
	void OnHealthMaxChanged(float Delta);
	void OnHealthChanged(float Delta);
	void OnFuelChanged(float Delta);
	void OnFedMaxChanged(float Delta);
	void OnFedChanged(float Delta);
	void OnEstateScoreChanged(float Delta);
	void OnCraftQualityChanged(float Delta);
	void OnCraftIntegrityChanged(float Delta);
	void OnCraftBuildPointsChanged(float Delta);
	void OnCharacterWeightMaxChanged(float Delta);
	void OnCharacterWeightChanged(float Delta);
	void OnCharacterUnderWeight();
	void OnCharacterOverWeight();
	void OnBuildProgressChanged(float Delta);
	void OnAnyAttributeChanged(struct FGameplayAttribute& Attribute);
};

// 0x0 (0x28 - 0x28)
// Class NWX.AttributeChangeHandler
class IAttributeChangeHandler : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAttributeChangeHandler* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class NWX.AttributeUIDataRegistry
class UAttributeUIDataRegistry : public UDataAsset
{
public:
	TMap<struct FGameplayAttribute, struct FGameplayAttributeUIData> Registry;                                          // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayAttribute>            AttributeOrdering;                                 // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAttributeUIDataRegistry* GetDefaultObj();

	void TryGetAttributeUIData(struct FGameplayAttribute& Attribute, struct FGameplayAttributeUIData* OutData, enum class EGetResult* OutBranches);
	void GetSortedAttributeValueAndUIData(TMap<struct FGameplayAttribute, float>& InUnsortedAttributeValuesMap, TArray<struct FAttributeValueAndUIData>* OutAttributeValueAndUIData);
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.AudioFocusMixingComponent
class UAudioFocusMixingComponent : public UActorComponent
{
public:
	enum class EAudioFocusUpdateMode             UpdateMode;                                        // 0xA0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2231[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkRtpc*                               FocusRTPC;                                         // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAkGameObject*>                 AkComponentsToUpdate;                              // 0xB0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAudioFocusMixingComponent* GetDefaultObj();

	void HandleFocusScoreUpdated(float NewFocusScore, float NewNormalizedFocusScore);
};

// 0x20 (0x50 - 0x30)
// Class NWX.AVFXEnvironmentSubsystem
class UAVFXEnvironmentSubsystem : public UNWXWorldSubsystem
{
public:
	TArray<TWeakObjectPtr<class UWaterbodyAudioComponent>> WaterBodies;                                       // 0x30(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class URainScopedAkComponent>> RainEmitters;                                      // 0x40(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAVFXEnvironmentSubsystem* GetDefaultObj();

	bool TrySortCoastlinePointsToQuadrants(struct FVector& WorldPos, TArray<struct FVector>* OutForwardLeft, TArray<struct FVector>* OutForwardRight, TArray<struct FVector>* OutBackLeft, TArray<struct FVector>* OutBackRight, bool* IsPosInWater, float MinSearchDistanceMetres);
	bool GetCoastlinePointsNearest(struct FVector& WorldPosition, int32 NumPointsEitherSide, TArray<struct FVector>* OutputPoints);
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.AVFXFocusComponent
class UAVFXFocusComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnFocusScoreUpdated;                               // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        FocusScore;                                        // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NormalizedFocusScore;                              // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoSubscribeToFocusScoring;                      // 0xB8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_23F2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  FocusBucket;                                       // 0xBC(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BaseFocusScore;                                    // 0xC4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlatFocusScoreBonus;                               // 0xC8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAzimuthAndElevationAffectsFocusScore;             // 0xCC(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2407[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinAzimuthAndElevationMultiplier;                  // 0xD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDistanceAffectsFocusScore;                        // 0xD4(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2410[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDistanceMultiplier;                             // 0xD8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxFocusDistance;                                  // 0xDC(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_241B[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAVFXFocusComponent* GetDefaultObj();

	void UnsubscribeFromFocusScoring();
	void SubscribeToFocusScoring();
	float GetNormalizedFocusScore();
	float GetFocusScore();
	class FName GetFocusBucket();
	float CalculateFocusScore();
};

// 0x68 (0xA8 - 0x40)
// Class NWX.AVFXFocusSubsystem
class UAVFXFocusSubsystem : public UNWXTickableWorldSubsystem
{
public:
	TMap<class FName, struct FAVFXFocusBucket>   FocusScoreBuckets;                                 // 0x40(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_24DF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAVFXFocusComponent*>           FocusComponentUpdateList;                          // 0x98(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAVFXFocusSubsystem* GetDefaultObj();

	int32 GetGlobalFocusRank(class UAVFXFocusComponent* FocusComponent);
	int32 GetFocusRank(class UAVFXFocusComponent* FocusComponent);
};

// 0x28 (0xC8 - 0xA0)
// Class NWX.AVFXOscillatorComponent
class UAVFXOscillatorComponent : public UActorComponent
{
public:
	float                                        FrequencyHertz;                                    // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOscillatorBasicShape             Waveform;                                          // 0xA4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2537[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           CustomShape;                                       // 0xA8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinOutput;                                         // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOutput;                                         // 0xB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PulseWidth;                                        // 0xB8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2541[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAVFXOscillatorComponent* GetDefaultObj();

	float GetOutput(float PhaseOffset);
};

// 0x260 (0x290 - 0x30)
// Class NWX.AVFXSpatialSubsystem
class UAVFXSpatialSubsystem : public UNWXGameInstanceSubsystem
{
public:
	uint8                                        Pad_2642[0x260];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAVFXSpatialSubsystem* GetDefaultObj();

	void SetVerticalGain(float InVerticalGain);
	void RemoveCluster(int32 ClusterID);
	bool IsPointOccluded(struct FVector& Point);
	void GetComponentsInRange(struct FVector& Centre, float Radius, TArray<class UAVFXSpatialComponent*>& ComponentsInRange);
	int32 AddComponents(TArray<class UAVFXSpatialComponent*>& Components);
	int32 AddComponent(class UAVFXSpatialComponent* Component);
};

// 0x10 (0x2F0 - 0x2E0)
// Class NWX.AwaitableChildActorComponent
class UAwaitableChildActorComponent : public UChildActorComponent
{
public:
	uint8                                        Pad_267B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         ChildActorAwaiter;                                 // 0x2E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAwaitableChildActorComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.AxisBindingBPFunctionLibrary
class UAxisBindingBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAxisBindingBPFunctionLibrary* GetDefaultObj();

	void UpdateExistingAxisBindingRow(class UDataTable* DataTable, class FName& RowName, struct FS_AxisKeyBinding& UserKeyBinding, struct FKey& SelectedKey);
	bool SaveAxisKeyBindingMap(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex);
	void ResetAxisKeyToDefault(class UDataTable* DataTable, class FName* AxisName, const class FString& InputDeviceString);
	void ResetAxisBindingsToDefault(class UDataTable* DataTable, class UOptionsControls* OptionsControls);
	bool LoadAxisKeyBindingMap(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex);
	bool Equals(struct FS_AxisKeyBinding& A, struct FS_AxisKeyBinding& B);
	void ApplyAxisKeyBindings(class UDataTable* DataTable, const class FString& SlotName, int32 UserIndex, bool* bIsSuccess);
};

// 0x50 (0x80 - 0x30)
// Class NWX.BiomeUIDataRegistry
class UBiomeUIDataRegistry : public UDataAsset
{
public:
	TMap<enum class EBiomeID, struct FBiomeUIData> Registry;                                          // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UBiomeUIDataRegistry* GetDefaultObj();

	void TryGetBiomeUIData(enum class EBiomeID BiomeId, struct FBiomeUIData* OutData, enum class EGetResult* OutBranches);
};

// 0x0 (0x28 - 0x28)
// Class NWX.BlueprintAnalysisLibrary
class UBlueprintAnalysisLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBlueprintAnalysisLibrary* GetDefaultObj();

};

// 0x48 (0xE8 - 0xA0)
// Class NWX.BoidsComponent
class UBoidsComponent : public UActorComponent
{
public:
	float                                        NoiseFloat;                                        // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SepRadiusInMeters;                                 // 0xA4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CohRadiusInMeters;                                 // 0xA8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsEnabled;                                        // 0xAC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A08[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SepWeight;                                         // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        AlignWeight;                                       // 0xB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        CohWeight;                                         // 0xB8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GoalWeight;                                        // 0xBC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ACharacter*>                    Characters;                                        // 0xC0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class ACharacter*                            Owner;                                             // 0xD0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWX_CharacterMovementComponent*       MoveComp;                                          // 0xD8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2A1E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBoidsComponent* GetDefaultObj();

	void SetSquadMembers(TArray<class ACharacter*>& Members);
	void SetSepWeight(float NewSepWeight);
	void SetGoalWeight(float NewGoalWeight);
	void SetCohWeight(float NewCohWeight);
	void SetAlignWeight(float NewAlignWeight);
};

// 0x0 (0x28 - 0x28)
// Class NWX.BoneHierarchyInformationInterface
class IBoneHierarchyInformationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IBoneHierarchyInformationInterface* GetDefaultObj();

	class FName GetSecondHighestBoneInHierarchy();
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.BossCombatDetectionComponent
class UBossCombatDetectionComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnBossCombatChangedDelegate;                       // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ANWXAICharacter*                       EnemyBoss;                                         // 0xB0(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerController*                     OwnerController;                                   // 0xB8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UBossCombatDetectionComponent* GetDefaultObj();

	void OnRep_EnemyBoss();
	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnBossCombatStatusChanged(class ANWXAICharacter* NewBoss);
};

// 0x120 (0x160 - 0x40)
// Class NWX.BossCombatDetectionSubsystem
class UBossCombatDetectionSubsystem : public UNWXTickableWorldSubsystem
{
public:
	class ANWXCreatureManagerBase*               CreatureManager;                                   // 0x40(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ANWXAICharacter*>               BossCreatures;                                     // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class APlayerController*, class ANWXAICharacter*> PlayersInBossFight;                                // 0x58(0x50)(NativeAccessSpecifierPrivate)
	TMap<class APlayerController*, FDelegateProperty_> PlayerListeners;                                   // 0xA8(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class APlayerController*, class UCombatAnalyserComponent*> PlayerCombatAnalyzerComponentMapping;              // 0xF8(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>             Players;                                           // 0x148(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C13[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBossCombatDetectionSubsystem* GetDefaultObj();

	void OnCreatureSpawned(class ANWXCreatureManagerBase* CreatureManager, class ANWXAICharacter* Creature);
	void OnBossDeath(class ANWXAICharacter* Boss);
};

// 0x60 (0xD0 - 0x70)
// Class NWX.BTService_SetTargetFromApproachAngle
class UBTService_SetTargetFromApproachAngle : public UBTService
{
public:
	struct FBlackboardKeySelector                TargetKey;                                         // 0x70(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FBlackboardKeySelector                OutLocationKey;                                    // 0x98(0x28)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavigationQueryFilter>    FilterClass;                                       // 0xC0(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VerticalProjectionDistance;                        // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTrackingDistance;                               // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UBTService_SetTargetFromApproachAngle* GetDefaultObj();

};

// 0x198 (0x208 - 0x70)
// Class NWX.BTTask_BlackboardMoveTo
class UBTTask_BlackboardMoveTo : public UBTTaskNode
{
public:
	TSubclassOf<class UNavigationQueryFilter>    FilterClass;                                       // 0x70(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AcceptableRadius;                                  // 0x78(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTrackMovingTargetDistance;                      // 0x7C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowStrafe : 1;                                  // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReachTestIncludesAgentRadius : 1;                 // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReachTestIncludesGoalRadius : 1;                  // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowPartialPath : 1;                             // Mask: 0x8, PropSize: 0x10x80(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTrackMovingGoal : 1;                              // Mask: 0x10, PropSize: 0x10x80(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bProjectGoalLocation : 1;                          // Mask: 0x20, PropSize: 0x10x80(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_81 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CCD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBlackboardKeySelector                TargetKey;                                         // 0x88(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                FilterClassKey;                                    // 0xB0(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                AcceptableRadiusKey;                               // 0xD8(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                AllowStrafeKey;                                    // 0x100(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                ReachTestIncludesAgentRadiusKey;                   // 0x128(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                ReachTestIncludesGoalRadiusKey;                    // 0x150(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                AllowPartialPathKey;                               // 0x178(0x28)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                TrackMovingGoalKey;                                // 0x1A0(0x28)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                ProjectGoalLocationKey;                            // 0x1C8(0x28)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                        ObservedBlackboardValueTolerance;                  // 0x1F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStopOnOverlapNeedsUpdate : 1;                     // Mask: 0x1, PropSize: 0x10x1F4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bObserveBlackboardValue : 1;                       // Mask: 0x2, PropSize: 0x10x1F4(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2CF6[0x13];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBTTask_BlackboardMoveTo* GetDefaultObj();

};

// 0x28 (0x98 - 0x70)
// Class NWX.BTTask_ClearBlackboardKey
class UBTTask_ClearBlackboardKey : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                BlackboardKey;                                     // 0x70(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBTTask_ClearBlackboardKey* GetDefaultObj();

};

// 0x28 (0x98 - 0x70)
// Class NWX.BTTask_DepositAllResources
class UBTTask_DepositAllResources : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                TargetContainerKey;                                // 0x70(0x28)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBTTask_DepositAllResources* GetDefaultObj();

};

// 0xA0 (0x110 - 0x70)
// Class NWX.BTTask_GetStructureRepairLoc
class UBTTask_GetStructureRepairLoc : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                TargetKey;                                         // 0x70(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                OutLocationKey;                                    // 0x98(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                OutFocusLocationKey;                               // 0xC0(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                OutTargetMeshKey;                                  // 0xE8(0x28)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBTTask_GetStructureRepairLoc* GetDefaultObj();

};

// 0x28 (0x98 - 0x70)
// Class NWX.BTTask_TryDepositItemInContainer
class UBTTask_TryDepositItemInContainer : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                TargetContainerKey;                                // 0x70(0x28)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UBTTask_TryDepositItemInContainer* GetDefaultObj();

};

// 0x28 (0x98 - 0x70)
// Class NWX.BTTask_TryGetItemFromContainer
class UBTTask_TryGetItemFromContainer : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                TargetContainerKey;                                // 0x70(0x28)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UBTTask_TryGetItemFromContainer* GetDefaultObj();

};

// 0x0 (0xA8 - 0xA8)
// Class NWX.BTT_NWXMoveToWithAbilityBase
class UBTT_NWXMoveToWithAbilityBase : public UBTTask_BlueprintBase
{
public:

	static class UClass* StaticClass();
	static class UBTT_NWXMoveToWithAbilityBase* GetDefaultObj();

};

// 0x150 (0x1F0 - 0xA0)
// Class NWX.BuildingComponent
class UBuildingComponent : public UActorComponent
{
public:
	uint8                                        Pad_2FDA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UGameplayAbility>          PlacementAbility;                                  // 0xA8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayAbility>          MovementAbility;                                   // 0xB0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayAbility>          CopyAbility;                                       // 0xB8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayAbility>          DeconstructAbility;                                // 0xC0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                    SchematicMaterial;                                 // 0xC8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                    ConfirmedMaterial;                                 // 0xD0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                    MovementMaterial;                                  // 0xD8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class APawn>                  Pawn;                                              // 0xE0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IBuildingEventInterface>> Listeners;                                         // 0xE8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          ServerPlacementCooldownTimerHandle;                // 0xF8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsPlacementCooldownActive;                        // 0x100(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3005[0xEF];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBuildingComponent* GetDefaultObj();

	void Server_StartDeconstruct(struct FStructurePointer& StructurePtr);
	void Server_RequestStartMovement(struct FStructurePointer& StructurePtr);
	void Server_RequestStartCopy(struct FStructurePointer& StructurePtr);
	void Server_GenerateBuildSessionId();
	void Server_CancelAllPlacement(enum class EBuildingFeedback FeedbackId);
	void Server_CancelAllBuilding(enum class EBuildingFeedback FeedbackId);
	void Server_CacheTargetData(struct FGameplayAbilityTargetDataHandle& TargetData);
	void OnServerPlacementCooldownComplete();
	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void Client_StartMovement(struct FStructurePointer& StructurePtr);
	void Client_StartCopy(struct FStructurePointer& StructurePtr);
};

// 0x0 (0x28 - 0x28)
// Class NWX.BuildingEventInterface
class IBuildingEventInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IBuildingEventInterface* GetDefaultObj();

	void ServerOnly_OnSpawnStructure(struct FGameplayAbilityTargetDataHandle& TargetData, struct FStructureAssetReference& StructureReference, bool IgnoreStructureBudgets);
	void OnStructureSpawned(class UObject* SpawnedStructure);
	void OnStructureDeconstructed();
	void OnStartPlacing(struct FStructureAssetReference& StructureReference);
	void OnStartMovement(class UObject* Structure);
	void OnStartDeconstruct(class UObject* Structure);
	void OnStartCopy(class UObject* Structure);
	void OnStartBuilding();
	void OnPlacePreviewStructure(struct FGameplayAbilityTargetDataHandle& TargetData, struct FStructureAssetReference& StructureReference, bool IgnoreStructureBudgets);
	void OnPlacementConfirmed(bool bRefire);
	void OnPlacementCancelled(struct FStructureAssetReference& StructureReference, enum class EBuildingFeedback FeedbackId);
	void OnMovementConfirmed(class UObject* MovingStructure);
	void OnMovementCancelled(class UObject* MovingStructure, enum class EBuildingFeedback FeedbackId);
	void OnEndBuilding(enum class EBuildingFeedback FeedbackId);
	void OnDeconstructConfirmed();
	void OnDeconstructCancelled(enum class EBuildingFeedback FeedbackId);
	void OnCopyConfirmed();
	void OnCopyCancelled(enum class EBuildingFeedback FeedbackId);
};

// 0x50 (0x80 - 0x30)
// Class NWX.BuildingFeedbackDescriptions
class UBuildingFeedbackDescriptions : public UDataAsset
{
public:
	TMap<enum class EBuildingFeedback, class FText> Descriptions;                                      // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBuildingFeedbackDescriptions* GetDefaultObj();

	class FText GetFeedbackDescription(enum class EBuildingFeedback FeedbackId);
};

// 0x0 (0x28 - 0x28)
// Class NWX.BuildingInterface
class IBuildingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IBuildingInterface* GetDefaultObj();

	void StructureSpawned(class UObject* SpawnedStructure);
	void StructureDeconstructed();
	void StartPlacing(struct FStructureAssetReference& StructureReference, bool bRefire);
	void StartMovement(class UObject* Structure);
	void StartDeconstruct(class UObject* Structure);
	void StartCopy(class UObject* Structure);
	void StartBuilding();
	void RemoveBuildingEventListener(TScriptInterface<class IBuildingEventInterface> Listener);
	void PlacePreviewStructure(struct FGameplayAbilityTargetDataHandle& TargetData, struct FStructureAssetReference& StructureReference, bool IgnoreStructureBudgets);
	void PlacementConfirmed();
	void PlacementCancelled(struct FStructureAssetReference& StructureReference, enum class EBuildingFeedback FeedbackId);
	void MovementConfirmed(class UObject* MovingStructure);
	void MovementCancelled(class UObject* MovingStructure, enum class EBuildingFeedback FeedbackId);
	bool IsPlacing();
	bool IsPlacementActionActive();
	bool IsMoving();
	bool IsDeconstructing();
	bool IsCopying();
	bool IsBuildingActionActive();
	bool IsBuilding();
	class UObject* GetOriginalStructureInMovement();
	void EndBuilding(enum class EBuildingFeedback FeedbackId);
	void DeconstructConfirmed();
	void DeconstructCancelled(enum class EBuildingFeedback FeedbackId);
	void CopyConfirmed();
	void CopyCancelled(enum class EBuildingFeedback FeedbackId);
	void ClientOnly_TryStartMovement(class UObject* Structure);
	void ClientOnly_TryStartCopy(class UObject* Structure);
	bool CanStartPlacing(struct FStructureAssetReference& StructureReference, enum class EBuildingFeedback* OutFeedbackId);
	bool CanStartMovement(class UObject* Structure, enum class EBuildingFeedback* OutFeedbackId);
	bool CanStartDeconstruct(class UObject* Structure, enum class EBuildingFeedback* OutFeedbackId);
	bool CanStartCopy(class UObject* Structure, enum class EBuildingFeedback* OutFeedbackId);
	bool CanSpawnStructure();
	void CancelAllPlacement(enum class EBuildingFeedback FeedbackId);
	void CancelAllBuilding(enum class EBuildingFeedback FeedbackId);
	void CacheTargetData(struct FGameplayAbilityTargetDataHandle& TargetData);
	void AddBuildingEventListener(TScriptInterface<class IBuildingEventInterface> Listener);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.BuildModeFeedbackComponent
class UBuildModeFeedbackComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UBuildModeFeedbackComponent* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.BuildModeFeedbackDataEntryBase
class UBuildModeFeedbackDataEntryBase : public UObject
{
public:
	bool                                         bEnabled;                                          // 0x28(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EBuildModeInput                   Input;                                             // 0x29(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_36F4[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBuildModeFeedbackDataEntryBase* GetDefaultObj();

	void SetEnabled(bool bEnabledIn);
	bool IsEnabled();
	enum class EBuildModeInput GetInput();
};

// 0x50 (0x78 - 0x28)
// Class NWX.BuildModeFeedbackDataBase
class UBuildModeFeedbackDataBase : public UObject
{
public:
	TMap<enum class EBuildModeAction, class UBuildModeFeedbackDataEntryBase*> Mappings;                                          // 0x28(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBuildModeFeedbackDataBase* GetDefaultObj();

	bool SetActionEnabled(enum class EBuildModeAction Action, bool bIsEnabled);
	void AddMapping(class UBuildModeFeedbackDataEntryBase* Entry, enum class EBuildModeAction Action);
};

// 0x18 (0x630 - 0x618)
// Class NWX.Button_Network
class UButton_Network : public UButton
{
public:
	bool                                         bDisableAfterClicked;                              // 0x618(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_37B9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxDisabledDuration;                               // 0x61C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_37BE[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UButton_Network* GetDefaultObj();

	void SetIsFocusable(bool CanFocus);
	void OnServerResponseReceived();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CameraProviderInterface
class ICameraProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICameraProviderInterface* GetDefaultObj();

	class USpringArmComponent* GetCameraSpringArm(enum class ECameraType CameraType);
	class UCameraComponent* GetCamera(enum class ECameraType CameraType);
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.CameraWaterAudioComponent
class UCameraWaterAudioComponent : public UActorComponent
{
public:
	enum class ECollisionChannel                 WaterTraceChannel;                                 // 0xA0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 TraversalTraceChannel;                             // 0xA1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3854[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UnderwaterTestDistance;                            // 0xA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        UnderwaterOffset;                                  // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3857[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkAudioEvent*                         WaterEnteredAudioEvent;                            // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         WaterExitedAudioEvent;                             // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         PlayerAscentStartedAudioEvent;                     // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               VerticalSpeedRTPC;                                 // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               CameraDepthRTPC;                                   // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        UnderwaterDepth;                                   // 0xD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PlayerVerticalSpeed;                               // 0xDC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsUnderWater;                                     // 0xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsRising;                                         // 0xE1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3872[0x16];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraWaterAudioComponent* GetDefaultObj();

	class UScopedAkComponent* FindAudioEventTarget();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CanTraverseInterface
class ICanTraverseInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICanTraverseInterface* GetDefaultObj();

	bool CanTraverse();
	bool CanClimb();
};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.CavernChamber
class ACavernChamber : public AActor
{
public:

	static class UClass* StaticClass();
	static class ACavernChamber* GetDefaultObj();

};

// 0x0 (0x2B0 - 0x2B0)
// Class NWX.CavernChamberCollisionHull
class ACavernChamberCollisionHull : public AStaticMeshActor
{
public:

	static class UClass* StaticClass();
	static class ACavernChamberCollisionHull* GetDefaultObj();

};

// 0x38 (0x378 - 0x340)
// Class NWX.CavernModularLevelProxy
class ACavernModularLevelProxy : public ALevelInstance
{
public:
	enum class ECavernModularLevelProxyType      Type;                                              // 0x340(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38F0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UPOIDefinitionAsset>    POIDefinition;                                     // 0x348(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        POIRegion;                                         // 0x370(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38F5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACavernModularLevelProxy* GetDefaultObj();

};

// 0x38 (0x2D8 - 0x2A0)
// Class NWX.CavernSocket
class ACavernSocket : public AActor
{
public:
	TSoftObjectPtr<class ACavernModularLevelProxy> DynamicLevel;                                      // 0x2A0(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ACavernSocket>>  ValidExits;                                        // 0x2C8(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACavernSocket* GetDefaultObj();

};

// 0x10 (0x2B8 - 0x2A8)
// Class NWX.CavernWallSpline
class ACavernWallSpline : public ASpline
{
public:
	TArray<class UInstancedStaticMeshComponent*> MeshComponents;                                    // 0x2A8(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACavernWallSpline* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CavernWallTemplate
class UCavernWallTemplate : public UPrimaryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UCavernWallTemplate* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CharacterCreateTelemetryFunctionLibrary
class UCharacterCreateTelemetryFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCharacterCreateTelemetryFunctionLibrary* GetDefaultObj();

	void TelemetryCharacterCreateStart(const class FString& ProfileId, const class FString& SessionId, const class FString& StartingArchetype, bool bExistingCharacter);
	void TelemetryCharacterCreateFinish(const class FString& ProfileId, const class FString& SessionId, int32& TotalTimeSpent, bool bWasCancelled);
	void TelemetryCharacterCreateExitPanel(const class FString& ProfileId, const class FString& SessionId, const class FString& PanelName, TMap<class FString, struct FCharacterCreateTelemetryValuePairs>& Options, int32& TimeSpent);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.CharacterCustomizationComponent
class UCharacterCustomizationComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UCharacterCustomizationComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CharacterDissolveInterface
class ICharacterDissolveInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICharacterDissolveInterface* GetDefaultObj();

	void StartDissolve(bool bDissolveIn, enum class ECharacterDissolveType DissolveType);
};

// 0x8 (0xA8 - 0xA0)
// Class NWX.CharacterEmoteComponent
class UCharacterEmoteComponent : public UActorComponent
{
public:
	class UEmoteDataAsset*                       CurrentEmote;                                      // 0xA0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCharacterEmoteComponent* GetDefaultObj();

	void Server_UseEmote(TSoftObjectPtr<class UEmoteDataAsset>& EmoteDataAsset);
	void Server_OnEmoteFinished();
	void Server_InterruptEmote();
	void PerformInterruptEmote();
	void PerformEmoteAction(class UEmoteDataAsset* EmoteDataAsset);
	void OnMontageEnd(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBegin(class UAnimMontage* Montage);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CharacterEmoteInterface
class ICharacterEmoteInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICharacterEmoteInterface* GetDefaultObj();

	void UseEmote(TSoftObjectPtr<class UEmoteDataAsset>& Emote);
	void UnbindFrom_EmoteStartedDelegate(FDelegateProperty_& EmoteStartedDelegate);
	void UnbindFrom_EmoteEndedDelegate(FDelegateProperty_& EmoteEndedDelegate);
	void PrepareForEmotePlayback();
	void OnEmoteStarted(TSoftObjectPtr<class UEmoteDataAsset>& Emote);
	void OnEmoteEnded(TSoftObjectPtr<class UEmoteDataAsset>& Emote);
	bool IsUsingEmote();
	void InterruptCurrentEmote();
	void GetEmoteRadialMenuEntries(TArray<TScriptInterface<class IRadialMenuInterface>>* OutEmoteRadialMenuEntries);
	class UAnimInstance* GetAnimInstanceForEmotePlayback();
	bool CanUseEmote(TSoftObjectPtr<class UEmoteDataAsset>& Emote);
	bool CanUseAnyEmotes();
	void BindTo_EmoteStartedDelegate(FDelegateProperty_& EmoteStartedDelegate);
	void BindTo_EmoteEndedDelegate(FDelegateProperty_& EmoteEndedDelegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CharacteristicDataReferenceFunctionLibrary
class UCharacteristicDataReferenceFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCharacteristicDataReferenceFunctionLibrary* GetDefaultObj();

	bool NotEqual_FCharacteristicDataReference(struct FCharacteristicDataReference& A, struct FCharacteristicDataReference& B);
	struct FCharacteristicDataReference MakeCharacteristicReferenceFromAsset(TSoftObjectPtr<class UCharacteristicDataAsset>& Asset);
	bool IsValid(struct FCharacteristicDataReference& CharacteristicReference);
	void GetDebugStringFromCharacteristicDataReferenceArray(TArray<struct FCharacteristicDataReference>& CharacteristicReferences, class FString* OutString);
	bool EqualEqual_FCharacteristicDataReference(struct FCharacteristicDataReference& A, struct FCharacteristicDataReference& B);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.CharacterPerksComponent
class UCharacterPerksComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UCharacterPerksComponent* GetDefaultObj();

	void SendDamageEventInfo(struct FGameplayTagContainer& EventTags, struct FHitResult& HitResult);
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.CharacterWeightComponent
class UCharacterWeightComponent : public UActorComponent
{
public:
	uint8                                        Pad_410D[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCharacterWeightComponent* GetDefaultObj();

	void OnContainerItemsChanged(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void Initialize(class UAbilitySystemComponent* ASC, TScriptInterface<class IItemContainer>& ContainerToWatch);
};

// 0x28 (0x58 - 0x30)
// Class NWX.CheckpointVolumeDataAsset
class UCheckpointVolumeDataAsset : public UDataAsset
{
public:
	class URequirement*                          TriggerRequirements;                               // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRespawnPointIsExclusive;                          // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_412A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVolumeAVFXDataAsset*                  LoopAVFX;                                          // 0x40(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  TriggeredAVFX;                                     // 0x48(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTelemetryDataAsset*             TriggeredTelemetry;                                // 0x50(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCheckpointVolumeDataAsset* GetDefaultObj();

};

// 0x60 (0x300 - 0x2A0)
// Class NWX.CheckpointVolume
class ACheckpointVolume : public AActor
{
public:
	uint8                                        Pad_41D2[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCheckpointVolumeDataAsset*            DataAsset;                                         // 0x2B8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2C0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2C8(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXPlayerStart*                       UnlockablePlayerStart;                             // 0x2D8(0x8)(Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsUnlocked;                                       // 0x2E0(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_41DF[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACheckpointVolume* GetDefaultObj();

	void OnWorldPersistenceLoadCompleteHandler(enum class E_WorldPersistenceLoadState LoadState);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnLockStateChanged();
	void Multicast_PlayTriggeredEffect();
	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
};

// 0x50 (0x80 - 0x30)
// Class NWX.CHRAttributeModifierMapAsset
class UCHRAttributeModifierMapAsset : public UPrimaryDataAsset
{
public:
	TMap<struct FCharacteristicAndQuality, struct FItemAttributeModifierReference> CharacteristicAttributeMap;                        // 0x30(0x50)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCHRAttributeModifierMapAsset* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class NWX.ClientProximityDataAsset
class UClientProximityDataAsset : public UDataAsset
{
public:
	class URequirement*                          ProximityRequirements;                             // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProximityRadius;                                   // 0x38(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4212[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCurveTableRowHandle                  LerpCurveTable;                                    // 0x40(0x10)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UClientProximityDataAsset* GetDefaultObj();

};

// 0x38 (0xD8 - 0xA0)
// Class NWX.ClientProximityComponent
class UClientProximityComponent : public UActorComponent
{
public:
	class UClientProximityDataAsset*             DataAsset;                                         // 0xA0(0x8)(Edit, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                      ProximityVolume;                                   // 0xA8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>         OverlappingActors;                                 // 0xB0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4295[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UClientProximityComponent* GetDefaultObj();

	void RegisterForProximityUpdates(FDelegateProperty_& Delegate);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void DeregisterFromProximityUpdates(FDelegateProperty_& Delegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CollisionEventVolumeInterface
class ICollisionEventVolumeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICollisionEventVolumeInterface* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class NWX.CollisionVolumeDataAsset
class UCollisionVolumeDataAsset : public UDataAsset
{
public:
	class URequirement*                          InteractionRequirements;                           // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>          InteractionAbility;                                // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractionFeedback;                               // 0x40(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  ClosedAVFX;                                        // 0x58(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  OpenedAVFX;                                        // 0x60(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCollisionVolumeDataAsset* GetDefaultObj();

};

// 0x60 (0x300 - 0x2A0)
// Class NWX.CollisionVolume
class ACollisionVolume : public AActor
{
public:
	uint8                                        Pad_431D[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCollisionVolumeDataAsset*             DataAsset;                                         // 0x2C0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2C8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2D0(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2D8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAbilitySystemComponent*            AbilitySystem;                                     // 0x2E0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsCollisionActive;                                // 0x2E8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4321[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACollisionVolume* GetDefaultObj();

	void TryInteract(class AActor* OtherActor);
	void OnRep_IsCollisionActive();
	bool IsInteractable();
	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
	class FText GetInteractionFeedback();
};

// 0x110 (0x1B0 - 0xA0)
// Class NWX.CombatAnalyserComponent
class UCombatAnalyserComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            ClientOnCombatIntensityUpdated;                    // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class UActorAudioBucket*, struct FCombatBin> CombatBins;                                        // 0xB0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        NearbyAllyRadius;                                  // 0x100(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_4434[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AActor*, float>                   EnemiesInCombat;                                   // 0x108(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<class UActorAudioBucket*, int32>        ClientCombatScores;                                // 0x158(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                        CombatIntensity;                                   // 0x1A8(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_443A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCombatAnalyserComponent* GetDefaultObj();

	bool TryGetCombatAnalysersInRadius(struct FVector& Location, float Radius, TArray<class UCombatAnalyserComponent*>* OutCombatAnalysers);
	bool TryFindBucketsForActor(class AActor* Actor, struct FActorAudioBucketContainer* OutBuckets);
	void TriggerCombatIntensityUpdate();
	void TrackEnemyInCombat(class AActor* Enemy);
	void PruneEnemiesInCombat();
	void OnRep_CombatIntensity();
	int32 GetCombatScoreForBucket(class UActorAudioBucket* Bucket);
	bool DoesBucketHaveLiveEnemies(class UActorAudioBucket* Bucket);
	bool DoesActorTypeMatchBucket(class AActor* Actor, class UActorAudioBucket* CreatureAudioBucket);
	float CalculateCombatIntensity(struct FConstActorContainer& EnemyActors, struct FVector& PlayerLocation, float NearbyPlayerRadius);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CombatBlueprintFunctionLibrary
class UCombatBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCombatBlueprintFunctionLibrary* GetDefaultObj();

	void PredictMeleeHits(class ANWXPlayerCharacter* PlayerCharacter, class AEquippableItem* EquippableItem, class UAnimMontage* Montage, enum class ETraceTypeQuery TraceType, struct FPredictedHitResultsData* OutHitResults, class FName& SectionName, float TraceRadius, float ForwardTraceRadiusScale, bool bThirdPerson);
	bool CheckPredictions(bool bHasHit, TArray<struct FHitResult>& RealtimeHits, TArray<struct FHitResult>& PredictedHits, struct FVector& LastLocation, struct FVector& NewLocation, float TraceRadius, TArray<struct FHitResult>* OutTemporaryHits);
	void CalculateCreatureSphere(struct FVector& Principal, struct FVector& Extent, struct FVector& Creature, float TraceRadius, struct FVector* OutTraceLocation, float* OutRadius);
	void CalculateAdjustedTraceEnd(struct FVector& MeleeAttackSocketLocation, struct FVector& AttackerPointOfViewSocketLocation, float TraceRadius, float ForwardTraceRadiusScale, struct FVector* OutVector);
	bool AreHitPredictionsUsed(struct FVector& LastLocation, struct FVector& NewLocation, TArray<struct FHitResult>& PredictedHitResults, float TraceRadius, TArray<struct FHitResult>* ChosenResults);
};

// 0x128 (0x220 - 0xF8)
// Class NWX.CompanionManagementComponent
class UCompanionManagementComponent : public UPersistentDataComponent
{
public:
	FMulticastInlineDelegateProperty_            LeaderRecruitedCompanionDelegate;                  // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            LeaderDismissedCompanionDelegate;                  // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                CurrentCompanion;                                  // 0x118(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasCompanion;                                     // 0x120(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4601[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCompanionPersistenceData             CurrentCompanionData;                              // 0x128(0x98)(SaveGame, NativeAccessSpecifierPrivate)
	class UEnvQuery*                             CompanionRespawnEQS;                               // 0x1C0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AController*                           OwnerController;                                   // 0x1C8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4604[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompanionManagementComponent* GetDefaultObj();

	void UnequipItemOnCompanion(struct FInventoryEntry& Item);
	void Server_UnequipItemOnCompanion(struct FInventoryEntry& Item);
	void Server_EquipItemOnCompanion(struct FInventoryEntry& Item);
	void OnCompanionLoadoutUpdated(struct FGuid& ItemId, bool bWasEquipped);
	void OnCompanionInventoryUpdated();
	void OnCompanionDestroyed(class AActor* DestroyedActor);
	bool HasCompanion();
	class AActor* GetCurrentCompanion();
	void EquipItemOnCompanion(struct FInventoryEntry& Item);
};

// 0xF8 (0x3A0 - 0x2A8)
// Class NWX.MapPinComponent
class UMapPinComponent : public USceneComponent
{
public:
	uint8                                        Pad_464E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 MapPinId;                                          // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAlwaysVisible;                                  // 0x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4653[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   MapPinPresentationDataHandle;                      // 0x2C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartEnabled;                                     // 0x2D8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4658[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UpdateFrequency;                                   // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLocationEnabled;                                // 0x2E0(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_465D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMapPinData                           MapPinData;                                        // 0x2E8(0xA8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                          Auth_LocationUpdateTimerHandle;                    // 0x390(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        UpdateDistanceThreshold;                           // 0x398(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4660[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapPinComponent* GetDefaultObj();

	bool IsMapPinPresentationDataHandleValid();
	bool IsMapPinEnabled();
	struct FMapPinData GetMapPinData();
	void Auth_SetPresentationData(struct FDataTableRowHandle& RowHandle);
	void Auth_SetMapPinEnabled(bool bIsEnabledParameter);
};

// 0x10 (0x3B0 - 0x3A0)
// Class NWX.CompanionMapPinComponent
class UCompanionMapPinComponent : public UMapPinComponent
{
public:
	uint8                                        Pad_4666[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompanionMapPinComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CompassDynamicDataProviderInterface
class ICompassDynamicDataProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICompassDynamicDataProviderInterface* GetDefaultObj();

	void GetCompassHoverLabel(class FString* OutString);
	void GetCompassHoverDescription(class FString* OutString);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ObjectWithWorld
class UObjectWithWorld : public UObject
{
public:

	static class UClass* StaticClass();
	static class UObjectWithWorld* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXObjectComponent
class UNWXObjectComponent : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UNWXObjectComponent* GetDefaultObj();

	void K2_GetOwner(TSubclassOf<class UObject> OwnerClass, class UObject** OutOwner);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureObjectComponent
class UStructureObjectComponent : public UNWXObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureObjectComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CompositePieceComponent
class UCompositePieceComponent : public UStructureObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UCompositePieceComponent* GetDefaultObj();

	void GetPieceData(struct FCompositePieceGameplay* OutPieceData);
	class UStructureCompositePiece* GetOwner();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CompositePieceDataProviderInterface
class ICompositePieceDataProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICompositePieceDataProviderInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.MeshObject
class UMeshObject : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UMeshObject* GetDefaultObj();

	void TEMP_HasTag(class FName& Tag, bool* HasTag);
	struct FVector GetMeshWorldExtents();
	void GetMeshTransform(struct FTransform* WorldTransform);
	void GetMeshOrigin(struct FVector* LocalLocation, struct FVector* WorldLocation);
	void GetMeshMinAndMax(struct FVector* MinLocal, struct FVector* MaxLocal, struct FVector* MinWorld, struct FVector* MaxWorld);
	struct FVector GetMeshBounds();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StaticMeshGroupObjectBase
class UStaticMeshGroupObjectBase : public UMeshObject
{
public:

	static class UClass* StaticClass();
	static class UStaticMeshGroupObjectBase* GetDefaultObj();

};

// 0xA8 (0xD0 - 0x28)
// Class NWX.CompositePieceInstance
class UCompositePieceInstance : public UStaticMeshGroupObjectBase
{
public:
	class UBoxComponent*                         ConstructionDetectionBox;                          // 0x28(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStructureMeshesContainer*             MeshesContainer;                                   // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        InstanceIndex;                                     // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4813[0x64];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAcousticOpeningComponent*>     AcousticOpeningComponents;                         // 0xA0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UNiagaraComponent*>             NiagaraComponents;                                 // 0xB0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPointLightComponent*                  LightComponent;                                    // 0xC0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4818[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositePieceInstance* GetDefaultObj();

	void ResetAllMaterialsToDefault();
	bool K2_SetTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_OnInitialized();
	struct FTransform GetRootTransform();
	void GetMeshes(TArray<class UStaticMeshComponent*>* OutMeshes);
	void GetAudioGeometryComponents(TArray<class UDynamicAkGeometryComponent*>* AudioGeometryComponentsOut);
	void EnsureFallbackMeshes(bool bForceUseFallback);
	void AddAudioReflectionsToMeshComponents();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CompositePieceOwner
class ICompositePieceOwner : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICompositePieceOwner* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.CompositePieceSnapObject
class UCompositePieceSnapObject : public UObjectWithWorld
{
public:
	class UStructureGridComponent*               SnapComponent;                                     // 0x28(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        PieceId;                                           // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4C1D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositePieceSnapObject* GetDefaultObj();

	bool ValidateSnapPlacementData(struct FSnapPlacementTargetData& SnapData);
	void ResolvePotentiallyOccupiedGridPoints();
	void ResolveOccupiedSnapPoints();
	bool RemoveOccupyingStructureFromStructureAttachments(class UObject* OccupyingStructure);
	bool RemoveGridPointOccupyingStructure(struct FGridPoint& GridPointRef, class UObject* OccupyingStructure);
	bool IsGridPointIndexValid(int32 Index);
	bool GetTargetDataForTargetSnapPoint(class UObject* OtherActor, struct FGridPoint& OtherSnapPoint, struct FGameplayAbilityTargetDataHandle* TargetData);
	TArray<struct FGridPoint> GetStaticGridPoints();
	enum class ESnapType GetSnapType();
	class USnapRulesEnforcer* GetSnapRulesEnforcer();
	bool GetSnapPlacementTransform(class ACharacter* ControllingCharacter, struct FGameplayAbilityTargetDataHandle* SnapTargetData);
	void GetSnapData(struct FPieceSnapPoints* SnapData);
	class UStructureGridComponent* GetSnapComponent();
	struct FTransform GetRelativeTransformBetweenSnapPoints(struct FGameplayAbilityTargetDataHandle& SnapData);
	bool GetPlacementRequiresSnap();
	enum class ESnapType GetOwningStructureType();
	class UObject* GetOwner();
	int32 GetNumGridPoints();
	struct FGridPoint GetMatchingGridPointForPiece(class UObject* OtherPiece, struct FGridPoint& OtherPieceGridPoint);
	TArray<struct FGridPoint> GetGridPoints();
	void GetGridPointOccupyingStructures(struct FGridPoint& GridPointRef, TArray<class UObject*>* OccupyingStructures);
	struct FGridPoint GetGridPointById(struct FSnapPointId& ID);
	struct FGridPoint GetGridPoint(int32 Index);
	void GetAllUnoccupiedSnapPointsOfType(enum class ESnapType SnapType, TArray<struct FGridPoint>* MatchingSnapPoints);
	void GetAllSnapPointsOfType(enum class ESnapType SnapType, TArray<struct FGridPoint>* MatchingSnapPoints);
	void GetAllSnapPointIndexesAllowingType(enum class ESnapType SnapType, TArray<int32>* AllAcceptableSnapIndexes);
	void GetAllConnectedStructures(TArray<class UObject*>* ConnectedStructures);
	TSet<enum class ESnapType> GetAcceptableStructuresSetForPiece();
	int32 FindGridPointIndex(struct FGridPoint& GridPoint);
	void ChooseCandidateSnapPoint(TArray<struct FGridPoint>& SnapPoints, class ACharacter* Character, enum class ESnapType SnapPointType, struct FGridPoint* SnapPoint);
	bool CanAttachSnapPoints(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint);
	struct FTransform CalculateSnapTransformForGridPoints(struct FGridPoint& ReferencePoint, struct FGridPoint& PointToSnap);
	void AttachToOtherSnapObject(class UCompositePieceSnapObject* OtherSnapObject, struct FGridPoint& OtherSnapPoint, int32 MyGridPointIndex);
	bool AddGridPointOccupyingStructure(struct FGridPoint& GridPointRef, class UObject* OccupyingStructure);
};

// 0x10 (0x48 - 0x38)
// Class NWX.CompositePieceProxySnapObject
class UCompositePieceProxySnapObject : public UCompositePieceSnapObject
{
public:
	class UGridComponentProxy*                   GridComponent;                                     // 0x38(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USnapRulesEnforcer*                    SnapRulesEnforcer;                                 // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCompositePieceProxySnapObject* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.ConditionalItemRewards
class UConditionalItemRewards : public UDataAsset
{
public:
	class UItemReward*                           DefaultItemReward;                                 // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemRewardWithRequirements>   RealmSpecificRewards;                              // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConditionalItemRewards* GetDefaultObj();

};

// 0x10 (0x3B0 - 0x3A0)
// Class NWX.ConditionalMapPinComponent
class UConditionalMapPinComponent : public UMapPinComponent
{
public:
	uint8                                        Pad_4CFA[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionalMapPinComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ConditionalRewardFunctionLibrary
class UConditionalRewardFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UConditionalRewardFunctionLibrary* GetDefaultObj();

	void AwardConditionalRewards(class APlayerState* PlayerState, TArray<struct FConditionalReward>& PotentialRewards, class UObject* SenderContextObject, TArray<struct FConditionalReward>* OutAwardedRewards, int32 NumberOfAwards);
};

// 0x0 (0x30 - 0x30)
// Class NWX.EncounterRewardDataAsset
class UEncounterRewardDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UEncounterRewardDataAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.FactionRewardSet
class UFactionRewardSet : public UEncounterRewardDataAsset
{
public:
	TArray<struct FConditionalReward>            PotentialRewards;                                  // 0x30(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UFactionRewardSet* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.ConditionalRewardSet
class UConditionalRewardSet : public UEncounterRewardDataAsset
{
public:
	TArray<struct FRealmRewardSet>               ConditionalSets;                                   // 0x30(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UConditionalRewardSet* GetDefaultObj();

};

// 0x30 (0xA0 - 0x70)
// Class NWX.ConditionChallengeCompleted
class UConditionChallengeCompleted : public UConditionBehaviour
{
public:
	TSoftObjectPtr<class UChallengeDataAsset>    ChallengeDataAsset;                                // 0x70(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4E5F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionChallengeCompleted* GetDefaultObj();

	void OnChallengeCompleted(struct FExperienceStateID& ChallengeID);
};

// 0x20 (0x90 - 0x70)
// Class NWX.ConditionCreatureSuppression
class UConditionCreatureSuppression : public UConditionBehaviour
{
public:
	uint8                                        Pad_4E81[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionCreatureSuppression* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class NWX.ConditionDayNight
class UConditionDayNight : public UConditionBehaviour
{
public:
	uint8                                        Pad_4ED2[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionDayNight* GetDefaultObj();

	void OnDayNightChangedHandler(bool bIsNight);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ConditionDayNightInterface
class IConditionDayNightInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IConditionDayNightInterface* GetDefaultObj();

	bool GetTargetIsNight(bool* bTargetIsNight);
};

// 0x18 (0x88 - 0x70)
// Class NWX.ConditionMapPinPlaced
class UConditionMapPinPlaced : public UConditionBehaviour
{
public:
	int32                                        CountThreshold;                                    // 0x70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F2A[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionMapPinPlaced* GetDefaultObj();

};

// 0x8 (0x90 - 0x88)
// Class NWX.ConditionMapPinPlacedAboveHeight
class UConditionMapPinPlacedAboveHeight : public UConditionMapPinPlaced
{
public:
	float                                        HeightThreshold;                                   // 0x88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4F51[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionMapPinPlacedAboveHeight* GetDefaultObj();

};

// 0x10 (0x98 - 0x88)
// Class NWX.ConditionMapPinPlacedNearPoi
class UConditionMapPinPlacedNearPoi : public UConditionMapPinPlaced
{
public:
	TArray<enum class EPOIType>                  AllowedPOITypes;                                   // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConditionMapPinPlacedNearPoi* GetDefaultObj();

};

// 0x98 (0x108 - 0x70)
// Class NWX.ConditionPlayerAttribute
class UConditionPlayerAttribute : public UConditionBehaviour
{
public:
	enum class ENWXMathComparison                ThresholdTarget;                                   // 0x70(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttributeThresholdType           ThresholdType;                                     // 0x71(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4FC8[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TargetValue;                                       // 0x74(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TargetPercentage;                                  // 0x78(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_4FD6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayAttribute                    TargetGameplayAttribute;                           // 0x80(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                    MaxGameplayAttribute;                              // 0xB8(0x38)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentAttribute;                                  // 0xF0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_4FE8[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXPlayerState*                       ContextPlayerState;                                // 0x100(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UConditionPlayerAttribute* GetDefaultObj();

	void OnPawnSetOnPlayerState(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ConditionPOIListenerInterface
class IConditionPOIListenerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IConditionPOIListenerInterface* GetDefaultObj();

	bool GetRequiredMatches(int32* RequiredMatches);
	bool GetRequiredGameplayTag(struct FGameplayTag* RequiredTag);
	bool GetMaxSearchDistance(float* MaxSearchDistance);
	bool GetEncounterManager(class UObject** Manager);
};

// 0x28 (0x98 - 0x70)
// Class NWX.ConditionProximity
class UConditionProximity : public UConditionBehaviour
{
public:
	uint8                                        Pad_5114[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionProximity* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ConditionProximityInterface
class IConditionProximityInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IConditionProximityInterface* GetDefaultObj();

	bool GetRadius(float* Radius);
	bool GetNumRequiredPlayers(int32* NumRequiredPlayers);
	bool GetLocation(struct FVector* Location);
};

// 0x20 (0x90 - 0x70)
// Class NWX.ConditionRealmHasAllTags
class UConditionRealmHasAllTags : public UConditionBehaviour
{
public:
	struct FGameplayTagContainer                 RealmCardTags;                                     // 0x70(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConditionRealmHasAllTags* GetDefaultObj();

};

// 0x50 (0xC0 - 0x70)
// Class NWX.ConditionRealmMeetsRequirement
class UConditionRealmMeetsRequirement : public UConditionBehaviour
{
public:
	struct FRealmPlacementRequirement            Requirement;                                       // 0x70(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConditionRealmMeetsRequirement* GetDefaultObj();

};

// 0x10 (0x80 - 0x70)
// Class NWX.ConditionTimeout
class UConditionTimeout : public UConditionBehaviour
{
public:
	int32                                        TimeoutInSeconds;                                  // 0x70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5220[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConditionTimeout* GetDefaultObj();

};

// 0xF0 (0x120 - 0x30)
// Class NWX.ConeEffectDataAsset
class UConeEffectDataAsset : public UDataAsset
{
public:
	class UNiagaraSystem*                        NiagaraSystem;                                     // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          AudioHeadEvent;                                    // 0x38(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          AudioTailEvent;                                    // 0x60(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          AudioLoopEvent;                                    // 0x88(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          AudioLoopStopEvent;                                // 0xB0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConeLength;                                        // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConeHalfAngle;                                     // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPointsPerBand;                                  // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistanceBetweenAudioSources;                    // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeBetweenAudioUpdates;                           // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SimplifyBeyondDistance;                            // 0xEC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterLaunchVelocity;                             // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterTailVelocity;                               // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              EmitterOrientation;                                // 0xF8(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bUpdateOrientationImmediately;                     // 0x110(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bResizeConeDynamically;                            // 0x111(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5290[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinConeLength;                                     // 0x114(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxConeLength;                                     // 0x118(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5293[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConeEffectDataAsset* GetDefaultObj();

};

// 0x2D8 (0xAF0 - 0x818)
// Class NWX.ConeEffectsContainer
class UConeEffectsContainer : public UNiagaraComponent
{
public:
	TSoftObjectPtr<class UConeEffectDataAsset>   ConeEffectsData;                                   // 0x818(0x28)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FConeEffectsAudioInstance>     AudioInstances;                                    // 0x840(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         CachedAudioHeadEvent;                              // 0x850(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54B7[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkAudioEvent*                         CachedAudioTailEvent;                              // 0x880(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54C1[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkAudioEvent*                         CachedAudioLoopEvent;                              // 0x8B0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54C5[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkAudioEvent*                         CachedAudioLoopStopEvent;                          // 0x8E0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_54CB[0x208];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConeEffectsContainer* GetDefaultObj();

	void UpdateDataAsset(TSoftObjectPtr<class UConeEffectDataAsset>& NewData);
	void UpdateConeEffectsAudio();
	void StopSystem();
	void SetEndOfCone(struct FVector& NewConeEnd);
	void OnSystemStoppedEmitting();
	void OnLastParticleDeath();
	void OnAudioLoaded();
	void NiagaraSystemStoppedEmitting(class UActorComponent* NSystem);
	void NiagaraSystemFinished(class UNiagaraComponent* NSystem);
	bool IsInitialised();
	void DataAssetLoaded();
	void BeginSystem();
	void AddIgnoredComponents(TArray<class UPrimitiveComponent*>& IgnoredComponents);
	void AddIgnoredComponent(class UPrimitiveComponent* IgnoredComponent);
};

// 0x0 (0xF8 - 0xF8)
// Class NWX.ConsumptionComponentBase
class UConsumptionComponentBase : public UPersistentDataComponent
{
public:

	static class UClass* StaticClass();
	static class UConsumptionComponentBase* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ContainerRewardsInterface
class IContainerRewardsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IContainerRewardsInterface* GetDefaultObj();

	void PopulateChest(TArray<struct FInventoryEntry>& ItemRewards);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ContextObjectInterface
class IContextObjectInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IContextObjectInterface* GetDefaultObj();

	void GetContextObjects(TArray<class UObject*>* OutContextObjects);
	void GetContextActors(TArray<class AActor*>* OutContextActors);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ControllerInteractionInterface
class IControllerInteractionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IControllerInteractionInterface* GetDefaultObj();

	void UnbindEventFrom_OnNearbyInteractableRemoved(FDelegateProperty_& Event);
	void UnbindEventFrom_OnNearbyInteractableAdded(FDelegateProperty_& Event);
	class UObject* GetLastNearbyInteractableObject();
	int32 GetLastNearbyInteractableHitItem();
	class AActor* GetLastNearbyInteractableActor();
	class UObject* GetLastInteractedObject();
	class AActor* GetLastInteractedActor();
	void BindEventTo_OnNearbyInteractableRemoved(FDelegateProperty_& Event);
	void BindEventTo_OnNearbyInteractableAdded(FDelegateProperty_& Event);
};

// 0x20 (0x58 - 0x38)
// Class NWX.NWXCraftingSettings
class UNWXCraftingSettings : public UDeveloperSettings
{
public:
	class FString                                PrimarySlotTypeDataTablePath;                      // 0x38(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SlotTraitDataTablePath;                            // 0x48(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXCraftingSettings* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.CraftingActorConstraintBehaviour
class UCraftingActorConstraintBehaviour : public UObject
{
public:
	enum class ECraftingActorConstraintSelection ActorToCheck;                                      // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5847[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCraftingActorConstraintBehaviour* GetDefaultObj();

	bool IsConstraintMet(class AActor* Crafter, class AActor* Station);
};

// 0x48 (0x78 - 0x30)
// Class NWX.CraftingActorConstraint_TagQuery
class UCraftingActorConstraint_TagQuery : public UCraftingActorConstraintBehaviour
{
public:
	struct FGameplayTagQuery                     TagQuery;                                          // 0x30(0x48)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCraftingActorConstraint_TagQuery* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingCheats
class UCraftingCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UCraftingCheats* GetDefaultObj();

	void GetResourceDistributionForCrafting(TMap<int32, struct FResourceDistributionList>* OutResourceDistribution);
};

// 0x8 (0xA8 - 0xA0)
// Class NWX.CraftingComponentBase
class UCraftingComponentBase : public UActorComponent
{
public:
	class ANWXPlayerController*                  OwningController;                                  // 0xA0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCraftingComponentBase* GetDefaultObj();

	void CallCraftedItemReceived(struct FCraftingRecipeReference& RecipeReference, struct FInventoryEntry& ReceivedItem, int32& ReceivedRecipeQuantity);
};

// 0x200 (0x2A0 - 0xA0)
// Class NWX.CraftingCreationComponent
class UCraftingCreationComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnWorkbenchRecipesUpdated;                         // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnScreenStateUpdated;                              // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntrySelected;                                   // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCandidateEntryUpdated;                           // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        SearchStringUpdateTime;                            // 0xE0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SearchStringUpdateTimeIfEmpty;                     // 0xE4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnCraftingCreationFilteredEntriesCompleted;        // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                  CraftingScreenCategories;                          // 0xF8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FCraftingRecipeReference, enum class ECraftingScreenState> RecipeToStateMap;                                  // 0x108(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5EE7[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXMenuDataEntry*                     LastSelectedEntry;                                 // 0x180(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXMenuDataEntry*                     CandidateEntry;                                    // 0x188(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5EF6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemDataReference                    ItemReferenceEssence;                              // 0x1A0(0x80)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FItemDataReference                    ItemReferenceSpell;                                // 0x220(0x80)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCraftingCreationComponent* GetDefaultObj();

	void SetWorkbenchCraftingRecipes(TArray<struct FCraftingRecipeReference>& NewWorkbenchRecipes);
	void SetSearchString(const class FString& NewSearchString);
	void SetScreenState(enum class ECraftingScreenState NewState);
	void SetLastSelectedEntry(class UNWXMenuDataEntry* Entry);
	void SetFilterRefreshesPermissions(bool bAllowFilterAutoRefreshes);
	void SetCandidateEntry(bool IsActive, class UNWXMenuDataEntry* Entry);
	void RemoveFilter(TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	void RemoveAllRemovableFilters();
	void OnSearchStringTimerFinished();
	void OnFilteringEntriesCompleted(struct FGameplayTag& Category, int32 TotalResults);
	bool IsSearchStringEmpty();
	bool IsFilterActive(TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	TArray<struct FCraftingRecipeReference> GetWorkbenchCraftingRecipes();
	class UNWXMenuDataEntryCrafting* GetStateDependantCraftingEntry(class UNWXMenuDataEntry* Entry);
	class FString GetSearchString();
	TArray<struct FMenuDataRelevantFilter> GetRelevantFilters();
	class UNWXMenuDataEntry* GetLastSelectedEntry();
	struct FInventoryEntry GetItemEntryFromModifier(struct FInstancedItemAttributeModifier& Modifier);
	int32 GetFilteredEntryCount();
	void GetFilteredEntries(TArray<class UNWXMenuDataEntry*>* OutEntries);
	struct FGameplayTag GetCurrentCategoryTag();
	enum class ECraftingScreenState GetCraftingScreenState();
	class UNWXMenuDataEntry* GetCandidateEntry();
	void GetAllEntries(TArray<class UNWXMenuDataEntry*>* OutEntries);
	class UNWXMenuDataEntry* FindEntryWithIDFromCategory(struct FGameplayTag& CategoryTag, struct FGuid& EntryID);
	void AddFilter(TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
};

// 0x88 (0xB0 - 0x28)
// Class NWX.CraftingDerivedExperienceStateIDBuilder
class UCraftingDerivedExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	uint8                                        Pad_6026[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCraftingRecipeReference              RecipeReference;                                   // 0x30(0x70)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDerivedStates                    TargetDerivedState;                                // 0xA0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_6036[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCraftingDerivedExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(enum class EDerivedStates TargetState, struct FCraftingRecipeReference& CraftingRecipeReference);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingExperienceStateIDEnumerator
class UCraftingExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UCraftingExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.TestCraftingExperienceStateIDEnumerator
class UTestCraftingExperienceStateIDEnumerator : public UCraftingExperienceStateIDEnumerator
{
public:
	TArray<struct FSoftObjectPath>               TestRecipeReferences;                              // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTestCraftingExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingFunctionsLibrary
class UCraftingFunctionsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCraftingFunctionsLibrary* GetDefaultObj();

	TArray<struct FInventoryEntry> ValidateCraftingInputEntries(class AController* CraftingController, TArray<struct FInventoryEntry>& InputItems, enum class EGetResult* Branches);
	void TryGetRecipeMetaTags(struct FDataTableRowHandle& RecipeHandle, struct FGameplayTagContainer* MetaTags, enum class EGetResult* Branches);
	void TryGetQuickCraftDisciplineTags(enum class EGetResult* Branches, struct FGameplayTagContainer* OutPlayerCraftingDisciplineTags);
	void TryGetQuickCraftCollections(enum class EGetResult* Branches, TArray<TSoftObjectPtr<class UDisciplineRecipeCollectionAsset>>* OutPlayerRecipeCollections);
	void TryGetPlayMinorCardRecipe(enum class EGetResult* Branches, struct FCraftingRecipeReference* OutPlayMinorCardRecipe);
	TArray<struct FItemDataReference> TryGetCraftingResultItems(struct FCraftingRecipeReference& RecipeReference, enum class EGetResult* Branches);
	TArray<struct FInventoryEntry> TryGenerateCraftingPreview(class AActor* Crafter, class AActor* CraftingStation, struct FCraftingRecipeReference& RecipeReference, int32 Quantity, TArray<struct FInventoryEntry>& InputItems, enum class EGetResult* Branches);
	struct FCraftingRecipeReference TryFindRecipeVariant(class AActor* Crafter, class AActor* CraftingStation, struct FCraftingRecipeReference& RecipeReference, int32 RequestedQuantity, TArray<struct FInventoryEntry>& InputItems, enum class EGetResult* Branches);
	bool IsRecipeSatisfied(class AActor* Crafter, class AActor* CraftingStation, struct FCraftingRecipe& RecipeData, int32 RequestedQuantity, TArray<struct FInventoryEntry>& InputItems);
	bool GetRequiredInputQuantitiesForSlot(TArray<struct FInventoryEntry>& InputSlotMaterials, struct FCraftingConstraintSlot& Slot, int32 RecipeQuantity, TMap<struct FGuid, int32>* OutQuantitiesRequired, TArray<struct FInventoryEntry>* OutSlotItems);
	void GetRequiredInputQuantitiesForRecipe(TArray<struct FInventoryEntry>& InputItems, struct FCraftingRecipeReference& RecipeReference, int32 RecipeQuantity, TMap<struct FGuid, int32>* OutQuantitiesRequired, TArray<struct FInventoryEntry>* OutSlotItems, enum class EGetResult* Branches);
	struct FPowerLevel GetPowerLevelOfRecipe(struct FCraftingRecipe& RecipeData);
	void GetNumberOfRecipeSlotsFilled(struct FCraftingRecipeReference& RecipeReference, TArray<struct FInventoryEntry>& InputItems, int32* SlotsFilled, int32* RecipeSlots, enum class EGetResult* Branches);
	float GetMinimumCraftingTimeAllowed();
	TArray<struct FInventoryEntry> GetMaterialsForSlot(TArray<struct FInventoryEntry>& InputItems, int32 SlotNumber, enum class EGetResult* Branches);
	struct FDataTableRowHandle GetCraftingStepFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, class FString* CrafterUniqueID);
	struct FDataTableRowHandle GetCraftingStepEffectDataFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, class FString* CrafterUniqueID, bool* bFireActivation, bool* bFireInterface);
	void GetCraftingRecipesFromDisciplines(TArray<TSoftObjectPtr<class UDisciplineRecipeCollectionAsset>>& Disciplines, TSet<struct FCraftingRecipeReference>* OutCraftingRecipeReferences);
	class FText GetCraftingRecipeDescription(struct FCraftingRecipeReference& CraftingRecipeReference, bool bExpandedDescription);
	struct FInventoryEntry GenerateSingleCraftedItem(struct FCraftingRecipeReference& RecipeReference, struct FCraftingResultDataItem& CraftedItem, TArray<struct FInventoryEntry>& InputItems, enum class EGetResult* Branches);
	bool DoesStationHaveRecipe(class AActor* CraftingStation, struct FCraftingRecipe& RecipeData);
	bool DoesPlayerHaveRecipe(class AController* Controller, struct FCraftingRecipeReference& RecipeReference);
	bool CanSlotSpellOnItem(struct FInventoryEntry& ItemToSlotSpell);
	bool CanSlotPerkOnItem(struct FInventoryEntry& ItemToSlotPerk);
	bool CanSlotInfusionOnItem(struct FInventoryEntry& ItemToSlotInfusion);
	bool CanCraftRecipe(class AController* Controller, class AActor* CraftingStation, struct FCraftingRecipeReference& RecipeReference, int32 RequestedQuantity, TArray<struct FInventoryEntry>& InputItems);
	int32 CalculateMaxQuantityForRecipe(class AController* CraftingController, TArray<struct FInventoryEntry>& InputItems, struct FCraftingRecipeReference& RecipeReference);
	bool AreSlotsSatisfied(TArray<struct FInventoryEntry>& InputItems, TArray<struct FCraftingConstraintSlot>& RecipeSlots, int32 RequestedQuantity);
	bool AreItemTraitConstraintsSatisfied(struct FGameplayTagContainer& ItemTraits, struct FCraftingConstraintSet& ConstraintSet);
	bool AreItemStatConstraintsSatisfied(class UInventoryItem* InventoryItem, struct FCraftingConstraintSet& ConstraintSet);
	bool AreItemQuantityConstraintsSatisfied(struct FInventoryEntry& InventoryEntry, int32 Quantity);
	bool AreItemConstraintsSatisfied(struct FInventoryEntry& InventoryEntry, struct FCraftingConstraintSet& ConstraintSet);
	bool AllRecipeSlotsFilled(struct FCraftingRecipeReference& RecipeReference, TArray<struct FInventoryEntry>& InputItems);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromCraftingStepEffectData(struct FDataTableRowHandle& CraftingStep, const class FString& CrafterUniqueID, bool bFireActivation, bool bFireInterface);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromCraftingStep(struct FDataTableRowHandle& CraftingStep, const class FString& CrafterUniqueID);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingRecipeReferenceFunctionLibrary
class UCraftingRecipeReferenceFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCraftingRecipeReferenceFunctionLibrary* GetDefaultObj();

	void TryGetRelatedCraftingRecipes(struct FCraftingRecipeReference& RecipeReference, TArray<struct FCraftingRecipeReference>* OutReferences, enum class EGetResult* OutBranches);
	void TryGetCraftingRecipe(struct FCraftingRecipeReference& RecipeReference, struct FCraftingRecipe* CraftingRecipe, enum class EGetResult* Branches);
	bool RegisterRecipeForAssetLookup(class UAssetLookupFake* AssetLookup, struct FCraftingRecipeReference& RecipeReference);
	bool NotEqual_FCraftingRecipeReference(struct FCraftingRecipeReference& A, struct FCraftingRecipeReference& B);
	struct FCraftingRecipeReference MakeCraftingRecipeReferenceFromSoftObjectPath(struct FSoftObjectPath& SoftObjectPath);
	bool IsValid(struct FCraftingRecipeReference& RecipeReference);
	struct FGuid GetID(struct FCraftingRecipeReference& RecipeReference);
	struct FGameplayTagContainer GetDisciplineTagsForCraftingRecipes(TArray<struct FCraftingRecipeReference>& Recipes);
	class FString GetAssetName(struct FCraftingRecipeReference& RecipeReference);
	bool GetAllUnlockableCraftingRecipeReferences(TArray<struct FCraftingRecipeReference>* OutCraftingRecipes);
	TArray<struct FCraftingRecipeReference> FindAllCraftingRecipesWithDisciplines(struct FGameplayTagContainer& Disciplines);
	TArray<struct FCraftingRecipeReference> FindAllCraftingRecipes();
	bool EqualEqual_FCraftingRecipeReference(struct FCraftingRecipeReference& A, struct FCraftingRecipeReference& B);
	bool DoesRecipeSatisfyConstraint(struct FCraftingRecipeReference& RecipeReference, struct FItemConstraint& ItemConstraint);
	bool DoesRecipeListContainRecipe(TArray<struct FCraftingRecipeReference>& Recipes, struct FCraftingRecipe& Recipe);
};

// 0x8 (0x38 - 0x30)
// Class NWX.CraftingRefinementModifierAsset
class UCraftingRefinementModifierAsset : public UDataAsset
{
public:
	enum class ERefinementTimeModifer            ModifierType;                                      // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_78B3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RefinementModifier;                                // 0x34(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCraftingRefinementModifierAsset* GetDefaultObj();

	enum class ERefinementTimeModifer GetRefinementModifierType();
	float GetRefinementModifier();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemProcessingObject
class UItemProcessingObject : public UObject
{
public:

	static class UClass* StaticClass();
	static class UItemProcessingObject* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.CraftingResultObject
class UCraftingResultObject : public UItemProcessingObject
{
public:
	uint8                                        Pad_7970[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCraftingResultObject* GetDefaultObj();

	bool GetOutputItem(struct FItemDataReference* OutputReference);
};

// 0x40 (0x70 - 0x30)
// Class NWX.CraftingResultMod_AddRemoveTags
class UCraftingResultMod_AddRemoveTags : public UCraftingResultObject
{
public:
	TArray<struct FGameplayTag>                  TagsToAdd;                                         // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                  TagsToRemove;                                      // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                  PassthroughTags;                                   // 0x50(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInventoryEntry>               RecipeInputs;                                      // 0x60(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingResultMod_AddRemoveTags* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResultMod_DeploymentData
class UCraftingResultMod_DeploymentData : public UCraftingResultObject
{
public:

	static class UClass* StaticClass();
	static class UCraftingResultMod_DeploymentData* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.CraftingResultMod_SetQuality
class UCraftingResultMod_SetQuality : public UCraftingResultObject
{
public:
	enum class EItemQuality                      Quality;                                           // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bQualityPassthrough;                               // 0x31(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_7DCB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PassthroughSlotNumber;                             // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingResultMod_SetQuality* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResult_GrantItem
class UCraftingResult_GrantItem : public UCraftingResultObject
{
public:

	static class UClass* StaticClass();
	static class UCraftingResult_GrantItem* GetDefaultObj();

};

// 0xA0 (0xD0 - 0x30)
// Class NWX.CraftingResult_CraftItem
class UCraftingResult_CraftItem : public UCraftingResult_GrantItem
{
public:
	struct FCraftingResultDataItem               Data;                                              // 0x30(0xA0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingResult_CraftItem* GetDefaultObj();

};

// 0x28 (0x58 - 0x30)
// Class NWX.CraftingResult_CraftPerk
class UCraftingResult_CraftPerk : public UCraftingResult_GrantItem
{
public:
	TSoftObjectPtr<class UItemPerkDataAsset>     PerkToApply;                                       // 0x30(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCraftingResult_CraftPerk* GetDefaultObj();

	void SetPerkDataAsset(TSoftObjectPtr<class UItemPerkDataAsset>& Asset);
};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResult_PlayRealmCard
class UCraftingResult_PlayRealmCard : public UCraftingResultObject
{
public:

	static class UClass* StaticClass();
	static class UCraftingResult_PlayRealmCard* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResult_PlayMinorCard
class UCraftingResult_PlayMinorCard : public UCraftingResult_PlayRealmCard
{
public:

	static class UClass* StaticClass();
	static class UCraftingResult_PlayMinorCard* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResult_SlotInfusion
class UCraftingResult_SlotInfusion : public UCraftingResult_GrantItem
{
public:

	static class UClass* StaticClass();
	static class UCraftingResult_SlotInfusion* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CraftingResult_UpgradeItem
class UCraftingResult_UpgradeItem : public UCraftingResult_GrantItem
{
public:

	static class UClass* StaticClass();
	static class UCraftingResult_UpgradeItem* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.CraftingResult_Variant_Inputs
class UCraftingResult_Variant_Inputs : public UCraftingResultObject
{
public:
	class UCraftingResultObject*                 ResultDefault;                                     // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSlotConstraintsRecipeResult>  ResultVariants;                                    // 0x38(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingResult_Variant_Inputs* GetDefaultObj();

};

// 0x150 (0x180 - 0x30)
// Class NWX.CraftingRewardRegistry
class UCraftingRewardRegistry : public UDataAsset
{
public:
	TSubclassOf<class ANWXGameStateBase>         GameState;                                         // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>           CraftingComponent;                                 // 0x38(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>           CraftingStationComponent;                          // 0x40(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemClaimObject>          ItemClaimObject;                                   // 0x48(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                     NoRefinementDisciplines;                           // 0x50(0x48)(Edit, NativeAccessSpecifierPublic)
	float                                        MinimumCraftingTimeAllowed;                        // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_7EDB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UDisciplineRecipeCollectionAsset>> PlayerRecipeCollections;                           // 0xA0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 PlayerCraftingRecipeTags;                          // 0xB0(0x20)(Edit, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UItemConstraintDataAsset*              InfuseableConstraint;                              // 0xD0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemConstraintDataAsset*              PerkableConstraint;                                // 0xD8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDataAsset>         PerkDataAsset;                                     // 0xE0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemConstraintDataAsset*              SpellableConstraint;                               // 0x108(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingRecipeReference              PlayMinorCardRecipe;                               // 0x110(0x70)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingRewardRegistry* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class NWX.CraftingStationComponentBase
class UCraftingStationComponentBase : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UCraftingStationComponentBase* GetDefaultObj();

	void ServerIncrementCraftClaimedQuantity(const class FString& CrafterID, int32& ClaimedQuantity);
	struct FGuid GetCraftInProgressID(int32& CraftInProgressIndex);
	bool FindCraftForID(const class FString& CrafterID, int32* CraftInProgressIndex);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingStationDataProvider
class ICraftingStationDataProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICraftingStationDataProvider* GetDefaultObj();

	TArray<struct FCraftingRecipeReference> GetCurrentCraftingRecipes();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CraftingTelemetryLibrary
class UCraftingTelemetryLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCraftingTelemetryLibrary* GetDefaultObj();

	void SendReceiveCraftedItemEvent(class APlayerState* PlayerState, struct FGuid& CraftId, struct FCraftingRecipeReference& RecipeReference, class AActor* CraftingStationActor, struct FInventoryEntry& OutputItem, int32 QuantityGranted);
};

// 0x0 (0x30 - 0x30)
// Class NWX.ItemProcessingDataAsset
class UItemProcessingDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UItemProcessingDataAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.Crafting_Result_Items_DataAsset
class UCrafting_Result_Items_DataAsset : public UItemProcessingDataAsset
{
public:
	TArray<struct FInventoryEntry>               ItemsToGrant;                                      // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCrafting_Result_Items_DataAsset* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class NWX.Crafting_Result_Mechanic_RealmCard_DataAsset
class UCrafting_Result_Mechanic_RealmCard_DataAsset : public UItemProcessingDataAsset
{
public:
	TArray<TScriptInterface<class IRealmCard>>   AppliedRealmCards;                                 // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IRealmCard>>   RemovedRealmCards;                                 // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCrafting_Result_Mechanic_RealmCard_DataAsset* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.Craft_ResultData_VariantIndex
class UCraft_ResultData_VariantIndex : public UItemProcessingDataAsset
{
public:
	uint8                                        Pad_8039[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCraft_ResultData_VariantIndex* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.Craft_Result_Instances_DataAsset
class UCraft_Result_Instances_DataAsset : public UItemProcessingDataAsset
{
public:
	TArray<struct FGuid>                         Instances;                                         // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraft_Result_Instances_DataAsset* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class NWX.CreatureAdditiveReactsDataAsset
class UCreatureAdditiveReactsDataAsset : public UDataAsset
{
public:
	enum class EBonesToEnablePhysicsOn           BonesSimulatingPhysicsOnHit;                       // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_805F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           BlendCurve;                                        // 0x38(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bImpulseOnHitBone;                                 // 0x40(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_806A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ImpulseMultiplier;                                 // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinimumAllowedImpulse;                             // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaximumAllowedImpulse;                             // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCreatureAdditiveReactsDataAsset* GetDefaultObj();

};

// 0x2C8 (0x2F8 - 0x30)
// Class NWX.CreatureAnimationDataAsset
class UCreatureAnimationDataAsset : public UPrimaryDataAsset
{
public:
	class UAnimMontage*                          InitializationTransitionSequence;                  // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ENWXStartMovingType, class UAnimMontage*> TurnOnSpots;                                       // 0x38(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<enum class ENWXStartMovingType, class UAnimMontage*> WalkingStarts;                                     // 0x88(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<enum class ENWXStartMovingType, class UAnimMontage*> TrotStarts;                                        // 0xD8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<enum class ENWXStartMovingType, class UAnimMontage*> RunStarts;                                         // 0x128(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UDataTable*                            HitReactDataTable;                                 // 0x178(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCreatureAdditiveReactsDataAsset*      AdditiveHitReactData;                              // 0x180(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>             IdleLocomotionSequences;                           // 0x188(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     WalkLocomotionSequence;                            // 0x198(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     TrotLocomotionSequence;                            // 0x1A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     RunLocomotionSequence;                             // 0x1A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     SleepStateSequence;                                // 0x1B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     DeathStateSequence;                                // 0x1B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     CombatStateSequence;                               // 0x1C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     DownedStateSequence;                               // 0x1C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     SwimLocomotionSequence;                            // 0x1D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              DeltaRotationWhileSwimming;                        // 0x1D8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               DeltaOffsetWhileSwimming;                          // 0x1F0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UAnimSequenceBase*>  SpecialtyStateSequences;                           // 0x208(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<enum class ELinkedLoiterType, struct FLinkedLoiterState> LinkedLoiterAnimations;                            // 0x258(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                         bHasLookAt;                                        // 0x2A8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_80D8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TargetRange;                                       // 0x2AC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ForwardThreshold;                                  // 0x2B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpSpeed;                                       // 0x2B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpSpeedTurnOff;                                // 0x2B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClockwise;                                        // 0x2BC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_80EF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MinimumClamp;                                      // 0x2C0(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaximumClamp;                                      // 0x2D8(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtBoneCount;                                   // 0x2F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_80F6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCreatureAnimationDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CreatureBlueprintFunctionLibrary
class UCreatureBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCreatureBlueprintFunctionLibrary* GetDefaultObj();

	struct FSuppressionTraitChangedProperties MakeSuppressionTraitChangedProperties(class AActor* TraitOwner, bool bActivated, float EffectRadius);
	bool IsAnyPlayerWithinRangeOfSquad(class ANWXAISpawner* Spawner, float Range);
	float GetStealthModifier(class AActor* PlayerActor);
	class ANWXCreatureManagerBase* GetCreatureManager(class UObject* WorldContextObject);
	void GetCompanionSearchParameters(class ANWXAICharacter* AICharacter, float DesiredSearchRadius, struct FVector* SearchLocation, float* SearchRadius);
	void GetCapsuleBottomDistance(class ACharacter* Target, class ACharacter* OtherCharacter, float* OutDistance, enum class EGetResult* Branches);
};

// 0xD8 (0x178 - 0xA0)
// Class NWX.CreatureBudgetComponent
class UCreatureBudgetComponent : public UActorComponent
{
public:
	int32                                        MaxCreaturesPerWorker;                             // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_82F0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            DefaultMaxCreaturesDataTable;                      // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaxPerType>                   MaxCreaturesPerType;                               // 0xB0(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                            MaxCreatureOverrideDataTable;                      // 0xC0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXCreatureManagerBase*               CreatureManager;                                   // 0xC8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                          Actors;                                            // 0xD0(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_82FD[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCreatureBudgetComponent* GetDefaultObj();

	void UpdateFromConfigOverrides();
	void RemoveCreatureFromTotal(class ANWXAICharacter* AICreature);
	void RegisterCreatureManager(class ANWXCreatureManagerBase* CreatureManager);
	void HandleOnActorSpawned(class AActor* SpawnedActor);
	void HandleOnActorBeginPlay(class AActor* BeginPlayActor);
	int32 GetTotalCreaturesForType(enum class ECreatureType Type);
	int32 GetTotalCreatures();
	int32 GetMaxCreaturesForType(enum class ECreatureType Type);
	void AddCreatureToTotal(class ANWXAICharacter* AICreature);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CreatureCheats
class UCreatureCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UCreatureCheats* GetDefaultObj();

	void UntagAllCreatures(struct FGameplayTag& Tag);
	void TagAllCreatures(struct FGameplayTag& Tag);
};

// 0x158 (0x188 - 0x30)
// Class NWX.CreatureCustomizationRegistry
class UCreatureCustomizationRegistry : public UDataAsset
{
public:
	class FName                                  BackgroundGradientParameter;                       // 0x30(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PatternGradientParameter;                          // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AnimalMarkingsParameter;                           // 0x40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ECreatureTier, class UTexture*> BackgroundGradientMap;                             // 0x48(0x50)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<enum class ECreatureTier, class UTexture*> HeroBackgroundGradientMap;                         // 0x98(0x50)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<enum class ECreatureTier, class UTexture*> PatternGradientMap;                                // 0xE8(0x50)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<enum class ECreatureTier, class UTexture*> HeroPatternGradientMap;                            // 0x138(0x50)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCreatureCustomizationRegistry* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CreatureDataInterface
class ICreatureDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICreatureDataInterface* GetDefaultObj();

	bool IsShowingWeakpoint();
	class FName GetCreatureDataRowName();
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.CreatureSocketTraceComponent
class UCreatureSocketTraceComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UCreatureSocketTraceComponent* GetDefaultObj();

	bool HasAnyDebugCommands();
	bool GetSphereForwards();
	int32 GetSphereDetail();
	bool GetSphereArc();
	int32 GetPredictionPathsLevel();
	bool GetPEATriangle();
	bool GetPEAArc();
	int32 GetNumAdditionalSpheres();
	bool GetDetailedDebug();
};

// 0x0 (0x28 - 0x28)
// Class NWX.CreatureSpawningBlueprintFunctionLibrary
class UCreatureSpawningBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCreatureSpawningBlueprintFunctionLibrary* GetDefaultObj();

	bool IsSpawnerValidForCluster(class UObject* WorldContextObject, struct FWildlifeSpawnerBase& SpawnerData, class FName& ClusterName, TMap<class FName, struct FClusterTheme>& RealmClusters);
	bool IsNaturalSpawnerValidForRealm(class UObject* WorldContextObject, struct FWildlifeSpawner& SpawnerData, TMap<class FName, struct FClusterTheme>& RealmClusters);
	bool IsDynamicSpawnerValidForRealm(class UObject* WorldContextObject, struct FDynamicWildlifeSpawner& SpawnerData, TMap<class FName, struct FClusterTheme>& RealmClusters);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CullDistanceVolumeEditorUtils
class UCullDistanceVolumeEditorUtils : public UObject
{
public:

	static class UClass* StaticClass();
	static class UCullDistanceVolumeEditorUtils* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.CustomBoundsInterface
class ICustomBoundsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICustomBoundsInterface* GetDefaultObj();

	void GetWorldTransform(struct FTransform* WorldTransform);
	void GetOrigin(struct FVector* RelativeLocation, struct FVector* WorldLocation);
	void GetMinAndMaxExtents(struct FVector* RelativeMinExtent, struct FVector* RelativeMaxExtent, struct FVector* WorldMinExtent, struct FVector* WorldMaxExtent);
	void GetBounds(struct FVector* Bounds);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CustomDamageInterface
class ICustomDamageInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICustomDamageInterface* GetDefaultObj();

	void CustomDamage_OnDamageReceived(float Damage, class AActor* Target, class AActor* Source, struct FGameplayTagContainer& EffectTags, struct FHitResult& HitResult, struct FTagValueContainer& TagValueContainer);
};

// 0x0 (0x28 - 0x28)
// Class NWX.CustomizationFunctionLibrary
class UCustomizationFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCustomizationFunctionLibrary* GetDefaultObj();

	void UpdateAllProximityHiding(class AActor* HidingActor, bool bEnableProxyHiding, TArray<class UMaterialInstanceDynamic*>& MaterialInstances);
	class FName GetProximityHidingParameter();
	struct FLinearColor GetInvalidProximityValue();
};

// 0x0 (0x28 - 0x28)
// Class NWX.DamageEventInterface
class IDamageEventInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDamageEventInterface* GetDefaultObj();

	void OnDamageReceived(float Damage, class AActor* Target, class AActor* Source, struct FGameplayTagContainer& EffectTags, struct FHitResult& HitResult, struct FTagValueContainer& TagValueContainer);
	void OnDamageActor(class AActor* Source, struct FGameplayTagContainer& EffectTags, float BaseDamage, struct FHitResult& HitResult, struct FTagValueContainer& TagValueContainer, TArray<struct FGameplayEffectCue>& GameplayCues, struct FTagValueContainer* AggregatedDamageTags);
	void DamageActor(class AActor* Source, struct FGameplayTagContainer& EffectTags, float BaseDamage, struct FHitResult& HitResult, struct FTagValueContainer& TagValueContainer, TArray<struct FGameplayEffectCue>& GameplayCues, struct FTagValueContainer* AggregatedDamageTags);
};

// 0xB8 (0x358 - 0x2A0)
// Class NWX.NWXActor
class ANWXActor : public AActor
{
public:
	uint8                                        Pad_85A1[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 GameplayTags;                                      // 0x2E0(0x20)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	class UNWXAbilitySystemComponent*            AbilitySystem;                                     // 0x300(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayAbility>>  InitialGrantedAbilities;                           // 0x308(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>   InitialGrantedEffects;                             // 0x318(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                            AttributeInitData;                                 // 0x328(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXAttributeSet*                      AttributeSet;                                      // 0x330(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         CanBeBaseForAI;                                    // 0x338(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_85A3[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXActor* GetDefaultObj();

	TArray<class UPrimitiveComponent*> GetPrimitiveComponentsByTag(struct FGameplayTagContainer& Tag);
};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_ZKill
class ADamageSource_ZKill : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_ZKill* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_Debug
class ADamageSource_Debug : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_Debug* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_Falling
class ADamageSource_Falling : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_Falling* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_Hail
class ADamageSource_Hail : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_Hail* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_FunctionalTest
class ADamageSource_FunctionalTest : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_FunctionalTest* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.DamageSource_Invalid
class ADamageSource_Invalid : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class ADamageSource_Invalid* GetDefaultObj();

};

// 0x30 (0x2F0 - 0x2C0)
// Class NWX.DamageManager
class ADamageManager : public AManagerBase
{
public:
	class ANWXActor*                             DamageSource_ZKill;                                // 0x2C0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXActor*                             DamageSource_Debug;                                // 0x2C8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXActor*                             DamageSource_Falling;                              // 0x2D0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXActor*                             DamageSource_Hail;                                 // 0x2D8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXActor*                             DamageSource_FunctionalTest;                       // 0x2E0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXActor*                             DamageSource_Invalid;                              // 0x2E8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ADamageManager* GetDefaultObj();

	class ANWXActor* GetDamageSource_ZKill(class UObject* WorldContextObject);
	class ANWXActor* GetDamageSource_Invalid(class UObject* WorldContextObject);
	class ANWXActor* GetDamageSource_Hail(class UObject* WorldContextObject);
	class ANWXActor* GetDamageSource_FunctionalTest(class UObject* WorldContextObject);
	class ANWXActor* GetDamageSource_Falling(class UObject* WorldContextObject);
	class ANWXActor* GetDamageSource_Debug(class UObject* WorldContextObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DamageTargetValidationInterface
class IDamageTargetValidationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDamageTargetValidationInterface* GetDefaultObj();

	float GetMeleeValidationDistance();
};

// 0x0 (0x28 - 0x28)
// Class NWX.DamageUtilitiesFunctionLibrary
class UDamageUtilitiesFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDamageUtilitiesFunctionLibrary* GetDefaultObj();

	struct FTagValueContainer GetTagContainerFromEffectSpec(struct FGameplayEffectSpecHandle& Spec);
	struct FGameplayTag GetIncomingQuadrantTag(class AActor* Target, class AActor* Source, float QuadrantThreshold);
	struct FGameplayTag GetIncomingHemisphereTag(class AActor* Target, class AActor* Source);
	struct FGameplayTag GetDOTDamageTag();
	bool ContainsBlockingTag(struct FGameplayTagContainer& InTags);
	bool AttackCanBeBlocked(struct FGameplayTagContainer& SourceTags, struct FGameplayTagContainer& TargetTags, bool bDebugState);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DamageVulnerabilityInterface
class IDamageVulnerabilityInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDamageVulnerabilityInterface* GetDefaultObj();

	bool IsVulnerableToPowerLevel(class AActor* Source, int32 IdentifierIndex, struct FPowerLevel* OutPowerLevelDifference);
	bool IsVulnerableToDamageTags(struct FGameplayTagContainer& DamageTags, int32 IdentifierIndex);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DataAssetFunctionLibrary
class UDataAssetFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDataAssetFunctionLibrary* GetDefaultObj();

	void GenerateDataAssetCSV(TArray<class UObject*>& ObjectArray, const class FString& Filename, bool* bSuccess, class FString* Message);
};

// 0x0 (0x28 - 0x28)
// Class NWX.POIDistributionStage
class UPOIDistributionStage : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPOIDistributionStage* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DataOnlyPOIDistributionStage
class UDataOnlyPOIDistributionStage : public UPOIDistributionStage
{
public:

	static class UClass* StaticClass();
	static class UDataOnlyPOIDistributionStage* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DatapointStage
class UDatapointStage : public UObject
{
public:

	static class UClass* StaticClass();
	static class UDatapointStage* GetDefaultObj();

	struct FPOIData MakeDatapoint(struct FVector& Location, int32 Radius, enum class EPOIType Type, bool IsHub, int32 RegionMask);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DataTableBPFunctionLibrary
class UDataTableBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDataTableBPFunctionLibrary* GetDefaultObj();

	bool DataTable_AddDataRow(class UDataTable* Table, class FName& RowName, struct FTableRowBase& RowData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DataValidationInterface
class IDataValidationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDataValidationInterface* GetDefaultObj();

};

// 0xB8 (0x358 - 0x2A0)
// Class NWX.GridManager
class AGridManager : public AActor
{
public:
	class UBoxComponent*                         WorldBox;                                          // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               WorldOrigin;                                       // 0x2A8(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               WorldSize;                                         // 0x2C0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               WorldExtents;                                      // 0x2D8(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultGridValue;                                  // 0x2F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_86AF[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumberOfColumns;                                   // 0x308(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumberOfRows;                                      // 0x30C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               Resolution;                                        // 0x310(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_86B1[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DistanceFromZeroOffset;                            // 0x340(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AGridManager* GetDefaultObj();

	void SetGridValues(float Value);
	void PrintDimensions();
	void PrintData(int32 DesiredNumberOfRows, int32 DesiredNumberOfColumns, bool bIncludeBaseValue, bool bIncludeDeviation);
	void InitializeGrid();
	void GetGridCellsInRadius(struct FVector& Location, float Radius, TArray<struct FGridCell>* OutCellsInRange);
	float GetData(struct FVector& Location);
};

// 0x40 (0x398 - 0x358)
// Class NWX.DaylightManager
class ADaylightManager : public AGridManager
{
public:
	float                                        ElevationAngle;                                    // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_86B6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           SunPitchCurve;                                     // 0x360(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ElevationAngleAffectsDaylight;                     // 0x368(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_86B7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTag                          DaylightBlockerTag;                                // 0x36C(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Daylight;                                          // 0x374(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              SunRotator;                                        // 0x378(0x18)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_86B8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADaylightManager* GetDefaultObj();

	float GetDaylightAtLocation(struct FVector& Location);
};

// 0x30 (0x58 - 0x28)
// Class NWX.DeathBehaviour
class UDeathBehaviour : public UObjectWithWorld
{
public:
	class UDeathComponent*                       DeathComponent;                                    // 0x28(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                 Pawn;                                              // 0x30(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                           Controller;                                        // 0x38(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerState*                          State;                                             // 0x40(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*               AbilitySystemComponent;                            // 0x48(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_86D3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeathBehaviour* GetDefaultObj();

	void StartRespawn();
	void StartDowned();
	void StartDeath();
	void SafeDestroyObject(class UObject* Object);
	void OnPlayerDisconnected_Started();
	void OnPlayerDisconnected_Respawning();
	void OnPlayerDisconnected_Downed();
	void OnPlayerDisconnected_Dead();
	void InitializeForAutomatedTests();
	class APlayerState* GetState();
	class APawn* GetPawn();
	class AController* GetController();
	void EndRespawn();
	void EndDowned(bool bContinue);
	void EndDeath(bool bContinue);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DeathBehaviourInterface
class IDeathBehaviourInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDeathBehaviourInterface* GetDefaultObj();

	TSubclassOf<class UDeathBehaviour> GetDeathBehaviour();
};

// 0x20 (0x3C0 - 0x3A0)
// Class NWX.DeathChestMapPinComponent
class UDeathChestMapPinComponent : public UMapPinComponent
{
public:
	class FString                                Note;                                              // 0x3A0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                OwningPlayerName;                                  // 0x3B0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDeathChestMapPinComponent* GetDefaultObj();

	void Auth_SetPlayerName(const class FString& NewName);
	void Auth_SetCauseOfDeath(const class FString& CauseOfDeath);
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.DeathComponent
class UDeathComponent : public UActorComponent
{
public:
	TMap<class APawn*, class UDeathBehaviour*>   Behaviours;                                        // 0xA0(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDeathComponent* GetDefaultObj();

	bool IsInAnyDeathState(class APawn* Pawn);
	bool IsDeathBehaviourActive(class APawn* Pawn, TSubclassOf<class UDeathBehaviour>& DeathBehaviourClass);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DebugBlueprintFunctionLibrary
class UDebugBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDebugBlueprintFunctionLibrary* GetDefaultObj();

	void SetPrintImpactInfo(bool bNewPrintImpactInfo);
	void SetHideHUDAndChatInFlycam(bool ValueToSetHideHUDAndChat);
	void SetHideFrameStats(bool ValueToSetHideFrameStats);
	void PrintProfilingStats(float* RawGPUTime, float* AvgGPUTime, float* RawGame, float* AvgGame, float* RawDraw, float* AvgDraw, float* RawRHIT, float* AvgRHIT);
	void OpenBugScreenShot();
	void GetUserSpecInfo(class FString* CPUBrand, class FString* GPUBrand, class FString* OS);
	bool GetPrintImpactInfo();
	void GetMemoryStats(class FString* MemoryStats);
	bool GetHideHUDAndChatInFlycam();
	bool GetHideFrameStats();
	void GetDriverInfo(class FString* ActiveDriver);
	class FString GetCurrentViewModeName(class UObject* WorldContext);
	class FText GetCurrentViewModeDisplayName(class UObject* WorldContext);
	void GetBuildAndEngineInfo(class FString* BuildVersion, class FString* BuildConfig, class FString* EngineVersion);
	void GetAvgFPS(float* AvgFPS, float* AvgMS);
	void DrawWireframe(class UObject* WorldContext, TArray<struct FVector>& Verts, struct FLinearColor& Color, float Duration);
	void DrawDebugMeshInWorldSpace(struct FTransform& Transform, class UMeshComponent* MeshComp, struct FLinearColor& Color, float Duration);
};

// 0x80 (0x340 - 0x2C0)
// Class NWX.NWXUserWidget
class UNWXUserWidget : public UUserWidget
{
public:
	struct FGameplayTagContainer                 WidgetTags;                                        // 0x2C0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                          WidgetTag;                                         // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoRegisterToInputEvents;                        // 0x2E8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoRegisterToViewportResizedEvent;               // 0x2E9(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8744[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FKey                                  AlternateCancelKey;                                // 0x2F0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EUINavigationRule                 DefaultNavigationRule;                             // 0x308(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8748[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class ENWXWidgetTelemetryType>   EnabledTelemetryTypes;                             // 0x310(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_8749[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXUserWidget* GetDefaultObj();

	void SetWrappingNavigationRules(class UWidget* Widget, bool bWrapUpDown, bool bWrapLeftRight);
	void SetFocusOnDefaultWidget();
	void SetDefaultNavigationRules(class UWidget* Widget);
	void OnViewportResized();
	void OnUsingGamepadChanged(bool bUsingGamepad);
	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnPawnUnpossessed(class APawn* OldPawn);
	void OnPawnPossessedAndReady(class APawn* NewPawn);
	struct FEventReply OnInputStart();
	struct FEventReply OnInputSelect();
	struct FEventReply OnInputPrevious();
	struct FEventReply OnInputNext();
	struct FEventReply OnInputContext(int32 ContextIndex);
	struct FEventReply OnInputConfirm();
	struct FEventReply OnInputCancel();
	bool IsUsingGamepad();
	class ANWXPlayerState* GetOwningPlayerState();
	class ANWXPlayerController* GetOwningPlayerController();
	class UWidget* GetDefaultFocusWidget();
	void BroadcastUIEventWithWidget(struct FGameplayTag& InEventTag, struct FGameplayTag& InWidgetTag);
};

// 0x10 (0x350 - 0x340)
// Class NWX.DebugCommandScreenWidget
class UDebugCommandScreenWidget : public UNWXUserWidget
{
public:
	TArray<class FString>                        UserCommands;                                      // 0x340(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDebugCommandScreenWidget* GetDefaultObj();

	void SaveUserCommandsToConfig(TArray<class FString>& Commands);
	TArray<class FString> LoadUserCommandsFromConfig();
};

// 0x78 (0x118 - 0xA0)
// Class NWX.DebugFlyCam
class UDebugFlyCam : public UActorComponent
{
public:
	TWeakObjectPtr<class APawn>                  Server_PlayerPawnToRepossess;                      // 0xA0(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FOptionalCachedPawnLocationAndRotation CachedPlayerPawnLocationAndRotation;               // 0xA8(0x38)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	struct FOptionalCachedPawnLocationAndRotation Client_SpectatorLocationAndRotation;               // 0xE0(0x38)(NoDestructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDebugFlyCam* GetDefaultObj();

	void Server_TeleportPlayerPawnToLocationAndRotation(struct FVector& Location, struct FRotator& Rotation);
	void Server_RepossessPlayerPawn();
	void Server_EnterFlyCam();
	void Client_ExitFlyCam(bool bTeleportToSpectatorLocation);
	void Client_EnterFlyCam();
};

// 0x0 (0x58 - 0x58)
// Class NWX.DefaultDeathBehaviour
class UDefaultDeathBehaviour : public UDeathBehaviour
{
public:

	static class UClass* StaticClass();
	static class UDefaultDeathBehaviour* GetDefaultObj();

};

// 0x0 (0x2A8 - 0x2A8)
// Class NWX.NWXTriggerBox
class ANWXTriggerBox : public ATriggerBox
{
public:

	static class UClass* StaticClass();
	static class ANWXTriggerBox* GetDefaultObj();

};

// 0x138 (0x3D8 - 0x2A0)
// Class NWX.DeploymentPortal
class ADeploymentPortal : public AActor
{
public:
	uint8                                        Pad_8797[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayName;                                       // 0x2A8(0x10)(Edit, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        DestinationMapNames;                               // 0x2B8(0x10)(Edit, BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                SelectedMapName;                                   // 0x2C8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                PortalSessionId;                                   // 0x2D8(0x10)(BlueprintVisible, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReturnPortal;                                     // 0x2E8(0x1)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETemporalPortalState              TemporalState;                                     // 0x2E9(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8798[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTemporalConfig                       PortalConfig;                                      // 0x2F0(0x78)(Edit, BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTemporalPortalStateChanged;                      // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_879A[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TargetPlayerStartTag;                              // 0x3A0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                DeploymentId;                                      // 0x3B0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                DeploymentSetName;                                 // 0x3C0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bServerTravelPortal;                               // 0x3D0(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_879D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADeploymentPortal* GetDefaultObj();

	void StartDeployment();
	void SetTargetPlayerStartTag(const class FString& Target);
	bool SetDestinationDeploymentSetDynamic();
	bool SetDestinationDeploymentSet(const class FString& InDeploymentSet);
	bool SetDestinationAndRestart(const class FString& DeploymentId);
	bool SetDestination(const class FString& InDeploymentID);
	void SelectServerTravelDestinationAndStart();
	void RestartDeployment();
	void ResetPortal();
	void OnWorkerFlagUpdated(const class FString& FlagName, const class FString& FlagValue);
	void OnTemporalPortalStateChanged__DelegateSignature(enum class ETemporalPortalState State, class ADeploymentPortal* DeploymentPortal);
	void OnRep_TemporalPortalStateChanged();
	class FString GetID();
	class FString GetDisplayString();
	struct FTemporalConfig ConvertJsonToTemporalConfig(const class FString& Json);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DiagnosticCheats
class UDiagnosticCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UDiagnosticCheats* GetDefaultObj();

	void TraceBookmark_Server(const class FString& BookmarkName);
	void TraceBookmark_Client(const class FString& BookmarkName);
	void StartProfileCapture();
	void SetVislogWhiteListOnlyOnServer(bool bIsEnabled);
	void SetVislogEnabledOnServer(bool bIsEnabled);
	void SetRecordingWhiteListedVislogOnServer(bool bIsEnabled);
	void QuickTrace(float TraceLengthSeconds);
	void EnableUnrealInsights_Server(const class FString& ChannelList);
	void EnableUnrealInsights_Client(const class FString& ChannelList);
	void DisableUnrealInsights_Server();
	void DisableUnrealInsights_Client();
	void CreateMemReport();
};

// 0x0 (0x28 - 0x28)
// Class NWX.DialogueDataProvider
class IDialogueDataProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDialogueDataProvider* GetDefaultObj();

	class UDialogue* GetDialogue();
};

// 0x10 (0x50 - 0x40)
// Class NWX.DialogueExperienceStateEvent
class UDialogueExperienceStateEvent : public UDialogueEvents
{
public:
	class UExperienceStateIDBuilder*             ExperienceState;                                   // 0x40(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Change;                                            // 0x48(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_87CA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDialogueExperienceStateEvent* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.DialogueExperienceStateRequirement
class UDialogueExperienceStateRequirement : public UDialogueConditions
{
public:
	class UExperienceStateIDBuilder*             ExperienceState;                                   // 0x28(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowAdvanced;                                     // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENWXMathComparison                Comparator;                                        // 0x31(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_87CF[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TargetValue;                                       // 0x34(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDialogueExperienceStateRequirement* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.DialogueRequirement
class UDialogueRequirement : public UDialogueConditions
{
public:
	class URequirement*                          Requirement;                                       // 0x28(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDialogueRequirement* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class NWX.DialogueReward
class UDialogueReward : public UDialogueEvents
{
public:
	class URewardBehaviour*                      Reward;                                            // 0x40(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDialogueReward* GetDefaultObj();

};

// 0xA0 (0x3D0 - 0x330)
// Class NWX.StructureVolumeAkLateReverbComponent
class UStructureVolumeAkLateReverbComponent : public UAkLateReverbComponent
{
public:
	uint8                                        Pad_87DC[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReverbTime;                                        // 0x380(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_87DE[0x4C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureVolumeAkLateReverbComponent* GetDefaultObj();

	class FString GetAuxBusName();
};

// 0x60 (0x430 - 0x3D0)
// Class NWX.DirectionalSectorStructureVolumeAkLateReverbComponent
class UDirectionalSectorStructureVolumeAkLateReverbComponent : public UStructureVolumeAkLateReverbComponent
{
public:
	uint8                                        Pad_87E0[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDirectionalSectorStructureVolumeAkLateReverbComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DisciplineUIDataFunctionLibrary
class UDisciplineUIDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDisciplineUIDataFunctionLibrary* GetDefaultObj();

	void TryGetDisciplineUIData(struct FGameplayTag& DisciplineTag, struct FDisciplineUIData* OutData, enum class EGetResult* OutBranch);
};

// 0x50 (0x80 - 0x30)
// Class NWX.DisciplineUIDataRegistry
class UDisciplineUIDataRegistry : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FDisciplineUIData> Data;                                              // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDisciplineUIDataRegistry* GetDefaultObj();

};

// 0x20 (0x2C8 - 0x2A8)
// Class NWX.DiscoverableDataComponent
class UDiscoverableDataComponent : public USceneComponent
{
public:
	struct FGuid                                 DiscoverableId;                                    // 0x2A8(0x10)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   DiscoverablePresentationDataHandle;                // 0x2B8(0x10)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDiscoverableDataComponent* GetDefaultObj();

	struct FDiscoverableData GetDiscoverableData();
};

// 0x28 (0x2F0 - 0x2C8)
// Class NWX.DiscoverableRadiusComponent
class UDiscoverableRadiusComponent : public UDiscoverableDataComponent
{
public:
	bool                                         bStartEnabled;                                     // 0x2C8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_87F5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DiscoveryRadius;                                   // 0x2CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDiscoveredByPlayer;                              // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsEnabled;                                        // 0x2E0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_87F7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          OverlapCheckTimerHandle;                           // 0x2E8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDiscoverableRadiusComponent* GetDefaultObj();

	void CrossServer_SetEnabled(bool bIsEnabledParameter);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXDiscoveryBlueprintLibrary
class UNWXDiscoveryBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXDiscoveryBlueprintLibrary* GetDefaultObj();

	void GetRealmRewardsFromSettings(struct FRealmSettings& RealmSettings, TArray<class UConditionalRewardSet*>* OutRewards);
	void GetNarrativeNPCsFromRealm(class UObject* WorldContextObject, struct FRealmSettings& RealmSettings, TArray<struct FNWXNPCNarrativeData>* OutNPCs);
	void GetFactionsFromRealm(struct FRealmSettings& RealmSettings, TArray<enum class EFaction>* Factions);
	void GetCurrentRealmRewards(class ANWXGameStateBase* GameState, TArray<class UConditionalRewardSet*>* OutRewards);
	void GetCreaturesFromRealm(struct FRealmSettings& RealmSettings, TArray<struct FDataTableRowHandle>* SpawnerData);
};

// 0x28 (0x50 - 0x28)
// Class NWX.DiscoveryExperienceStateIDBuilder
class UDiscoveryExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	TSoftObjectPtr<class UDiscoveryDataAsset>    Discovery;                                         // 0x28(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDiscoveryExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(TSoftObjectPtr<class UDiscoveryDataAsset>& DiscoveryDataAsset);
};

// 0x0 (0x28 - 0x28)
// Class NWX.DiscoveryExperienceStateIDEnumerator
class UDiscoveryExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UDiscoveryExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.TestDiscoveryExperienceStateIDEnumerator
class UTestDiscoveryExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:
	TArray<struct FSoftObjectPath>               TestDiscoveryAssets;                               // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTestDiscoveryExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DiscoveryRewardTagReciever
class IDiscoveryRewardTagReciever : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDiscoveryRewardTagReciever* GetDefaultObj();

	bool IsDiscoveryRewardTagHandled(const struct FGameplayTag& GameplayTag);
	void HandleDiscoveryRewardFromTag(const struct FGameplayTag& GameplayTag);
};

// 0x20 (0x50 - 0x30)
// Class NWX.DiscoverySet
class UDiscoverySet : public UDataAsset
{
public:
	struct FDirectoryPath                        Directory;                                         // 0x30(0x10)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UDiscoveryDataAsset>> Discoveries;                                       // 0x40(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDiscoverySet* GetDefaultObj();

};

// 0x170 (0x210 - 0xA0)
// Class NWX.DiscoverySystem
class UDiscoverySystem : public UActorComponent
{
public:
	uint8                                        Pad_8842[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXPlayerState*                       OwningState;                                       // 0xD0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8843[0x118];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDiscoveryDataAsset*>           PendingAdds;                                       // 0x1F0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8844[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDiscoverySystem* GetDefaultObj();

	void OnExperienceStatesReady();
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXGameplayEffectExecutionCalculation
class UNWXGameplayEffectExecutionCalculation : public UGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UNWXGameplayEffectExecutionCalculation* GetDefaultObj();

	void GetTransientAggregatorMagnitude(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayTag& AggregateIdentifier, float* Magnitude);
	void GetTargetAttributeMagnitude(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayAttribute& Attribute, float* Magnitude);
	class UAbilitySystemComponent* GetTargetAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& ExecutionParams);
	void GetSourceAttributeMagnitude(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayAttribute& Attribute, float* Magnitude);
	class UAbilitySystemComponent* GetSourceAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& ExecutionParams);
	float GetEffectPeriod(struct FGameplayEffectCustomExecutionParameters& ExecutionParams);
};

// 0x0 (0x40 - 0x40)
// Class NWX.DoTCalculation
class UDoTCalculation : public UNWXGameplayEffectExecutionCalculation
{
public:

	static class UClass* StaticClass();
	static class UDoTCalculation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DynamicCollisionVolumeInterface
class IDynamicCollisionVolumeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDynamicCollisionVolumeInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.DynamicDataVolumeInterface
class IDynamicDataVolumeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDynamicDataVolumeInterface* GetDefaultObj();

};

// 0x228 (0x4E8 - 0x2C0)
// Class NWX.DynamicResourceSpawningManager
class ADynamicResourceSpawningManager : public AManagerBase
{
public:
	uint8                                        Pad_8891[0x1B0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UDataTable>             ResourceRarityDistributionDTPtr;                   // 0x470(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>             ResourceCategoryToItemTraitsMappingDTPtr;          // 0x498(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UCurveTable>            POIResourceProgresionCurvePtr;                     // 0x4C0(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ADynamicResourceSpawningManager* GetDefaultObj();

	void BuildResourceRarityBucketsCache(struct FRealmSettings& RealmSettings);
};

// 0x170 (0x210 - 0xA0)
// Class NWX.DynamicSpawningManagerComponent
class UDynamicSpawningManagerComponent : public UActorComponent
{
public:
	TMap<enum class EDynamicSpawnCategory, int32> NumberOfDynamicEncountersPerCategory;              // 0xA0(0x50)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
	float                                        RespawnEncounterNoPlayerRadius;                    // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RespawnEncounterRetryTimePlayerInRange;            // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SpawnNewEncounterCooldown;                         // 0xF8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_889F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AEncounterConfig>          EncounterClassType;                                // 0x100(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_88A1[0xF0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UDynamicSpawningDataAsset*             DynamicSpawningDataAsset;                          // 0x1F8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                            DynamicWildlifeSpawnersDataTable;                  // 0x200(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_88A2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDynamicSpawningManagerComponent* GetDefaultObj();

	void DynamicEncounterFinished(class AEncounterConfig* Encounter);
};

// 0x98 (0xC0 - 0x28)
// Class NWX.NWXEditorTemporalRealmConfigSettings
class UNWXEditorTemporalRealmConfigSettings : public UObject
{
public:
	bool                                         bUseTemporalConfigOverride;                        // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_88A7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Seed;                                              // 0x2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCurated;                                        // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_88AA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PortalTargetDeploymentID;                          // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDebugRealm;                                     // 0x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_88AC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                POIDistributionKey;                                // 0x50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDataAsset>         BiomeCard;                                         // 0x60(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UItemDataAsset>> MajorCards;                                        // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 AdditionalTags;                                    // 0x98(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                         bOverrideBaseRealmPower;                           // 0xB8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_88B0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RealmPowerOverride;                                // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXEditorTemporalRealmConfigSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EffectsBlueprintFunctionLibrary
class UEffectsBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEffectsBlueprintFunctionLibrary* GetDefaultObj();

	void TriggerRealmicTransmuterPlayerEffects(class UObject* WorldContextObject, struct FVector& TransmuterLocation);
	bool SimpleUnderwaterTest(class AActor* Actor, enum class ETraceTypeQuery WaterTraceType, float TestDistance);
	bool ShouldSpawnVFXBasedOnFocusRank(class AActor* VFXInstigator, int32 RankThreshold, bool UseGlobalRank);
	bool ShouldPlayFirstPersonAudio(class ANWXCharacter* AudioInstigator);
	void SetTexture2DObject(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class UTexture* Texture);
	void SetHiddenInGameFromVFXContext(class USceneComponent* Target, bool bNewHidden, bool bPropagateToChildren);
	TSoftObjectPtr<class UAkAudioEvent> ResolveTaggableSound(struct FTaggableSound& TaggableSound, struct FGameplayTagContainer& TagsToSearch);
	class UAkAudioEvent* ResolveAudio(TSoftObjectPtr<class UAkAudioEvent>& AudioSoftPath);
	bool LineTraceForWaterHit(class AActor* WorldContextActor, struct FVector& StartTraceLocation, struct FVector& EndTraceLocation, enum class ETraceTypeQuery WaterTraceType, TArray<class AActor*>& IgnoredActorArray, float* OutWaterDepth, struct FHitResult* OutHitResult);
	bool LineTraceForWaterFootstep(class AActor* Actor, class UCapsuleComponent* Capsule, enum class ETraceTypeQuery WaterTraceType, float* WaterDepth, struct FVector* WaterHitNormal, struct FVector* WaterHitLocation);
	bool IsShippingBuild();
	bool IsPointUnderwaterNoBlockers(class UObject* WorldContext, struct FVector& Point, float TestDistance, enum class ECollisionChannel WaterTraceChannel, enum class ECollisionChannel BlockingTraceChanel, TArray<class AActor*>& BlockersToIgnore, float* OutWaterDepth);
	bool IsPointUnderwater(class UObject* WorldContext, struct FVector& Point, float TestDistance, enum class ECollisionChannel TraceChannel, float* OutWaterDepth);
	bool IsFirstPersonCharacter(class AActor* Actor);
	void GetParticleOrientation(struct FVector& ImpactSourceDirection, struct FVector& Location, struct FVector& SurfaceNormal, struct FRotator* OutAligningReflectionRotator, struct FRotator* OutAligningNormalRotator, struct FRotator* OutAligningNormalDoubleXRotator, struct FRotator* OutAligningTotalReflectionRotator, struct FRotator* OutAligningNoDeviationRotator);
	bool GetNiagaraComponentLocalBounds(class UNiagaraComponent* NiagaraComponent, struct FBox* OutBounds);
	class UMusicManager* GetMusicManager(class UObject* WorldContextObject);
	class UAmbienceManager* GetAmbienceManager(class UObject* WorldContextObject);
	class UAkSwitchValue* GetAkSwitchFromMeshArray(TArray<class UMeshComponent*>& MeshComponents, bool bIgnoreHiddenMeshes, bool bIgnoreMeshesWithoutCollision);
	class UAkSwitchValue* GetAkSwitchFromMesh(class UMeshComponent* MeshComponent);
	void GatherTreeInstances(TArray<struct FActorAndInstanceIds>& ActorAndInstanceIds, TMap<class AActor*, struct FIIMInstanceFilterCache>& PreFilteredInstances, TMap<class FName, struct FIIMExtents>& InOutExtents, TMap<class FName, struct FAmbienceDataReference>& InOutAmbienceData, TArray<struct FIIMInstance>* OutInstances);
	void GatherInstanceOfState(TArray<struct FActorAndInstanceIds>& ActorAndInstanceIds, enum class EIIMGameplayState State, TMap<class FName, struct FIIMExtents>& InOutExtents, TMap<class FName, struct FAmbienceDataReference>& InOutAmbienceData, TArray<struct FIIMInstance>* OutInstances);
	void FindClosestWaterBodyRiverSplinePointFlow(class AActor* PlayerActor, struct FVector* OutFlowDirection, float* OutFlowSpeed);
	bool FindClosestCollisionPointOnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, struct FVector* ClosestPoint);
	void EndRealmicTransmuterPlayerEffects(class UObject* WorldContextObject);
	bool DoesActorMeetFocusRankThreshold(class AActor* Actor, int32 RankThreshold, bool bApplyScalability, bool bUseGlobalRank);
	struct FAmbienceData CopyAmbienceData(struct FAmbienceDataReference& AmbienceDataReference);
	void CheckAndSelectRagDollSocketData(bool& bIsRagDolling, float& DeltaTime, class UNiagaraComponent*& SpawnedNiagaraComponent, class USkeletalMeshComponent* SkeletalMeshComponent, struct FGameplayTag& CurrentSurfaceGameplayTag, enum class ETraceTypeQuery GroundTraceTypeQuery, enum class ETraceTypeQuery LiquidTraceTypeQuery, struct FRagDollSocketsData& SocketsData, bool* bOutIsVfxNeeded, bool* bOutIsSurfaceTagChangeNeeded, struct FHitResult* OutHitResult, TArray<struct FLiquidHitData>* OutLiquidHits, float* OutScaledVelocity, float* OutScaleOverride);
	float CalculateScaleOverride(float CreatureRadius, float BoundsMultiplier, float MinimumValue, float MaximumValue);
	struct FVector CalculateImpactSourceDirection(bool ShouldOverrideImpactDirection, struct FVector& OverriddenImpactDirection, struct FVector& TraceStart, struct FVector& TraceEnd, struct FRotator& CameraRotation);
	void BatchAsyncLoadAudio(class UObject* WorldContext, TArray<TSoftObjectPtr<class UAkAudioEvent>>& AssetsSoftPaths, FDelegateProperty_& AsyncLoadComplete);
	void BatchAsyncLoad(class UObject* WorldContext, TArray<struct FSoftObjectPath>* AssetsSoftPaths, FDelegateProperty_& AsyncLoadComplete);
	void AttachWaterVFXAboveFoot(class UNiagaraComponent* NiagaraComponent, class AActor* SteppingActor, class USceneComponent* AttachToComponent, class FName& SocketName, struct FVector& SpawnLocation, struct FVector& WaterHitNormal, float WaterDepth);
	void AsyncLoadNiagaraAsset(class UObject* WorldContext, TSoftObjectPtr<class UNiagaraSystem>& AssetSoftPtr, FDelegateProperty_& AsyncLoadNiagaraAssetComplete);
	void AsyncLoadLoopingAudio(class UObject* WorldContext, TSoftObjectPtr<class UAkAudioEvent>& StartEventSoftPtr, TSoftObjectPtr<class UAkAudioEvent>& StopEventSoftPtr, FDelegateProperty_& AsyncLoadComplete);
	void AsyncLoadAudioState(class UObject* WorldContext, TSoftObjectPtr<class UAkStateValue>& StateSoftPtr, FDelegateProperty_& AsyncLoadComplete);
	void AsyncLoadAudioAndSwitches(class UObject* WorldContext, TSoftObjectPtr<class UAkAudioEvent>& EventSoftPath, TArray<TSoftObjectPtr<class UAkSwitchValue>>& SwitchesSoftPaths, FDelegateProperty_& AsyncLoadComplete);
	void AsyncLoadAudio(class UObject* WorldContext, TSoftObjectPtr<class UAkAudioEvent>& AssetsSoftPath, FDelegateProperty_& AsyncLoadComplete);
	void AsyncLoad(class UObject* WorldContext, struct FSoftObjectPath& AssetsSoftPath, FDelegateProperty_& AsyncLoadComplete);
	struct FGameplayTag AppendDamageModToImpactTag(struct FGameplayTag& ImpactTag, struct FGameplayTag& DamageModTag, struct FGameplayTagContainer& ResistDamageModTags, struct FGameplayTagContainer& WeakDamageModTags);
	bool AmbienceDataContainsTags(struct FAmbienceDataReference& AmbienceDataReference, struct FGameplayTagContainer& TagContainer);
};

// 0x38 (0xC8 - 0x90)
// Class NWX.EmoteRadialMenuEntry
class UEmoteRadialMenuEntry : public URadialMenuEntry
{
public:
	FMulticastInlineDelegateProperty_            OnEmoteSelected;                                   // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_8A05[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEmoteRadialMenuEntry* GetDefaultObj();

};

// 0x1A8 (0x448 - 0x2A0)
// Class NWX.EncounterBase
class AEncounterBase : public AActor
{
public:
	uint8                                        Pad_8A42[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnEncounterStart;                                  // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEncounterFinish;                                 // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEncounterCompleted;                              // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCombatStarted;                                   // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCombatEnded;                                     // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEncounterActivated;                              // 0x308(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEncounterStatusChanged;                          // 0x318(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UEncounterBridgeComponent*             EncounterBridgeComponent;                          // 0x328(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXAIPOI_Component*                   NWXAIPOI_Component;                                // 0x330(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  EncounterName;                                     // 0x338(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEncounterDataAsset*                   EncounterData;                                     // 0x340(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AEncounterConfig*                      TargetActor;                                       // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        ContextActors;                                     // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FGuid                                 EncounterID;                                       // 0x360(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                 EncounterInstanceID;                               // 0x370(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EncounterRange;                                    // 0x380(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNotifyPlayers;                                    // 0x384(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEncounterIsActive;                                // 0x385(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8A47[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EncounterRefreshCounter;                           // 0x388(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PlayerCount;                                       // 0x38C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EEncounterState                   EncounterRunState;                                 // 0x390(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8A4A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInventoryEntry>               ItemRewards;                                       // 0x398(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FEncounterFavourData>          FavourRewards;                                     // 0x3A8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FConditionalReward>            ConditionalRewards;                                // 0x3B8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	enum class EFaction                          EncounterFaction;                                  // 0x3C8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EEncounterRewardType              EncounterRewardType;                               // 0x3C9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8A4B[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TScriptInterface<class IEncounterManagerInterface> EncounterManagerInterface;                         // 0x3D0(0x10)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class AEncounterMusic>         EncounterMusicPath;                                // 0x3E0(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EEncounterStatus                  EncounterStatus;                                   // 0x408(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8A4D[0x37];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UEncounterMarkupDataAsset> ExpectedMarkup;                                    // 0x440(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AEncounterBase* GetDefaultObj();

	void Start();
	void SpawnRewardStructure();
	void SetPOILevel(class AActor* POIActor, int32 POIProgressionLevel);
	void SetEncounterStatus(enum class EEncounterStatus NewEncounterStatus);
	void SetEncounterState(enum class EEncounterState State);
	void SetEncounterResettable(bool bReset);
	void RefreshEncounter();
	void OnMusicAssetLoaded();
	void Initialize();
	class AEncounterConfig* GetTargetActor();
	void GetFirstContextActorOfClass(TSubclassOf<class AActor>& Class, bool* bSuccess, class AActor** ContextActor);
	enum class EEncounterStatus GetEncounterStatus();
	class FName GetEncounterName();
	struct FGuid GetEncounterInstanceID();
	struct FGuid GetEncounterID();
	class UEncounterDataAsset* GetEncounterData();
	void Finish(class AEncounterConfig* OverridePOITarget);
	void FailEncounterFromError(const class FString& ErrorMessage);
	void Fail(class AEncounterConfig* OverridePOITarget);
	void EncounterNPCInteraction();
	void CollectDebuggerShapes(TArray<struct FEncounterDebugLine>* OutDebugLines, TArray<struct FEncounterDebugPoint>* OutDebugPoints);
	class FString CollectDebuggerInformation();
	void CleanupEncounter();
	void BeginEncounter();
	void Award();
};

// 0x8 (0xA8 - 0xA0)
// Class NWX.EncounterBridgeComponent
class UEncounterBridgeComponent : public UActorComponent
{
public:
	uint8                                        Pad_8A5A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterBridgeComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterBridgeInterface
class IEncounterBridgeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterBridgeInterface* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class NWX.EncounterComponentBase
class UEncounterComponentBase : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UEncounterComponentBase* GetDefaultObj();

	void InitializeEncounterComponent();
};

// 0x0 (0x30 - 0x30)
// Class NWX.EncounterComponentDataAsset
class UEncounterComponentDataAsset : public UPrimaryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UEncounterComponentDataAsset* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.EncounterComponentSpawnerAutomaticDataAsset
class UEncounterComponentSpawnerAutomaticDataAsset : public UEncounterComponentDataAsset
{
public:
	bool                                         bOverrideCreatureRealmPowerScalingValue;           // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8A67[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CreatureRealmPowerScalingValueOverride;            // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEncounterSpawnerWaveData>     EncounterSpawnerWaveData;                          // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterComponentSpawnerAutomaticDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PlatformInterface
class IPlatformInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlatformInterface* GetDefaultObj();

	class FName GetPlatformLabel();
};

// 0x58 (0x2F8 - 0x2A0)
// Class NWX.PlatformActor
class APlatformActor : public AActor
{
public:
	uint8                                        Pad_8A74[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlatformActor* GetDefaultObj();

};

// 0x150 (0x1F0 - 0xA0)
// Class NWX.EncounterComponent_Markup
class UEncounterComponent_Markup : public UEncounterComponentBase
{
public:
	class AActor*                                Spawner;                                           // 0xA0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        MovingPlatforms;                                   // 0xA8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        ActivationVolumes;                                 // 0xB8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                ExtractionActor;                                   // 0xC8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                Gate;                                              // 0xD0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                PortalCardMachine;                                 // 0xD8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXPlayerStart*                       UnlockableRespawnPoint;                            // 0xE0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRespawnPointIsExclusive;                          // 0xE8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8A7A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ANWXStructurePartProxyActor*>   StructuresToRemove;                                // 0xF0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ANWXStructurePartProxyActor*>   StructuresToBuild;                                 // 0x100(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ANWXStructurePartProxyActor*>   CriticalStructures;                                // 0x110(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class ATargetPoint*                          TargetPoint_Reward;                                // 0x120(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ATargetPoint*>                  TargetPoint_Spawners;                              // 0x128(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ATargetPoint*>                  TargetPoint_ReachPoints;                           // 0x138(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class ATargetPoint*                          TargetPoint_Memory;                                // 0x148(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ATargetPoint*>                  TargetPoint_MemoryTargets;                         // 0x150(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ATargetPoint*>                  TargetPoint_GlyphTargets;                          // 0x160(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int32, class ATargetPoint*>             TargetPoint_Interactables;                         // 0x170(0x50)(Edit, NativeAccessSpecifierPrivate)
	class ATargetPoint*                          TargetPoint_Rally;                                 // 0x1C0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                EndFloorTrigger;                                   // 0x1C8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                FloorSpawnPoint;                                   // 0x1D0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                TowerShellActor;                                   // 0x1D8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnPOIPopulationChanged;                            // 0x1E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterComponent_Markup* GetDefaultObj();

};

// 0x28 (0xC8 - 0xA0)
// Class NWX.EncounterComponent_Relevant
class UEncounterComponent_Relevant : public UEncounterComponentBase
{
public:
	uint8                                        Pad_8A86[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        POIProgressionLevel;                               // 0xA8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8A87[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGuid>                         EncounterIDs;                                      // 0xB0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8A88[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterComponent_Relevant* GetDefaultObj();

};

// 0x28 (0xC8 - 0xA0)
// Class NWX.EncounterComponent_Spawners
class UEncounterComponent_Spawners : public UEncounterComponentBase
{
public:
	struct FScalableFloat                        DistributionCurve;                                 // 0xA0(0x28)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UEncounterComponent_Spawners* GetDefaultObj();

	void SortClusteredFilteredCreatureData(TArray<struct FEncounterCreatureData>& CreatureData);
	void InitializeBoundCreatureCounts(int32 MaxChallengeRating, TArray<struct FEncounterCreatureData>& CreatureData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterConditionContextInterface
class IEncounterConditionContextInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterConditionContextInterface* GetDefaultObj();

	class AActor* GetTargetActor();
};

// 0x38 (0x60 - 0x28)
// Class NWX.EncounterConditionContext
class UEncounterConditionContext : public UObject
{
public:
	uint8                                        Pad_8A9C[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UEncounterDataAsset*                   EncounterDataAsset;                                // 0x48(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                TargetActor;                                       // 0x50(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                               EncounterManager;                                  // 0x58(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterConditionContext* GetDefaultObj();

	class AActor* GetTargetActor();
	bool GetEncounterManager(class UObject** Manager);
};

// 0x8 (0x38 - 0x30)
// Class NWX.EncounterConditionDataAsset
class UEncounterConditionDataAsset : public UPrimaryDataAsset
{
public:
	class UConditionBehaviour*                   Condition;                                         // 0x30(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterConditionDataAsset* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class NWX.EncounterConditionProximityDataAsset
class UEncounterConditionProximityDataAsset : public UEncounterConditionDataAsset
{
public:
	float                                        ProximityModifier;                                 // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumRequiredPlayers;                                // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterConditionProximityDataAsset* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class NWX.EncounterConditionDayNightDataAsset
class UEncounterConditionDayNightDataAsset : public UEncounterConditionDataAsset
{
public:
	bool                                         bConditionTargetIsNight;                           // 0x38(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AA7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterConditionDayNightDataAsset* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class NWX.EncounterConditionPOITagListenerDataAsset
class UEncounterConditionPOITagListenerDataAsset : public UEncounterConditionDataAsset
{
public:
	struct FGameplayTag                          RequiredPOITag;                                    // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RequiredMatches;                                   // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSearchDistance;                                 // 0x44(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterConditionPOITagListenerDataAsset* GetDefaultObj();

};

// 0x1F0 (0x490 - 0x2A0)
// Class NWX.EncounterConfig
class AEncounterConfig : public AActor
{
public:
	uint8                                        Pad_8AB3[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnRegisteredEncounterIDChanged;                    // 0x2B8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UEncounterDataAsset*                   ScriptedEncounterDataAsset;                        // 0x2C8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldSpawnVaultDoors;                            // 0x2D0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AB5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevelAwareComponent*                  LevelAware;                                        // 0x2D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEncounterComponent_Relevant*          EncounterComponent_Relevant;                       // 0x2E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       DefaultRoot;                                       // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEncounterMapPinComponent*             MapPin;                                            // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UEncounterVaultDoorsDataAsset> EncounterVaultDoorsPath;                           // 0x2F8(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEncounterVaultDoorsDataAsset*         EncounterVaultDoorsAsset;                          // 0x320(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AGateActor*>                    SpawnedVaultDoors;                                 // 0x328(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                ExitGateActor;                                     // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IEncounterStructBuilderInterface> EncounterStructBuilderInterface;                   // 0x340(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                 GameplayTags;                                      // 0x350(0x20)(NativeAccessSpecifierPrivate)
	struct FEncounterLevelData                   EncounterLevelData;                                // 0x370(0x24)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FEncounterPlugData                    EncounterPlugData;                                 // 0x394(0x10)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8AB8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UEnvQuery*                             EQSQuery;                                          // 0x3A8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                 RegisteredEncounterID;                             // 0x3B0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8AB9[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UEncounterMarkupDataAsset*             MarkupAsset;                                       // 0x470(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8ABB[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEncounterConfig* GetDefaultObj();

	void TargetFinishEncounter();
	void OnLevelStreamingComplete();
	bool HasEncounterStarted();
	bool HasEncounterFinished();
	void HandlePostPersistenceLoaded(enum class E_WorldPersistenceLoadState LoadState);
	class AActor* GetExitGateActor();
	TScriptInterface<class IEncounterStructBuilderInterface> GetEncounterStructBuilderInterface();
	struct FEncounterLevelData GetEncounterLevelData();
};

// 0x0 (0x30 - 0x30)
// Class NWX.EncounterDetailsDataAssetBase
class UEncounterDetailsDataAssetBase : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UEncounterDetailsDataAssetBase* GetDefaultObj();

};

// 0x1C0 (0x1F0 - 0x30)
// Class NWX.EncounterDataAsset
class UEncounterDataAsset : public UDataAsset
{
public:
	uint8                                        Pad_8AC0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  Name;                                              // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DisplayName;                                       // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	TSubclassOf<class AEncounterBase>            EncounterClass;                                    // 0x58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GiveReward;                                        // 0x60(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GiveEssenceBundle;                                 // 0x61(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEncounterRewardType              EncounterRewardTypeOverride;                       // 0x62(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AC3[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEncounterConditionDataAsset*>  ConditionAssets;                                   // 0x68(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                     POITagRequirements;                                // 0x78(0x48)(Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ResetEncounter;                                    // 0xC4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AC4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ResetEncounterTimeout;                             // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AC5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEncounterComponentDataAsset*>  EncounterComponentDataAssets;                      // 0xD0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	TArray<class FString>                        UIEncounterTracks;                                 // 0xE0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        Pause;                                             // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WindDownPause;                                     // 0xF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEncounterDetailsDataAssetBase*        EncounterDetailsDataAsset;                         // 0xF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterRegistrationRequirements    EncounterRegistrationRequirements;                 // 0x100(0xB0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                          MusicArchetypeOverrideTag;                         // 0x1B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 UniqueID;                                          // 0x1B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULiveServicesDataTable> MapMarkersDataTablePath;                           // 0x1C8(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterDataAsset* GetDefaultObj();

};

// 0x60 (0x250 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetDynamicSpawning
class UEncounterArchetypeDataAssetDynamicSpawning : public UEncounterDataAsset
{
public:
	struct FEncounterSpawnerWaveData             DynamicSpawner;                                    // 0x1F0(0x60)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetDynamicSpawning* GetDefaultObj();

};

// 0x8 (0x1F8 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetOccupation
class UEncounterArchetypeDataAssetOccupation : public UEncounterDataAsset
{
public:
	bool                                         bIsMinorOccupation;                                // 0x1F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AC6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetOccupation* GetDefaultObj();

};

// 0x90 (0x280 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetArena
class UEncounterArchetypeDataAssetArena : public UEncounterDataAsset
{
public:
	struct FStructureAssetReference              RewardStructureReference;                          // 0x1F0(0x80)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutOfRangeTimeOutLength;                           // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AC9[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetArena* GetDefaultObj();

};

// 0x10 (0x200 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetDefense
class UEncounterArchetypeDataAssetDefense : public UEncounterDataAsset
{
public:
	int32                                        NumberOfNPCs;                                      // 0x1F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         EnableTrackingNPCs;                                // 0x1F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         EnableTrackingStructures;                          // 0x1F5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8ACA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefenseBetweenWaveLullTime;                        // 0x1F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8ACB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetDefense* GetDefaultObj();

};

// 0x8 (0x1F8 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetPortal
class UEncounterArchetypeDataAssetPortal : public UEncounterDataAsset
{
public:
	int32                                        MaxCompletedWaves;                                 // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CreatureSpawnDelay;                                // 0x1F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetPortal* GetDefaultObj();

};

// 0x8 (0x1F8 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetPuzzleGlyph
class UEncounterArchetypeDataAssetPuzzleGlyph : public UEncounterDataAsset
{
public:
	int32                                        PuzzlePieceCount;                                  // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8ACC[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetPuzzleGlyph* GetDefaultObj();

};

// 0x10 (0x200 - 0x1F0)
// Class NWX.EncounterArchetypeDataAssetPuzzleMemory
class UEncounterArchetypeDataAssetPuzzleMemory : public UEncounterDataAsset
{
public:
	int32                                        PuzzlePieceCount;                                  // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PuzzleTimeoutLength;                               // 0x1F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PuzzleAdvertisementLength;                         // 0x1F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8ACE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterArchetypeDataAssetPuzzleMemory* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.EncounterCreatureDataAsset
class UEncounterCreatureDataAsset : public UDataAsset
{
public:
	enum class EBiomeID                          BiomeId;                                           // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AD1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            BiomeCreatureData;                                 // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterCreatureDataAsset* GetDefaultObj();

};

// 0xA8 (0xE0 - 0x38)
// Class NWX.EncounterDataAssetValidationSettings
class UEncounterDataAssetValidationSettings : public UDeveloperSettings
{
public:
	TMap<TSoftClassPtr<class UEncounterComponentBase>, struct FEncounterComponentDependency> ComponentDataDependencyMappings;                   // 0x38(0x50)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class AEncounterBase>, struct FEncounterArechtypeValidationRules> ArchetypeRules;                                    // 0x88(0x50)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         AllowExtraneousComponentData;                      // 0xD8(0x1)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         AllowEncounterDetailsDataAssetToBeNull;            // 0xD9(0x1)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8AD6[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterDataAssetValidationSettings* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.EncounterRewardStructuresDataAsset
class UEncounterRewardStructuresDataAsset : public UDataAsset
{
public:
	TMap<enum class EPlugPalette, struct FStructureAssetReference> RewardStructures;                                  // 0x30(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterRewardStructuresDataAsset* GetDefaultObj();

};

// 0x58 (0x88 - 0x30)
// Class NWX.EncounterVaultDoorsDataAsset
class UEncounterVaultDoorsDataAsset : public UDataAsset
{
public:
	TMap<enum class EBiomeID, TSubclassOf<class AGateActor>> BiomeToDoorClassMap;                               // 0x30(0x50)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class AGateActor>                DefaultDoorClass;                                  // 0x80(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterVaultDoorsDataAsset* GetDefaultObj();

};

// 0x10 (0xB0 - 0xA0)
// Class NWX.EncounterDebugInfoComponent
class UEncounterDebugInfoComponent : public UActorComponent
{
public:
	TArray<struct FEncounterInstance>            DebugEncounterInstances;                           // 0xA0(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterDebugInfoComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterDirtyResetInterface
class IEncounterDirtyResetInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterDirtyResetInterface* GetDefaultObj();

	void PerformDirtyRealmReset();
};

// 0x10 (0x38 - 0x28)
// Class NWX.EncounterDistributionStage
class UEncounterDistributionStage : public UPOIDistributionStage
{
public:
	TArray<TSubclassOf<class UEncounterRuleLayer>> PrioritizedRuleClasses;                            // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterDistributionStage* GetDefaultObj();

};

// 0x90 (0xC0 - 0x30)
// Class NWX.EncounterDistributionSubsystem
class UEncounterDistributionSubsystem : public UWorldSubsystem
{
public:
	class URuntimeRealmPlacer*                   RuntimeRealmPlacer;                                // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPOIDistributionMapContext*            DistributionContext;                               // 0x38(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8AE1[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEncounterRuleLayer*>           PrioritizedRuleLayers;                             // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8AE2[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterDistributionSubsystem* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.EncounterFavourRegistry
class UEncounterFavourRegistry : public UDataAsset
{
public:
	TArray<struct FEncounterFavourData>          EncounterFavours;                                  // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterFavourRegistry* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterFunctionLibrary
class UEncounterFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEncounterFunctionLibrary* GetDefaultObj();

	class UObject* TryLoadSoftRef(struct FSoftObjectPath& AssetPath);
	bool IsPlugAnEncounter(struct FPOIPlugStreamingLevelDefinition& PlugDefinition, bool bConsiderDummyEncounters);
	void GetEncounterTypesFromRealmTags(struct FGameplayTagContainer& RealmTags, TArray<enum class EEncounterRewardType>& OutEncounterRewardTypes);
	struct FGameplayTag GetEncounterPaletteAVFXTag(enum class EPlugPalette Palette, enum class EFaction Faction);
	struct FGameplayTag GetEncounterArchetypeAVFXTag(enum class EEncounterType EncounterType);
	enum class EFaction ConvertEncounterRewardTypeToFaction(enum class EEncounterRewardType RewardType);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterGateInterface
class IEncounterGateInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterGateInterface* GetDefaultObj();

	void OpenGate();
	void OnGateFullyOpened();
	bool IsGateOpen();
	void CloseGate();
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterInterface
class IEncounterInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterInterface* GetDefaultObj();

	TScriptInterface<class IEncounterManagerInterface> GetEncounterManager();
	void FinishEncounter(bool bSuccess, class AEncounterConfig* OverridePOITarget);
};

// 0x2A8 (0x348 - 0xA0)
// Class NWX.EncounterManagerComponent
class UEncounterManagerComponent : public UActorComponent
{
public:
	uint8                                        Pad_8B40[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            CreatureData;                                      // 0xB0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         SpawnedEncountersArray;                            // 0xB8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEncounterIDState>             SpawnedEncounterStates;                            // 0xC8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEncounterTestDataLoaded;                         // 0xD8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnStructureRegistered;                             // 0xE8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnPlayerCountChanged;                              // 0xF8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterSpawned;                                // 0x108(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterStateChanged;                           // 0x118(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterFinished;                               // 0x128(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnRegisteredTargetRemoved;                         // 0x138(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnRegisteredTargetAdded;                           // 0x148(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnRealmEncountersUpdated;                          // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnRealmEncounterIDStatesUpdated;                   // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           OnRealmSettingsChangedDelegate;                    // 0x178(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterManagerDynamicDataAdded;                // 0x188(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterManagerDynamicDataRemoved;              // 0x198(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnEncounterManagerDynamicDataChanged;              // 0x1A8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UEncounterDataAsset*>           EncounterDataAssets;                               // 0x1B8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UEncounterCreatureDataAsset*>   CreatureDataAssets;                                // 0x1C8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                         bAutoLoadDefaultDataAssets;                        // 0x1D8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8B41[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentPlayerCount;                                // 0x1DC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        RegisteredTargets;                                 // 0x1E0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FEncounterInstance> RegisteredEncounterInstances;                      // 0x1F0(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FEncounterIDs>     POIEncounterIDs;                                   // 0x240(0x50)(NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                         PendingCancellationEncounterIDs;                   // 0x290(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuid>             ConditionToEncounterMap;                           // 0x2A0(0x50)(NativeAccessSpecifierPrivate)
	class UEncounterPOIPersistedObject*          POIPersistedObject;                                // 0x2F0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bEncounterAssetsLoaded;                            // 0x2F8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8B42[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        EncounterRegistrationQueue;                        // 0x300(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8B43[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterManagerComponent* GetDefaultObj();

	void OnWorldPersistenceLoadCompleteHandler(enum class E_WorldPersistenceLoadState LoadState);
	void OnStructureRegisteredHandler(class ANWXStructure* Structure);
	void OnRealmSettingsReady(struct FRealmSettings& NewRealmSettings);
	void OnPlayerCountUpdateHandler(int32 PlayerCount);
	void OnMenuRequestInitializeEncounterHandler(struct FGuid& EncounterID);
	void OnEncounterTargetDestroyed(class AActor* DestroyedActor);
	void OnEncounterStatusChangedHandler(class AEncounterBase* Encounter);
	void OnEncounterFinishHandler(class AEncounterBase* Encounter, bool bSuccess, bool bResetTriggers);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterManagerInterface
class IEncounterManagerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterManagerInterface* GetDefaultObj();

	void UpdatePlayerCount(int32 PlayerCount);
	void UnbindEventFromOnStructureRegistered(FDelegateProperty_& Event);
	void UnbindEventFromOnRegisteredTargetRemoved(FDelegateProperty_& Event);
	void UnbindEventFromOnRegisteredTargetAdded(FDelegateProperty_& Event);
	void UnbindEventFromOnManagerPlayerCountChanged(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterTestDataLoaded(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterStateChanged(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterSpawned(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterManagerDynamicDataRemoved(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterManagerDynamicDataChanged(FDelegateProperty_& Event);
	void UnbindEventFromOnEncounterFinished(FDelegateProperty_& Event);
	void UnbindEventFromEncounterManagerDynamicDataAdded(FDelegateProperty_& Event);
	void TestForceEncounterSpawnFromIndex(class AEncounterConfig* EncounterConfig, int32 Index);
	void TestForceEncounterSpawnFromDataAsset(class UEncounterDataAsset* EncounterData, bool* bSuccess, class AEncounterBase** SpawnedEncounter);
	void TestForceConfigEncounterSpawnFromAsset(class AEncounterConfig* EncounterConfig, class UEncounterDataAsset* Asset);
	void Telemetry_LogRemainingEncountersAtPOI(class AEncounterBase* Encounter);
	void SetTrackedActor(struct FGuid& EncounterID, class AActor* TrackedActor);
	void ResetEncounterManager();
	void ResetDirtyRealm();
	void RegisterEncounterTarget(class AActor* EncounterTarget);
	void RegisterDirtyRealmResettable(TScriptInterface<class IEncounterDirtyResetInterface>& Resettable);
	void MarkEncounterCompleteInPersistence(class AEncounterBase* Encounter);
	void LoadEncounterTestData();
	void LoadEncounterData();
	void GetRegisteredTargetsWithMarkupAsset(TSubclassOf<class UEncounterMarkupDataAsset>& RequiredMarkupAsset, TArray<class AActor*>* Targets);
	void GetEncounterPersistedObject(class UEncounterPOIPersistedObject** EncounterPersistedObject);
	void GetEncounterInstances(TArray<struct FEncounterInstance>* EncounterInstances);
	void GetEncounterDataAssets(TArray<class UEncounterDataAsset*>* DataAssets);
	void GetEncounterCreatureData(class UDataTable** DataTable);
	void GetCurrentPlayerCount(int32* PlayerCount);
	void FindEncounterInstance(class AEncounterBase* Encounter, bool* bSuccess, struct FEncounterInstance* Instance);
	void DeregisterEncounterTarget(class AActor* EncounterTarget);
	void ClearEncounterTestData();
	void ClearEncounters();
	void BindEventToOnStructureRegistered(FDelegateProperty_& Event);
	void BindEventToOnRegisteredTargetRemoved(FDelegateProperty_& Event);
	void BindEventToOnRegisteredTargetAdded(FDelegateProperty_& Event);
	void BindEventToOnOnEncounterManagerDynamicDataRemoved(FDelegateProperty_& Event);
	void BindEventToOnManagerPlayerCountChanged(FDelegateProperty_& Event);
	void BindEventToOnEncounterTestDataLoaded(FDelegateProperty_& Event);
	void BindEventToOnEncounterStateChanged(FDelegateProperty_& Event);
	void BindEventToOnEncounterSpawned(FDelegateProperty_& Event);
	void BindEventToOnEncounterManagerDynamicDataChanged(FDelegateProperty_& Event);
	void BindEventToOnEncounterManagerDynamicDataAdded(FDelegateProperty_& Event);
	void BindEventToOnEncounterFinished(FDelegateProperty_& Event);
};

// 0x70 (0x420 - 0x3B0)
// Class NWX.EncounterMapPinComponent
class UEncounterMapPinComponent : public UConditionalMapPinComponent
{
public:
	uint8                                        Pad_8B65[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AEncounterConfig*                      EncounterConfig;                                   // 0x3D8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEncounterDataAsset*                   EncounterDataAsset;                                // 0x3E0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class ULiveServicesDataTable> DataTablePath;                                     // 0x3E8(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  DefaultRow;                                        // 0x410(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEncounterWatcherComponent*            EncounterWatcherComponent;                         // 0x418(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterMapPinComponent* GetDefaultObj();

	void HandleTowerFinished();
	void HandleEncounterUpdated(struct FEncounterDynamicData& EncounterDynamicData);
	void HandleEncounterAdded(struct FEncounterDynamicData& EncounterDynamicData);
};

// 0x40 (0x70 - 0x30)
// Class NWX.EncounterMarkupDataAsset
class UEncounterMarkupDataAsset : public UDataAsset
{
public:
	enum class EEncounterRewardScale             RewardScale;                                       // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8B68[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXPlayerStart*                       UnlockableRespawnPoint;                            // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRespawnPointIsExclusive;                          // 0x40(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8B6A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   MapPinDataRow;                                     // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseConditionOr;                                   // 0x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8B6B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UConditionBehaviour*>           MapPinExposureConditions;                          // 0x60(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset* GetDefaultObj();

};

// 0x60 (0xD0 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Arena
class UEncounterMarkupDataAsset_Arena : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B6D[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ATargetPoint*                          ActivationButton;                                  // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATargetPoint*                          HECU;                                              // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActivationVolume*>             ActivationVolumes_Temp;                            // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        MovingPlatforms;                                   // 0xB0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Arena* GetDefaultObj();

};

// 0x40 (0xB0 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Build
class UEncounterMarkupDataAsset_Build : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B6F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ATargetPoint*                          Reward;                                            // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ANWXStructurePartProxyActor*>   Structures;                                        // 0x90(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Build* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class NWX.EncounterMarkupDataAsset_CreatureSpawning
class UEncounterMarkupDataAsset_CreatureSpawning : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B70[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_CreatureSpawning* GetDefaultObj();

};

// 0x40 (0xB0 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Defense
class UEncounterMarkupDataAsset_Defense : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B72[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ATargetPoint*                          HECU;                                              // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANWXStructurePartProxyActor*           ExtractionActor;                                   // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Defense* GetDefaultObj();

};

// 0x50 (0xC0 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Glyph
class UEncounterMarkupDataAsset_Glyph : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B74[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ATargetPoint*>                  Glyphs;                                            // 0x80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGlyphVolume*>                  Glyphs_Temp;                                       // 0x90(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATargetPoint*                          HECU;                                              // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xB0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Glyph* GetDefaultObj();

};

// 0x58 (0xC8 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Memory
class UEncounterMarkupDataAsset_Memory : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B75[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ATargetPoint*                          Center;                                            // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint*>                  MemoryPoints;                                      // 0x90(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActivationVolume*>             ActivationVolumes_Temp;                            // 0xA8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xB8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Memory* GetDefaultObj();

};

// 0x40 (0xB0 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Occupation
class UEncounterMarkupDataAsset_Occupation : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B77[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActivationVolume*>             ActivationVolumes_Temp;                            // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Occupation* GetDefaultObj();

};

// 0x20 (0x90 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Portal
class UEncounterMarkupDataAsset_Portal : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B79[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ADeploymentPortal*                     DeploymentPortal;                                  // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint_AI*>               Spawners;                                          // 0x80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Portal* GetDefaultObj();

};

// 0x38 (0xA8 - 0x70)
// Class NWX.EncounterMarkupDataAsset_Reachpoint
class UEncounterMarkupDataAsset_Reachpoint : public UEncounterMarkupDataAsset
{
public:
	uint8                                        Pad_8B7D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ATargetPoint*>                  ReachPoints;                                       // 0x80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATargetPoint*                          Reward;                                            // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActivationVolume*>             ActivationVolumes_Temp;                            // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterMarkupDataAsset_Reachpoint* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterMarkupInterface
class IEncounterMarkupInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterMarkupInterface* GetDefaultObj();

	class UEncounterMarkupDataAsset* GetMarkupDataAsset();
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterMarkupDataInterface_RewardProvider
class IEncounterMarkupDataInterface_RewardProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterMarkupDataInterface_RewardProvider* GetDefaultObj();

	class ATargetPoint* GetReward();
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterMarkupDataInterface_StructureProvider
class IEncounterMarkupDataInterface_StructureProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterMarkupDataInterface_StructureProvider* GetDefaultObj();

	TArray<class ANWXStructurePartProxyActor*> GetStructures();
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterMarkupDataInterface_SpawnerProvider
class IEncounterMarkupDataInterface_SpawnerProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterMarkupDataInterface_SpawnerProvider* GetDefaultObj();

	TArray<class ATargetPoint_AI*> GetSpawners();
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterMarkupDataInterface_ActivationVolumeProvider
class IEncounterMarkupDataInterface_ActivationVolumeProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterMarkupDataInterface_ActivationVolumeProvider* GetDefaultObj();

	TArray<class AActivationVolume*> GetActivationVolumes();
};

// 0xE8 (0x388 - 0x2A0)
// Class NWX.EncounterMusic
class AEncounterMusic : public AActor
{
public:
	class UAffinityTable*                        ATEncounterMusic;                                  // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IdleTickRate;                                      // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ActiveTickRate;                                    // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               EncounterAzimuthRTPC;                              // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               EncounterDistanceRTPC;                             // 0x2B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               EncounterIntensityRTPC;                            // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                 CombatEncounterTags;                               // 0x2C8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                 CustomIntensityTags;                               // 0x2E8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        EncounterIntensityValue;                           // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8BB4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AEncounterBase*                        ParentEncounter;                                   // 0x310(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          ArchetypeTag;                                      // 0x318(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          PaletteTag;                                        // 0x320(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EncounterRange;                                    // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EncounterFocusRange;                               // 0x32C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EEncounterMusicState              EncounterMusicState;                               // 0x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseSecondaryMusicState;                           // 0x331(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8BB7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UAkStateValue>          LastLoadingState;                                  // 0x338(0x28)(Edit, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkStateValue*                         DesiredAkState;                                    // 0x360(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8BB9[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEncounterMusic* GetDefaultObj();

	bool TryPlayStingerFromEncounter(class UAkAudioEvent* StingerEvent, bool bForcePlay);
	bool ShouldSpawnEncounterMusicActor(class AEncounterBase* Encounter);
	void ServerSetSecondaryMusicState(bool bSetActive);
	void ServerSetMusicIntensity(float NewIntensity);
	void ServerHandlEncounterCompleted(class AEncounterBase* Encounter, bool bSuccess, bool bResetTriggers);
	void ServerHandleEncounterStarted(class AEncounterBase* Encounter);
	void ServerHandleEncounterDestroyed(class AActor* DestroyedActor);
	void ServerHandleEncounterCombatStarted(class AEncounterBase* Encounter);
	void ServerHandleEncounterCombatEnded(class AEncounterBase* Encounter);
	void ServerDestroyMusicActorWhenSafe();
	void PostInitialization();
	void OnRep_PaletteTag();
	void OnRep_EncounterMusicState(enum class EEncounterMusicState OldState);
	void OnRep_bUseSecondaryMusicState();
	void OnRep_ArchetypeTag();
	bool IsCombatEncounter();
	void Initialize(class AEncounterBase* Encounter, enum class EEncounterState InitEncounterState, struct FGameplayTag& InitArchetypeTag, struct FGameplayTag& InitPaletteTag, float InitEncounterRange);
	bool HasCustomIntensityUpdateLogic();
	void HandleStingerLoadedAsync(class UAkAudioEvent* LoadedStinger);
	void HandleStateLoadedAsync(class UAkStateValue* LoadedState);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterPlaceableInterface
class IEncounterPlaceableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterPlaceableInterface* GetDefaultObj();

	void TriggerPlaceable();
	void TogglePlatformLooping(bool bIsLooping);
	void SetPlaceableState(enum class EEncounterPlaceableState NewState);
	void ResetPlaceable();
	void OnPlatformReachedDestination();
	enum class EEncounterPlaceableState GetPlaceableState();
};

// 0x1C0 (0x260 - 0xA0)
// Class NWX.EncounterProgressTracker
class UEncounterProgressTracker : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            EncounterDynamicDataChanged;                       // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            EncountersUpdated;                                 // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            MenuRequestInitializeEncounter;                    // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FEncounterDynamicDataSerializer       EncounterReplicator;                               // 0xD0(0x160)(Net, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8BD1[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterProgressTracker* GetDefaultObj();

	bool TryGetEncounterDynamicData(struct FGuid& EncounterID, struct FEncounterDynamicData* OutData);
	void PlayerInitializeEncounter(struct FGuid& EncounterID);
	void OnEncounterDynamicDataRemovedHandler(struct FGuid& EncounterID);
	void OnEncounterDynamicDataChangedHandler(struct FEncounterDynamicData& DynamicDataChanged);
	void OnEncounterDynamicDataAddedHandler(struct FEncounterDynamicData& DynamicDataAdded);
	void GetAllDynamicData(TArray<struct FEncounterDynamicData>* OutData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterRelevantInterface
class IEncounterRelevantInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterRelevantInterface* GetDefaultObj();

};

// 0x40 (0x2E0 - 0x2A0)
// Class NWX.EQSQuerierBase
class AEQSQuerierBase : public AActor
{
public:
	uint8                                        Pad_8BD3[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEQSQuerierBase* GetDefaultObj();

};

// 0x28 (0x308 - 0x2E0)
// Class NWX.EncounterRewardEQSQuerier
class AEncounterRewardEQSQuerier : public AEQSQuerierBase
{
public:
	uint8                                        Pad_8BD5[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEncounterRewardEQSQuerier* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterRewardFunctionLibrary
class UEncounterRewardFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEncounterRewardFunctionLibrary* GetDefaultObj();

	TArray<struct FInventoryEntry> GenerateItemRewards(enum class EEncounterRewardType RewardType, enum class EEncounterRewardScale RewardScale);
	TArray<struct FEncounterFavourData> GenerateFavourRewards(enum class EEncounterRewardType RewardType);
	TArray<struct FConditionalReward> GenerateConditionalRewards(enum class EEncounterRewardType RewardType, class UObject* WorldContextObject);
};

// 0xF0 (0x120 - 0x30)
// Class NWX.EncounterRewardRegistry
class UEncounterRewardRegistry : public UDataAsset
{
public:
	TMap<enum class EEncounterRewardType, class UItemReward*> ItemRewardMap;                                     // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)
	TMap<enum class EEncounterRewardScale, float> ItemRewardScale;                                   // 0x80(0x50)(Edit, NativeAccessSpecifierPrivate)
	TMap<enum class EEncounterRewardType, class UEncounterRewardDataAsset*> NonItemRewardMap;                                  // 0xD0(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterRewardRegistry* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.EncounterRuleLayer
class UEncounterRuleLayer : public UObject
{
public:
	class URuntimeRealmPlacer*                   RuntimeRealmPlacer;                                // 0x28(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPOIDistributionMapContext*            DistributionContext;                               // 0x30(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UEncounterRuleLayer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterStructBuilderInterface
class IEncounterStructBuilderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterStructBuilderInterface* GetDefaultObj();

	void RefreshStructureFromProxy(class ANWXStructurePartProxyActor* ProxyActor, enum class EStructureState DesiredStructureState);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterStructureInterface
class IEncounterStructureInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterStructureInterface* GetDefaultObj();

	void FinishSpawnFromContext(struct FStructureEncounterSpawnContext& SpawnContext);
};

// 0x8 (0x30 - 0x28)
// Class NWX.EncounterPersistenceObject
class UEncounterPersistenceObject : public UObject
{
public:
	uint8                                        Pad_8BE6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEncounterPersistenceObject* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.EncounterPersistenceObjectNPC
class UEncounterPersistenceObjectNPC : public UEncounterPersistenceObject
{
public:
	class AActor*                                LeaderNPC;                                         // 0x30(0x8)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        AdditionalNPCs;                                    // 0x38(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterPersistenceObjectNPC* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.EncounterPOIPersistedObject
class UEncounterPOIPersistedObject : public UObject
{
public:
	uint8                                        Pad_8BED[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FEncounterDataByPOI>           EncounterDataByPOI;                                // 0x30(0x10)(ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEncounterPOIPersistedObject* GetDefaultObj();

	void SetNumMemoryPuzzlePieces(struct FVector& Location, int32 NumPuzzlePieces);
	void SetNPCData(struct FVector& Location, class AActor* LeaderNPC);
	void SetEncounterUncompleted(struct FVector& Location, struct FGuid& UniqueID);
	void SetEncounterCompleted(struct FVector& Location, struct FGuid& UniqueID);
	void HasEncounterCompleted(struct FVector& Location, struct FGuid& UniqueID, bool* bHasCompleted);
	void GetNumMemoryPuzzlePieces(struct FVector& Location, int32* NumPuzzlePieces);
	class AActor* GetLeaderNPC(struct FVector& Location);
	void GetAdditionalNPC(struct FVector& Location, TArray<class AActor*>* AdditionalNPCs);
	void ClearEncounterData();
	void AddAdditionalNPC(struct FVector& Location, class AActor* AdditionalNPC);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EncounterUIDataInterface
class IEncounterUIDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEncounterUIDataInterface* GetDefaultObj();

	void GetEncounterTracks(TArray<class FString>* EncounterTracks);
	void GetEncounterDetailsDataAsset(class UEncounterDetailsDataAssetBase** EncounterDetailsAsset);
};

// 0x60 (0x88 - 0x28)
// Class NWX.EncounterWatcherPersistedObject
class UEncounterWatcherPersistedObject : public UObject
{
public:
	uint8                                        Pad_8BF1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsTowerEncounterFinished;                          // 0x30(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8BF2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FVector, struct FEncounterAssetGuids> DiscoveredEncounterMapPins;                        // 0x38(0x50)(SaveGame, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UEncounterWatcherPersistedObject* GetDefaultObj();

};

// 0xA0 (0x140 - 0xA0)
// Class NWX.EncounterWatcherComponent
class UEncounterWatcherComponent : public UActorComponent
{
public:
	uint8                                        Pad_8BF4[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TScriptInterface<class IEncounterManagerInterface> EncounterManagerInterface;                         // 0x128(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEncounterWatcherPersistedObject*      EncounterWatcherPersistedObject;                   // 0x138(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEncounterWatcherComponent* GetDefaultObj();

	void OnWorldPersistenceLoadCompleteHandler(enum class E_WorldPersistenceLoadState LoadState);
	void OnEncounterFinishedHandler(class UEncounterDataAsset* EncounterDataAsset, bool bSuccess);
	void OnEncounterDynamicDataRemovedHandler(struct FGuid& EncounterID);
	void OnEncounterDynamicDataChangedHandler(struct FEncounterDynamicData& DynamicDataChanged);
	void OnEncounterDynamicDataAddedHandler(struct FEncounterDynamicData& DynamicDataAdded);
};

// 0x20 (0xD8 - 0xB8)
// Class NWX.EntitlementsComponent
class UEntitlementsComponent : public UDelayedRegistrationComponent
{
public:
	TArray<class FString>                        EntitlementsSorted;                                // 0xB8(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                OwnerProfileId;                                    // 0xC8(0x10)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEntitlementsComponent* GetDefaultObj();

	void RefreshEntitlements_BP(FDelegateProperty_& OnComplete);
	bool HasEntitlement(const class FString& Entitlement);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EntitlementsFunctionLibrary
class UEntitlementsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEntitlementsFunctionLibrary* GetDefaultObj();

	bool PlayerHasEntitlement(class APlayerController* Controller, const class FString& Entitlement);
};

// 0x0 (0x28 - 0x28)
// Class NWX.TraitPresentationInterface
class ITraitPresentationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ITraitPresentationInterface* GetDefaultObj();

	class FText GeneratePresentationTextWithNoStructureContext(class UStructureTraitUIData* UIData);
	class FText GeneratePresentationText(struct FStructureData& StructureData, class UStructureTraitUIData* UIData);
};

// 0x18 (0x40 - 0x28)
// Class NWX.EnvironmentalInfluenceDataRefinement
class UEnvironmentalInfluenceDataRefinement : public UObject
{
public:
	uint8                                        Pad_8C07[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FRefinementTimeModifiers>      RefinementModifiers;                               // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataRefinement* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class NWX.StructureTraitStatusEffectData
class UStructureTraitStatusEffectData : public UObject
{
public:
	TSubclassOf<class UStructureTraitAuraStatusEffect> StatusEffectAura;                                  // 0x28(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStatusEffectDataAsset> AppliedStatusEffect;                               // 0x30(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitStatusEffectData* GetDefaultObj();

};

// 0x8 (0x60 - 0x58)
// Class NWX.StructureTraitTimedStatusEffectData
class UStructureTraitTimedStatusEffectData : public UStructureTraitStatusEffectData
{
public:
	float                                        BaseStatusEffectDuration;                          // 0x58(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8C0B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitTimedStatusEffectData* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.EnvironmentalInfluenceDataStatusEffect
class UEnvironmentalInfluenceDataStatusEffect : public UObject
{
public:
	uint8                                        Pad_8C0D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStructureTraitStatusEffectData*> AppliedStatusEffects;                              // 0x30(0x10)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataStatusEffect* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.EnvironmentalInfluenceDataCreatureSuppression
class UEnvironmentalInfluenceDataCreatureSuppression : public UObject
{
public:
	uint8                                        Pad_8C0F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 TargetSuppressionTags;                             // 0x30(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataCreatureSuppression* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.EnvironmentalInfluenceDataDisciplines
class UEnvironmentalInfluenceDataDisciplines : public UObject
{
public:
	uint8                                        Pad_8C14[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UDisciplineRecipeCollectionAsset>> CraftingDisciplines;                               // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataDisciplines* GetDefaultObj();

	void GetCraftingRecipeReferences(struct FStructureData& ContextStructureData, bool FilterByPowerLevel, TArray<struct FCraftingRecipeReference>* OutRecipeReferences);
};

// 0x18 (0x48 - 0x30)
// Class NWX.EnvironmentalInfluenceDataCraftingModifiers
class UEnvironmentalInfluenceDataCraftingModifiers : public UCraftingResultObject
{
public:
	uint8                                        Pad_8C17[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTagQueryItemAttributeModifierListBundle> ModifierBundles;                                   // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataCraftingModifiers* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.EnvironmentalInfluenceDataCraftingYieldModifiers
class UEnvironmentalInfluenceDataCraftingYieldModifiers : public UCraftingResultObject
{
public:
	uint8                                        Pad_8C18[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCraftedItemYieldModifier>     QuantityModifiers;                                 // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataCraftingYieldModifiers* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class NWX.EnvironmentalInfluenceDataTraitStackChange
class UEnvironmentalInfluenceDataTraitStackChange : public UObject
{
public:
	uint8                                        Pad_8C1B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UStructureTraitAsset>   TargetTrait;                                       // 0x30(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENWXMathOperation                 StackChangeType;                                   // 0x58(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        StackChange;                                       // 0x59(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8C1D[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataTraitStackChange* GetDefaultObj();

	bool GetTargetTraitData(struct FStructureTrait* OutTrait);
};

// 0x10 (0x38 - 0x28)
// Class NWX.EnvironmentalInfluenceDataGrowthRate
class UEnvironmentalInfluenceDataGrowthRate : public UObject
{
public:
	uint8                                        Pad_8C1E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ENWXMathOperation                 GrowthChangeType;                                  // 0x30(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8C1F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GrowthRatePercentage;                              // 0x34(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataGrowthRate* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class NWX.EnvironmentalInfluenceDataPets
class UEnvironmentalInfluenceDataPets : public UObject
{
public:
	uint8                                        Pad_8C20[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UPetsDataAsset>         PetDataAsset;                                      // 0x30(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvironmentalInfluenceDataPets* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.EnvironmentalInfluenceReceiver
class IEnvironmentalInfluenceReceiver : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IEnvironmentalInfluenceReceiver* GetDefaultObj();

	void UpdateRefinementModifier();
	void UpdateGrowthTime(class UEnvironmentalInfluenceDataGrowthRate* EnvironmentalInfluenceData, bool AddModifier);
	void UpdateCraftingModifiers(class UEnvironmentalInfluenceDataCraftingModifiers* EnvironmentalInfluenceData, bool AddModifier);
	void UpdateCraftingDisciplines(class UEnvironmentalInfluenceDataDisciplines* EnvironmentalInfluenceData, bool AddDisciplines);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EnvQueryContext_PosFromParams
class UEnvQueryContext_PosFromParams : public UEnvQueryContext
{
public:

	static class UClass* StaticClass();
	static class UEnvQueryContext_PosFromParams* GetDefaultObj();

};

// 0x20 (0x218 - 0x1F8)
// Class NWX.EnvQueryTest_FlatGround
class UEnvQueryTest_FlatGround : public UEnvQueryTest
{
public:
	float                                        SlopeAngle;                                        // 0x1F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        TraceDepth;                                        // 0x1FC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<enum class EPhysicalSurface>          AvoidedSurfaceTypes;                               // 0x200(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                         bLargeFootprintCheck;                              // 0x210(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8C31[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEnvQueryTest_FlatGround* GetDefaultObj();

};

// 0x8 (0x200 - 0x1F8)
// Class NWX.EnvQueryTest_OnValidNavMesh
class UEnvQueryTest_OnValidNavMesh : public UEnvQueryTest
{
public:
	int32                                        MinimumValidNavIslandArea;                         // 0x1F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8C33[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEnvQueryTest_OnValidNavMesh* GetDefaultObj();

};

// 0x10 (0x208 - 0x1F8)
// Class NWX.EnvQueryTest_PhysMat
class UEnvQueryTest_PhysMat : public UEnvQueryTest
{
public:
	TArray<enum class EPhysicalSurface>          PhysicalMaterialTypes;                             // 0x1F8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEnvQueryTest_PhysMat* GetDefaultObj();

};

// 0x10 (0x208 - 0x1F8)
// Class NWX.EnvQueryTest_UndesirableTerrain
class UEnvQueryTest_UndesirableTerrain : public UEnvQueryTest
{
public:
	TArray<TSubclassOf<class UNavArea>>          ExcludedAreaClasses;                               // 0x1F8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEnvQueryTest_UndesirableTerrain* GetDefaultObj();

};

// 0x8 (0x188 - 0x180)
// Class NWX.EQS_GEN_RotatableCone
class UEQS_GEN_RotatableCone : public UEnvQueryGenerator_Cone
{
public:
	float                                        PawnForwardRotation;                               // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8C39[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEQS_GEN_RotatableCone* GetDefaultObj();

};

// 0x20 (0xC0 - 0xA0)
// Class NWX.EquippableItemAudioComponent
class UEquippableItemAudioComponent : public UActorComponent
{
public:
	class UAkRtpc*                               FirstThirdPersonRTPC;                              // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          CurrentStatusEffect;                               // 0xA8(0x8)(Edit, BlueprintVisible, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         CurrentCrustLoopStart;                             // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         CurrentCrustLoopEnd;                               // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UEquippableItemAudioComponent* GetDefaultObj();

	void RemoveCurrentStatusEffectVFX();
	class AEquippableItem* GetOwnerAsEquippableItem();
	void ApplyStatusEffectVFX(struct FGameplayTag& StatusEffectTag);
};

// 0x90 (0xC0 - 0x30)
// Class NWX.ErrorMessagingConfigurationDataAsset
class UErrorMessagingConfigurationDataAsset : public UDataAsset
{
public:
	struct FErrorMessageConfiguration            DefaultErrorMessageConfiguration;                  // 0x30(0x40)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EErrorIds, struct FErrorMessageConfiguration> ErrorMessageConfigurations;                        // 0x70(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UErrorMessagingConfigurationDataAsset* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class NWX.ErrorMessagingSubsystem
class UErrorMessagingSubsystem : public ULocalPlayerSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnErrorMessageAdded;                               // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnErrorMessageRemoved;                             // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                StringPath_ErrorMessagingConfigurationDataAsset;   // 0x50(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8C47[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UErrorMessagingSubsystem* GetDefaultObj();

	bool RemoveError(class APlayerController* PlayerController, int32 ErrorID);
	bool PushError(class APlayerController* PlayerController, int32 ErrorID, const class FString& OptionalData);
	bool GetNextError(class APlayerController* PlayerController, struct FErrorMessageData* OutErrorMessageData);
	bool GetErrorMessage(class APlayerController* PlayerController, int32 ErrorID, const class FString& OptionalData, struct FErrorMessageData* OutErrorMessageData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.EssenceRewardFunctionLibrary
class UEssenceRewardFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEssenceRewardFunctionLibrary* GetDefaultObj();

	void GetRealmEssenceTypes(struct FRealmSettings& RealmSettings, TArray<struct FInventoryEntry>* Essences);
	TArray<struct FInventoryEntry> GetEssenceRewardsForCurrentRealm();
	TArray<struct FInventoryEntry> GenerateEssenceRewardsForResourceNode(int32 ResourcePowerLevel);
	TArray<struct FInventoryEntry> GenerateEssenceRewardsForHopeEcho();
	TArray<struct FInventoryEntry> GenerateEssenceRewardsForEncounter(enum class EEncounterRewardScale RewardScale);
	TArray<struct FInventoryEntry> GenerateEssenceRewardsForCreature();
	TArray<struct FInventoryEntry> GenerateEssenceRewardsForCodex();
};

// 0xB8 (0xE8 - 0x30)
// Class NWX.EssenceRewardRegistry
class UEssenceRewardRegistry : public UDataAsset
{
public:
	TArray<struct FEssenceDropParameters>        EssenceDrops;                                      // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<enum class EEssenceDropType, class UCurveFloat*> BaseDropTables;                                    // 0x40(0x50)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UCurveFloat*                           ResourceCoefficientCurve;                          // 0x90(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<enum class EEncounterRewardScale, float> EncounterRewardScaleMultiplier;                    // 0x98(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEssenceRewardRegistry* GetDefaultObj();

};

// 0x8 (0x2A8 - 0x2A0)
// Class NWX.EventPortal
class AEventPortal : public AActor
{
public:
	class ADeploymentPortal*                     DeploymentPortal;                                  // 0x2A0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AEventPortal* GetDefaultObj();

	void SetDeploymentPortal(class ADeploymentPortal* Portal);
};

// 0x10 (0x58 - 0x48)
// Class NWX.ExperienceStateDefinitionGroupDataAsset
class UExperienceStateDefinitionGroupDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	TArray<class UExperienceStateIDBuilder*>     ExperienceStates;                                  // 0x48(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UExperienceStateDefinitionGroupDataAsset* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.DataTableExperienceStateDefinitionSource
class UDataTableExperienceStateDefinitionSource : public UExperienceStateDefinitionSource
{
public:
	class UDataTable*                            Table;                                             // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDataTableExperienceStateDefinitionSource* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.DataTableExperienceStateIDBuilder
class UDataTableExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	struct FDataTableRowHandle                   RowHandle;                                         // 0x28(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDataTableExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(struct FDataTableRowHandle& DTRH);
};

// 0x10 (0x38 - 0x28)
// Class NWX.NWXEditorExtraDevMapListConfig
class UNWXEditorExtraDevMapListConfig : public UObject
{
public:
	TArray<class FString>                        Map;                                               // 0x28(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXEditorExtraDevMapListConfig* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.FeatureFilterDistributionStage
class UFeatureFilterDistributionStage : public UPOIDistributionStage
{
public:
	enum class EFeatureFlag                      RequiredFeatureFlag;                               // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAlwaysEnable;                                     // 0x29(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8C53[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        POIDirectoriesToFilter;                            // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        PlugDirectoriesToFilter;                           // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UFeatureFilterDistributionStage* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.FileBPFunctionLibrary
class UFileBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UFileBPFunctionLibrary* GetDefaultObj();

	bool SaveStringArrayToFile(const class FString& SaveDirectory, const class FString& Filename, TArray<class FString>& TextStringArray);
	class FString ReadFile(const class FString& FilePath);
	bool FileExists(const class FString& FilePath);
	bool DirectoryExists(const class FString& FilePath);
	void DeleteFile(const class FString& FilePath);
	void CreateDirectory(const class FString& FilePath);
};

// 0x0 (0xF8 - 0xF8)
// Class NWX.FirstTimePlayerSetupComponent
class UFirstTimePlayerSetupComponent : public UPersistentDataComponent
{
public:

	static class UClass* StaticClass();
	static class UFirstTimePlayerSetupComponent* GetDefaultObj();

};

// 0x90 (0xC0 - 0x30)
// Class NWX.FishDataAsset
class UFishDataAsset : public UDataAsset
{
public:
	struct FFish                                 Fish;                                              // 0x30(0x90)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UFishDataAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.FishAssetRegistry
class UFishAssetRegistry : public UGameInstanceSubsystem
{
public:
	uint8                                        Pad_8C5D[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFishAssetRegistry* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.FishingFunctionLibrary
class UFishingFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UFishingFunctionLibrary* GetDefaultObj();

	bool SelectFish(class UObject* WorldContextObject, float Depth, struct FFish* OutFish);
	void GetFishFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, struct FFish* Fish);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromFish(struct FFish& Fish);
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.FlankerComponent
class UFlankerComponent : public UActorComponent
{
public:
	float                                        FlankingLocationOffsetPercentage;                  // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRegisterForFlanking;                              // 0xA4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8C6A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class UFlankingManagerComponent> Manager;                                           // 0xA8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                 FlankerPawn;                                       // 0xB0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                 FlankerGuid;                                       // 0xB8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8C6C[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFlankerComponent* GetDefaultObj();

	void UnregisterWithManager();
	void RegisterWithManager(class UFlankingManagerComponent* NewManager);
	void InitializeFlankerPawn();
	class UFlankingManagerComponent* GetFlankingManager();
	int32 GetFlankerNumber();
};

// 0x158 (0x1F8 - 0xA0)
// Class NWX.FlankingManagerComponent
class UFlankingManagerComponent : public UActorComponent
{
public:
	float                                        MaxDestinationDistanceFromTarget;                  // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxApproachAngle;                                  // 0xA4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmallestPossibleAngle;                             // 0xA8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngleSeparation;                                   // 0xAC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinFlankerAmount;                                  // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AngleBuckets;                                      // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFlankerComponent*>             Flankers;                                          // 0xB8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class UFlankerComponent*, int32>        FlankerNumbers;                                    // 0xC8(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class UFlankerComponent*> FlankersByGuid;                                    // 0x118(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8C85[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFlankingManagerComponent* GetDefaultObj();

	void UnregisterFlanker(class UFlankerComponent* Flanker);
	void RegisterFlanker(class UFlankerComponent* Flanker);
	bool IsThereEnoughFlankersToStartFlanking();
	void InternalUnregisterFlanker(struct FGuid& FlankerId);
	TArray<class UFlankerComponent*> GetFlankers();
	int32 GetFlankerNumber(class UFlankerComponent* Flanker);
};

// 0x80 (0x120 - 0xA0)
// Class NWX.FoliageEffectsComponent
class UFoliageEffectsComponent : public UActorComponent
{
public:
	float                                        SweepRadius;                                       // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8C8A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, float>                     BoneColliders;                                     // 0xA8(0x50)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                        ActivationDistance;                                // 0xF8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8C8C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         CanTriggerFoliageAudio;                            // 0x100(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8C8E[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFoliageEffectsComponent* GetDefaultObj();

	void OnOwnerJoined(class ULocalPlayer* NewPlayer);
};

// 0x390 (0x430 - 0xA0)
// Class NWX.FootstepComponent
class UFootstepComponent : public UActorComponent
{
public:
	struct FGameplayTag                          FootstepTypeTag;                                   // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FootstepTriggerCooldown;                           // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 GroundTraceChannel;                                // 0xAC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETraceTypeQuery                   WaterTraceChannel;                                 // 0xAD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8CCC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GroundTraceOffset;                                 // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GroundTraceDistance;                               // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAffinityTable*                        FootstepAudioAffinityTable;                        // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComponentAudioBucket*                 BodyAudioBucket;                                   // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               MovementSpeedRTPC;                                 // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterDepthRTPC;                                    // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterDepthNSRTPC;                                  // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkSwitchValue*                        FrontFootSwitch;                                   // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkSwitchValue*                        RearFootSwitch;                                    // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               RearFootRTPC;                                      // 0xF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UComponentAudioBucket*, float>    RearFootRTPCValues;                                // 0xF8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                        FocusRankThresholdForFootsteps;                    // 0x148(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FocusRankThresholdForVFX;                          // 0x14C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 MantlingTraceChannel;                              // 0x150(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8CCD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MantlingTraceDistance;                             // 0x154(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MantlingTraceHalfHeight;                           // 0x158(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MantlingTraceRadius;                               // 0x15C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8CD0[0x2D0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFootstepComponent* GetDefaultObj();

	void TryTriggerFootstepNextTick(struct FGameplayTag& LocomotionTag, uint8 FootType, class USkeletalMeshComponent* SkeletalMesh, bool OverrideVelocity, float OverrideVelocityAmount);
	bool TryTriggerFootstep(struct FGameplayTag& LocomotionTag, uint8 FootType, class USkeletalMeshComponent* SkeletalMesh, bool OverrideVelocity, float OverrideVelocityAmount);
	bool TryQueryFootstepAffinityTable(struct FGameplayTag& InLocomotionTag, struct FGameplayTag& InFootstepTypeTag, struct FFootstepAudioData* OutFootstepAudioData);
	void SetSurfaceWetnessRTPC(class UAkComponent* AkComponent, class UPhysicalMaterial* PhysMat, class UAkSwitchValue* SurfaceSwitch);
	void ResetFootstepCooldown(uint8 FootType, struct FGameplayTag& LocomotionTag);
	void OverrideFootstepTypeTag(struct FGameplayTag& NewFootstepTypeTag);
	void HandleMovementModeChanged(class ACharacter* Character, enum class EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void HandleMantlingStarted();
	void HandleMantlingEnded();
	float GetRearFootRTPCValue(class UComponentAudioBucket* AudioBucket);
	class UCharacterMovementComponent* GetMovementComponent();
	class UAkSwitchValue* GetFrontRearFootSwitch(class UComponentAudioBucket* AudioBucket);
	class UPhysicalMaterial* GetCurrentSurfacePhysmat();
	class UComponentAudioBucket* GetAudioBucketForFoot(uint8 FootType);
	void FootstepSpawnVFXDisplay(class AActor* SteppingActor, class USkeletalMeshComponent* MeshComp, class FName& FootstepSocket, struct FGameplayTag& FootstepStypeTag, float WaterDepth, struct FVector& WaterHitNormal, struct FVector& WaterHitLocation, struct FGameplayTag& LocomotionTag);
	bool CanTriggerFootstep(uint8 FootType, struct FGameplayTag& LocomotionTag);
};

// 0x10 (0x2B0 - 0x2A0)
// Class NWX.FXInfo
class AFXInfo : public AInfo
{
public:
	TArray<struct FFXData>                       Data;                                              // 0x2A0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AFXInfo* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.GameplayEffectUIObservable
class IGameplayEffectUIObservable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGameplayEffectUIObservable* GetDefaultObj();

	void UnbindDelegate_OnUIGameplayEffectRemoved(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnUIGameplayEffectInhibited(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnUIGameplayEffectAdded(FDelegateProperty_& Delegate);
	void BindDelegate_OnUIGameplayEffectRemoved(FDelegateProperty_& Delegate);
	void BindDelegate_OnUIGameplayEffectInhibited(FDelegateProperty_& Delegate);
	void BindDelegate_OnUIGameplayEffectAdded(FDelegateProperty_& Delegate);
};

// 0x98 (0xC8 - 0x30)
// Class NWX.GameplayEffectVolumeDataAsset
class UGameplayEffectVolumeDataAsset : public UDataAsset
{
public:
	class URequirement*                          TriggerRequirements;                               // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>   Effects;                                           // 0x38(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bUseClientPredictedAVFX;                           // 0x48(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CDF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVolumeAVFXDataAsset*                  LoopAVFX;                                          // 0x50(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  TriggeredAVFX;                                     // 0x58(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTelemetryDataAsset*             TriggeredTelemetry;                                // 0x60(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDestroyUponTriggering;                            // 0x68(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDamageUponTriggering;                             // 0x69(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CE0[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseDamage;                                        // 0x6C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DamageCurve_RealmPower;                            // 0x70(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DamageCurve_MagicRating;                           // 0x78(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 DamageEffectTags;                                  // 0x80(0x20)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        KnockbackStrength;                                 // 0xA0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CE1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           KnockbackCurve;                                    // 0xA8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDamageAllWithinRadius;                            // 0xB0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CE2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InnerDamageRadius;                                 // 0xB4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterDamageRadius;                                 // 0xB8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableVolumeOnTrigger;                           // 0xBC(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CE3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DisableVolumeTimeout;                              // 0xC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8CE4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameplayEffectVolumeDataAsset* GetDefaultObj();

};

// 0x68 (0x308 - 0x2A0)
// Class NWX.GameplayEffectVolume
class AGameplayEffectVolume : public AActor
{
public:
	uint8                                        Pad_8CE8[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameplayEffectVolumeDataAsset*        DataAsset;                                         // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2C8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          DisableVolumeTimerHandle;                          // 0x2D0(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          DestroyVolumeTimerHandle;                          // 0x2D8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bDisabled;                                         // 0x2E0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8CE9[0x27];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameplayEffectVolume* GetDefaultObj();

	void Server_HandleCollisionVolumeOverlap(class AActor* Actor);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnDestroyVolumePostDelay();
	void Multicast_PlayTriggeredAVFX();
	void EndDisableVolumeTimeout();
	void Client_PredictTriggeredEffect(class AActor* Actor);
};

// 0x0 (0x28 - 0x28)
// Class NWX.GameplayTagCountMapFunctionLibrary
class UGameplayTagCountMapFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UGameplayTagCountMapFunctionLibrary* GetDefaultObj();

	TArray<int32> Values(struct FGameplayTagCountMap& GameplayTagCountMap);
	void Remove(struct FGameplayTagCountMap& GameplayTagCountMap, struct FGameplayTag& Tag);
	struct FGameplayTagCountMap MakeGameplayTagCountMap(TArray<struct FGameplayTag>& Tags, TArray<int32>& Counts);
	int32 Length(struct FGameplayTagCountMap& GameplayTagCountMap);
	TArray<struct FGameplayTag> Keys(struct FGameplayTagCountMap& GameplayTagCountMap);
	bool IsValid(struct FGameplayTagCountMap& GameplayTagCountMap);
	bool Find(struct FGameplayTagCountMap& GameplayTagCountMap, struct FGameplayTag& Tag, int32* Count);
	bool Contains(struct FGameplayTagCountMap& GameplayTagCountMap, struct FGameplayTag& Tag);
	void Clear(struct FGameplayTagCountMap& GameplayTagCountMap);
	void Add(struct FGameplayTagCountMap& GameplayTagCountMap, struct FGameplayTag& Tag, int32 Count);
};

// 0x0 (0x28 - 0x28)
// Class NWX.GameplayTagCountMapGenericReplicatedDataFunctionLibrary
class UGameplayTagCountMapGenericReplicatedDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UGameplayTagCountMapGenericReplicatedDataFunctionLibrary* GetDefaultObj();

	void GetGenericReplicatedDataAsGameplayTagCountMap(struct FGenericReplicatedDataHandle& GenericReplicatedData, int32 Index, bool* HasGameplayTagCountMap, struct FGameplayTagCountMap* GameplayTagCountMap);
	struct FGenericReplicatedDataHandle GenericReplicatedDataFromGameplayTagCountMap(struct FGameplayTagCountMap& GameplayTagCountMap);
};

// 0x0 (0x28 - 0x28)
// Class NWX.GameplayTagWriterInterface
class IGameplayTagWriterInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGameplayTagWriterInterface* GetDefaultObj();

	void AddGameplayTags(struct FGameplayTagContainer& TagContainer);
	void AddGameplayTag(struct FGameplayTag& Tag);
};

// 0x0 (0x2C0 - 0x2C0)
// Class NWX.GamerTagComponent
class UGamerTagComponent : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UGamerTagComponent* GetDefaultObj();

	class FString GetGamerTag();
};

// 0x8 (0x38 - 0x30)
// Class NWX.AtmosphereColorTempData
class UAtmosphereColorTempData : public UDataAsset
{
public:
	int32                                        ColorMaster;                                       // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ColorSelect;                                       // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAtmosphereColorTempData* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.BiomeColorData
class UBiomeColorData : public UDataAsset
{
public:
	int32                                        RapidColorBiome;                                   // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RapidColorAdjust;                                  // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBiomeColorData* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.AtmosphereIntensityData
class UAtmosphereIntensityData : public UDataAsset
{
public:
	int32                                        Atmosphere;                                        // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FogDay;                                            // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FogNight;                                          // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FogVolumeLevel;                                    // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAtmosphereIntensityData* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.CelestialMultiMoonData
class UCelestialMultiMoonData : public UDataAsset
{
public:
	int32                                        SecondaryMoon;                                     // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SecondaryMoonType;                                 // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCelestialMultiMoonData* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.CelestialRingsData
class UCelestialRingsData : public UDataAsset
{
public:
	int32                                        Rings;                                             // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RingType;                                          // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCelestialRingsData* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.CelestialFaeSkyData
class UCelestialFaeSkyData : public UDataAsset
{
public:
	int32                                        FaeMagicToggle;                                    // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FaeMagicAltToggle;                                 // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCelestialFaeSkyData* GetDefaultObj();

};

// 0x70 (0x98 - 0x28)
// Class NWX.GameRule_ApplyEnvironmentEffect
class UGameRule_ApplyEnvironmentEffect : public UGameRuleRealm
{
public:
	class FText                                  Description;                                       // 0x28(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAtmosphereColorTempData*              AtmosphereColorTemperature;                        // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBiomeColorData*                       BiomeColor;                                        // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CelestialType;                                     // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D00[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAtmosphereIntensityData*              AtmosphereIntensity;                               // 0x58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Cloud;                                             // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CloudColor;                                        // 0x64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Season;                                            // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D01[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCelestialMultiMoonData*               CelestialMultiMoon;                                // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCelestialRingsData*                   CelestialRings;                                    // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Aurora;                                            // 0x80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D02[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCelestialFaeSkyData*                  CelestialFaeSky;                                   // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Rain;                                              // 0x90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TimeDilationCurve;                                 // 0x94(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGameRule_ApplyEnvironmentEffect* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.GameRule_ApplyPlayerState
class UGameRule_ApplyPlayerState : public UGameRulePlayer
{
public:
	struct FGameplayTag                          StateTag;                                          // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGameRule_ApplyPlayerState* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.GameRule_ApplyPlayerStates
class UGameRule_ApplyPlayerStates : public UGameRulePlayer
{
public:
	struct FGameplayTagContainer                 StateTags;                                         // 0x28(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGameRule_ApplyPlayerStates* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.GameRule_ApplyPlayerStatusEffects
class UGameRule_ApplyPlayerStatusEffects : public UGameRulePlayer
{
public:
	TArray<struct FStatusEffectSpec>             StatusEffects;                                     // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D06[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameRule_ApplyPlayerStatusEffects* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class NWX.GameRule_ApplyStructureTraits
class UGameRule_ApplyStructureTraits : public UGameRuleRealm
{
public:
	TArray<class UStructureTraitAsset*>          AppliedStructureTraits;                            // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D0C[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameRule_ApplyStructureTraits* GetDefaultObj();

	void OnStructureUnregistered(class ANWXStructure* Structure);
	void OnNewStructureRegistered(class ANWXStructure* Structure);
};

// 0x88 (0xB0 - 0x28)
// Class NWX.GameRule_GiveQuest
class UGameRule_GiveQuest : public UGameRulePlayer
{
public:
	uint8                                        Pad_8D0F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuestAssetReference                  QuestReference;                                    // 0x30(0x70)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D10[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameRule_GiveQuest* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemRewardModifier
class UItemRewardModifier : public UObject
{
public:

	static class UClass* StaticClass();
	static class UItemRewardModifier* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemRewardModifier_Addition
class UItemRewardModifier_Addition : public UItemRewardModifier
{
public:
	class UItemReward*                           AdditionalReward;                                  // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemRewardModifier_Addition* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemRewardModifier_Replacement
class UItemRewardModifier_Replacement : public UItemRewardModifier
{
public:
	class UItemConstraintDataAsset*              Constraint;                                        // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UItemReward*                           NewReward;                                         // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemRewardModifier_Replacement* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemRewardModifier_QuantityChange
class UItemRewardModifier_QuantityChange : public UItemRewardModifier
{
public:
	class UItemConstraintDataAsset*              Constraint;                                        // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EQuantityChangeType               ChangeType;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D16[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ChangeAmount;                                      // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemRewardModifier_QuantityChange* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.GameRule_ItemRewardModifier
class UGameRule_ItemRewardModifier : public UGameRuleRealm
{
public:
	TArray<struct FItemRewardModifierData>       RewardModifiers;                                   // 0x28(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FText                                  ModifierDescription;                               // 0x38(0x18)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UGameRule_ItemRewardModifier* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.GameRule_PredicatedPlayerRule
class UGameRule_PredicatedPlayerRule : public UGameRulePlayer
{
public:
	class URequirement*                          Predicate;                                         // 0x28(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameRulePlayer*                       Rule;                                              // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D19[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameRule_PredicatedPlayerRule* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.GameRule_PreventClimbing
class UGameRule_PreventClimbing : public UGameRulePlayer
{
public:

	static class UClass* StaticClass();
	static class UGameRule_PreventClimbing* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.GameRule_PreventSetRespitePoint
class UGameRule_PreventSetRespitePoint : public UGameRulePlayer
{
public:

	static class UClass* StaticClass();
	static class UGameRule_PreventSetRespitePoint* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.GameRule_RemovePlayerGameplayEffectByTag
class UGameRule_RemovePlayerGameplayEffectByTag : public UGameRulePlayer
{
public:
	struct FGameplayTag                          EffectTag;                                         // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGameRule_RemovePlayerGameplayEffectByTag* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.GameRule_RemovePlayerStatusEffects
class UGameRule_RemovePlayerStatusEffects : public UGameRulePlayer
{
public:
	TArray<class UStatusEffectDataAsset*>        StatusEffects;                                     // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         RemoveAll;                                         // 0x38(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D20[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameRule_RemovePlayerStatusEffects* GetDefaultObj();

};

// 0x0 (0x358 - 0x358)
// Class NWX.GASProjectile
class AGASProjectile : public ANWXActor
{
public:

	static class UClass* StaticClass();
	static class AGASProjectile* GetDefaultObj();

};

// 0x60 (0x300 - 0x2A0)
// Class NWX.GateActor
class AGateActor : public AActor
{
public:
	uint8                                        Pad_8D23[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGateActor* GetDefaultObj();

};

// 0x58 (0x88 - 0x30)
// Class NWX.GlyphVolumeDataAsset
class UGlyphVolumeDataAsset : public UDataAsset
{
public:
	bool                                         bStartDisabled;                                    // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D24[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URequirement*                          InteractionRequirements;                           // 0x38(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>          InteractionAbility;                                // 0x40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractionFeedback;                               // 0x48(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  LoopAVFX;                                          // 0x60(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRandomizeGlyphLetters;                            // 0x68(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D26[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                GlyphLetters;                                      // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  InteractedAVFX;                                    // 0x80(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGlyphVolumeDataAsset* GetDefaultObj();

};

// 0x68 (0x308 - 0x2A0)
// Class NWX.GlyphVolume
class AGlyphVolume : public AActor
{
public:
	uint8                                        Pad_8D29[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGlyphVolumeDataAsset*                 DataAsset;                                         // 0x2A8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2B0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2B8(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAbilitySystemComponent*            AbilitySystem;                                     // 0x2C8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasBeenInteractedWith;                            // 0x2D0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsActive;                                         // 0x2D1(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D2A[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                GlyphLetters;                                      // 0x2D8(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D2B[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGlyphVolume* GetDefaultObj();

	void TryInteract(class AActor* OtherActor);
	void RegisterForGlyphEvents(FDelegateProperty_& Delegate);
	void OnRep_IsActive(bool bPreviousIsActive);
	void OnRep_HasBeenInteractedWith();
	void OnRep_GlyphLetters();
	void OnLocalPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	bool IsInteractable();
	bool HasBeenInteractedWith();
	class FText GetInteractionFeedback();
	void ForceInteract();
	void FireCompletionFlourishAVFX();
	void DeregisterForGlyphEvents(FDelegateProperty_& Delegate);
	void CopyLettersFromVolume(class AGlyphVolume* OtherVolume);
	void ActivateGlyph();
};

// 0x48 (0x2F0 - 0x2A8)
// Class NWX.GridComponentProxy
class UGridComponentProxy : public USceneComponent
{
public:
	enum class ESnapType                         SnapType;                                          // 0x2A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D30[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class USnapRulesEnforcer>        SnapRulesEnforcerClass;                            // 0x2B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USupportRulesEnforcer>     SupportRulesEnforcerClass;                         // 0x2B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlacementRequiresSnap;                            // 0x2C0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanBeSupportedByAdjacency;                        // 0x2C1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanSupportOtherPieces;                            // 0x2C2(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D31[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSnapPointProxyData                   SnapPointProxyData;                                // 0x2C8(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UGridComponentProxy* GetDefaultObj();

	void WriteSnapDataFromProxy(class UStructureDataAsset* StructureDataAsset, struct FStructureData& InStructureData, struct FStructureData* OutStructureData);
	void InitializeSnapPoints(class USnapPointDataAsset* PrimarySnapData);
	void GetAllSnapPoints(TArray<struct FGridPoint>* Points);
};

// 0x60 (0x100 - 0xA0)
// Class NWX.GroupComponentBase
class UGroupComponentBase : public UActorComponent
{
public:
	class FString                                OwnerProfileId;                                    // 0xA0(0x10)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                        GroupIds;                                          // 0xB0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D38[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSetupCompleteDelegate;                           // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGroupsUpdated;                                   // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D39[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGroupComponentBase* GetDefaultObj();

	void RemoveFromGroup(const class FString& GroupID, class APlayerState* Player, FDelegateProperty_ Complete);
	void RefreshGroups();
	void OnRep_Groups();
	bool IsInGroup(const class FString& GroupID);
	TArray<class FString> GetGroups();
	class FString GetGroupName(const class FString& GroupID);
	void GetGroupDetails(const class FString& GroupID, FDelegateProperty_ Complete);
	void CreateGroup(const class FString& GroupName, FDelegateProperty_ Complete);
	void AddToGroup(const class FString& GroupID, class APlayerState* Player, FDelegateProperty_ Complete);
};

// 0x118 (0x1B8 - 0xA0)
// Class NWX.GuideBookComponent
class UGuideBookComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnGuideBookSearchStringUpdated;                    // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookCategoryChanged;                        // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookFilteredEntriesEmptied;                 // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookFilteredEntriesUpdated;                 // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookFilteredEntriesCompleted;               // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookCategoryEntryObservationStateUpdated;   // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnNavigatingToRelatedEntry;                        // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGuideBookEntrySelected;                          // 0x110(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        SearchStringUpdateTime;                            // 0x120(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SearchStringUpdateTimeIfEmpty;                     // 0x124(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                  GuideBookCategoryOrdering;                         // 0x128(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_8D50[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidget*                               LastSelectedWidgetEntry;                           // 0x158(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D52[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGameplayTag, class UNWXMenuDataEntry*> LastSelectedEntries;                               // 0x168(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UGuideBookComponent* GetDefaultObj();

	void SetSearchString(const class FString& NewSearchString);
	void SetSearching(bool IsSearching);
	void SetLastSelectedWidgetEntry(class UWidget* Entry);
	void SetLastSelectedEntryForCategory(struct FGameplayTag& Category, class UNWXMenuDataEntry* Entry);
	void SetFilterRefreshesPermissions(bool bAllowFilterAutoRefreshes);
	void RemoveFilterFromCategory(struct FGameplayTag& CategoryTag, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	void RemoveAllRemovableFiltersFromCategory(struct FGameplayTag& CategoryTag);
	void ReadAllEntriesInCategory(struct FGameplayTag& CategoryTag);
	void OnSearchStringTimerFinished();
	void OnGuideBookCategoryObservableStateUpdated(struct FGameplayTag& Category, int32 NumObservableEntries);
	void OnGuideBookCategoryFilteredEntriesUpdated(struct FGameplayTag& Category, class UNWXMenuDataEntry* NewFilteredEntry);
	void OnGuideBookCategoryFilteredEntriesEmptied(struct FGameplayTag& Category);
	void OnGuideBookCategoryFilteredEntriesCompleted(struct FGameplayTag& Category, int32 TotalResults);
	void NavigateToEntryInCategory(struct FGameplayTag& NewCategory, class UNWXMenuDataEntry* Entry);
	bool IsSearchStringEmpty();
	bool IsSearching();
	bool IsFilterActiveForCategory(struct FGameplayTag& CategoryTag, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	void InitializeLastSelectedEntries();
	class FString GetSearchString();
	TArray<struct FMenuDataRelevantFilter> GetRelevantFiltersForCategory(struct FGameplayTag& CategoryTag);
	class ANWXPlayerState* GetOwningPlayerState();
	class ANWXPlayerController* GetOwningPlayerController();
	int32 GetNumObservableEntriesForCategory(struct FGameplayTag& CategoryTag);
	class UWidget* GetLastSelectedWidgetEntry();
	class UNWXMenuDataEntry* GetLastSelectedEntryForCategory(struct FGameplayTag& Category);
	int32 GetFilteredEntryCountByCategory(struct FGameplayTag& CategoryTag);
	void GetFilteredEntriesByCategory(struct FGameplayTag& CategoryTag, TArray<class UNWXMenuDataEntry*>* OutEntries);
	struct FGameplayTag GetDefaultCategory();
	TArray<struct FGameplayTag> GetCategoryOrdering();
	void GetAllEntriesByCategory(struct FGameplayTag& CategoryTag, TArray<class UNWXMenuDataEntry*>* OutEntries);
	struct FGameplayTag GetActiveCategory();
	class UNWXMenuDataEntry* FindEntryWithIDFromCategory(struct FGameplayTag& CategoryTag, struct FGuid& EntryID);
	void ChangeActiveCategory(struct FGameplayTag& NewCategory);
	void AddFilterToCategory(struct FGameplayTag& CategoryTag, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
};

// 0xC0 (0x160 - 0xA0)
// Class NWX.HarvestableGeomAudioComponent
class UHarvestableGeomAudioComponent : public UActorComponent
{
public:
	enum class ECollisionChannel                 GroundTraceChannel;                                // 0xA0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 WaterTraceChannel;                                 // 0xA1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8D5B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AudioRadiusFactor;                                 // 0xA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxAudioRadius;                                    // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AudioDelayFactor;                                  // 0xAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxAudioDelay;                                     // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MultipositionTraceOffset;                          // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MultipositionTraceDistance;                        // 0xB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumMultipositions;                                 // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         InitialBreakAudioEvent;                            // 0xC0(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         LandDebrisAudioEvent;                              // 0xC8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         WaterDebrisAudioEvent;                             // 0xD0(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8D5D[0x88];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHarvestableGeomAudioComponent* GetDefaultObj();

	void PlayInitialBreakAudio(class UAkAudioEvent* AudioEvent, struct FVector& BreakPosition, int32 NumDisplacedParticles);
	void PlayDebrisAudio(class UAkAudioEvent* AudioEvent, TArray<struct FVector>& MultiPositions, float PercentageOfParticles, int32 NumDisplacedParticles, float WaterDepth);
	void HandleGeometryCollectionDamaged(struct FVector& ImpactPoint, struct FVector& ImpulseDirection, float ImpulseMagnitude, int32 NumDisplacedParticles);
	class ANWXGeometryCollection* GetOwnerAsGeometryCollection();
};

// 0x28 (0xC8 - 0xA0)
// Class NWX.HarvestComponent
class UHarvestComponent : public UActorComponent
{
public:
	struct FVector                               LastSearchLocation;                                // 0xA0(0x18)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastSearchTime;                                    // 0xB8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SearchCooldown;                                    // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NewSearchDistance;                                 // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8D5E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHarvestComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.HasPlayerOwner
class IHasPlayerOwner : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IHasPlayerOwner* GetDefaultObj();

	class ANWXPlayerState* GetOwningPlayerState();
	class FString GetOwningPlayerPersistentUniqueId();
	class ANWXPlayerController* GetOwningPlayerController();
};

// 0xE8 (0x110 - 0x28)
// Class NWX.HasTechniqueRequirement
class UHasTechniqueRequirement : public URequirement
{
public:
	uint8                                        Pad_8D60[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSkillDataReference                   SkillReference;                                    // 0x30(0xE0)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UHasTechniqueRequirement* GetDefaultObj();

};

// 0x30 (0xD0 - 0xA0)
// Class NWX.HeatSourceActorComponent
class UHeatSourceActorComponent : public UActorComponent
{
public:
	uint8                                        Pad_8D63[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHeatSource                           HeatSource;                                        // 0xA8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UHeatSourceActorComponent* GetDefaultObj();

	void SetHeatSource(float Impact, float MaxImpact, float Radius);
	void ServerSetHeatSource(float Impact, float MaxImpact, float Radius);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.HitResponseComponent
class UHitResponseComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UHitResponseComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.HitResponseProviderInterface
class IHitResponseProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IHitResponseProviderInterface* GetDefaultObj();

	struct FVector GetVocalizationLocation();
	class UHitResponseComponent* GetHitResponseComponent();
};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.HopeEcho
class AHopeEcho : public AActor
{
public:

	static class UClass* StaticClass();
	static class AHopeEcho* GetDefaultObj();

	void Initialize(class AEncounterBase* SpawningEncounter, enum class EEncounterRewardType EncounterRewardType);
};

// 0x100 (0x1A0 - 0xA0)
// Class NWX.HopeEchoAudioComponent
class UHopeEchoAudioComponent : public UActorComponent
{
public:
	class UAkSwitchValue*                        HopeEchoSwitch;                                    // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          SpawnInAudioEvent;                                 // 0xA8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          StartLoopAudioEvent;                               // 0xD0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          StopLoopAudioEvent;                                // 0xF8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          PulseAudioEvent;                                   // 0x120(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          InteractionAudioEvent;                             // 0x148(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPulseOnTimer;                                     // 0x170(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D6A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PulseDelay;                                        // 0x174(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScopedAkComponent*                    MainScopedAkComponent;                             // 0x178(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8D6B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAkAudioEvent*>                 CachedEvents;                                      // 0x190(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UHopeEchoAudioComponent* GetDefaultObj();

	void TriggerSpawnInAudio(struct FVector& StartPos, struct FVector& EndPos, float TravelTime);
	void TriggerPulseAudio();
	void StartLoopingAudio();
	void HandleEchoReleased();
	void HandleEchoDestroyed();
};

// 0x50 (0x80 - 0x30)
// Class NWX.HoudiniOutputMap
class UHoudiniOutputMap : public UPrimaryDataAsset
{
public:
	TMap<class FString, struct FHoudiniOutputList> OutputMap;                                         // 0x30(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UHoudiniOutputMap* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.IdentifierTagInterface
class IIdentifierTagInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IIdentifierTagInterface* GetDefaultObj();

	struct FGameplayTag GetIdentifierTag();
};

// 0x10 (0x40 - 0x30)
// Class NWX.IIMResourceDataAssetBase
class UIIMResourceDataAssetBase : public UPrimaryDataAsset
{
public:
	class FName                                  ResourceId;                                        // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D6D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UIIMResourceDataAssetBase* GetDefaultObj();

};

// 0x108 (0x148 - 0x40)
// Class NWX.IIMResourceDataAsset
class UIIMResourceDataAsset : public UIIMResourceDataAssetBase
{
public:
	float                                        TotalVariantWeight;                                // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInteractive;                                    // 0x44(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D73[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EIIMGameplayState>         StateMapping;                                      // 0x48(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                          LeafSocketNames;                                   // 0x58(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                          Tag;                                               // 0x68(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Weight;                                            // 0x70(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D74[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FIIMResourceState>             States;                                            // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>            FallingTreeMesh;                                   // 0x88(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class ANWXGeometryCollection>  GeometryCollectionClass;                           // 0xB0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimationDuration;                                 // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D75[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   GameplayResource;                                  // 0xE0(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   AmbienceData;                                      // 0xF0(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                        ProgressionCurve;                                  // 0x100(0x28)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 LocationTag;                                       // 0x128(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UIIMResourceDataAsset* GetDefaultObj();

	void SetStates(TArray<struct FIIMResourceState>& NewStates);
	void SetGameplayResource(struct FDataTableRowHandle& NewGameplayResource);
	TArray<struct FIIMResourceState> GetStates();
};

// 0x8 (0x48 - 0x40)
// Class NWX.IIMResourceDataAssetRef
class UIIMResourceDataAssetRef : public UIIMResourceDataAssetBase
{
public:
	class UIIMResourceDataAsset*                 ResourceDataAsset;                                 // 0x40(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UIIMResourceDataAssetRef* GetDefaultObj();

};

// 0x48 (0x88 - 0x40)
// Class NWX.IIMResourceDataAssetMeshVariant
class UIIMResourceDataAssetMeshVariant : public UIIMResourceDataAssetBase
{
public:
	class UIIMResourceDataAssetBase*             MeshVariant;                                       // 0x40(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>    Meshes;                                            // 0x48(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>            FallingTreeMesh;                                   // 0x58(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D78[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UIIMResourceDataAssetMeshVariant* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.IIMCollection
class UIIMCollection : public UPrimaryDataAsset
{
public:
	class FString                                PathToCollection;                                  // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EIIMResourceType                  ResourceType;                                      // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBiomeID                          BiomeId;                                           // 0x41(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D79[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 Tags;                                              // 0x48(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bMatchTagsOnly;                                    // 0x68(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D7A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UIIMResourceDataAssetBase*>     AllDataAssets;                                     // 0x70(0x10)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UIIMCollection* GetDefaultObj();

};

// 0x30 (0x2E0 - 0x2B0)
// Class NWX.IIMResourceProxy
class AIIMResourceProxy : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                  MeshComponentOverride;                             // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D7D[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIIMResourceProxy* GetDefaultObj();

	void OnCompleteMeshSetup();
	class UStaticMeshComponent* GetMeshComponentChecked();
};

// 0x1E8 (0x4C8 - 0x2E0)
// Class NWX.IIMFallingTreeProxy
class AIIMFallingTreeProxy : public AIIMResourceProxy
{
public:
	TSoftObjectPtr<class UStaticMesh>            ResourceMesh;                                      // 0x2E0(0x28)(BlueprintVisible, Net, Transient, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PushDirection;                                     // 0x308(0x18)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AmbienceData;                                      // 0x320(0x8)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeToLive;                                        // 0x328(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PushForce;                                         // 0x32C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HorizontalThreshold;                               // 0x330(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LinearDampThreshold;                               // 0x334(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeToStop;                                        // 0x338(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeToLiveOnStop;                                  // 0x33C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxLinearDamping;                                  // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngularDamping;                                 // 0x344(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LinearDampingIncrement;                            // 0x348(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngularDampingIncrement;                           // 0x34C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTrunkRandomLocationLength;                      // 0x350(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalFallGravity;                               // 0x354(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalFallInitialSpeed;                          // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceToGCStumpMultiplier;                       // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFallAutomatically;                                // 0x360(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldSpawnResourceOnEndOfLife;                   // 0x361(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8D8E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshComponent*>          LeafColliders;                                     // 0x368(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D8F[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               StumpBaseWS;                                       // 0x3A0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               Location;                                          // 0x3B8(0x18)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                              Rotation;                                          // 0x3D0(0x18)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D90[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXTreeTrunkGeometryCollection*       TrunkGC;                                           // 0x400(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LinearVelocitySquared;                             // 0x408(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D91[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StumpRadius;                                       // 0x410(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D92[0xAC];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EFallingState                     FallingState;                                      // 0x4C0(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8D93[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIIMFallingTreeProxy* GetDefaultObj();

	void StopFalling();
	void StartFalling();
	void RegisterTrunkGeometryCollection(class ANWXTreeTrunkGeometryCollection* TrunkGeometryCollection);
	void OnVanish();
	void OnRep_TreeMovement();
	void OnFallingHit(struct FVector& HitLocation, struct FHitResult& Hit, bool IsNearlyHorizontal);
	void OnEndVerticalFalling();
	void OnEndOfLife();
	void OnEndFalling(float TimeToStopTree);
	void OnBeginFalling();
	bool IsTrunkGCValid();
	bool IsTreeNearlyHorizontal();
	bool IsFalling();
	class ANWXTreeTrunkGeometryCollection* GetTrunkGeometryCollection();
	struct FTransform GetTrunkCollisionData(struct FVector* OutExtent);
	bool GetTreeMarkup(struct FVector* OutStumpBaseWS, float* OutStumpRadius, struct FVector* OutForceLocationWS);
	void GetStumpProperties(struct FVector* OutBaseWS, float* OutRadius);
	float GetLinearVelocitySquared();
	TArray<class UStaticMeshComponent*> GetLeafColliders();
	void GetCanopyBoundsScaled(struct FVector* OutFullExtent, struct FVector* OutCenter, float MinimumExtentMultiplier, float MaximumExtentMultiplier, bool bEnableGroundTrace);
	TArray<struct FTransform> GenerateRandomTransformsAroundTrunk(int32 TransformCount, float LocationAxisVariation);
	void FallingHit(struct FVector& HitLocation, struct FHitResult& Hit, bool IsNearlyHorizontal);
};

// 0x0 (0x28 - 0x28)
// Class NWX.IIMFunctionLibrary
class UIIMFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UIIMFunctionLibrary* GetDefaultObj();

	void TryGetTreeData(struct FIIMInstance& Instance, struct FTreeTypeData* OutTreeData, enum class EGetResult* Branches);
	void TryGetPickableData(struct FIIMInstance& Instance, struct FPickableTypeData* OutPickableData, enum class EGetResult* Branches);
	void TryGetGatherableData(struct FIIMInstance& Instance, struct FGatherableTypeData* OutGatherableData, enum class EGetResult* Branches);
	void TryGetAnimTag(struct FIIMInstance& Instance, struct FGameplayTag* OutAnimTag, enum class EGetResult* Branches);
	struct FIIMResourceState SetStateMesh(const struct FIIMResourceState& CurrentState, TSoftObjectPtr<class UStaticMesh> Mesh);
	bool IsStumpInstance(struct FIIMInstance& Instance);
	bool IsInteractionDepletionSource(struct FIIMInstance& Instance);
	bool IsInstanceVulnerableToDamageTags(struct FIIMInstance& Instance, struct FGameplayTagContainer& DamageTags);
	int32 GetStumpHealth(struct FIIMInstance& Instance);
	TSoftObjectPtr<class UTexture2D> GetInstanceVulnerabilityIcon(struct FIIMInstance& Instance);
};

// 0x18 (0x48 - 0x30)
// Class NWX.IIMResourceAssetList
class UIIMResourceAssetList : public UDataAsset
{
public:
	TArray<struct FResourceAssetListEntry>       ResourceList;                                      // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8DAE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UIIMResourceAssetList* GetDefaultObj();

	TArray<struct FResourceAssetListEntry> GetResources();
};

// 0x0 (0x28 - 0x28)
// Class NWX.IIMResourceCollectionFilter
class UIIMResourceCollectionFilter : public UObject
{
public:

	static class UClass* StaticClass();
	static class UIIMResourceCollectionFilter* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.IIMResourceCollectionTagFilter
class UIIMResourceCollectionTagFilter : public UIIMResourceCollectionFilter
{
public:
	uint8                                        Pad_8DAF[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UIIMResourceCollectionTagFilter* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.ResourceVulnerabilityMapAsset
class UResourceVulnerabilityMapAsset : public UPrimaryDataAsset
{
public:
	TMap<enum class EResourceType, struct FResourceVulnerabilityInfo> ResourceTypeToVulnerabilities;                     // 0x30(0x50)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UResourceVulnerabilityMapAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.IIMResourceFilter
class IIIMResourceFilter : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IIIMResourceFilter* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.IIMProxyResourceGranter
class IIIMProxyResourceGranter : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IIIMProxyResourceGranter* GetDefaultObj();

	void OnAllResourcesGranted(class AActor* Instigator, struct FIIMInstance& IIMInstance);
	void GrantResourcesWithTransforms(class AActor* Instigator, struct FIIMInstance& IIMInstance, TArray<struct FTransform>& TransformsWS);
};

// 0xA8 (0xD8 - 0x30)
// Class NWX.IIMResourceRegistry
class UIIMResourceRegistry : public UPrimaryDataAsset
{
public:
	uint32                                       CurrentMaxIndex;                                   // 0x30(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DB6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<uint32, class FName>                    ResourceIndexToId;                                 // 0x38(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FName, uint32>                    ResourceIdToIndex;                                 // 0x88(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UIIMResourceRegistry* GetDefaultObj();

	void FillMissingResources();
};

// 0x70 (0xA0 - 0x30)
// Class NWX.ImpulseVolumeDataAsset
class UImpulseVolumeDataAsset : public UDataAsset
{
public:
	class URequirement*                          TriggerRequirements;                               // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LaunchVelocity;                                    // 0x38(0x18)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bXYOverride;                                       // 0x50(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bZOverride;                                        // 0x51(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8DB7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UGameplayEffect>           KnockbackEffectClass;                              // 0x58(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseClientPredictedAVFX;                           // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8DB8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVolumeAVFXDataAsset*                  LoopAVFX;                                          // 0x68(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  TriggeredAVFX;                                     // 0x70(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  PassThroughAVFX;                                   // 0x78(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  OpenAVFX;                                          // 0x80(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  CloseAVFX;                                         // 0x88(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTelemetryDataAsset*             TriggeredTelemetry;                                // 0x90(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTelemetryDataAsset*             PassThroughTelemetry;                              // 0x98(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UImpulseVolumeDataAsset* GetDefaultObj();

};

// 0x70 (0x310 - 0x2A0)
// Class NWX.ImpulseVolume
class AImpulseVolume : public AActor
{
public:
	uint8                                        Pad_8DBB[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UImpulseVolumeDataAsset*               DataAsset;                                         // 0x2C8(0x8)(Edit, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2D0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionVolume;                                   // 0x2D8(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2E0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DBC[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPassThroughEnabled;                               // 0x2FC(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DBD[0x13];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AImpulseVolume* GetDefaultObj();

	void TurnOffCollision();
	void OnRep_bPassThroughEnabled();
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void Multicast_PlayTriggeredAVFX();
	void Multicast_PlayPassThroughAVFX();
	bool IsPassThroughEnabled();
	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
};

// 0x0 (0xA50 - 0xA50)
// Class NWX.InfiniteStateEffect
class UInfiniteStateEffect : public UGameplayEffect
{
public:

	static class UClass* StaticClass();
	static class UInfiniteStateEffect* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.InputFunctionLibrary
class UInputFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UInputFunctionLibrary* GetDefaultObj();

	void SimulateInputAction(class APlayerController* PlayerController, class UInputAction* Action);
	void RequestToRemoveMappingContext(class ANWXPlayerController* PlayerController, class UInputMappingContext* MappingContext);
	void RequestToAddMappingContext(class ANWXPlayerController* PlayerController, class UInputMappingContext* MappingContext, int32 Priority);
	void GetKeysForAction(class UInputMappingContext* MappingContext, class UInputAction* Action, TArray<struct FKey>* OutKeys);
	struct FKey GetKeyForMapping(struct FEnhancedActionKeyMapping& Mapping);
	bool GetKeyForAction(class UInputMappingContext* MappingContext, class UInputAction* Action, bool bUsingGamepad, struct FKey* OutKey);
	void GetInputActionTriggers(class UInputAction* Action, bool bUsingGamepad, TArray<class UInputTriggerChordAction*>* OutTriggersArray);
	void GetInputActionPresentation(class UInputAction* Action, bool bUsingGamepad, TArray<struct FInputActionPresentationData>* OutPresentationDataArray);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InputKeyPresentationFunctionLibrary
class UInputKeyPresentationFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UInputKeyPresentationFunctionLibrary* GetDefaultObj();

	class UTexture2D* GetKeyTexture(class UObject* WorldContextObject, struct FKey& Key);
};

// 0x138 (0x168 - 0x30)
// Class NWX.InputKeyPresentationSubsystem
class UInputKeyPresentationSubsystem : public UEngineSubsystem
{
public:
	class UDataTable*                            InputKeyPresentationDataTable_Gamepad;             // 0x30(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                            InputKeyPresentationDataTable_Keyboard;            // 0x38(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                            InputKeyPresentationDataTable_Mouse;               // 0x40(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DD1[0xF0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DataTablePath_Gamepad;                             // 0x138(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                DataTablePath_Keyboard;                            // 0x148(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                DataTablePath_Mouse;                               // 0x158(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UInputKeyPresentationSubsystem* GetDefaultObj();

};

// 0x128 (0x1C8 - 0xA0)
// Class NWX.InstancedResourceNodeComponent
class UInstancedResourceNodeComponent : public UActorComponent
{
public:
	uint8                                        Pad_8DF4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GameplayActorId;                                   // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8DF5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInstanceStateChanged;                            // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AInteractiveInstancedMeshManagerIndex> ManagerIndex;                                      // 0xC0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AInteractiveInstancedMeshManager> Manager;                                           // 0xC8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInstancedResourceNodeAddTransaction> AddTransactions;                                   // 0xD0(0x10)(Edit, Net, ZeroConstructor, EditConst, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FInstancedResourceNodeUpdateTransaction> UpdateTransactions;                                // 0xE0(0x10)(Edit, Net, ZeroConstructor, EditConst, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FInstancedResourceNodeRemoveTransaction> RemoveTransactions;                                // 0xF0(0x10)(Edit, Net, ZeroConstructor, EditConst, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	uint32                                       LastAppliedTransactionId;                          // 0x100(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DF6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<uint32, uint32>                         LocalToReplicatedIdIndex;                          // 0x108(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TArray<uint32>                               ReplicatedToLocalIdIndex;                          // 0x158(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<uint16>                               InstanceHealth;                                    // 0x168(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<uint32>                               DeadInstanceIds;                                   // 0x178(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint32                                       LastCompactLogsSize;                               // 0x188(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8DF7[0x3C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInstancedResourceNodeComponent* GetDefaultObj();

	bool UpdateInstance(struct FIIMInstance& Instance, struct FIIMInstance* OutInstance);
	bool UpdateAndIncrementInstanceState(struct FIIMInstance& Instance, struct FIIMInstance* OutInstance);
	bool SetInstanceToDefaults(int32 InstanceID, struct FIIMInstance* OutInstance);
	bool RemoveInstance(int32 InstanceID);
	void OnRep_AuthoritativeInstanceChanges();
	bool HideInstance(int32 InstanceID);
	bool GetInstanceMeshMaterials(struct FIIMInstance& Instance, TArray<class UMaterialInterface*>* OutMaterials);
	bool GetInstanceMeshExtents(struct FIIMInstance& Instance, struct FIIMExtents* OutExtents);
	bool GetInstanceMesh(struct FIIMInstance& Instance, TSoftObjectPtr<class UStaticMesh>* OutMesh);
	bool GetInstanceIdsWithState(enum class EIIMGameplayState GameplayState, TArray<int32>* OutInstanceIds);
	bool GetInstanceIdsWithAnyStates(TArray<enum class EIIMGameplayState>& GameplayStates, TArray<int32>* OutInstanceIds);
	bool GetInstanceGeometryCollection(struct FIIMInstance& Instance, TSoftClassPtr<class ANWXGeometryCollection>* OutCollection);
	struct FAmbienceDataReference GetInstanceAmbienceData(struct FIIMInstance& Instance, bool* OutDataFound);
	bool GetInstance(int32 InstanceID, struct FIIMInstance* OutInstance, enum class EIIMInstanceDependency RequestedDependencies);
	bool GetClosestPointToTrace(struct FIIMInstance& Instance, struct FVector& InTestStartPoint, struct FVector& InTestEndPoint, struct FVector* OutPoint, float HitTime);
	bool GetClosestPointOnInstanceCollision(struct FIIMInstance& Instance, struct FVector& InTestPoint, struct FVector* OutPoint);
	bool GetAllowedStatesForInstance(int32 InstanceID, TArray<enum class EIIMGameplayState>* OutAllowedGameplayStates);
	void GetAllInstanceIds(TArray<int32>* OutInstanceIds);
	bool AddInstance(class FName& ResourceId, struct FTransform& WorldTransform, struct FIIMInstance* OutInstance);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InstancesManager
class IInstancesManager : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInstancesManager* GetDefaultObj();

};

// 0x8 (0x2A8 - 0x2A0)
// Class NWX.InteractableActor
class AInteractableActor : public AActor
{
public:
	uint8                                        Pad_8DF8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AInteractableActor* GetDefaultObj();

};

// 0x10 (0x6A0 - 0x690)
// Class NWX.InteractableCharacter
class AInteractableCharacter : public ACharacter
{
public:
	uint8                                        Pad_8DF9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AInteractableCharacter* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.InteractableGetter
class IInteractableGetter : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInteractableGetter* GetDefaultObj();

	struct FTransform GetInteractableTransform(struct FInteractionData& InteractionData);
	class UObject* GetInteractable(struct FInteractionData& InteractionData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InteractableInterface
class IInteractableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInteractableInterface* GetDefaultObj();

	void CrossServerOnInteracted(class AController* InteractingController);
	void CallCrossServerOnInteracted(class AController* InteractingController);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InteractionAnimationInterface
class IInteractionAnimationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInteractionAnimationInterface* GetDefaultObj();

	void PerformInteractionAnimation(struct FGameplayTag& MontageActionTag);
};

// 0x0 (0x48 - 0x48)
// Class NWX.StructureInteractionDataAsset
class UStructureInteractionDataAsset : public UUniquelyIdentifiablePrimaryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UStructureInteractionDataAsset* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class NWX.StructureInteractionUIData
class UStructureInteractionUIData : public UObject
{
public:
	class FText                                  DisplayName;                                       // 0x28(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureInteractionUIData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureInteractionContextualData
class UStructureInteractionContextualData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UStructureInteractionContextualData* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.StructureInteraction_InteractionText
class UStructureInteraction_InteractionText : public UStructureInteractionContextualData
{
public:
	class FText                                  InteractionText;                                   // 0x28(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureInteraction_InteractionText* GetDefaultObj();

};

// 0x28 (0x68 - 0x40)
// Class NWX.StructureInteraction_OpenMenu
class UStructureInteraction_OpenMenu : public UStructureInteraction_InteractionText
{
public:
	TSoftClassPtr<class UNWXCommonWindowWidget>  MenuToOpen;                                        // 0x40(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureInteraction_OpenMenu* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class NWX.StructureInteraction_GameplayEffect
class UStructureInteraction_GameplayEffect : public UStructureInteraction_InteractionText
{
public:
	TSubclassOf<class UGameplayEffect>           AppliedGameplayEffect;                             // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureInteraction_GameplayEffect* GetDefaultObj();

};

// 0x40 (0x88 - 0x48)
// Class NWX.StructureInteraction_PostConstructionInteraction_DataAsset
class UStructureInteraction_PostConstructionInteraction_DataAsset : public UStructureInteractionDataAsset
{
public:
	TSubclassOf<class UStructureInteractionComponent> InteractionComponent;                              // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UStructureInteractionRequirementComponent> InteractionRequirementComponent;                   // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructureInteractionContextualData*   ContextualData;                                    // 0x58(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 OptionalGameplayTags;                              // 0x60(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UStructureInteractionUIData*           UIData;                                            // 0x80(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureInteraction_PostConstructionInteraction_DataAsset* GetDefaultObj();

	struct FGuid GetUniqueID();
};

// 0x0 (0x28 - 0x28)
// Class NWX.InteractionFunctionLibrary
class UInteractionFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UInteractionFunctionLibrary* GetDefaultObj();

	struct FGameplayAbilityTargetDataHandle TargetDataFromInteractionData(struct FInteractionTargetData& Data);
	void GetInteractionData(struct FGameplayAbilityTargetDataHandle& TargetData, struct FInteractionTargetData* OutData);
	class UObject* GetInteractableObjectFromInteractionData(struct FInteractionData& InteractionData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InteractionInterface
class IInteractionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInteractionInterface* GetDefaultObj();

	bool GetInteractionTag(struct FGameplayTag* InteractionTag);
	void CrossServerSendGameplayEventToActor(struct FGameplayTag& EventTag, struct FGameplayEventData& Payload);
	void CallCrossServerSendGameplayEventToActor(struct FGameplayTag& EventTag, struct FGameplayEventData& Payload);
};

// 0x20 (0xB0 - 0x90)
// Class NWX.InteractionRadialMenuEntry
class UInteractionRadialMenuEntry : public URadialMenuEntry
{
public:
	uint8                                        Pad_8DFC[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInteractionRadialMenuEntry* GetDefaultObj();

	void SetInteractionAssetUID(struct FGuid& InAssetUID);
};

// 0x0 (0x28 - 0x28)
// Class NWX.IIMBlueprintFunctionLibrary
class UIIMBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UIIMBlueprintFunctionLibrary* GetDefaultObj();

	bool IsDefaultState(struct FIIMInstance& Instance);
	bool HasAmbienceData(struct FIIMInstance& Instance);
	struct FAmbienceDataReference GetAmbienceDataReference(struct FIIMInstance& Instance, bool* OutResult);
};

// 0x38 (0x930 - 0x8F8)
// Class NWX.IIMComponent
class UIIMComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:
	uint8                                        Pad_8E00[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<uint32>                               ReverseIndex;                                      // 0x900(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                               DeadInstancePool;                                  // 0x910(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bIsTraversable;                                    // 0x920(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E01[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UIIMComponent* GetDefaultObj();

};

// 0x3F8 (0x698 - 0x2A0)
// Class NWX.InteractiveInstancedMeshManager
class AInteractiveInstancedMeshManager : public AActor
{
public:
	uint8                                        Pad_8E0A[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         ReadinessAwaiter;                                  // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UIIMResourceDataAsset*> IIMResources;                                      // 0x2C8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FVector                               Bounds;                                            // 0x318(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BoundsWorldMin;                                    // 0x330(0x18)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BoundsWorldMax;                                    // 0x348(0x18)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        GameplayActorStride;                               // 0x360(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E0B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AActor>                    GameplayActorClass;                                // 0x368(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        WorldPositionOffsetDisableDistance;                // 0x370(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E0C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UIIMComponent*>                 MeshComponents;                                    // 0x378(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        DummyFallbackMeshComponentId;                      // 0x388(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E0D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FIIMCollectionKey, class UIIMCollection*> SelectedResourceCollections;                       // 0x390(0x50)(Edit, Transient, NativeAccessSpecifierPublic)
	TSet<class FString>                          UniqueErrorLog;                                    // 0x3E0(0x50)(NativeAccessSpecifierPublic)
	class UIIMResourceCollectionFilter*          CollectionFilter;                                  // 0x430(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E0E[0x98];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       Root;                                              // 0x4D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AInteractiveInstancedMeshManagerIndex> ManagerIndex;                                      // 0x4D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, uint32>                    ResourceNameIndex;                                 // 0x4E0(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FIIMResourceMapData>           ResourceMapDataIndex;                              // 0x530(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TMap<uint32, struct FIIMResourceMapData>     RuntimeResources;                                  // 0x540(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FIIMInstanceInternal>          Instances;                                         // 0x590(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FRandomStream                         Random;                                            // 0x5A0(0x8)(ZeroConstructor, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                               DeadInstancePool;                                  // 0x5A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UInstancedResourceNodeComponent>> GameplayComponents;                                // 0x5B8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UStaticMesh*                           InvisibleProxyMesh;                                // 0x5C8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E10[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FIIMCollectionKey>  ResourceIDToResourceCollectionKey;                 // 0x630(0x50)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FIIMManagerSeeds                      Seeds;                                             // 0x680(0x4)(Net, SaveGame, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E11[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EIIMResourceType>          SwappableResourceTypes;                            // 0x688(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AInteractiveInstancedMeshManager* GetDefaultObj();

	void ValidateStateMeshComponentIDs();
	void SwapResources(bool InitFlagsReady);
	void SoftReloadDataAssets();
	void SetWorldPositionOffsetDisableDistance(int32 _WorldPositionOffsetDisableDistance);
	struct FHitResult ResolveHitResult(struct FHitResult& InitialResult);
	void RemoveDynamicResources();
	void OnRep_Seeds();
	void OnRealmSettingsChanged(struct FRealmSettings& NewSettings);
	bool IsManagerReady();
	class UIIMResourceDataAsset* GetResourceFromResourceId(class FName& ResourceId);
	TArray<class UPrimitiveComponent*> GetPrimitiveComponentsByTag(struct FGameplayTagContainer& Tag);
	class UObject* GetObjectFromHitResult(struct FHitResult& HitResult);
};

// 0x10 (0x2B0 - 0x2A0)
// Class NWX.InteractiveInstancedMeshManagerIndex
class AInteractiveInstancedMeshManagerIndex : public AInfo
{
public:
	TArray<TWeakObjectPtr<class AInteractiveInstancedMeshManager>> MeshManagers;                                      // 0x2A0(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AInteractiveInstancedMeshManagerIndex* GetDefaultObj();

	void RemoveDynamicResources();
	bool IsManagerReady();
	void GetGameplayActorsAndInstancesInRadiusXY(struct FVector& WorldLocation, float Radius, TArray<struct FActorAndInstanceIds>* OutActorsAndInstances);
	void GetGameplayActorsAndInstancesInBoxXY(struct FBox& Box, float ZRotationDegrees, TArray<struct FActorAndInstanceIds>* OutActorsAndInstances);
	void GetGameplayActorsAndInstancesInBoundsXY(struct FVector& WorldLocation, float Extent, TArray<struct FActorAndInstanceIds>* OutActorsAndInstances);
	class AActor* GetGameplayActorForLocation(struct FVector& WorldLocation);
};

// 0x10 (0x2B0 - 0x2A0)
// Class NWX.InteractiveInstancedMeshProxyActor
class AInteractiveInstancedMeshProxyActor : public AActor
{
public:
	class FName                                  ResourceId;                                        // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        VariantId;                                         // 0x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E17[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AInteractiveInstancedMeshProxyActor* GetDefaultObj();

};

// 0x8 (0x2A8 - 0x2A0)
// Class NWX.InteractiveInstancedMeshProxyActor2
class AInteractiveInstancedMeshProxyActor2 : public AActor
{
public:
	class UInteractiveInstancedMeshProxyComponent* ProxyComponent;                                    // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AInteractiveInstancedMeshProxyActor2* GetDefaultObj();

};

// 0x88 (0x330 - 0x2A8)
// Class NWX.InteractiveInstancedMeshProxyComponent
class UInteractiveInstancedMeshProxyComponent : public USceneComponent
{
public:
	TSoftObjectPtr<class UIIMResourceDataAsset>  ResourceDA;                                        // 0x2A8(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIIMResourceAssetList*                 ResourceList;                                      // 0x2D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ResourceId;                                        // 0x2D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         StaticSpawn;                                       // 0x2E0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E18[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FProxySearchParamsEditor              ProxySearchParams;                                 // 0x2E8(0x30)(Edit, NativeAccessSpecifierPublic)
	uint8                                        Pad_8E19[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInteractiveInstancedMeshProxyComponent* GetDefaultObj();

	void SetResourceListDataDT(class UDataTable* ResourceDT);
	void SetCluster(class FName& ClusterTheme);
	void PickRandomResourceFromList();
	bool GetIsStaticSpawn();
	void DynamicallyChooseResourceNode();
};

// 0x10 (0xB0 - 0xA0)
// Class NWX.InternalTemperatureComponent
class UInternalTemperatureComponent : public UActorComponent
{
public:
	uint8                                        Pad_8E1C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInternalTemperature                  InternalTemperature;                               // 0xA8(0x8)(Edit, BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UInternalTemperatureComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.InventoryCheats
class UInventoryCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UInventoryCheats* GetDefaultObj();

	void RefillAllClipsInBackpack();
	void DamageEquippedItem(float DamageAmount);
	void DamageAllItems(float DamageAmount);
};

// 0x2D8 (0x390 - 0xB8)
// Class NWX.InventoryComponentBase
class UInventoryComponentBase : public UDelayedRegistrationComponent
{
public:
	uint8                                        Pad_8E3C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInventoryOverflowed;                             // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInventoryEntryUpdated_BP;                        // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInitialInventoryReceived;                        // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IItemContainer>> InventoryContainers;                               // 0xF8(0x10)(Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E3D[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInitialInventoryReceived;                         // 0x138(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E3E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ProfileId;                                         // 0x140(0x10)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<enum class EPlayerInventoryContainerType, TScriptInterface<class IItemContainer>> ContainerObjects;                                  // 0x150(0x50)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E3F[0x68];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXWindowWidget>          ResourceTransferMenuClass;                         // 0x208(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FItemDataReference                    RepairExtractItem;                                 // 0x210(0x80)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                     RepairItemTagQuery;                                // 0x290(0x48)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                     ExtractItemTagQuery;                               // 0x2D8(0x48)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                          EssenceTag;                                        // 0x320(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          RealmCardTag;                                      // 0x328(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemRepairRegistry*                   RepairRegistry;                                    // 0x330(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerInventoryContainerType, struct FContainerCapacityData> ActiveContainers;                                  // 0x338(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_8E40[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInventoryComponentBase* GetDefaultObj();

	void Server_TransferResourceToStructure(struct FInventoryEntry& Resource, class UObject* Structure);
	void Server_TransferAllRequiredResourcesToStructure(class UObject* Structure);
	void Server_RemoveResourceFromStructure(struct FInventoryEntry& Resource, class UObject* Structure);
	void Server_ChangeSpellIndex(struct FGuid& WeaponId, int32 SelectedIndex);
	void Server_ChangeAmmo(struct FGuid& WeaponId, struct FItemDataReference& AmmoReference);
	void RepairItem(struct FGuid& InstanceID);
	void RepairAllItems();
	void OnSpellSelected(struct FGuid& WeaponId, int32 SelectedIndex);
	void OnRep_InventoryContainers();
	void OnRep_InitialInventoryReceived();
	void OnContainerOverflowed();
	void OnAmmoSelected(struct FGuid& WeaponId, struct FItemDataReference& AmmoReference);
	void NewUniqueInstanceId(struct FGuid* InstanceID);
	bool GetStorageBox(TScriptInterface<class IItemContainer>* Container);
	int32 GetRequiredEssencesToRepairAllItems();
	bool GetRealmCardDeck(TScriptInterface<class IItemContainer>* Container);
	bool GetInitialInventoryReceived();
	bool GetEssencePouch(TScriptInterface<class IItemContainer>* Container);
	TScriptInterface<class IItemContainer> GetCurrentContainerForItem(struct FInventoryEntry& ItemEntry, enum class EGetResult* OutBranch);
	TScriptInterface<class IItemContainer> GetCorrectContainerForItem(struct FInventoryEntry& Item);
	TScriptInterface<class IItemContainer> GetContainerForContainerType(enum class EPlayerInventoryContainerType ContainerType, enum class EGetResult* OutBranch);
	bool GetBackpack(TScriptInterface<class IItemContainer>* Container);
	int32 GetAvailableRepairEssences();
	TArray<int32> GetAvailableEssencesArray();
	TMap<struct FItemDataReference, int32> GetAvailableEssences();
	bool GenerateSpellRadialMenuEntriesForWeapon(struct FInventoryEntry& WeaponEntry, TArray<TScriptInterface<class IRadialMenuInterface>>* OutRadialMenuEntries);
	bool GenerateAmmoRadialMenuEntriesForWeapon(struct FInventoryEntry& WeaponEntry, TArray<TScriptInterface<class IRadialMenuInterface>>* OutRadialMenuEntries);
	void ExtractItem(TScriptInterface<class IItemContainer>& ItemContainer, struct FGuid& InstanceID, int32 Quantity);
	bool DropItemByInstanceIdAndContainerType(struct FTransform& CameraTransform, struct FGuid& InstanceID, enum class EPlayerInventoryContainerType ContainerType, int32 DropQuantity);
	void Client_InventoryOverflowed();
	bool CanItemBeRepaired(struct FGuid& InstanceID);
	bool CanItemBeExtracted(struct FInventoryEntry& ItemEntry, int32 Quantity);
	bool AddItemToCorrectContainer(struct FInventoryEntry& Item, TScriptInterface<class IItemContainer>* OutContainerAddedTo, int32* OutAmountAdded, TArray<struct FGuid>* OutModifiedInstances, bool bIgnoreCapacity);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InventoryFunctionLibrary
class UInventoryFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UInventoryFunctionLibrary* GetDefaultObj();

	TArray<struct FInventoryEntry> StackInventoryEntries(TArray<struct FInventoryEntry>& OutTargetArray, const TArray<struct FInventoryEntry>& SourceArray);
	struct FInventoryEntry SplitInventoryEntry(struct FInventoryEntry& OriginalEntry, int32 SplitQuanity, struct FInventoryEntry* OutNewEntry, enum class EGetResult* OutBranches);
	bool NotEqual_FInventoryEntry(struct FInventoryEntry& A, struct FInventoryEntry& B);
	bool IsValid(struct FInventoryEntry& InventoryEntry);
	bool GetEssenceCountsFromEntries(TArray<struct FInventoryEntry>& Entries, int32* T0Count, int32* T1Count, int32* T2Count, int32* T3Count);
	bool EqualEqual_FInventoryEntry(struct FInventoryEntry& A, struct FInventoryEntry& B);
	struct FInventoryEntry CloneInventoryEntry(struct FInventoryEntry& Original, struct FGuid& NewInstanceId);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InventoryItem
class UInventoryItem : public UObject
{
public:

	static class UClass* StaticClass();
	static class UInventoryItem* GetDefaultObj();

};

// 0x48 (0xE8 - 0xA0)
// Class NWX.InWorldItemContainerComponent
class UInWorldItemContainerComponent : public UActorComponent
{
public:
	uint8                                        Pad_8E77[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInventoryEntry>               Items;                                             // 0xB0(0x10)(Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8E78[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInWorldItemContainerComponent* GetDefaultObj();

	bool UpdateItem(struct FInventoryEntry& Entry);
	void SetContainerCapacityData(struct FContainerCapacityData& Data);
	bool RemoveItem(struct FGuid& InstanceID, int32 Amount);
	void RegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void RegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	void OnRep_Items(TArray<struct FInventoryEntry>& OldItems);
	int32 GetNumberItemEntries();
	bool GetItem(struct FGuid& InstanceID, struct FInventoryEntry* Entry);
	uint8 GetContainerId();
	struct FItemContainerHandle GetContainerHandle();
	struct FContainerCapacityData GetContainerCapacityData();
	void GetAllItems(TArray<struct FInventoryEntry>* Entries);
	bool FindFirstItemByItemId(struct FItemDataReference& ItemId, struct FInventoryEntry* Entry);
	void DeRegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void DeRegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	bool CanAddItem(struct FInventoryEntry& Entry);
	bool CanAddAnyItem(TArray<struct FInventoryEntry>& Entries);
	bool AddItem(struct FInventoryEntry& NewEntry, int32* Amount, TArray<struct FGuid>* ModifiedInstances, bool bIgnoreCapacity);
};

// 0x0 (0x28 - 0x28)
// Class NWX.InWorldItemContainerOwnerInterface
class IInWorldItemContainerOwnerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInWorldItemContainerOwnerInterface* GetDefaultObj();

	void ServerOnly_OnContainerOpenStateChanged(bool bIsContainerOpen);
};

// 0x0 (0x28 - 0x28)
// Class NWX.IsPlayerRequirement
class UIsPlayerRequirement : public URequirement
{
public:

	static class UClass* StaticClass();
	static class UIsPlayerRequirement* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemAttributeModifierFunctionLibrary
class UItemAttributeModifierFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemAttributeModifierFunctionLibrary* GetDefaultObj();

	struct FInventoryEntry TryConstructItemEntryFromModifier(struct FInstancedItemAttributeModifier& Modifier, struct FItemDataReference& ItemReference, enum class EGetResult* Branches);
	struct FInstancedItemAttributeModifier TryConstructItemAttributeModifier(struct FInventoryEntry& Entry, enum class EGetResult* Branches);
	bool NotEqual_FItemAttributeModifierReference(struct FItemAttributeModifierReference& A, struct FItemAttributeModifierReference& B);
	bool IsValid(struct FItemAttributeModifierReference& ModifierReference);
	struct FGameplayTagContainer GetTags(struct FItemAttributeModifierReference& ModifierReference);
	TSoftObjectPtr<class UTexture2D> GetIcon(struct FItemAttributeModifierReference& ModifierReference);
	class FText GetBaseDisplayName(struct FItemAttributeModifierReference& ModifierReference);
	TMap<struct FGameplayAttribute, int32> GetAttributeModifiers(struct FItemAttributeModifierReference& ModifierReference);
	bool EqualEqual_FItemAttributeModifierReference(struct FItemAttributeModifierReference& A, struct FItemAttributeModifierReference& B);
	bool DoAttributeModifiersShareCharacteristic(struct FItemAttributeModifierReference& A, struct FItemAttributeModifierReference& B);
	bool ConstructInstancedItemAttributeModifierFromEntry(struct FInventoryEntry& Entry, struct FInstancedItemAttributeModifier* NewModifier);
	bool CheckCharacteristicMatch(const struct FCharacteristicAndQuality& Characteristic, struct FInventoryEntry& Entry);
};

// 0xF8 (0x128 - 0x30)
// Class NWX.ItemAttributeModifierRegistry
class UItemAttributeModifierRegistry : public UDataAsset
{
public:
	class UCurveFloat*                           DefaultModifierCurve;                              // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayAttribute, class UCurveFloat*> AttributeModifierOverrideCurves;                   // 0x38(0x50)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<enum class EItemQuality, float>         DefaultMultiplierMap;                              // 0x88(0x50)(Edit, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayAttribute, struct FAttributeQualityMultiplierMap> AttributeQualityMultiplierOverrideMap;             // 0xD8(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemAttributeModifierRegistry* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemClaimObject
class UItemClaimObject : public UNWXObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UItemClaimObject* GetDefaultObj();

	bool ClaimItems(class AActor* ClaimingActor, class UObject* ItemSource, TArray<struct FInventoryEntry>& ItemsToClaim, TArray<struct FGuid>* ClaimedInstances, TArray<struct FInventoryEntry>* UnclaimedItems, bool bIgnoreCapacity);
};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemConstraintBehavior_Any
class UItemConstraintBehavior_Any : public UItemConstraintBehavior
{
public:
	TArray<class UItemConstraintBehavior*>       Behaviors;                                         // 0x28(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_Any* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemConstraintBehavior_All
class UItemConstraintBehavior_All : public UItemConstraintBehavior
{
public:
	TArray<class UItemConstraintBehavior*>       Behaviors;                                         // 0x28(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_All* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.ItemConstraintBehavior_TagQuery
class UItemConstraintBehavior_TagQuery : public UItemConstraintBehavior
{
public:
	struct FGameplayTagQuery                     TagQuery;                                          // 0x28(0x48)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_TagQuery* GetDefaultObj();

	struct FGameplayTagContainer GetConstraintTags();
};

// 0x98 (0xC0 - 0x28)
// Class NWX.ItemConstraintBehavior_Characteristic
class UItemConstraintBehavior_Characteristic : public UItemConstraintBehavior
{
public:
	uint8                                        Pad_8E9E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacteristicDataReference          CharacteristicToCheck;                             // 0x30(0x90)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_Characteristic* GetDefaultObj();

	struct FGameplayTagContainer GetCharacteristicTags();
};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemConstraintBehavior_ItemReferences
class UItemConstraintBehavior_ItemReferences : public UItemConstraintBehavior
{
public:
	TArray<struct FItemDataReference>            ItemReferences;                                    // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_ItemReferences* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemConstraintBehavior_Quality
class UItemConstraintBehavior_Quality : public UItemConstraintBehavior
{
public:
	enum class ENWXMathComparison                Comparison;                                        // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EItemQuality                      Quality;                                           // 0x29(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EA4[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_Quality* GetDefaultObj();

};

// 0xA8 (0xD0 - 0x28)
// Class NWX.ItemConstraintBehavior_Enchantment
class UItemConstraintBehavior_Enchantment : public UItemConstraintBehavior
{
public:
	uint8                                        Pad_8EA5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacteristicAndQuality             EnchantmentCharacteristicToCheck;                  // 0x30(0xA0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemConstraintBehavior_Enchantment* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemEnchantCountConstraintBehaviour
class UItemEnchantCountConstraintBehaviour : public UItemConstraintBehavior
{
public:
	enum class ENWXMathComparison                Comparison;                                        // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EA6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Value;                                             // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCompareToRemainderFromMax;                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EA7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxEnchants;                                       // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemEnchantCountConstraintBehaviour* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemSpellSlotCountConstraintBehaviour
class UItemSpellSlotCountConstraintBehaviour : public UItemConstraintBehavior
{
public:
	enum class ENWXMathComparison                Comparison;                                        // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EAA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Value;                                             // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCompareRemainderFromMax;                          // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EAB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxSpells;                                         // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemSpellSlotCountConstraintBehaviour* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemPerkSlotCountConstraintBehaviour
class UItemPerkSlotCountConstraintBehaviour : public UItemConstraintBehavior
{
public:
	enum class ENWXMathComparison                Comparison;                                        // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EAC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Value;                                             // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCompareRemainderFromMax;                          // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8EAD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPerks;                                          // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemPerkSlotCountConstraintBehaviour* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemConstraintFunctionLibrary
class UItemConstraintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemConstraintFunctionLibrary* GetDefaultObj();

	struct FItemConstraint SetUseDataAsset(const struct FItemConstraint& Constraint, bool bUsesDataAsset);
	struct FItemConstraint SetConstraintData(const struct FItemConstraint& Constraint, class UItemConstraintDataAsset* ConstraintDA);
	bool IsValidConstraint(struct FItemConstraint& Constraint);
	void IsItemRelevantForConstraint(struct FInventoryEntry& Entry, struct FItemConstraint& Constraint, enum class EGetResult* OutBranch);
	void IsItemConstraintMet(struct FInventoryEntry& Entry, struct FItemConstraint& Constraint, struct FItemConstraintMatchData* OutMatchData, enum class EGetResult* OutBranch);
	void GetItemConstraintUIData(struct FItemConstraint& Constraint, struct FItemConstraintPresentationData* OutPresentationData);
	int32 GetItemConstraintQuantityRequired(struct FItemConstraint& Constraint);
	class UItemConstraintBehavior* GetItemConstraintBehavior(const struct FItemConstraint& Constraint);
	bool GatherEntriesMeetingConstraints(TArray<struct FInventoryEntry>& Entries, TArray<struct FItemConstraint>& Constraints, TArray<struct FInventoryEntryIdAndQuantity>* OutGatheredInstances);
	void FilterEntriesBasedOnConstraint(TArray<struct FInventoryEntry>& Entries, struct FItemConstraint& Constraint, TArray<struct FInventoryEntry>* OutEntriesMeetConstraint, TArray<struct FInventoryEntry>* OutEntriesRelevant);
	struct FItemConstraint CopyConstraint(struct FItemConstraint& Constraint, class UObject* Outer);
	class UItemConstraintBehavior* CloneItemConstraintBehavior(class UObject*& DestinationOuter, class UItemConstraintBehavior* ThisBehaviour, enum class EGetResult* Branches);
	struct FCraftingResultDataItem CloneCraftingResultDataItem(class UObject*& DestinationOuter, struct FCraftingResultDataItem& OriginalCRDI, TArray<class UCraftingResultObject*>& ObjectModifiers, enum class EGetResult* Branches);
	void AreAllConstraintsMet(TArray<struct FInventoryEntry>& Entries, TArray<struct FItemConstraint>& Constraints, bool* bAllMet, TArray<int32>* OutUnmetSlots);
	void AreAllConstraintsLooselyMet(TArray<struct FInventoryEntry>& Entries, TArray<struct FItemConstraint>& Constraints, bool* bAllMet, TArray<int32>* OutUnmetSlots);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemDataFunctionLibrary
class UItemDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemDataFunctionLibrary* GetDefaultObj();

	void UpdateItemTags(class UItemDataAsset* ItemDataAsset, struct FGameplayTagContainer& NewTags);
	void UpdateItemCharacteristicDataAsset(class UCharacteristicDataAsset* InCharacteristicDA, struct FCharacteristicData& NewCharacteristicData, enum class EGetResult* Branches);
	void TryUpdateItemDataTechniques(class UItemDataAsset* ItemDataAsset, struct FItemData_Techniques& NewTechniques, enum class EGetResult* Branches);
	void TryUpdateItemDataEquip(class UItemDataAsset* ItemDataAsset, struct FItemData_Equippable& NewEquipParams, enum class EGetResult* Branches);
	void TryUpdateItemDataConsumable(class UItemDataAsset* ItemDataAsset, struct FItemData_Consumable& NewConsumable, enum class EGetResult* Branches);
	void TryUpdateItemBaselineAttributes(class UItemDataAsset*& ItemDataAsset, struct FItemData_BaselineAttributeValues& NewAttributeValues, enum class EGetResult* Branches);
	void TryGetItemDataWearProfile(struct FItemData& Data, struct FItemData_WearProfile* OutData, enum class EGetResult* Branches);
	void TryGetItemDataWeaponRanged(struct FItemData& Data, struct FItemData_WeaponRanged* OutData, enum class EGetResult* Branches);
	void TryGetItemDataWeaponMelee(struct FItemData& Data, struct FItemData_WeaponMelee* OutData, enum class EGetResult* Branches);
	void TryGetItemDataVisualMesh(struct FItemData& Data, struct FItemData_VisualMesh* OutData, enum class EGetResult* Branches);
	void TryGetItemDataTechniques(struct FItemData& Data, struct FItemData_Techniques* OutData, enum class EGetResult* Branches);
	void TryGetItemDataSeed(struct FItemData& Data, struct FItemData_Seed* OutData, enum class EGetResult* Branches);
	void TryGetItemDataResourceCustomization(struct FItemData& Data, struct FItemData_ResourceCustomization* OutData, enum class EGetResult* Branches);
	void TryGetItemDataRegionHiding(struct FItemData& Data, struct FItemData_RegionHiding* OutData, enum class EGetResult* Branches);
	void TryGetItemDataRealmCardDeploymentSet(struct FItemData& Data, struct FItemData_RealmCardDeploymentSet* OutData, enum class EGetResult* Branches);
	void TryGetItemDataRealmCard(struct FItemData& Data, struct FItemData_RealmCard* OutData, enum class EGetResult* Branches);
	void TryGetItemDataProjectileLauncher(struct FItemData& Data, struct FItemData_ProjectileLauncher* OutData, enum class EGetResult* Branches);
	void TryGetItemDataProjectile(struct FItemData& Data, struct FItemData_Projectile* OutData, enum class EGetResult* Branches);
	void TryGetItemDataMeshInfo(struct FItemData& Data, struct FItemData_MeshInfo* OutData, enum class EGetResult* Branches);
	void TryGetItemDataLightEmitter(struct FItemData& Data, struct FItemData_LightEmitter* OutData, enum class EGetResult* Branches);
	void TryGetItemDataHatType(struct FItemData& Data, struct FItemData_HatType* OutData, enum class EGetResult* Branches);
	void TryGetItemDataFuelAudio(struct FItemData& Data, struct FItemData_FuelAudio* OutData, enum class EGetResult* Branches);
	void TryGetItemDataFuel(struct FItemData& Data, struct FItemData_Fuel* OutData, enum class EGetResult* Branches);
	void TryGetItemDataExtractionOverrides(struct FItemData& Data, struct FItemData_ExtractionOverrides* OutData, enum class EGetResult* Branches);
	void TryGetItemDataEssenceVFX(struct FItemData& Data, struct FItemData_EssenceVFX* OutData, enum class EGetResult* Branches);
	void TryGetItemDataEquippable(struct FItemData& Data, struct FItemData_Equippable* OutData, enum class EGetResult* Branches);
	void TryGetItemDataDefaultQuality(struct FItemData& Data, struct FItemData_DefaultQuality* OutData, enum class EGetResult* Branches);
	void TryGetItemDataDefaultCharacteristic(struct FItemData& Data, struct FItemData_DefaultCharacteristic* OutData, enum class EGetResult* Branches);
	void TryGetItemDataDefaultAttributeModifiers(struct FItemData& Data, struct FItemData_DefaultAttributeModifiers* OutData, enum class EGetResult* Branches);
	void TryGetItemDataCreatureGrants(struct FItemData& Data, struct FItemData_CreatureGrants* OutData, enum class EGetResult* Branches);
	void TryGetItemDataConsumable(struct FItemData& Data, struct FItemData_Consumable* OutData, enum class EGetResult* Branches);
	void TryGetItemDataCombustionFuel(struct FItemData& Data, struct FItemData_CombustionFuel* OutData, enum class EGetResult* Branches);
	void TryGetItemDataBaselineAttributeValues(struct FItemData& Data, struct FItemData_BaselineAttributeValues* OutData, enum class EGetResult* Branches);
	void TryGetItemDataAnimation(struct FItemData& Data, struct FItemData_Animation* OutData, enum class EGetResult* Branches);
	void TryGetItemDataAmmo(struct FItemData& Data, struct FItemData_Ammo* OutData, enum class EGetResult* Branches);
	bool HasItemSubtype(struct FItemData& Data, TSubclassOf<class UItemSubtypeObject>& DesiredItemType);
	bool HasItemDataWearProfile(struct FItemData& Data);
	bool HasItemDataWeaponRanged(struct FItemData& Data);
	bool HasItemDataWeaponMelee(struct FItemData& Data);
	bool HasItemDataVisualMesh(struct FItemData& Data);
	bool HasItemDataTechniques(struct FItemData& Data);
	bool HasItemDataSeed(struct FItemData& Data);
	bool HasItemDataResourceCustomization(struct FItemData& Data);
	bool HasItemDataRegionHiding(struct FItemData& Data);
	bool HasItemDataRealmCardDeploymentSet(struct FItemData& Data);
	bool HasItemDataRealmCard(struct FItemData& Data);
	bool HasItemDataProjectileLauncher(struct FItemData& Data);
	bool HasItemDataProjectile(struct FItemData& Data);
	bool HasItemDataMeshInfo(struct FItemData& Data);
	bool HasItemDataLightEmitter(struct FItemData& Data);
	bool HasItemDataHatType(struct FItemData& Data);
	bool HasItemDataFuelAudio(struct FItemData& Data);
	bool HasItemDataFuel(struct FItemData& Data);
	bool HasItemDataExtractionOverrides(struct FItemData& Data);
	bool HasItemDataEssenceVFX(struct FItemData& Data);
	bool HasItemDataEquippable(struct FItemData& Data);
	bool HasItemDataDefaultQuality(struct FItemData& Data);
	bool HasItemDataDefaultCharacteristic(struct FItemData& Data);
	bool HasItemDataDefaultAttributeModifiers(struct FItemData& Data);
	bool HasItemDataCreatureGrants(struct FItemData& Data);
	bool HasItemDataConsumable(struct FItemData& Data);
	bool HasItemDataCombustionFuel(struct FItemData& Data);
	bool HasItemDataBaselineAttributeValues(struct FItemData& Data);
	bool HasItemDataAnimation(struct FItemData& Data);
	bool HasItemDataAmmo(struct FItemData& Data);
	struct FGameplayTag GetItemTypeTag(struct FItemData& Data);
	struct FGameplayTagContainer GetItemTags(struct FItemData& Data);
	class FString GetDefaultItemName(struct FItemData& Data);
	TSoftObjectPtr<class UTexture2D> GetDefaultItemIcon(struct FItemData& Data);
	TSoftObjectPtr<class UTexture2D> GetDefaultItemFullSizeIcon(struct FItemData& Data);
	class FString GetDefaultItemDescription(struct FItemData& Data);
	void CreateNewItemDataAsset(const class FString& AssetName, const class FString& DirectoryPath, enum class EGetResult* Branches, class UItemDataAsset** OutNewItem);
	void CreateNewItemCharacteristicDataAsset(const class FString& AssetName, const class FString& DirectoryPath, struct FCharacteristicData& NewCharacteristicData, enum class EGetResult* Branches, class UCharacteristicDataAsset** OutNewCharacteristicDA);
	void CreateNewCharacteristicCurveTable(const class FString& AssetName, const class FString& DirectoryPath, const class FString& CSVPath, enum class EGetResult* Branches, class UCurveTable** OutNewCurveTable);
	TArray<class UItemSubtypeObject*> CloneItemSubtypeObjects(class UObject*& DestinationOuter, TArray<class UItemSubtypeObject*>& SubTypes, enum class EGetResult* Branches);
};

// 0xA0 (0xC8 - 0x28)
// Class NWX.ItemTypeAnimation
class UItemTypeAnimation : public UItemSubtypeObject
{
public:
	struct FItemData_Animation                   Data;                                              // 0x28(0xA0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeAnimation* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemTypeCreatureGrants
class UItemTypeCreatureGrants : public UItemSubtypeObject
{
public:
	struct FItemData_CreatureGrants              Data;                                              // 0x28(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeCreatureGrants* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class NWX.ItemTypeMeshInfo
class UItemTypeMeshInfo : public UItemSubtypeObject
{
public:
	struct FItemData_MeshInfo                    Data;                                              // 0x28(0xA0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeMeshInfo* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.ItemTypeBaselineAttributeValues
class UItemTypeBaselineAttributeValues : public UItemSubtypeObject
{
public:
	struct FItemData_BaselineAttributeValues     Data;                                              // 0x28(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeBaselineAttributeValues* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.ItemTypeDefaultCharacteristic
class UItemTypeDefaultCharacteristic : public UItemSubtypeObject
{
public:
	uint8                                        Pad_8F43[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemData_DefaultCharacteristic       Data;                                              // 0x30(0x10)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeDefaultCharacteristic* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeWearProfile
class UItemTypeWearProfile : public UItemSubtypeObject
{
public:
	struct FItemData_WearProfile                 Data;                                              // 0x28(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeWearProfile* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class NWX.ItemTypeVisualMesh
class UItemTypeVisualMesh : public UItemSubtypeObject
{
public:
	struct FItemData_VisualMesh                  Data;                                              // 0x28(0xA0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeVisualMesh* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.ItemTypeResourceCustomization
class UItemTypeResourceCustomization : public UItemSubtypeObject
{
public:
	struct FItemData_ResourceCustomization       Data;                                              // 0x28(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeResourceCustomization* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemTypeDefaultAttributeModifiers
class UItemTypeDefaultAttributeModifiers : public UItemSubtypeObject
{
public:
	struct FItemData_DefaultAttributeModifiers   Data;                                              // 0x28(0x10)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeDefaultAttributeModifiers* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.ItemTypeRealmCard
class UItemTypeRealmCard : public UItemSubtypeObject
{
public:
	struct FItemData_RealmCard                   Data;                                              // 0x28(0x28)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeRealmCard* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemTypeRealmCardDeploymentSet
class UItemTypeRealmCardDeploymentSet : public UItemSubtypeObject
{
public:
	struct FItemData_RealmCardDeploymentSet      Data;                                              // 0x28(0x10)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeRealmCardDeploymentSet* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class NWX.ItemTypeEquippable
class UItemTypeEquippable : public UItemSubtypeObject
{
public:
	struct FItemData_Equippable                  Data;                                              // 0x28(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeEquippable* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeDefaultQuality
class UItemTypeDefaultQuality : public UItemSubtypeObject
{
public:
	struct FItemData_DefaultQuality              Data;                                              // 0x28(0x1)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F44[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeDefaultQuality* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeFuel
class UItemTypeFuel : public UItemSubtypeObject
{
public:
	struct FItemData_Fuel                        Data;                                              // 0x28(0x1)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F45[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeFuel* GetDefaultObj();

};

// 0x18 (0x98 - 0x80)
// Class NWX.ItemTypeWeaponMelee
class UItemTypeWeaponMelee : public UItemTypeEquippable
{
public:
	struct FItemData_WeaponMelee                 MeleeData;                                         // 0x80(0x14)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F48[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeWeaponMelee* GetDefaultObj();

};

// 0x768 (0x800 - 0x98)
// Class NWX.ItemTypeWeaponRanged
class UItemTypeWeaponRanged : public UItemTypeWeaponMelee
{
public:
	uint8                                        Pad_8F49[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemData_WeaponRanged                RangedData;                                        // 0xA0(0x760)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeWeaponRanged* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class NWX.ItemTypeSeed
class UItemTypeSeed : public UItemSubtypeObject
{
public:
	struct FItemData_Seed                        Data;                                              // 0x28(0x30)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeSeed* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeEssenceVFX
class UItemTypeEssenceVFX : public UItemSubtypeObject
{
public:
	struct FItemData_EssenceVFX                  Data;                                              // 0x28(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F4C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeEssenceVFX* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.ItemTypeTechniques
class UItemTypeTechniques : public UItemSubtypeObject
{
public:
	struct FItemData_Techniques                  Data;                                              // 0x28(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeTechniques* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.ItemTypeConsumable
class UItemTypeConsumable : public UItemSubtypeObject
{
public:
	struct FItemData_Consumable                  Data;                                              // 0x28(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeConsumable* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeProjectileLauncher
class UItemTypeProjectileLauncher : public UItemSubtypeObject
{
public:
	struct FItemData_ProjectileLauncher          Data;                                              // 0x28(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeProjectileLauncher* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.ItemTypeProjectile
class UItemTypeProjectile : public UItemSubtypeObject
{
public:
	struct FItemData_Projectile                  Data;                                              // 0x28(0x48)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeProjectile* GetDefaultObj();

};

// 0xC0 (0xE8 - 0x28)
// Class NWX.ItemTypeAmmo
class UItemTypeAmmo : public UItemSubtypeObject
{
public:
	struct FItemData_Ammo                        Data;                                              // 0x28(0xC0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeAmmo* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.ItemTypeFuelAudio
class UItemTypeFuelAudio : public UItemSubtypeObject
{
public:
	struct FItemData_FuelAudio                   Data;                                              // 0x28(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeFuelAudio* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.ItemTypeRegionHiding
class UItemTypeRegionHiding : public UItemSubtypeObject
{
public:
	struct FItemData_RegionHiding                Data;                                              // 0x28(0x28)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeRegionHiding* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeCombustionFuel
class UItemTypeCombustionFuel : public UItemSubtypeObject
{
public:
	struct FItemData_CombustionFuel              Data;                                              // 0x28(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F50[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeCombustionFuel* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemTypeHatType
class UItemTypeHatType : public UItemSubtypeObject
{
public:
	struct FItemData_HatType                     Data;                                              // 0x28(0x1)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_8F51[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemTypeHatType* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.ItemTypeLightEmitter
class UItemTypeLightEmitter : public UItemSubtypeObject
{
public:
	struct FItemData_LightEmitter                Data;                                              // 0x28(0x48)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeLightEmitter* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.ItemTypeExtractionOverrides
class UItemTypeExtractionOverrides : public UItemSubtypeObject
{
public:
	struct FItemData_ExtractionOverrides         Data;                                              // 0x28(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemTypeExtractionOverrides* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemEntryFunctionLibrary
class UItemEntryFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemEntryFunctionLibrary* GetDefaultObj();

	void CreateNewItemEntry(struct FItemDataReference& ItemReference, int32 Quantity, TArray<class UItemInstanceData*>& InstancedData, struct FInventoryEntry* NewEntry, enum class EGetResult* OutBranch);
};

// 0x48 (0xE8 - 0xA0)
// Class NWX.ItemHooverComponent
class UItemHooverComponent : public UActorComponent
{
public:
	float                                        TimeBetweenHooverSteps;                            // 0xA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HooverVFXTravelTime;                               // 0xA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumHooverSteps;                                    // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxHooverRadius;                                   // 0xAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                HooverRadiiSquared;                                // 0xB0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	int32                                        CurrentHooverStep;                                 // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8F57[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          HooverStepTimer;                                   // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHooverStep>                   CachedHooverItemInfo;                              // 0xD0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_8F59[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemHooverComponent* GetDefaultObj();

	void TriggerNextHooverStep();
	void TriggerHooverStepAVFX(TArray<struct FVector>& HooveredItemLocations, class USceneComponent* VFXAttachComponent);
	void TriggerHooverStartAVFX();
	void TriggerHooverEndAVFX();
	void StartHooverAbility(class APawn* TriggeringPawn);
	void Server_TryClaimItemProxy(class AItemProxyBase* ItemProxy, class APawn* ClaimingPawn);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemInstanceDataFunctionLibrary
class UItemInstanceDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemInstanceDataFunctionLibrary* GetDefaultObj();

	void UpdateOrAddFuel(struct FInventoryEntry& Entry, float NewFuel);
	void UpdateOrAddDurability(struct FInventoryEntry& Entry, float NewDurability);
	void UpdateOrAddCharacteristicInfo(struct FInventoryEntry& Entry, struct FInstanceData_CharacteristicInfo& NewCharacteristicData);
	void UpdateCurrentActiveItemSpellTechnique(struct FInventoryEntry& Entry, int32 NewTechniqueIndexReference);
	void TryGetItemTraits(struct FInventoryEntry& Entry, struct FInstanceData_Traits* Traits, enum class EGetResult* Branches);
	void TryGetItemSpellTechniques(struct FInventoryEntry& Entry, int32* ActiveSpellIndex, TArray<TSoftObjectPtr<class UTechniqueDataAsset>>* SpellTechniques, enum class EGetResult* Branches);
	void TryGetItemResourceCustomizationData(struct FInventoryEntry& Entry, struct FRegionCustomizationInstanceData* CustomizationReference, enum class EGetResult* Branches);
	void TryGetItemRegionCustomization(struct FInventoryEntry& Entry, struct FInstanceData_RegionCustomization* Customization, enum class EGetResult* Branches);
	void TryGetItemQuality(struct FInventoryEntry& Entry, struct FInstanceData_Quality* Quality, enum class EGetResult* Branches);
	void TryGetItemPrimaryCharacteristicReference(struct FInventoryEntry& Entry, struct FCharacteristicDataReference* CharacteristicReference, enum class EGetResult* Branches);
	void TryGetItemPowerLevel(struct FInventoryEntry& Entry, struct FPowerLevel* ItemPowerLevel, enum class EGetResult* Branches);
	void TryGetItemPerks(struct FInventoryEntry& Entry, struct FInstanceData_Perks* Perks, enum class EGetResult* Branches);
	void TryGetItemFuel(struct FInventoryEntry& Entry, struct FItemInstanceFuelData* Fuel, enum class EGetResult* Branches);
	void TryGetItemEssenceVFXIndex(struct FInventoryEntry& Entry, int32* OutVFXIndex, enum class EGetResult* Branches);
	void TryGetItemDurability(struct FInventoryEntry& Entry, struct FItemInstanceDurabilityData* Durability, enum class EGetResult* Branches);
	void TryGetItemCrafterName(struct FInventoryEntry& Entry, struct FInstanceData_CrafterName* Name, enum class EGetResult* Branches);
	void TryGetItemCharacteristicTags(struct FInventoryEntry& Entry, struct FGameplayTagContainer* CharacteristicTags, enum class EGetResult* Branches);
	void TryGetItemCharacteristicsReferences(struct FInventoryEntry& Entry, TArray<struct FCharacteristicDataReference>* CharacteristicReferences, enum class EGetResult* Branches);
	void TryGetItemCharacteristicInfo(struct FInventoryEntry& Entry, struct FInstanceData_CharacteristicInfo* CharacteristicInfo, enum class EGetResult* Branches);
	void TryGetItemAttributeModifiers(struct FInventoryEntry& Entry, struct FInstanceData_AttributeModifiers* Modifiers, enum class EGetResult* Branches);
	void TryGetItemAmmoClip(struct FInventoryEntry& Entry, struct FInstanceData_AmmoClip* AmmoClip, enum class EGetResult* Branches);
	void TryGetItemAdditionalCharacteristicsReference(struct FInventoryEntry& Entry, TArray<struct FCharacteristicDataReference>* CharacteristicsReference, enum class EGetResult* Branches);
	void TryGetAddressCardData(struct FInventoryEntry& Entry, struct FInstanceData_AddressCard* AddressCard, enum class EGetResult* Branches);
	void SetTraits(struct FInventoryEntry& Entry, struct FInstanceData_Traits& NewTraits);
	void SetItemSpellTechniques(struct FInventoryEntry& Entry, TArray<TSoftObjectPtr<class UTechniqueDataAsset>>& NewSpellTechniques);
	void SetItemRegionCustomization(struct FInventoryEntry& Entry, struct FInstanceData_RegionCustomization& NewCustomization);
	void SetItemQuality(struct FInventoryEntry& Entry, const struct FInstanceData_Quality& NewQuality);
	void SetItemPerks(struct FInventoryEntry& Entry, TArray<struct FItemPerkDataReference>& NewPerks);
	void SetItemCrafterName(struct FInventoryEntry& Entry, struct FInstanceData_CrafterName& NewName);
	void SetItemAttributeModifiers(struct FInventoryEntry& Entry, struct FInstanceData_AttributeModifiers& NewModifiers);
	void SetItemAmmoClip(struct FInventoryEntry& Entry, struct FInstanceData_AmmoClip& NewAmmoClip);
	void SetCharacteristicLevel(struct FInventoryEntry& Entry, int32 Level);
	void RemoveAllItemSpellTechniques(struct FInventoryEntry& Entry);
	struct FInstanceData_CharacteristicInfo MakeInstanceDataCharacteristicInfoFromArray(TArray<struct FCharacteristicDataReference>& CharacteristicReferences);
	bool HasAllCharacteristics(struct FInventoryEntry& Entry, TArray<struct FCharacteristicDataReference>& CharacteristicReferences);
	int32 GetRequiredEssencesForItemRepair(struct FInventoryEntry& Entry);
	struct FPowerLevel GetMaxItemCharacteristicPowerLevel(struct FInventoryEntry& Entry);
	void GetItemWeight(struct FInventoryEntry& Entry, float* OutStackWeight, float* OutIndividualWeight);
	class FText GetItemName(struct FInventoryEntry& Entry);
	float GetItemLevel(struct FInventoryEntry& Entry);
	TSoftObjectPtr<class UTexture2D> GetItemIcon(struct FInventoryEntry& Entry);
	class FText GetItemDescription(struct FInventoryEntry& Entry, bool bExpandedDescription);
	struct FGameplayTag GetItemAVFXTag(struct FInventoryEntry& Entry);
	TSoftObjectPtr<class UStaticMesh> GetGroundMesh(struct FInventoryEntry& Entry);
	int32 GetEssenceCountYieldForExtraction(struct FInventoryEntry& Entry, int32 StackSizeOverride);
	float GetCurrentWeightOfContainer(TScriptInterface<class IItemContainer>& Container);
	struct FPowerLevel GetAverageItemCharacteristicPowerLevel(struct FInventoryEntry& Entry);
	bool CompareItemQualities(struct FInventoryEntry& Entry1, struct FInventoryEntry& Entry2);
	bool CompareItemCharacteristics(struct FInventoryEntry& Entry1, struct FInventoryEntry& Entry2);
	TMap<struct FGameplayAttribute, float> CalculateItemAttributeValues(struct FInventoryEntry& Entry);
	float CalculateItemAttributeValue(struct FInventoryEntry& Entry, struct FGameplayAttribute& Attribute);
	TMap<struct FGameplayAttribute, float> CalculateItemAttributeModifierMultipliers(struct FInventoryEntry& Entry);
	TMap<struct FGameplayAttribute, float> CalculateAttributePercentChange(struct FInventoryEntry& Entry, struct FItemAttributeModifierReference& AttributeModifierReference);
	void AddTraits(struct FInventoryEntry& Entry, struct FInstanceData_Traits& NewTraits);
	void AddItemSpellTechniques(struct FInventoryEntry& Entry, TArray<TSoftObjectPtr<class UTechniqueDataAsset>>& NewSpellTechniques);
	void AddItemPerks(struct FInventoryEntry& Entry, TArray<struct FItemPerkDataReference>& NewPerks);
};

// 0xA0 (0xD0 - 0x30)
// Class NWX.ItemLevelDataRegistry
class UItemLevelDataRegistry : public UDataAsset
{
public:
	TMap<enum class EItemQuality, float>         QualityValues;                                     // 0x30(0x50)(Edit, NativeAccessSpecifierPublic)
	class UCurveFloat*                           PowerLevelValues;                                  // 0x80(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           ResourceLevelValues;                               // 0x88(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           SpellValues;                                       // 0x90(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           AttributeModifierValues;                           // 0x98(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           RepairCostValues;                                  // 0xA0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           ExtractReturnValues;                               // 0xA8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemExtractionQuery>          ExtractionQueries;                                 // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DefaultExtractionCurve;                            // 0xC0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           ResourcePowerLevelCurve;                           // 0xC8(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemLevelDataRegistry* GetDefaultObj();

};

// 0x40 (0xE0 - 0xA0)
// Class NWX.ItemLightComponent
class UItemLightComponent : public UActorComponent
{
public:
	struct FItemData_LightEmitterLights          LightData;                                         // 0xA0(0x20)(NativeAccessSpecifierPrivate)
	TArray<class UPointLightComponent*>          PointLightComponents;                              // 0xC0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USpotLightComponent*>           SpotLightComponents;                               // 0xD0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemLightComponent* GetDefaultObj();

	void UpdateIntensityFromTimeOfDay(float& TimeOfDay);
	void SpawnLights(struct FItemData_LightEmitterLights& SpawningLightData, bool bCanNeverCastShadows);
	void SetComponentVisibility(bool bNewVisibility);
	void SetComponentsHiddenInGame(bool bNewHiddenInGame);
	void DespawnLightsAndDestroy();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemProcessingFunctionLibrary
class UItemProcessingFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemProcessingFunctionLibrary* GetDefaultObj();

	struct FCraftingRecipeReference TryGetCraftingRecipeReferenceFromContext(struct FItemProcessingContext& Context, enum class EGetResult* Branches);
	struct FCraftingRecipe TryGetCraftingRecipeFromContext(struct FItemProcessingContext& Context, enum class EGetResult* Branches);
	TArray<struct FInventoryEntry> TryGetContextualInputsFromContext(struct FItemProcessingContext& Context, enum class EGetResult* Branches);
	struct FItemProcessingContext TryCreateCraftingContext(struct FCraftingRecipeReference& CraftingRecipe, int32 ProcessingIndex, int32 Quantity, TArray<struct FInventoryEntry>& ContextualInputs, bool bInitializeOutput, enum class EGetResult* Branches);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemProcessingObjectInterface
class IItemProcessingObjectInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IItemProcessingObjectInterface* GetDefaultObj();

	TArray<class UItemProcessingDataAsset*> ProcessData(class AActor* InstigatingActor, class AActor* TargetActor, struct FItemProcessingContext& Context, TArray<struct FInventoryEntry>& InputItems, TArray<class UItemProcessingDataAsset*>& ProcessingData, bool* bSuccess);
	TArray<class UItemProcessingDataAsset*> ExecuteAction(class AActor* InstigatingActor, class AActor* TargetActor, struct FItemProcessingContext& Context, TArray<struct FInventoryEntry>& InputItems, TArray<class UItemProcessingDataAsset*>& ProcessingData, bool* bSuccess);
	bool CanProcessData(class AActor* InstigatingActor, class AActor* TargetActor, struct FItemProcessingContext& Context, TArray<struct FInventoryEntry>& InputItems, TArray<class UItemProcessingDataAsset*>& ProcessingData);
	bool CanExecuteAction(class AActor* InstigatingActor, class AActor* TargetActor, struct FItemProcessingContext& Context, TArray<struct FInventoryEntry>& InputItems, TArray<class UItemProcessingDataAsset*>& ProcessingData);
};

// 0x388 (0x6E0 - 0x358)
// Class NWX.ItemProxyBase
class AItemProxyBase : public ANWXActor
{
public:
	uint8                                        Pad_8FD0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       InventoryEntry;                                    // 0x360(0x2F0)(BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FD2[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               InitialImpulse;                                    // 0x6C0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_8FD3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AItemProxyBase* GetDefaultObj();

	bool TryAddItemProxyToStructure(class UObject* Structure);
	void OnRep_InventoryEntry();
	void OnInitialize();
	void FastSharedReplication(struct FItemProxySharedRepMovement& SharedRepMovement);
};

// 0x50 (0x80 - 0x30)
// Class NWX.ItemRepairRegistry
class UItemRepairRegistry : public UDataAsset
{
public:
	TMap<struct FItemDataReference, struct FItemRepairRecipes> ItemRepairMap;                                     // 0x30(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemRepairRegistry* GetDefaultObj();

};

// 0xC8 (0xF0 - 0x28)
// Class NWX.HasItemRequirement
class UHasItemRequirement : public URequirement
{
public:
	uint8                                        Pad_8FD5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemDataReference                    ItemReference;                                     // 0x30(0x80)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 ItemTraits;                                        // 0xB0(0x20)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FCharacteristicDataReference>  ItemCharacteristics;                               // 0xD0(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                         bCheckItemQuality;                                 // 0xE0(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemQuality                      ItemQuality;                                       // 0xE1(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FD6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ItemQuantity;                                      // 0xE4(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FD7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHasItemRequirement* GetDefaultObj();

};

// 0xF0 (0x120 - 0x30)
// Class NWX.ResourceIdToItemTraitsMappingAsset
class UResourceIdToItemTraitsMappingAsset : public UDataAsset
{
public:
	TMap<class FName, class FName>               ResourceIdToGameplayResourceIdCache;               // 0x30(0x50)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FGameplayTagContainer> GameplayResouceIdToItemTraitsCache;                // 0x80(0x50)(NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>             LSTResourceDataPtr;                                // 0xD0(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8FD9[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsResourceIdToGameplayResourceIdCacheBuilt;       // 0x118(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsGameplayResouceIdToItemTraitsCacheBuilt;        // 0x119(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8FDA[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UResourceIdToItemTraitsMappingAsset* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class NWX.ItemResourceDataSubsystem
class UItemResourceDataSubsystem : public UNWXGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UResourceIdToItemTraitsMappingAsset> ResourceIdToItemTraitsMappingCookedDataSourcePtr;  // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UResourceIdToItemTraitsMappingAsset*   ResourceIdToItemTraitsMappingDataSource;           // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemResourceDataSubsystem* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class NWX.ItemReward
class UItemReward : public UDataAsset
{
public:
	uint8                                        Pad_8FDE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemDefinition>               MandatoryItems;                                    // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FItemRewardData                       Rewards;                                           // 0x50(0x18)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        MinGrantQuantity;                                  // 0x68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxGrantQuantity;                                  // 0x6C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TotalBaseWeight;                                   // 0x70(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8FE0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                BaseWeightArray;                                   // 0x78(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	struct FPowerLevel                           PowerLevel;                                        // 0x88(0x4)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_8FE1[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemReward* GetDefaultObj();

	void ValidateMaxQuantities();
	float GetTotalWeight();
	bool GetPowerLevel_Implementation(struct FPowerLevel* OutPowerLevel);
	struct FPowerLevel GetBasePowerLevel();
	void CalculatePowerLevel();
	void CalculateBaseWeights();
};

// 0x8 (0x38 - 0x30)
// Class NWX.ItemRewardBehaviour
class UItemRewardBehaviour : public URewardBehaviour
{
public:
	class UItemReward*                           ItemReward;                                        // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemRewardBehaviour* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemRewardLibrary
class UItemRewardLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemRewardLibrary* GetDefaultObj();

	TArray<struct FInventoryEntry> GenerateItemRewardsFromRewardData(class UItemReward* ItemReward, enum class EItemRewardType RewardType, bool* bOutAwardItem, bool bOverrideGrantCount, int32 GrantCountOverride, class UObject* WorldContextObject);
};

// 0x8 (0x38 - 0x30)
// Class NWX.ItemRewardSubsystem
class UItemRewardSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_8FE5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemRewardSubsystem* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.ItemSeedResourceRegistry
class UItemSeedResourceRegistry : public UDataAsset
{
public:
	TMap<struct FCharacteristicDataReference, class UIIMResourceDataAsset*> ResourceMap;                                       // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UItemSeedResourceRegistry* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemsFunctionLibrary
class UItemsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemsFunctionLibrary* GetDefaultObj();

	bool CompareItemInstanceToDefinition(struct FInventoryEntry& InventoryEntry, struct FItemDefinition& ItemDefinition, bool bExactQuantityMatch, bool bExactInstancedDataMatch);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ItemToolsFunctionLibrary
class UItemToolsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UItemToolsFunctionLibrary* GetDefaultObj();

	class FString CreateCopyableItemFromStrings(const class FString& ItemPath, const class FString& InstanceData);
	class FString CreateCopyableItem(struct FItemDataReference& ItemId, const class FString& InstanceData);
	bool BreakCopiedItem(const class FString& CopiedItemString, class FString* DataTablePath, class FString* RowName, class FString* InstanceData);
};

// 0x50 (0x80 - 0x30)
// Class NWX.ItemWizardSubtypeDataAsset
class UItemWizardSubtypeDataAsset : public UDataAsset
{
public:
	class UItemWizardTypeDataAsset*              ParentType;                                        // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Subtype;                                           // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemType                         ItemType;                                          // 0x48(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FE8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxStackCount;                                     // 0x4C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 MetaTags;                                          // 0x50(0x20)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class UItemSubtypeObject*>            ItemSubTypes;                                      // 0x70(0x10)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemWizardSubtypeDataAsset* GetDefaultObj();

};

// 0xA0 (0xD0 - 0x30)
// Class NWX.ItemWizardTypeDataAsset
class UItemWizardTypeDataAsset : public UDataAsset
{
public:
	class FString                                Type;                                              // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemType                         ItemType;                                          // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FEA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class AEquippableItem>         ItemActor;                                         // 0x48(0x28)(Edit, BlueprintVisible, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxStackCount;                                     // 0x70(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FEC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 MetaTags;                                          // 0x78(0x20)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                StringTable;                                       // 0x98(0x28)(Edit, BlueprintVisible, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UItemSubtypeObject*>            ItemSubTypes;                                      // 0xC0(0x10)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemWizardTypeDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.KeyBindingBPFunctionLibrary
class UKeyBindingBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKeyBindingBPFunctionLibrary* GetDefaultObj();

	void SaveGameExistsValidation(class UDataTable* ActionDataTable, class UDataTable* AxisDataTable, const class FString& SlotName, int32 UserIndex);
	void ResetKeyBindingsToDefault(class UDataTable* ActionDataTable, class UDataTable* AxisDataTable, class UOptionsControls* OptionsControls);
	void LoadKeyBindingMaps(class UDataTable* ActionDataTable, class UDataTable* AxisDataTable, const class FString& SlotName, int32 UserIndex);
	void CheckOtherKeyMappings(class UDataTable* ActionDataTable, class UDataTable* AxisDataTable, TArray<class FName>& ActionNames, TArray<class FName>& AxisNames, struct FInputChord& SelectedKey);
	void CheckAxisKeyForNone(class UDataTable* AxisDataTable, class FName& AxisName, const class FString& InputDeviceString, struct FInputChord& SelectedKey);
};

// 0xA0 (0xC8 - 0x28)
// Class NWX.KeyBindingSaveGame
class UKeyBindingSaveGame : public USaveGame
{
public:
	TMap<class FName, struct FS_ActionKeyBinding> ActionKeyBindingMap;                               // 0x28(0x50)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FS_AxisKeyBinding>  AxisKeyBindingMap;                                 // 0x78(0x50)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UKeyBindingSaveGame* GetDefaultObj();

};

// 0x78 (0xB0 - 0x38)
// Class NWX.KeyMappingDeveloperSettings
class UKeyMappingDeveloperSettings : public UDeveloperSettings
{
public:
	TArray<TSoftObjectPtr<class UInputMappingContext>> RegisteredMappingContexts;                         // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bGamepadMappingEnabled;                            // 0x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FF5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<struct FKey>                            ExcludedKeys;                                      // 0x50(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSynchronizedKeyMapping>       SynchronizedInputActions;                          // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UKeyMappingDeveloperSettings* GetDefaultObj();

};

// 0x20 (0xC0 - 0xA0)
// Class NWX.LevelAwareComponent
class ULevelAwareComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnLevelStreamingComplete;                          // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsLevelStreamingComplete;                         // 0xB0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FF7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AStreamingLevelProxyActor> LevelProxy;                                        // 0xB4(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_8FF8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelAwareComponent* GetDefaultObj();

	class AStreamingLevelProxyActor* GetLevelProxy();
	bool GetLevelActors(TArray<class AActor*>* OutLevelActors);
};

// 0x18 (0x168 - 0x150)
// Class NWX.LevelStreamingAwaiter
class ULevelStreamingAwaiter : public UBasicAwaiter
{
public:
	uint8                                        Pad_8FFA[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreamingAwaiter* GetDefaultObj();

	void OnLastLevelStreamedTimerExpired();
};

// 0x80 (0x178 - 0xF8)
// Class NWX.LoadoutComponentBase
class ULoadoutComponentBase : public UPersistentDataComponent
{
public:
	FMulticastInlineDelegateProperty_            OnLoadoutSlotChange;                               // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            LoadoutChanged;                                    // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FLoadoutSlot>                  LoadoutSlots;                                      // 0x118(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, enum class ELoadoutSlotType> TagToTypeMap;                                      // 0x128(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ULoadoutComponentBase* GetDefaultObj();

	void UnsheatheSlot(struct FGameplayTag& SlotTag);
	void UnEquipItem(enum class ELoadoutSlotType SlotType);
	void SheatheSlot(struct FGameplayTag& SlotTag);
	void PutItemInSlot(struct FGameplayTag& SlotTag, class AEquippableItem* Item, struct FInventoryEntry& InventoryEntry, bool* OutSuccess, struct FGameplayTag* OutDestinationSlotTag, struct FLoadoutSlot* OutLoadoutSlot);
	void PopulateLoadoutSlotsFromMetadata(TMap<class FString, class FString>& MetaData);
	void OnRep_LoadoutSlots(TArray<struct FLoadoutSlot>& OldData);
	void InitializeLoadoutSlots();
	void HandleOffHandActivity(class AEquippableItem* ItemBeingEquipped);
	struct FLoadoutSlot GetSlotByType(enum class ELoadoutSlotType& Type);
	class AEquippableItem* GetItemInSlot(struct FGameplayTag& SlotTag);
	bool EquipItem(enum class ELoadoutSlotType SlotType);
	void ClearSlotWithTag(struct FGameplayTag& SlotTag, bool* OutSuccess, class AEquippableItem** OutSlotItem, struct FGuid* OutInstanceID);
	void ClearSlotWithItemID(struct FItemDataReference& ItemId, bool* OutSuccess, class AEquippableItem** OutSlotItem, struct FGuid* OutInstanceID);
	void ClearSlotWithInstanceID(struct FGuid& InstanceID, bool* OutSuccess, class AEquippableItem** OutSlotItem);
};

// 0x0 (0x28 - 0x28)
// Class NWX.LoadoutControlInterface
class ILoadoutControlInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILoadoutControlInterface* GetDefaultObj();

	void LoadoutUpdated(struct FGuid& ItemId, bool bEquipped);
	void InventoryUpdated();
	class AEquippableItem* GetItemEquippedInSlot(struct FGameplayTag& SlotTag);
};

// 0x0 (0x28 - 0x28)
// Class NWX.LocationTrackerInterface
class ILocationTrackerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILocationTrackerInterface* GetDefaultObj();

	void Server_UpdateMapPinData(struct FMapPinData& MapPinData);
	void Server_RemoveMapPinData(struct FGuid& MapPinId);
	void Server_DiscoverLocation(struct FDiscoverableData& Discoverable);
	void Server_DebugShowAndUnlockAllMapPins();
	void Server_AddMapPinData(struct FMapPinData& MapPinData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.LockedContainerInterface
class ILockedContainerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILockedContainerInterface* GetDefaultObj();

	void SetIsContainerLocked(bool bIsLocked);
	bool IsContainerLocked();
};

// 0x60 (0x100 - 0xA0)
// Class NWX.LogSamplingComponent
class ULogSamplingComponent : public UActorComponent
{
public:
	TArray<struct FVerbosityChange>              VerbosityChanges;                                  // 0xA0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_900D[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULogSamplingComponent* GetDefaultObj();

	void OnRep_VerbosityChanges();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ManagedInstance
class IManagedInstance : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IManagedInstance* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.MapBPFunctionLibrary
class UMapBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UMapBPFunctionLibrary* GetDefaultObj();

	void SaveWorldMapScreenshot(const class FString& SaveFileDirectory, const class FString& SaveFile);
	class UTexture2D* LoadTexture2DFromFile(const class FString& FullFilePath, enum class EImageFormats ImageFormat, bool bDoNotDeleteFile);
};

// 0x50 (0x2F0 - 0x2A0)
// Class NWX.MapLayers
class AMapLayers : public AActor
{
public:
	TMap<class FString, class UTexture2D*>       TextureMapMasks;                                   // 0x2A0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMapLayers* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.NWXEditorMapListConfig
class UNWXEditorMapListConfig : public UObject
{
public:
	TArray<class FString>                        Map;                                               // 0x28(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXEditorMapListConfig* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.NWXFatFreeMapListConfig
class UNWXFatFreeMapListConfig : public UNWXEditorMapListConfig
{
public:

	static class UClass* StaticClass();
	static class UNWXFatFreeMapListConfig* GetDefaultObj();

};

// 0x0 (0x2C0 - 0x2C0)
// Class NWX.MapLocationManager
class AMapLocationManager : public AManagerBase
{
public:

	static class UClass* StaticClass();
	static class AMapLocationManager* GetDefaultObj();

};

// 0x348 (0x3E8 - 0xA0)
// Class NWX.MapLocationTracker
class UMapLocationTracker : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnDiscoverableDataAdded;                           // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMapPinDataAdded;                                 // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMapPinDataUpdated;                               // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMapPinDataRemoved;                               // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AMapPinClientActor>        WorldSpaceClientActorClass;                        // 0xE0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsUsingDebugUnlock;                               // 0xE8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_901A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMapPinDataArraySerializer            MapPinSerializer;                                  // 0xF0(0x148)(Net, NativeAccessSpecifierPrivate)
	struct FMapPinDataArraySerializer            PartyMapPinSerializer;                             // 0x238(0x148)(Net, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                         DiscoveredLocationIds;                             // 0x380(0x10)(Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class AActor*>            WorldSpaceActors;                                  // 0x390(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_901B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapLocationTracker* GetDefaultObj();

	void Server_UpdateMapPinDataInPlayerView(struct FMapPinData& MapPinData);
	void Server_RemoveMapPinDataFromPlayerView(struct FGuid& MapPinId);
	void Server_DebugShowAndUnlockAllMapPins();
	void Server_AddMapPinDataToPlayerView(struct FMapPinData& MapPinData);
	void Server_AddDiscoverableDataToPlayerView(struct FDiscoverableData& DiscoverableData);
	void OnPlayerControllerReady(bool Success);
	bool IsLocationDiscovered(struct FGuid& DiscoverableId);
	void HandlePlayerLeftParty(const class FString& RoomId);
	void HandlePlayerJoinedParty(const class FString& RoomId);
	void HandlePartyMemberLeave(const class FString& RoomId, const class FString& ProfileId);
	void HandlePartyMemberJoined(const class FString& RoomId, const class FString& ProfileId);
	TArray<struct FMapPinData> GetPlayersMapPins();
	TArray<struct FMapPinData> GetPlacedStamps();
	int32 GetPlacedStampCount();
	TArray<struct FMapPinData> GetPlacedBeacons();
	int32 GetPlacedBeaconCount();
	TArray<struct FMapPinData> GetAllMapPins();
	void Client_NotifyNewDiscoverableLocation(struct FDiscoverableData& DiscoverableData);
};

// 0x8 (0x30 - 0x28)
// Class NWX.MapPinCheats
class UMapPinCheats : public UCheatManagerExtension
{
public:
	uint8                                        Pad_901E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapPinCheats* GetDefaultObj();

	void MoveMapPin(const class FString& ID, float X, float Y, float Z, float HeightTest);
	void ListClientMapPins();
};

// 0x130 (0x3D0 - 0x2A0)
// Class NWX.MapPinClientActor
class AMapPinClientActor : public AActor
{
public:
	struct FMapWaypointInfo                      WaypointInfo;                                      // 0x2A0(0x120)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_901F[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMapPinClientActor* GetDefaultObj();

};

// 0x20 (0x3C0 - 0x3A0)
// Class NWX.MapPinDiscoveryComponent
class UMapPinDiscoveryComponent : public UMapPinComponent
{
public:
	float                                        DiscoveryRadius;                                   // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTrackingPlayersForDiscovery;                    // 0x3A4(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9020[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        VisibleToPlayerIds;                                // 0x3A8(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          DistanceCheckTimerHandle;                          // 0x3B8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMapPinDiscoveryComponent* GetDefaultObj();

	void StopTrackingPlayersForDiscovery();
	void StartTrackingPlayersForDiscovery();
};

// 0x50 (0x80 - 0x30)
// Class NWX.MapPinServerWorldSubsystem
class UMapPinServerWorldSubsystem : public UNWXWorldSubsystem
{
public:
	uint8                                        Pad_9022[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapPinServerWorldSubsystem* GetDefaultObj();

	TArray<struct FMapPinData> Server_GetMapPinData(enum class EMapMarkerType MarkerType);
};

// 0x8 (0x38 - 0x30)
// Class NWX.MapTextureSubsystem
class UMapTextureSubsystem : public UNWXWorldSubsystem
{
public:
	class AMapLayers*                            MapLayersActorCache;                               // 0x30(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMapTextureSubsystem* GetDefaultObj();

	bool HasValidLayerTextures();
	class UTexture2D* GetMapLayerTexture(enum class EMapTextureLayer Layer);
};

// 0x60 (0x100 - 0xA0)
// Class NWX.MapTrailProvider
class UMapTrailProvider : public UActorComponent
{
public:
	float                                        UpdatePeriodSeconds;                               // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpdateDistanceThreshold;                           // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasKnownLocation;                                 // 0xA8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9024[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastKnownLocation;                                 // 0xB0(0x18)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MapTrailLength;                                    // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9025[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector2D>                     MapTrailPoints;                                    // 0xD0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                          Auth_LocationUpdateTimerHandle;                    // 0xE0(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          OwningClient_TrailUpdateTimerHandle;               // 0xE8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                             MapSize;                                           // 0xF0(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMapTrailProvider* GetDefaultObj();

	void OwningClient_UpdateTrail();
	void OwningClient_StopUpdatingTrailTimer();
	void OwningClient_StartUpdatingTrailTimer();
	bool IsOwningClient();
	void Auth_UpdateLocation();
	void Auth_StopUpdatingLocationTimer();
	void Auth_StartUpdatingLocationTimer();
};

// 0x40 (0x70 - 0x30)
// Class NWX.MapUtilitiesWorldSubsystem
class UMapUtilitiesWorldSubsystem : public UNWXWorldSubsystem
{
public:
	uint8                                        Pad_9027[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapUtilitiesWorldSubsystem* GetDefaultObj();

	void HandlePostLoadMapWithWorld(class UWorld* World);
	struct FVector GetWorldSize();
	struct FVector2D ConvertWorldPointToMapPoint(struct FVector& WorldPoint, struct FVector2D& MapSize);
	struct FVector ConvertMapPointToWorldPoint(struct FVector2D& MapPoint, struct FVector2D& MapSize);
};

// 0x38 (0x60 - 0x28)
// Class NWX.MatchesPlayerRespawnContextStrategy
class UMatchesPlayerRespawnContextStrategy : public UAbstractPlayerStartStrategy
{
public:
	struct FGuid                                 RespawnPlayerStartId;                              // 0x28(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                IncomingPlayerStartTag;                            // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  IncomingPlayerStartTagAsName;                      // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                IncomingProfileId;                                 // 0x50(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMatchesPlayerRespawnContextStrategy* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.MatchesTagOrIsBackupStrategy
class UMatchesTagOrIsBackupStrategy : public UAbstractPlayerStartStrategy
{
public:
	class FString                                IncomingPlayerStartTag;                            // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  IncomingPlayerStartTagAsName;                      // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMatchesTagOrIsBackupStrategy* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class NWX.MenusComponent
class UMenusComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UMenusComponent* GetDefaultObj();

	void SimulateKeyPress(const struct FKey& KeyToSimulate);
	void RevealWindowUnderneath(class UNWXWindowWidget* Window, enum class ESlateVisibility Visibility);
	void PushWindow(class UNWXWindowWidget* Window, int32 ZOrder);
	class UNWXWindowWidget* PopWindow(class UNWXWindowWidget* OptionalWindowToRemove);
	void OpenPlayerReadinessWindow();
	void OpenFeedbackWindow();
	void K2_OpenWindowInternal(class UNWXWindowWidget* Window, int32 ZOrder);
	bool IsWindowInStack(class UNWXWindowWidget* Window);
	void InstantSwitchToWindow(const struct FKey& Key);
	class ANWXPlayerController* GetNWXPlayerController();
	class ANWXHUDBase* GetNWXHUD();
	class UNWXWindowWidget* GetCurrentlyOpenWindow();
};

// 0x0 (0x28 - 0x28)
// Class NWX.MenusComponentProviderInterface
class IMenusComponentProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMenusComponentProviderInterface* GetDefaultObj();

	class UMenusComponent* GetMenusComponent();
};

// 0x0 (0x28 - 0x28)
// Class NWX.MinCongestionStrategy
class UMinCongestionStrategy : public UAbstractPlayerStartStrategy
{
public:

	static class UClass* StaticClass();
	static class UMinCongestionStrategy* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.MockBuildingComponent
class UMockBuildingComponent : public UActorComponent
{
public:
	uint8                                        Pad_9030[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMockBuildingComponent* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.SnapRulesEnforcer
class USnapRulesEnforcer : public UObjectWithWorld
{
public:
	struct FSnapRules                            DefaultRule;                                       // 0x28(0x20)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	class USnapPointRules*                       DefaultSnapPointRules;                             // 0x48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class USnapRulesEnforcer* GetDefaultObj();

	enum class ESnapType GetSnapTypeFromSnapPoint(struct FGridPoint& Point);
	struct FSnapRules GetSnapRuleForPoints(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint);
	TArray<int32> FilterSourcePointIndexes(struct FGridPoint& TargetPoint, class UCompositePieceSnapObject* SnapObject, TArray<int32>& SourcePointIndexes);
	int32 ChooseSnapPoint(struct FGridPoint& TargetPoint, TArray<int32>& SourcePointIndexes, class UCompositePieceSnapObject* SnapObject);
	struct FTransform CalculateSnapTransformForPoints(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint, const struct FVector& OptionalRotation);
	bool AreRulesSatisfied(struct FGridPoint& SourcePoint, struct FGridPoint& TargetPoint);
};

// 0x18 (0x68 - 0x50)
// Class NWX.MockSnapRulesEnforcer
class UMockSnapRulesEnforcer : public USnapRulesEnforcer
{
public:
	uint8                                        Pad_903A[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMockSnapRulesEnforcer* GetDefaultObj();

	void SetSnapTypesToReturn(TArray<enum class ESnapType>& InSnapTypesToReturn);
	void ResetCallCount();
	enum class ESnapType MockGetSnapTypeFromPoint(struct FGridPoint& Point);
};

// 0x8 (0x40 - 0x38)
// Class NWX.MontageNotifyWindow_FPTP
class UMontageNotifyWindow_FPTP : public UAnimNotify_PlayMontageNotifyWindow
{
public:
	bool                                         bAlwaysAllowNotifyEnd;                             // 0x38(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_903B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMontageNotifyWindow_FPTP* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.MontageNotify_FPTP
class UMontageNotify_FPTP : public UAnimNotify_PlayMontageNotify
{
public:

	static class UClass* StaticClass();
	static class UMontageNotify_FPTP* GetDefaultObj();

};

// 0x310 (0x3B0 - 0xA0)
// Class NWX.MusicManager
class UMusicManager : public UActorComponent
{
public:
	TArray<struct FAmbientEnemyStingerBucket>    AmbientEnemyStingerBuckets;                        // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkRtpc*                               MiasmaDistanceRTPC;                                // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               MiasmaAzimuthRTPC;                                 // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FEnemyStingerBucketWithRange          BoundMiasmaStingers;                               // 0xC0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkStateValue*                         NoneMusicState;                                    // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxDistanceRTPCValue;                              // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9067[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyModeFilteredStinger>       CampingStingers;                                   // 0xF8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                 CampingStatusEffectTags;                           // 0x108(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        CampingStingerRange;                               // 0x128(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinTimeBetweenCampingStingers;                     // 0x12C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTimeBetweenCampingStingers;                     // 0x130(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9068[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyModeFilteredStinger>       QuestNPCStingers;                                  // 0x138(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        MinTimeBetweenQuestNPCStingers;                    // 0x148(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTimeBetweenQuestNPCStingers;                    // 0x14C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EstateScoreMusicThreshold;                         // 0x150(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9069[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyModeFilteredStinger>       LongRestStingers;                                  // 0x158(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKeyModeFilteredStinger>       QuestStartedStingers;                              // 0x168(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKeyModeFilteredStinger>       QuestCompletedStingers;                            // 0x178(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKeyModeFilteredStinger>       VaultQuestStartedStingers;                         // 0x188(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKeyModeFilteredStinger>       VaultQuestCompletedStingers;                       // 0x198(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	double                                       MinTimeBetweenQuestStingersSecs;                   // 0x1A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXPlayerController*                  LocalPlayerController;                             // 0x1B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXCharacter*                         LocalPlayerCharacter;                              // 0x1B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXAbilitySystemComponent*            LocalPlayerASC;                                    // 0x1C0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkStateValue*                         CurrentMusicState;                                 // 0x1C8(0x8)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EMusicPriority, class UAkStateValue*> ActiveMusicStates;                                 // 0x1D0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                         bStingersEnabled;                                  // 0x220(0x1)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_906B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                ClosestEncounterMusicSource;                       // 0x228(0x8)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UAkRtpc*, class AActor*>          DynamicRTPCConnections;                            // 0x230(0x50)(Edit, BlueprintVisible, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsInAtonalMode;                                   // 0x280(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_906C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<enum class EMusicKey>                   CurrentValidKeys;                                  // 0x288(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TSet<enum class EMusicMode>                  CurrentValidModes;                                 // 0x2D8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_906D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          CampingStingerTimer;                               // 0x338(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_906E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          QuestNPCStingerTimer;                              // 0x348(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                       LastQuestStingerTriggerTime;                       // 0x350(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_906F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class AActor*>                          EncounterMusicActorsInRange;                       // 0x360(0x50)(Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMusicManager* GetDefaultObj();

	void UpdateValidKeysAndModes(const class FString& WWiseCallbackString);
	void UpdateCombatBucketCooldown(class UAkStateValue* MusicState);
	void UnregisterEncounterInRange(class AActor* EncounterMusicActor);
	bool TryUpdateMiasmaCloudMusicRTPCs(class AActor* MiasmaCloudActor);
	bool TryUpdateDynamicRTPC(class UAkRtpc* DynamicRTPC, class AActor* SourceActor, float RTPCValue);
	bool TryUpdateDistanceRTPC(class UAkRtpc* DistanceRTPC, class AActor* SourceActor);
	bool TryUpdateAzimuthRTPC(class UAkRtpc* AzimuthRTPC, class AActor* SourceActor);
	bool TryTriggerVaultQuestStartedStinger();
	bool TryTriggerVaultQuestCompletedStinger();
	bool TryTriggerQuestStartedStinger();
	bool TryTriggerQuestNPCStinger();
	bool TryTriggerQuestCompletedStinger();
	bool TryTriggerLongRestStinger();
	bool TryTriggerCampingStinger();
	bool TrySetMusicState(class UAkStateValue* MusicState, enum class EMusicPriority Priority, bool bSetIfContested);
	bool TrySetEncounterMusicState(class UAkStateValue* EncounterState, enum class EMusicPriority Priority, class AActor* SourceActor);
	bool TryPlayStingerWithPriority(class UAkAudioEvent* StingerEvent, enum class EMusicPriority Priority, bool bForcePlay);
	bool TryPlayStinger(class UAkAudioEvent* StingerEvent, bool bForcePlay);
	bool TryPlayMiasmaCloudStinger(class AActor* MiasmaCloudActor, TArray<class UClass*>& SpawningClasses);
	bool TryPlayEncounterStinger(class UAkAudioEvent* StingerEvent, enum class EMusicPriority Priority, class AActor* SourceActor, bool bForcePlay);
	void TriggerAmbientStingerForEnemyBucket(struct FAmbientEnemyStingerBucket& Bucket);
	void StopQuestNPCStingerTimer();
	void StopCampingStingerTimer();
	void StartQuestNPCStingerTimer();
	void StartCampingStingerTimer();
	void RevokeMusicState(class UAkStateValue* MusicState);
	void RevokeMusicPriority(enum class EMusicPriority Priority);
	void RevokeEncounterMusic(enum class EMusicPriority Priority, class AActor* SourceActor);
	void RevokeDynamicRTPCConnection(class UAkRtpc* DynamicRTPC, class AActor* SourceActor);
	void RevokeDistanceRTPC(class UAkRtpc* DistanceRTPC, class AActor* SourceActor);
	void RevokeAzimuthRTPC(class UAkRtpc* AzimuthRTPC, class AActor* SourceActor);
	void RegisterEncounterInRange(class AActor* EncounterMusicActor);
	void LocalPlayerSpawned(class ANWXCharacter* LocalPlayer);
	bool IsMusicStateActiveAtPriority(class UAkStateValue* MusicState, enum class EMusicPriority Priority);
	bool IsMusicStateActive(class UAkStateValue* MusicState);
	bool IsMusicPriorityActive(enum class EMusicPriority Priority);
	bool IsLocalPlayerVisitingEstate(float EstateScoreThreshold);
	bool IsLocalPlayerTalkingToQuestNPC();
	bool IsLocalPlayerCamping();
	bool IsAnyMusicStateActive();
	void HandleQuestNPCStingerTimerFinished();
	void HandleQuestGiverSessionChanged();
	void HandleLoadingScreenVisibilityChanged(bool LoadingScreenVisibility);
	void HandleCampingStingerTimerFinished();
	class UAkAudioEvent* FindValidKeyModeFilteredStinger(TArray<struct FKeyModeFilteredStinger>& Options);
};

// 0x40 (0x2E0 - 0x2A0)
// Class NWX.MusicStingerRadius
class AMusicStingerRadius : public AActor
{
public:
	float                                        PlaybackRadius;                                    // 0x2A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinTimeBetweenStingers;                            // 0x2A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTimeBetweenStingers;                            // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9072[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkAudioEvent*                         StingerEvent;                                      // 0x2B0(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EMusicPriority                    StingerMusicPriority;                              // 0x2B8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9073[0x27];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMusicStingerRadius* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class NWX.MutePlayerSubsystem
class UMutePlayerSubsystem : public ULocalPlayerSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnMuteStatusChange;                                // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<class FString>                          MutedPlayerIds;                                    // 0x40(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMutePlayerSubsystem* GetDefaultObj();

	bool UnMutePlayer(const class FString& UniquePlayerId);
	bool MutePlayer(const class FString& UniquePlayerId);
	bool IsPlayerMuted(const class FString& UniquePlayerId);
	TSet<class FString> GetMutedPlayerIds();
};

// 0x0 (0x3A0 - 0x3A0)
// Class NWX.NarrativeNPCMapPinComponent
class UNarrativeNPCMapPinComponent : public UMapPinComponent
{
public:

	static class UClass* StaticClass();
	static class UNarrativeNPCMapPinComponent* GetDefaultObj();

};

// 0x8 (0x2C8 - 0x2C0)
// Class NWX.NeuronNexus
class ANeuronNexus : public AManagerBase
{
public:
	class UBasicAwaiter*                         Awaiter;                                           // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANeuronNexus* GetDefaultObj();

};

// 0x0 (0xA0 - 0xA0)
// Class NWX.NeuronTerminal
class UNeuronTerminal : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UNeuronTerminal* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NotifyNearbyPhysicsInterface
class INotifyNearbyPhysicsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INotifyNearbyPhysicsInterface* GetDefaultObj();

	void UnbindEventFrom_OnNotifyNearbyPhysics(FDelegateProperty_& Delegate);
	void BindEventTo_OnNotifyNearbyPhysics(FDelegateProperty_& Delegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NPCBlueprintHelper
class UNPCBlueprintHelper : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNPCBlueprintHelper* GetDefaultObj();

	bool GetNPCNarrativeDataFromDataTableRow(struct FDataTableRowHandle& InRow, struct FNWXNPCNarrativeData* OutNPCNarrativeData, enum class ENPCBlueprintHelperGetResult* Branches);
	bool GetNPCHumanDataFromDataTableRow(struct FDataTableRowHandle& InRow, struct FNWXNPCHumanData* OutNPCHumanData, enum class ENPCBlueprintHelperGetResult* Branches);
	bool GetNPCEstateDataFromDataTableRow(struct FDataTableRowHandle& InRow, struct FNWXNPCEstateData* OutNPCEstateData, enum class ENPCBlueprintHelperGetResult* Branches);
	bool GetNPCDataFromDataTableRow(struct FDataTableRowHandle& InRow, struct FNWXNPCData* OutNPCData, enum class ENPCBlueprintHelperGetResult* Branches);
	bool GetDesireFromDataTableRow(struct FDataTableRowHandle& InDesireRow, struct FNWXNPCDesireData* OutDesire, enum class ENPCBlueprintHelperGetResult* Branches);
	struct FGameplayTagContainer GetAllDesireTagsOfType(enum class ENWXNPCDesireType Type, class UDataTable* DataTable);
};

// 0xF8 (0x1370 - 0x1278)
// Class NWX.NWXAbilitySystemComponent
class UNWXAbilitySystemComponent : public UAbilitySystemComponent
{
public:
	uint8                                        Pad_90A5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnOwnedGameplayTagCountChanged;                    // 0x1280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAbilityActivationFailed;                         // 0x1290(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 InitialGameplayTags;                               // 0x12A0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                         bStatsInitialized;                                 // 0x12C0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bAbilitiesInitialized;                             // 0x12C1(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bEffectsInitialized;                               // 0x12C2(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_90A8[0xAD];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAbilitySystemComponent* GetDefaultObj();

	void UnbindFrom_AbilityEndedDelegate(FDelegateProperty_& NWXAbilityEndedDelegate);
	bool SetGameplayEffectDurationHandle(const struct FActiveGameplayEffectHandle& Handle, float NewDuration);
	int32 RemoveAllActiveEffects();
	struct FGameplayEffectContextHandle MakeNWXEffectContext();
	void IsAnyAbilityActive(bool* bIsAnyAbilityActive);
	bool IsAbilitySystemLocked();
	void IsAbilityActive(TSubclassOf<class UNWXGameplayAbility>& Ability, bool* bIsAbilityActive);
	bool HasAbilityGranted(TSubclassOf<class UNWXGameplayAbility>& Ability);
	void HandleScopedAggregatorLockEnded();
	void HandleOnGameplayEffectAppliedToSelf(class UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecApplied, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void HandleGenericGameplayTagEvent(const struct FGameplayTag& Tag, int32 Count);
	void HandleGameplayEffectRemoved(struct FActiveGameplayEffect& Effect);
	void HandleGameplayEffectInhibitionChanged(const struct FActiveGameplayEffectHandle& ActiveHandle, bool bIsInhibited);
	void HandleDynamicGameplayCues_Removed(struct FGameplayEffectRemovalInfo& RemovalInfo);
	void HandleDynamicGameplayCues_Applied(class UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecApplied, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void HandleAbilityActivationFailure(class UGameplayAbility* Ability, struct FGameplayTagContainer& Reason);
	int32 GetTagCount(struct FGameplayTag& Tag);
	class UNWXAttributeSet* GetAttributeSubobject();
	class FString FailureFlagsToString(struct FAbilityActivationFailureFlags& FailureFlags);
	void ExecuteGameplayCueLocal(struct FGameplayTag& GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters);
	bool Equals(struct FAbilityActivationFailureFlags& A, struct FAbilityActivationFailureFlags& B);
	void DEBUG_CanActivateAbility(TSubclassOf<class UNWXGameplayAbility>& Ability, bool* bCanBeActivated, struct FAbilityActivationFailureFlags* FailureFlags);
	void CancelAllAbilities();
	void CancelAbilitiesByTag(struct FGameplayTagContainer& WithTags, struct FGameplayTagContainer& WithoutTags);
	bool CanActivateAbilityByTag(struct FGameplayTagContainer& GameplayTagContainer, struct FGameplayTagContainer* OptionalRelevantTags);
	bool CanActivateAbilityByEvent(struct FGameplayTag& EventTag, struct FGameplayTagContainer* OptionalRelevantTags);
	bool CanActivateAbility(TSubclassOf<class UGameplayAbility>& InAbility, struct FGameplayTagContainer* OptionalRelevantTags);
	void BindTo_AbilityEndedDelegate(FDelegateProperty_& NWXAbilityEndedDelegate);
};

// 0x0 (0x2A8 - 0x2A8)
// Class NWX.NWXAbilitySystemGlobals
class UNWXAbilitySystemGlobals : public UAbilitySystemGlobals
{
public:

	static class UClass* StaticClass();
	static class UNWXAbilitySystemGlobals* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ACAAvoidanceInterface
class IACAAvoidanceInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IACAAvoidanceInterface* GetDefaultObj();

};

// 0x70 (0x98 - 0x28)
// Class NWX.NWXACACrowdManager
class UNWXACACrowdManager : public UCrowdManagerBase
{
public:
	uint8                                        Pad_90A9[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXACACrowdManager* GetDefaultObj();

	int32 GetObjectCount();
	int32 GetNewAvoidanceUID();
};

// 0x0 (0x28 - 0x28)
// Class NWX.AccumulationHandleFunctionLibrary
class UAccumulationHandleFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAccumulationHandleFunctionLibrary* GetDefaultObj();

	bool NotEqual_AccumulationHandle(struct FAccumulationHandle& A, struct FAccumulationHandle& B);
	bool EqualEqual_AccumulationHandle(struct FAccumulationHandle& A, struct FAccumulationHandle& B);
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.NWXAccumulationComponent
class UNWXAccumulationComponent : public UActorComponent
{
public:
	uint8                                        Pad_90AC[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAccumulationInstance>         AccumulationInstances;                             // 0xE8(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXAccumulationComponent* GetDefaultObj();

	void OnRep_AccumulationInstances(TArray<struct FAccumulationInstance>& OldArray);
};

// 0x18 (0x360 - 0x348)
// Class NWX.NWXActionStationAnimInstance
class UNWXActionStationAnimInstance : public UAnimInstance
{
public:
	bool                                         IsMinHealth;                                       // 0x348(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsTransitioning;                                   // 0x349(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsEntering;                                        // 0x34A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsExiting;                                         // 0x34B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Position;                                          // 0x34C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANWXAICharacter*                       Owner;                                             // 0x350(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90AD[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXActionStationAnimInstance* GetDefaultObj();

};

// 0xC8 (0xF0 - 0x28)
// Class NWX.ActionStationUser
class UActionStationUser : public UObject
{
public:
	TWeakObjectPtr<class ACharacter>             User;                                              // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXActionStationComponent*            Owner;                                             // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90B0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ActionStationIndex;                                // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EnterAnimationIndex;                               // 0x44(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90B1[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActionMontageCompleted;                          // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_90B2[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActionMontageNotifyBegin;                        // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActionMontageNotifyEnd;                          // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActionMontageInterrupted;                        // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_90B3[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActionMontageBlendOut;                           // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UActionStationUser* GetDefaultObj();

	void OnNotifyEndReceived(class FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
	void OnNotifyBeginReceived(class FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnActionMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void ActionStationUserDestroyed(class AActor* DestroyedActor);
};

// 0xE0 (0x670 - 0x590)
// Class NWX.NWXActionStationComponent
class UNWXActionStationComponent : public UArrowComponent
{
public:
	class UDataTable*                            AnimationTable;                                    // 0x590(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                    ActionStationTransforms;                           // 0x598(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	enum class EMovementMode                     ActionStationMovementMode;                         // 0x5A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShouldCheckIfStartIsOnGround;                      // 0x5A9(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShouldCheckIfEndIsOnGround;                        // 0x5AA(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90C0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxEndHeightAdjustment;                            // 0x5AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxStartHeightAdjustment;                          // 0x5B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxExitHeightAdjustment;                           // 0x5B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ActionStationCollisionPreset;                      // 0x5B8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           GrantedGameplayEffect;                             // 0x5C0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExitSweepRadius;                                   // 0x5C8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90C1[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Owner;                                             // 0x620(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UActionStationUser*>            ActionStationUsers;                                // 0x628(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_90C2[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ACharacter*>                    Users;                                             // 0x648(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_90C3[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXActionStationComponent* GetDefaultObj();

	void UseActionStationInternal(class ACharacter* Character, int32 ActionIndex, int32 AnimIndex);
	void UseActionStation(class ACharacter* Character, int32 ActionIndex, int32 AnimIndex);
	bool TryAndClaimBestActionStation(class ACharacter* Character, struct FTransform* ActionStationStartTransform, int32* ActionStationIndex, int32* AnimIndex);
	void StopUsingActionStation(class ACharacter* Character, int32 ActionIndex, int32 AnimIndex, bool bImmediate);
	void PlayActionStation(class ACharacter* Character, int32 ActionStationIndex);
	void OnRep_Users();
	bool HasAvailableActionStations(class ACharacter* Character);
	bool HasActionStationUserForCharacter(class ACharacter* Character);
	class UActionStationUser* GetActionStationUserForCharacter(class ACharacter* Character);
	bool GetActionStationIndexesForCharacter(class ACharacter* Character, int32* ActionStationIndex, int32* AnimIndex);
	bool FindBestActionStation(class ACharacter* Character, struct FTransform* ActionStationStartTransform, int32* ActionStationIndex, int32* AnimIndex);
	bool ClearClaimedActionStation(class ACharacter* Character);
	bool ClaimActionStation(class ACharacter* Character, int32 ActionIndex, int32 AnimIndex);
};

// 0x188 (0x228 - 0xA0)
// Class NWX.NWXActionStationComponentV2
class UNWXActionStationComponentV2 : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnTransitionEnded;                                 // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActionFinished;                                  // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FActionStationCurrentUserInfo         CurrentUserInfo;                                   // 0xC0(0x48)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  ActiveCollisionProfileName;                        // 0x108(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActionStationPositionInformation> PositionInfo;                                      // 0x110(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActionStationTransitions>     TransitionInfo;                                    // 0x120(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNWXActionStationAnimInstance> ActionStationAnimGraph;                            // 0x130(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           ActionGameplayEffect;                              // 0x138(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90D0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Owner;                                             // 0x148(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_90D1[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int64, class UAnimMontage*>             TransitionMap;                                     // 0x188(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FActionStationPositionInformation> ActionInfoMap;                                     // 0x1D8(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXActionStationComponentV2* GetDefaultObj();

	bool UseAction();
	bool SetPosition(int32 NewPosition);
	void OnTransitionMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnRep_UpdateActionStationInfo(struct FActionStationCurrentUserInfo& OldInfo);
	void OnExitMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnEnterMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnAbilityEndedCallback(struct FAbilityEndedData& EndingData);
	bool IsKillable();
	bool IsAvailable();
	void HalfWayThroughEnterMontage();
	bool GetEnterLocationForPosition(class ANWXAICharacter* InNWXAICharacter, int32 InPosition, struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetClosestEnterLocationAndPosition(class ANWXAICharacter* InNWXAICharacter, struct FVector* OutLocation, struct FRotator* OutRotation, int32* OutPosition);
	bool ExitActionStation();
	bool EnterActionStation(class ANWXAICharacter* InNWXAICharacter, int32 DesiredPosition);
	void ActionFinished(bool bWasActionCompleted);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXActionStationInterface
class INWXActionStationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INWXActionStationInterface* GetDefaultObj();

	class UNWXActionStationComponentV2* GetActionStationComponent();
};

// 0x10 (0x2A8 - 0x298)
// Class NWX.NWXActorChannel
class UNWXActorChannel : public UActorChannel
{
public:
	uint8                                        Pad_90D2[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXActorChannel* GetDefaultObj();

};

// 0x58 (0x348 - 0x2F0)
// Class NWX.NWXCommonUserWidget
class UNWXCommonUserWidget : public UCommonUserWidget
{
public:
	struct FGameplayTagContainer                 WidgetTags;                                        // 0x2F0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<enum class ENWXWidgetTelemetryType>   EnabledTelemetryTypes;                             // 0x310(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnRemovedFromParent;                               // 0x320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_90D5[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCommonUserWidget* GetDefaultObj();

	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnPawnUnpossessed(class APawn* OldPawn);
	void OnPawnPossessedAndReady(class APawn* NewPawn);
	void OnInputMethodChanged(enum class ECommonInputType CurrentInputType);
	void InitializeDesignerPreview();
	void BroadcastUIEventWithWidget(struct FGameplayTag& InEventTag, struct FGameplayTag& InWidgetTag);
	void BP_UnregisterScrollRecipient(class UWidget* AnalogScrollRecipient);
	void BP_RegisterScrollRecipent(class UWidget* AnalogScrollRecipient);
	class UWidget* BP_GetDesiredFocusTarget();
};

// 0x28 (0x370 - 0x348)
// Class NWX.NWXActorWidget
class UNWXActorWidget : public UNWXCommonUserWidget
{
public:
	class AActor*                                OwningActor;                                       // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EUIActorType                      ActorType;                                         // 0x350(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_90DA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxNameTruncationDistance;                         // 0x354(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinNameTruncationDistance;                         // 0x358(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_90DB[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXActorWidget* GetDefaultObj();

	void SetOwningActor(class AActor* NewOwningActor);
	void SetActorType(enum class EUIActorType NewActorType);
	void GetTruncatedName(float DistanceToPlayer, class FText* OutName);
	float GetDistanceToPlayer();
	enum class EUIActorType GetActorTypeFromOwningActor();
	void CacheNameTruncationTiers(class FText& Name);
	void BP_OnActorTypeUpdated();
};

// 0x0 (0x1370 - 0x1370)
// Class NWX.NWXAIAbilitySystemComponent
class UNWXAIAbilitySystemComponent : public UNWXAbilitySystemComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXAIAbilitySystemComponent* GetDefaultObj();

};

// 0xC8 (0x410 - 0x348)
// Class NWX.NWXAnimInstance
class UNWXAnimInstance : public UAnimInstance
{
public:
	bool                                         IsMoving;                                          // 0x348(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsInAir;                                           // 0x349(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsOnGround;                                        // 0x34A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSwimming;                                       // 0x34B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsCrouched;                                        // 0x34C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsFalling;                                         // 0x34D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90E8[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Speed;                                             // 0x350(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90E9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PreviousVelocity;                                  // 0x358(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Velocity;                                          // 0x370(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocalVelocity;                                     // 0x388(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimUpdateDeltaSeconds;                            // 0x3A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90EA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Acceleration;                                      // 0x3A8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocalAcceleration;                                 // 0x3C0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceMovedThisFrame;                            // 0x3D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Direction;                                         // 0x3DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWX_CharacterMovementComponent*       NWXCharMovement;                                   // 0x3E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXCharacter*                         CharacterOwner;                                    // 0x3E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagBlueprintPropertyMap      GameplayTagPropertyMap;                            // 0x3F0(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXAnimInstance* GetDefaultObj();

	bool LineTraceForObjecThreadSafe(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	struct FVector GetVectorValueFromCurveThreadSafe(class UCurveVector* Curve, float InTime);
	float GetFloatValueFromCurveThreadSafe(class UCurveFloat* Curve, float InTime);
	void BreakHitResultThreadSafe(struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, class FName* BoneName, int32* HitItem, int32* ElementIndex, int32* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
};

// 0x2E0 (0x6F0 - 0x410)
// Class NWX.NWXAIAnimInstance
class UNWXAIAnimInstance : public UNWXAnimInstance
{
public:
	TMap<class FName, class UCreatureAnimationDataAsset*> CreatureAnimationDAs;                              // 0x410(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnIsInCombatChanged;                               // 0x460(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRotator                              LookAtRotator;                                     // 0x470(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                       LookAtAlpha;                                       // 0x488(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCreatureAnimationDataAsset*           SelectedAnimDA;                                    // 0x490(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    IdleLocomotionSequence;                            // 0x498(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    WalkLocomotionSequence;                            // 0x4A8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    TrotLocomotionSequence;                            // 0x4B8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    RunLocomotionSequence;                             // 0x4C8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SleepStateSequence;                                // 0x4D8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    DeathStateSequence;                                // 0x4E8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    CombatStateSequence;                               // 0x4F8(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    DownedStateSequence;                               // 0x508(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SwimLocomotionSequence;                            // 0x518(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             TemplateOverrides;                                 // 0x528(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             NightTimeAnimationLoiter;                          // 0x530(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             DayTimeAnimationLoiter;                            // 0x538(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsMinHealth;                                       // 0x540(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsBlendSpaceDisabled;                              // 0x541(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         UseSnapShot;                                       // 0x542(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsInHitResponse;                                   // 0x543(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanRight;                                         // 0x544(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanLeft;                                          // 0x548(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentGait;                                       // 0x54C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtWeight;                                      // 0x550(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtPitch;                                       // 0x554(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtYaw;                                         // 0x558(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtWeightInterpSpeed;                           // 0x55C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LookAtRotationInterpSpeed;                         // 0x560(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DeathPoseName;                                     // 0x564(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90F9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                CurrentTarget;                                     // 0x570(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANWXAICharacter*                       Owner;                                             // 0x578(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsNightTime;                                      // 0x580(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENWXWaitState                     WaitState;                                         // 0x581(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90FB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxWalkSpeed;                                      // 0x584(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxRunSpeed;                                       // 0x588(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTrotSpeed;                                      // 0x58C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayRate;                                          // 0x590(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxWalkPlayRate;                                   // 0x594(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_90FF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxTrotPlayRate;                                   // 0x59C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9100[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              DeltaRotationWhileSwimming;                        // 0x5A8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               DeltaOffsetWhileSwimming;                          // 0x5C0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENWXAnimState                     AnimState;                                         // 0x5D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9103[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldUseGroundPowerIK;                           // 0x5F8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9105[0x57];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class ENWXFourDirectionalTurnLimits, float> FourDirectionalThresholds;                         // 0x650(0x50)(Edit, EditFixedSize, NativeAccessSpecifierPrivate)
	TMap<enum class ENWXEightDirectionalTurnLimits, float> EightDirectionalThresholds;                        // 0x6A0(0x50)(Edit, EditFixedSize, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXAIAnimInstance* GetDefaultObj();

	bool ShouldUseGroundPowerIK();
	void SetupSpecialtyAnimSequence(struct FAnimSequenceCache& InAnimCache, class FName& SpecialtyAnimName);
	void InitializeDataAssetCacheByPath(TSoftObjectPtr<class UCreatureAnimationDataAsset> SoftObjectDA);
	void InitializeDataAssetCacheByKey(class FName& Key);
	void InitializeDataAssetCacheByAsset(class UCreatureAnimationDataAsset* ProposedDA);
	class AActor* GetNoTargetLookAtActor();
	bool GetLimbLength(class FName& LimbStart, class FName& LimbEnd, float* OutputLength);
	bool GetIsSleeping();
	class FName GetDefaultDAName();
	struct FTransform GetAnimSequenceBoneTransform(class UAnimSequence* InputSequence, class FName InputBoneName);
};

// 0x0 (0x5A0 - 0x5A0)
// Class NWX.NWXAICapsuleComponent
class UNWXAICapsuleComponent : public UCapsuleComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXAICapsuleComponent* GetDefaultObj();

};

// 0x350 (0x9E0 - 0x690)
// Class NWX.NWXCharacter
class ANWXCharacter : public ACharacter
{
public:
	uint8                                        Pad_9115[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseTurnRate;                                      // 0x708(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseLookUpRate;                                    // 0x70C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MovementSpeedDefaults;                             // 0x710(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9116[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            RepPlayerState;                                    // 0x730(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9117[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RootmotionTargetTransform;                         // 0x750(0x60)(Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerReady;                                     // 0x7B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterJumped;                                 // 0x7C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterLanded;                                 // 0x7D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterDamageTaken;                            // 0x7E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9118[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UFlankingManagerComponent*             FlankingManagerComp;                               // 0x868(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXAbilitySystemComponent*            AbilitySystem;                                     // 0x870(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayAbility>>  InitialGrantedAbilities;                           // 0x878(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>   InitialGrantedEffects;                             // 0x888(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UDataTable*                            AttributeInitData;                                 // 0x898(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXAttributeSet*                      AttributeSet;                                      // 0x8A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWX_CharacterMovementComponent*       NWXCharacterMovementComp;                          // 0x8A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SignificanceDistance;                              // 0x8B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RequiredSignificanceLevel;                         // 0x8B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PreviousVelocity;                                  // 0x8B8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               Velocity;                                          // 0x8D0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LocalVelocity;                                     // 0x8E8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               Acceleration;                                      // 0x900(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LocalAcceleration;                                 // 0x918(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        ReplicatedMoveSpeed;                               // 0x930(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9119[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXGameplayAbility>       DodgeAbility;                                      // 0x938(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          IdentifierTag;                                     // 0x940(0x8)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAttribute>            AttributesToWatch;                                 // 0x948(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayAttribute                    HealthAttribute;                                   // 0x958(0x38)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_911A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXStatusEffectComponent*             StatusEffectComponent;                             // 0x9A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAccumulationComponent*             AccumulationComponent;                             // 0x9A8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiAwaiter*                         CharacterReadyAwaiter;                             // 0x9B0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         PossessedAwaiter;                                  // 0x9B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAVFXFocusComponent*                   AVFXFocusComponent;                                // 0x9C0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        InputAxisThreshold;                                // 0x9C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_911B[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXCharacter* GetDefaultObj();

	bool UsingAThirdPersonCamera();
	void TestMulticast();
	void SetDefaultMovementSpeed();
	void RemoveAllPendingActions();
	void ReceiveRestart();
	void OwnershipChanged();
	void OnStoppedGroundMoving();
	void OnStartedGroundMoving();
	void OnSignificanceChanged(bool IsSignificant);
	void OnPlayerTookDamageFromLocation(float OldHealth, float NewHealth, struct FDamageEffectContextData& ContextData);
	void OnAttributeChanged(struct FGameplayAttribute& Attribute, float OldValue, float NewValue);
	void OnASCTagCountChanged(struct FGameplayTag& Tag, int32 Count);
	bool IsInputEnabled();
	void InputAxis_Turn(float AxisValue);
	void InputAxis_MoveRight(float AxisValue);
	void InputAxis_MoveForward(float AxisValue);
	void InputAxis_LookUp(float AxisValue);
	void InputAction_SprintToggle_Pressed();
	void InputAction_Sprint_Released();
	void InputAction_Sprint_Pressed();
	void InputAction_Jump_Released();
	void InputAction_Jump_Pressed();
	void InputAction_Crouch_Released();
	void InputAction_Crouch_Pressed();
	void InputAction_AutoRun_Pressed();
	bool HasReachedDesiredRotation();
	void HandleFallOutOfWorld(bool* CallSuper);
	class USkeletalMeshComponent* GetSK_HMM_FP();
	class UScopedAkComponent* GetScopedAkHead();
	class UScopedAkComponent* GetScopedAkHandRight();
	class UScopedAkComponent* GetScopedAkHandLeft();
	class UScopedAkComponent* GetScopedAkFootRight();
	class UScopedAkComponent* GetScopedAkFootLeft();
	class UScopedAkComponent* GetScopedAkBody();
	TArray<class UPrimitiveComponent*> GetPrimitiveComponentsByTag(struct FGameplayTagContainer& Tag);
	struct FVector GetLocalVelocity();
	struct FVector GetLocalAcceleration();
	bool GetIsReady();
	class USkeletalMeshComponent* GetFP_FullBodyMesh();
	struct FVector GetActorFeetLocation();
	struct FVector GetAcceleration();
	void FastSharedReplication(struct FSharedRepMovement& SharedRepMovement);
	void Client_OnPlayerTookDamageFromLocation(float OldHealth, float NewHealth, struct FDamageEffectContextData& ContextData);
};

// 0x390 (0xD70 - 0x9E0)
// Class NWX.NWXAICharacter
class ANWXAICharacter : public ANWXCharacter
{
public:
	uint8                                        Pad_913A[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAlertnessComponent*                   AlertnessComponent;                                // 0xA18(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXActionStationComponentV2*          ActionStation;                                     // 0xA20(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NearRunSpeedPercent;                               // 0xA28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StaggerStrengthThreshold;                          // 0xA2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KnockDownStrengthThreshold;                        // 0xA30(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosiveStrengthThreshold;                        // 0xA34(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            HitReactDataTable;                                 // 0xA38(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FSocketHitObjects> SocketTraceHitObjects;                             // 0xA40(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAnimMontage*                          TempDefaultReaction;                               // 0xA90(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentCompletionBeforePlayingNewHitReact;         // 0xA98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitReactPitchThresholdAbove;                       // 0xA9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitReactPitchThresholdBelow;                       // 0xAA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitReactBackwardAngleThreshold;                    // 0xAA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitReactForwardThreshold;                          // 0xAA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ClientCapsuleCollision;                            // 0xAAC(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ServerCapsuleCollision;                            // 0xAB4(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EHitReactType                     CurrentHitReactType;                               // 0xABC(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECreatureType                     CreatureType;                                      // 0xABD(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_913E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            AuthorityGained;                                   // 0xAC0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayBegan;                                       // 0xAD0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterDeath;                                  // 0xAE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9140[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnRotateToFaceFinished;                            // 0xB00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAffinityTable*                        HostilityAffinityTable;                            // 0xB10(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         WarnAboutUsingDefault;                             // 0xB18(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         CanBeLaunched;                                     // 0xB19(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9142[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         HasTriggeredDeathReaction;                         // 0xB30(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         NewDisableBlendspace;                              // 0xB31(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9143[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DeathSnapShotName;                                 // 0xB34(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRagdollStarted;                                   // 0xB3C(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRagdollDeathFinished;                             // 0xB3D(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRagdollDisabled;                                  // 0xB3E(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bServerAuthRagdoll;                                // 0xB3F(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         RagdollPhysicsAsset;                               // 0xB40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InitialRagdollBlendWeight;                         // 0xB48(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RagdollImpulseFullBodyMultiplier;                  // 0xB4C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RagdollImpulseHitBoneMultiplier;                   // 0xB50(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RagdollImpulseStrengthThreshold;                   // 0xB54(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bWarnAboutMissingRagDollTransitions;               // 0xB58(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9144[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RagdollTimeOutLimit;                               // 0xB5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRagdollReplicationData               RagdollReplicationData;                            // 0xB60(0x48)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                               RagdollImpulseFullBody;                            // 0xBA8(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               RagdollImpulseHitBone;                             // 0xBC0(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  LastHitReactBone;                                  // 0xBD8(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                    DeathPoseTransforms;                               // 0xBE0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9145[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnimationToFullRagdollBlendTime;                   // 0xBF8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9146[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsPlayingLocomotionStartMontage;                  // 0xC28(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        PowerTier;                                         // 0xC29(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ChallengeRating;                                   // 0xC2A(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsHero;                                            // 0xC2B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CreatureRealmPowerOverride;                        // 0xC2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                FacingTarget;                                      // 0xC30(0x8)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCreatureCustomizationRegistry*        CustomizationRegistry;                             // 0xC38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                   AKEventHitReactTable;                              // 0xC40(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               SpawnedLocation;                                   // 0xC50(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutoRegisterWithPerception;                       // 0xC68(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsInFallbackTree;                                  // 0xC69(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9147[0x56];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXAIController*                      NWXAIController;                                   // 0xCC0(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXAISpawner*                         Spawner;                                           // 0xCC8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXPhysicalAnimationComponent*        PhysicalAnimationComponent;                        // 0xCD0(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9148[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CreatureRealmPower;                                // 0xCE0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class ECreatureTier                     CreatureTier;                                      // 0xCE4(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         IsSpawner;                                         // 0xCE5(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9149[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 CreatureUID;                                       // 0xCE8(0x10)(BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAttributeSet*                      CachedAttributes;                                  // 0xCF8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_914A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimMontage*>                  DefaultReactions;                                  // 0xD08(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_914C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDebugDamageLog                       DamageLog;                                         // 0xD30(0x20)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_914D[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXAICharacter* GetDefaultObj();

	void UnEquipWeapon();
	void Suicide();
	void SpawnResource(struct FHitResult& HitResult, FDelegateProperty_ OnProxySpawn);
	void SpawnAndEquipWeapon(struct FItemDataReference& ItemReference);
	void SpawnAllRemainingResources(struct FHitResult& HitResult);
	void SetRotation(struct FRotator& Rotation);
	void SetPowerTier(uint8 NewPowerTier);
	void SetMoveSpeeds(float Walk, float Trot, float Run);
	void SetItemReward(class UItemReward* NewItemReward);
	void SetCreatureUID(struct FGuid& InGuid);
	void SetChallengeRating(uint8 NewChallengeRating);
	void SetBlendshapes();
	void RotateToFace(struct FRotator& DesiredRotation);
	void RemoveState(struct FGameplayTag& GameplayTag);
	void OverrideCreatureRealmPower(int32 RealmPower);
	void OnUnEquipWeapon();
	void OnStopCreatureMontage();
	void OnRotateMontageFinished(class UAnimMontage* Montage, bool bInterrupted);
	void OnRep_RagdollInfoReplicated();
	void OnRep_RagdollDeathStarted();
	void OnRep_DeathPoseTransformsReplicated();
	void OnRep_CreatureTier();
	void OnRagdollSleep(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void OnPrintForward();
	void OnPostEvent(class UAkAudioEvent* AkEvent);
	void OnPlayCreatureMontage(class UAnimMontage* Montage, float InPlayRate, class FName& StartSectionName, bool bDisableBlendspace, bool bLooping, bool bSetHitResponse);
	void OnPhysicsAssetChanged();
	void OnLoadoutComponentInitialized();
	void OnHitReactMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnDebugSphere(struct FVector& Location, struct FLinearColor& LineColour, float Radius, float Duration, float Thickness);
	bool NewPlayHitReaction(struct FHitResult& HitResult, float Strength, struct FGameplayTagContainer& InTags, class AActor* DamageSource);
	void Multicast_UnEquipWeapon();
	void Multicast_StopCreatureMontage();
	void Multicast_PrintForward();
	void Multicast_PostEvent(class UAkAudioEvent* AkEvent);
	void Multicast_PlayCreatureMontage(class UAnimMontage* Montage, float InPlayRate, class FName& StartSectionName, bool bDisableBlendspace, bool bLooping, bool bSetHitResponse);
	void Multicast_DebugSphere(struct FVector& Location, struct FLinearColor& LineColour, float Radius, float Duration, float Thickness);
	bool IsTransitioningActionStation();
	bool IsSpawnerOnHomeWorker();
	bool IsPlayingStartMontage();
	bool IsMinHealth();
	bool IsLeader();
	bool IsInActionStation();
	void InitializeGasAttributes();
	void Hack_RestoreTickSetting();
	void Hack_CheckMontageStatus();
	void Hack_ChangeVisibilityBasedAnimTickOption(class UAnimMontage* Montage, float Duration, enum class EVisibilityBasedAnimTickOption Option);
	uint8 GetPowerTier();
	class UAnimMontage* GetMatchingHitReact(float InStrength, struct FHitResult& HitResult, struct FGameplayTagContainer& RequiredTags, enum class EHitReactType* OutReactType, enum class EHitReactVelocity* OutReactVelocity);
	bool GetLastHitReactWasDefault();
	enum class EHitReactType GetLastHitReactType();
	class FString GetLastHitReactTags();
	float GetLastHitReactStrength();
	class FString GetLastHitReactMontage();
	float GetLastHitReactModifiedStrength();
	enum class EHitReactVelocity GetLastHitReactDirection();
	class FName GetLastHitReactBone();
	bool GetIsNearOrAboveRunSpeed();
	enum class EHitReactType GetHitReactTypeFromStrength(float Strength);
	float GetHitReactPercentComplete();
	TArray<struct FInventoryEntry> GetEntriesForCurrentItemReward();
	class UAnimMontage* GetDefaultHitReact();
	struct FGuid GetCreatureUID();
	enum class ECreatureTier GetCreatureTier();
	int32 GetCreatureRealmPower();
	bool GetCreatureHostility(class AActor* Actor, struct FGameplayTag& Row, struct FGameplayTag& Column, struct FCreatureHostilityData* CreatureHostilityInfo);
	uint8 GetChallengeRating();
	void GetAllMatchingHitReacts(float InStrength, struct FHitResult& HitResult, struct FGameplayTagContainer& RequiredTags, TArray<class UAnimMontage*>* MatchingHitReacts, enum class EHitReactType* OutReactType, enum class EHitReactVelocity* OutReactVelocity);
	int32 GetActionStationPosition();
	void Dissolve(bool bDissolveIn, struct FGameplayTag& DissolveTag);
	void DestroySelf();
	void DEBUG_TryRecruitAI(class ANWXCharacter* Recruiter);
	void DEBUG_TryDismissAI(class ANWXCharacter* Recruiter);
	void ClearWanderCooldown();
	float CalculateModifiedStrength(float Strength);
	bool BP_HasActorBegunPlay();
	void BeginRagdollTransition(float RagdollBlendTime);
	void ApplySkellMeshSoftRef(TSoftObjectPtr<class UObject>& Asset);
	bool AllGeneratedRewardsExpended();
	void AddState(struct FGameplayTag& GameplayTag);
};

// 0xF0 (0x4B8 - 0x3C8)
// Class NWX.NWXAIController
class ANWXAIController : public AAIController
{
public:
	uint8                                        Pad_915F[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bWarnAboutMissingAIAction;                         // 0x3E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9160[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFlankerComponent*                     FlankerComponent;                                  // 0x3F0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9161[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXAIController* GetDefaultObj();

	void UnPossessAndDestroyController();
	bool StopBehavior(const class FString& Reason, bool bForceStop);
	bool ResumeBehavior(const class FString& Reason);
	void OnNavLinkStart(struct FVector& Left, struct FVector& Right, struct FVector& Destination, enum class ENavLinkDirection Direction, enum class ENavLinkType NavType);
	bool HasStartPathMontageForMoveType(struct FRotator& StartingRotation, struct FVector& StartingLocation, struct FVector& EndLocation);
	struct FVector GetPathFollowingEndDestination();
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXGameplayModMagnitudeCalculation
class UNWXGameplayModMagnitudeCalculation : public UGameplayModMagnitudeCalculation
{
public:

	static class UClass* StaticClass();
	static class UNWXGameplayModMagnitudeCalculation* GetDefaultObj();

	float NWXCalculateBaseMagnitude(struct FGameplayEffectSpec& Spec, struct FTagValueContainer& MMCIntermediateOutputs);
	void GetTargetAttributeMagnitude(struct FGameplayEffectSpec& Spec, struct FGameplayAttribute& Attribute, float* Magnitude);
	void GetSourceAttributeMagnitude(struct FGameplayEffectSpec& Spec, struct FGameplayAttribute& Attribute, float* Magnitude);
	float GetSetByCallerMagnitudeInSpec(struct FGameplayEffectSpec& Spec, struct FGameplayTag& DataTag, bool WarnIfNotFound, float DefaultIfNotFound);
	float GetEffectLevel(struct FGameplayEffectSpec& Spec);
	struct FGameplayEffectContextHandle GetEffectContext(struct FGameplayEffectSpec& Spec);
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXDamageModMagnitudeCalculation
class UNWXDamageModMagnitudeCalculation : public UNWXGameplayModMagnitudeCalculation
{
public:

	static class UClass* StaticClass();
	static class UNWXDamageModMagnitudeCalculation* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXAIGameplayMMC
class UNWXAIGameplayMMC : public UNWXDamageModMagnitudeCalculation
{
public:

	static class UClass* StaticClass();
	static class UNWXAIGameplayMMC* GetDefaultObj();

};

// 0x70 (0x760 - 0x6F0)
// Class NWX.NWXAILinkedLoiterAnimInstance
class UNWXAILinkedLoiterAnimInstance : public UNWXAIAnimInstance
{
public:
	struct FAnimSequenceCache                    LinkedIdleSequence;                                // 0x6F0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SelectedLoiterSequence;                            // 0x700(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_916B[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAILinkedLoiterAnimInstance* GetDefaultObj();

};

// 0x20 (0x710 - 0x6F0)
// Class NWX.NWXAINPCAnimInstance
class UNWXAINPCAnimInstance : public UNWXAIAnimInstance
{
public:
	enum class EAlertnessLevelType               CachedAlertness;                                   // 0x6F0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_916F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AEquippableItem*                       CachedEquippedItem;                                // 0x6F8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsDown;                                           // 0x700(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9170[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAINPCAnimInstance* GetDefaultObj();

	void UpdateAnimOverlayBank(struct FDataTableRowHandle& AnimDataHandle);
	void SetIsDowned(bool InIsDown);
	void SetAnimOverlayUnarmed(const class FString& WarningMessage);
	void OnLoadoutSlotChanged(enum class ELoadoutSlotType SlotType, class AEquippableItem* Item);
	void OnAlertnessLevelChanged(enum class EAlertnessLevelType NewAlertness);
	bool GetIsDowned();
	enum class EAlertnessLevelType GetCachedAlertness();
};

// 0x0 (0x138 - 0x138)
// Class NWX.NWXAIPerceptionSystem
class UNWXAIPerceptionSystem : public UAIPerceptionSystem
{
public:

	static class UClass* StaticClass();
	static class UNWXAIPerceptionSystem* GetDefaultObj();

	bool UnregisterAllPerceptionStimuliSources(class UObject* WorldContextObject, class AActor* Target);
};

// 0x1E8 (0x288 - 0xA0)
// Class NWX.NWXAIPOI_Component
class UNWXAIPOI_Component : public UActorComponent
{
public:
	uint8                                        Pad_9176[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 GameplayTags;                                      // 0xA8(0x20)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_9177[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnNewValidPositions;                               // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<float, class UEnvQuery*>                RadiusToInitialQueryForPickingRandomLocation;      // 0xE0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<float, class UEnvQuery*>                RadiusToLoiterLocationQuery;                       // 0x130(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class AActor*, struct FVector>          ActorToLocations;                                  // 0x180(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                        Pad_917A[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAIPOI_Component* GetDefaultObj();

	void UpdateActorsLocation(class AActor* Actor, struct FVector& Location);
	void RemoveActorFromPOI(class AActor* Actor);
	void HandleSpawnerDestroyed(class AActor* Spawner);
	void HandleActorDestroyed(class AActor* Actor);
	void GetPotentialNewLocationForObject(class UObject* QueryOwner, float Radius, bool bGenerateInitialRandomLocation, int32* QueryID);
	class AActor* GetPOIOwner();
	int32 GetNumberOfActors();
	bool GetLocationForActor(class AActor* Actor, struct FVector* Location);
	void GetCurrentActors(TSet<class AActor*>* CurrentActors);
	void GetCurrentActorLocations(TArray<struct FVector>* CurrentLocations);
	void AddActorToPOI(class AActor* Actor, struct FVector& Location);
};

// 0xC8 (0x140 - 0x78)
// Class NWX.AISense_NWX_Range
class UAISense_NWX_Range : public UAISense
{
public:
	uint8                                        Pad_917C[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxChecksPerTick;                                  // 0x128(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinQueriesPerTimeSliceCheck;                       // 0x12C(0x4)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                       MaxTimeSlicePerTick;                               // 0x130(0x8)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_917E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAISense_NWX_Range* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class NWX.AISenseConfig_NWX_Range
class UAISenseConfig_NWX_Range : public UAISenseConfig
{
public:
	TArray<struct FRangeConfigProperty>          Properties;                                        // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        LosePerceptionRangeRadiusMultiplier;               // 0x58(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9181[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UAISense_NWX_Range>        Implementation;                                    // 0x60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAISenseConfig_NWX_Range* GetDefaultObj();

};

// 0x0 (0x1A8 - 0x1A8)
// Class NWX.NWXAISense_Sight
class UNWXAISense_Sight : public UAISense_Sight
{
public:

	static class UClass* StaticClass();
	static class UNWXAISense_Sight* GetDefaultObj();

};

// 0x20 (0xFD0 - 0xFB0)
// Class NWX.NWXAISkeletalMeshComponent
class UNWXAISkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	uint8                                        Pad_9185[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAISkeletalMeshComponent* GetDefaultObj();

};

// 0x120 (0xE90 - 0xD70)
// Class NWX.NWXAISpawner
class ANWXAISpawner : public ANWXAICharacter
{
public:
	uint8                                        Pad_9197[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAICharacterSpawned;                              // 0xD80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAICharacterTransferedToSpawner;                  // 0xD90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9198[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Charges;                                           // 0xDB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxCreaturesAllowedToSpawn;                        // 0xDB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DelayBetweenSpawns;                                // 0xDB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FailedSpawnCooldown;                               // 0xDBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECreatureType                     BudgetToPullFrom;                                  // 0xDC0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9199[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTransform>                    SpawnPoints;                                       // 0xDC8(0x10)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                        Pad_919A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   AICSpawnerData;                                    // 0xDE8(0x10)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXSquadConfigData*                   SquadConfigData;                                   // 0xDF8(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_919B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXAIPOI_Component>       DefaultPOIImplementerClass;                        // 0xE08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ANWXAICharacter*>               SpawnedCreatures;                                  // 0xE10(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UNWXAIPOI_Component*                   CurrentPOIImplementer;                             // 0xE20(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_919C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         SquadKilledByServerCommand;                        // 0xE2A(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_919D[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, class AActor*>                   QueryIdToActor;                                    // 0xE30(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_919E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXAISpawner* GetDefaultObj();

	void UpdateMetrics();
	void TransferCharacterToSpawner(class ANWXAICharacter* AICharacter);
	void SpawnSupportingActors(struct FTransform& Transform);
	void SpawnSquadStep();
	void SpawnSquadEvent();
	class ANWXAICharacter* SpawnAICharacter(struct FTransform& SpawnTransform);
	void SetSquadConfigData(class UNWXSquadConfigData* SquadConfigData);
	void SetCurrentPOIImplementer(class UNWXAIPOI_Component* NewPOI);
	void SetAICSpawnerData(struct FDataTableRowHandle& InAICSpawnerData);
	int32 RequestCreatureBudget();
	bool RemoveFromCreatures(class ANWXAICharacter* Creature);
	void RegisterCallbacksOnCreature(class ANWXAICharacter* Creature);
	void HandleNewLocation(class UObject* Target, struct FVector& Location, bool FoundLocation, int32 QueryID);
	void HandleLatentSpawnLocationRecieved(bool bFoundLocation, struct FTransform& Location);
	void HandleCharacterDestroyed(class AActor* AICreature);
	void HandleCharacterDeath(class ANWXAICharacter* AICreature);
	void HandleAISpawned(class ANWXAICharacter* SpawnedAI);
	float GetTimeSinceLastSpawn();
	class FString GetSpawnerRowName();
	TArray<class ANWXAICharacter*> GetSpawnedAICharacters();
	int32 GetReservations();
	TArray<struct FSpawnerClassInfo> GetRequiredClassesCount();
	TArray<struct FTransform> GetPresetSpawnLocations();
	int32 GetNumberOfCreaturesSpawned();
	int32 GetNumberOfCharges();
	int32 GetNumberOfAI();
	TArray<struct FSpawnerClassInfo> GetNonRequiredCreatureClassArray();
	void GetNewLocationForCreature(class AActor* Actor, bool bIsEventDrivenSpawn);
	int32 GetMinCreatures();
	int32 GetMaxCreatures();
	void GetLatentSpawnLocation();
	class FString GetLastSpawnedCreaturesName();
	class UEnvQuery* GetEQSQuery();
	class UNWXAIPOI_Component* GetCurrentPOIImplementer();
	TArray<class ANWXAICharacter*> GetCreatures();
	enum class ECreatureType GetBudgetForClass(TSubclassOf<class ANWXAISpawner>& Class);
	bool AddToCreatures(class ANWXAICharacter* Creature);
};

// 0x28 (0x4E0 - 0x4B8)
// Class NWX.NWXAISpawnerController
class ANWXAISpawnerController : public ANWXAIController
{
public:
	class UNWXSquadComponent*                    SquadComponent;                                    // 0x4B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXSquadActionComponent*              ActionComponent;                                   // 0x4C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                   SpawnerData;                                       // 0x4C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_91A2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXAISpawnerController* GetDefaultObj();

	void SetSquadFocusTarget(class UObject* FocusTarget);
	void OnSpawnerDataSet(struct FDataTableRowHandle& InSpawnerData);
	class UBlackboardComponent* GetSquadBlackboard();
	class ANWXAISpawner* GetSpawner();
	void ClearSquadFocusTarget();
};

// 0x80 (0x320 - 0x2A0)
// Class NWX.NWXAIStatTracker
class ANWXAIStatTracker : public AActor
{
public:
	struct FAIStatData                           StatData;                                          // 0x2A0(0x70)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_91A3[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXAIStatTracker* GetDefaultObj();

};

// 0x110 (0x2F0 - 0x1E0)
// Class NWX.NWXAITraversalComponent
class UNWXAITraversalComponent : public UNavLinkCustomComponent
{
public:
	uint8                                        Pad_91A5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FNavigationLinkBase                   NavLinkSettings;                                   // 0x1E8(0x40)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               LeftMantleLocation;                                // 0x228(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RightMantleLocation;                               // 0x240(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          EnterMantleMontage;                                // 0x258(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          OverMantleMontage;                                 // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          DownMantleMontage;                                 // 0x268(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          RunoutMantleMontage;                               // 0x270(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_91A6[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAITraversalComponent* GetDefaultObj();

	void StartTansition(class ANWXCharacter* Charactrer, class UNWXPathFollowingComponent* NWXPathFollowing, int32 StartIndex, enum class ENavLinkDirection Direction, bool IsSteppingUp);
	void DrawNavLinks();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXAITraversalInterface
class INWXAITraversalInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INWXAITraversalInterface* GetDefaultObj();

	class UAnimMontage* GetMantleData(enum class ETraversalSection Section);
};

// 0x960 (0x990 - 0x30)
// Class NWX.NWXAttributeSet
class UNWXAttributeSet : public UAttributeSet
{
public:
	FMulticastInlineDelegateProperty_            OnAnyAttributeChanged;                             // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Health;                                            // 0x40(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthChanged;                                   // 0x50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HealthMin;                                         // 0x60(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HealthMax;                                         // 0x70(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHealthMaxChanged;                                // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MaxSpeedWalk;                                      // 0x90(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaxSpeedWalkChanged;                             // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MaxSpeedWalkFast;                                  // 0xB0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaxSpeedWalkFastChanged;                         // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MaxSpeedRun;                                       // 0xD0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaxSpeedRunChanged;                              // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MaxSpeedBonus;                                     // 0xF0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMaxSpeedBonusChanged;                            // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageReduction;                                   // 0x110(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageReductionFalling;                            // 0x120(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageReductionToxic;                              // 0x130(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageBonus;                                       // 0x140(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageAttack01;                                    // 0x150(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageAttack02;                                    // 0x160(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DamageAttack03;                                    // 0x170(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MeleeDamage;                                       // 0x180(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RangedDamage;                                      // 0x190(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MeleeDamageBonus;                                  // 0x1A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RangedDamageBonus;                                 // 0x1B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                PistolDamageBonus;                                 // 0x1C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RifleDamageBonus;                                  // 0x1D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ShotgunDamageBonus;                                // 0x1E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MagicAmmoEffectiveness;                            // 0x1F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RainResistance;                                    // 0x200(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ColdResistance;                                    // 0x210(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                IceResistance;                                     // 0x220(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HotResistance;                                     // 0x230(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FireResistance;                                    // 0x240(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                PoisonResistance;                                  // 0x250(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MiasmaResistance;                                  // 0x260(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CurseResistance;                                   // 0x270(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DiseaseResistance;                                 // 0x280(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                InjuryResistance;                                  // 0x290(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StrengthResistance;                                // 0x2A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Energy;                                            // 0x2B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                EnergyMin;                                         // 0x2C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                EnergyMax;                                         // 0x2D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HarvestingBonus;                                   // 0x2E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HarvestingPowerBonus;                              // 0x2F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HarvestingYieldBonus;                              // 0x300(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CarryBonus;                                        // 0x310(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Fuel;                                              // 0x320(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFuelChanged;                                     // 0x330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FuelMin;                                           // 0x340(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FuelMax;                                           // 0x350(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                AxePickLevel;                                      // 0x360(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Stamina;                                           // 0x370(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStaminaChanged;                                  // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStaminaDepleted;                                 // 0x390(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaMin;                                        // 0x3A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaMax;                                        // 0x3B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStaminaMaxChanged;                               // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaBlockConversionRatio;                       // 0x3D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaBlockAbsorbRatio;                           // 0x3E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                EstateScore;                                       // 0x3F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEstateScoreChanged;                              // 0x400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                QuestScore;                                        // 0x410(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQuestScoreChanged;                               // 0x420(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTicketsMaxChanged;                               // 0x430(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CombatTicketsMax;                                  // 0x440(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                SwarmCombatTicketsMax;                             // 0x450(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DebuffTicketsMax;                                  // 0x460(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                BuffTicketsMax;                                    // 0x470(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ThreatBonus;                                       // 0x480(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftBuildPoints;                                  // 0x490(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCraftBuildPointsChanged;                         // 0x4A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftBuildPointsMin;                               // 0x4B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftBuildPointsMax;                               // 0x4C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftIntegrity;                                    // 0x4D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCraftIntegrityChanged;                           // 0x4E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftIntegrityMin;                                 // 0x4F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftIntegrityMax;                                 // 0x500(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftQuality;                                      // 0x510(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCraftQualityChanged;                             // 0x520(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftQualityMin;                                   // 0x530(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftQualityMax;                                   // 0x540(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DurabilityDrainRate;                               // 0x550(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HealthRegenRate;                                   // 0x560(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaRegenRate;                                  // 0x570(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Hope;                                              // 0x580(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHopeChanged;                                     // 0x590(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HopeMin;                                           // 0x5A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHopeMinChanged;                                  // 0x5B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HopeMax;                                           // 0x5C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnHopeMaxChanged;                                  // 0x5D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                HopeRegenRate;                                     // 0x5E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Stealth;                                           // 0x5F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Fed;                                               // 0x600(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFedChanged;                                      // 0x610(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FedMax;                                            // 0x620(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFedMaxChanged;                                   // 0x630(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FedMin;                                            // 0x640(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FedDrain;                                          // 0x650(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FoodDuration;                                      // 0x660(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Rested;                                            // 0x670(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRestedChanged;                                   // 0x680(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RestedMax;                                         // 0x690(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRestedMaxChanged;                                // 0x6A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RestedMin;                                         // 0x6B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RestedDrain;                                       // 0x6C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ComfortDuration;                                   // 0x6D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                DryRate;                                           // 0x6E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Durability;                                        // 0x6F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaCost;                                       // 0x700(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StaminaEfficiency;                                 // 0x710(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MagicEfficiency;                                   // 0x720(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Strength;                                          // 0x730(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                StrengthBonus;                                     // 0x740(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Stability;                                         // 0x750(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FireDamage;                                        // 0x760(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                IceDamage;                                         // 0x770(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                PoisonDamage;                                      // 0x780(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MiasmaDamage;                                      // 0x790(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                WeakPointDamage;                                   // 0x7A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                NonWeakPointDamage;                                // 0x7B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Light;                                             // 0x7C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Speed;                                             // 0x7D0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Fishing;                                           // 0x7E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Range;                                             // 0x7F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterOverWeight;                             // 0x800(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterUnderWeight;                            // 0x810(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CharacterWeight;                                   // 0x820(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterWeightChanged;                          // 0x830(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CharacterWeightMax;                                // 0x840(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterWeightMaxChanged;                       // 0x850(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                EffectDuration;                                    // 0x860(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftingCost;                                      // 0x870(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CraftingTime;                                      // 0x880(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                MagicPower;                                        // 0x890(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Weight;                                            // 0x8A0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                Capacity;                                          // 0x8B0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                LoadoutLevel;                                      // 0x8C0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLoadoutLevelChanged;                             // 0x8D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                JumpVelocity;                                      // 0x8E0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                FallVelocity;                                      // 0x8F0(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                WalkSpeedBonus;                                    // 0x900(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                TrotSpeedBonus;                                    // 0x910(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                RunSpeedBonus;                                     // 0x920(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                SprintSpeedBonus;                                  // 0x930(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ClimbSpeedBonus;                                   // 0x940(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                ScrambleSpeedBonus;                                // 0x950(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                WadingSpeedBonus;                                  // 0x960(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                CrouchingSpeedBonus;                               // 0x970(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                SwimmingSpeedBonus;                                // 0x980(0x10)(Edit, BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXAttributeSet* GetDefaultObj();

	void OnRep_Weight(struct FGameplayAttributeData& OldWeight);
	void OnRep_WeakPointDamage(struct FGameplayAttributeData& OldWeakPointDamage);
	void OnRep_WalkSpeedBonus(struct FGameplayAttributeData& OldWalkSpeedBonus);
	void OnRep_WadingSpeedBonus(struct FGameplayAttributeData& OldWadingSpeedBonus);
	void OnRep_TrotSpeedBonus(struct FGameplayAttributeData& OldTrotSpeedBonus);
	void OnRep_ThreatBonus(struct FGameplayAttributeData& OldThreatBonus);
	void OnRep_SwimmingSpeedBonus(struct FGameplayAttributeData& OldSwimmingSpeedBonus);
	void OnRep_SwarmCombatTicketsMax(struct FGameplayAttributeData& OldSwarmCombatTicketsMax);
	void OnRep_StrengthResistance(struct FGameplayAttributeData& OldStrengthResistance);
	void OnRep_StrengthBonus(struct FGameplayAttributeData& OldStrengthBonus);
	void OnRep_Strength(struct FGameplayAttributeData& OldStrength);
	void OnRep_Stealth(struct FGameplayAttributeData& OldStealth);
	void OnRep_StaminaRegenRate(struct FGameplayAttributeData& OldStaminaRegenRate);
	void OnRep_StaminaMin(struct FGameplayAttributeData& OldStaminaMin);
	void OnRep_StaminaMax(struct FGameplayAttributeData& OldStaminaMax);
	void OnRep_StaminaEfficiency(struct FGameplayAttributeData& OldStaminaEfficiency);
	void OnRep_StaminaCost(struct FGameplayAttributeData& OldStaminaCost);
	void OnRep_StaminaBlockConversionRatio(struct FGameplayAttributeData& OldStaminaBlockConversionRatio);
	void OnRep_StaminaBlockAbsorbRatio(struct FGameplayAttributeData& OldStaminaBlockAbsorbRatio);
	void OnRep_Stamina(struct FGameplayAttributeData& OldStamina);
	void OnRep_Stability(struct FGameplayAttributeData& OldStability);
	void OnRep_SprintSpeedBonus(struct FGameplayAttributeData& OldSprintSpeedBonus);
	void OnRep_Speed(struct FGameplayAttributeData& OldSpeed);
	void OnRep_ShotgunDamageBonus(struct FGameplayAttributeData& OldShotgunDamageBonus);
	void OnRep_ScrambleSpeedBonus(struct FGameplayAttributeData& OldScrambleSpeedBonus);
	void OnRep_RunSpeedBonus(struct FGameplayAttributeData& OldRunSpeedBonus);
	void OnRep_RifleDamageBonus(struct FGameplayAttributeData& OldRifleDamageBonus);
	void OnRep_RestedMin(struct FGameplayAttributeData& OldRestedMin);
	void OnRep_RestedMax(struct FGameplayAttributeData& OldRestedMax);
	void OnRep_RestedDrain(struct FGameplayAttributeData& OldRestedDrain);
	void OnRep_Rested(struct FGameplayAttributeData& OldRested);
	void OnRep_RangedDamageBonus(struct FGameplayAttributeData& OldRangedDamageBonus);
	void OnRep_RangedDamage(struct FGameplayAttributeData& OldRangedDamage);
	void OnRep_Range(struct FGameplayAttributeData& OldRange);
	void OnRep_RainResistance(struct FGameplayAttributeData& OldRainResistance);
	void OnRep_QuestScore(struct FGameplayAttributeData& OldQuestScore);
	void OnRep_PoisonResistance(struct FGameplayAttributeData& OldPoisonResistance);
	void OnRep_PoisonDamage(struct FGameplayAttributeData& OldPoisonDamage);
	void OnRep_PistolDamageBonus(struct FGameplayAttributeData& OldPistolDamageBonus);
	void OnRep_NonWeakPointDamage(struct FGameplayAttributeData& OldNonWeakPointDamage);
	void OnRep_MiasmaResistance(struct FGameplayAttributeData& OldMiasmaResistance);
	void OnRep_MiasmaDamage(struct FGameplayAttributeData& OldMiasmaDamage);
	void OnRep_MeleeDamageBonus(struct FGameplayAttributeData& OldMeleeDamageBonus);
	void OnRep_MeleeDamage(struct FGameplayAttributeData& OldMeleeDamage);
	void OnRep_MaxSpeedWalkFast(struct FGameplayAttributeData& OldMaxSpeedWalkFast);
	void OnRep_MaxSpeedWalk(struct FGameplayAttributeData& OldMaxSpeedWalk);
	void OnRep_MaxSpeedRun(struct FGameplayAttributeData& OldMaxSpeedRun);
	void OnRep_MaxSpeedBonus(struct FGameplayAttributeData& OldMaxSpeedBonus);
	void OnRep_MagicPower(struct FGameplayAttributeData& OldMagicPower);
	void OnRep_MagicEfficiency(struct FGameplayAttributeData& OldMagicEfficiency);
	void OnRep_MagicAmmoEffectiveness(struct FGameplayAttributeData& OldMagicAmmoEffectiveness);
	void OnRep_LoadoutLevel(struct FGameplayAttributeData& OldLoadoutLevel);
	void OnRep_Light(struct FGameplayAttributeData& OldLight);
	void OnRep_JumpVelocity(struct FGameplayAttributeData& OldJumpVelocity);
	void OnRep_InjuryResistance(struct FGameplayAttributeData& OldInjuryResistance);
	void OnRep_IceResistance(struct FGameplayAttributeData& OldIceResistance);
	void OnRep_IceDamage(struct FGameplayAttributeData& OldIceDamage);
	void OnRep_HotResistance(struct FGameplayAttributeData& OldHotResistance);
	void OnRep_HopeRegenRate(struct FGameplayAttributeData& OldHopeRegenRate);
	void OnRep_HopeMin(struct FGameplayAttributeData& OldHopeMin);
	void OnRep_HopeMax(struct FGameplayAttributeData& OldHopeMax);
	void OnRep_Hope(struct FGameplayAttributeData& OldHope);
	void OnRep_HealthRegenRate(struct FGameplayAttributeData& OldHealthRegenRate);
	void OnRep_HealthMin(struct FGameplayAttributeData& OldHealthMin);
	void OnRep_HealthMax(struct FGameplayAttributeData& OldHealthMax);
	void OnRep_Health(struct FGameplayAttributeData& OldHealth);
	void OnRep_HarvestingYieldBonus(struct FGameplayAttributeData& OldHarvestingYieldBonus);
	void OnRep_HarvestingPowerBonus(struct FGameplayAttributeData& OldHarvestingPowerBonus);
	void OnRep_HarvestingBonus(struct FGameplayAttributeData& OldHarvestingBonus);
	void OnRep_FuelMin(struct FGameplayAttributeData& OldFuelMin);
	void OnRep_FuelMax(struct FGameplayAttributeData& OldFuelMax);
	void OnRep_Fuel(struct FGameplayAttributeData& OldFuel);
	void OnRep_FoodDuration(struct FGameplayAttributeData& OldFoodDuration);
	void OnRep_Fishing(struct FGameplayAttributeData& OldFishing);
	void OnRep_FireResistance(struct FGameplayAttributeData& OldFireResistance);
	void OnRep_FireDamage(struct FGameplayAttributeData& OldFireDamage);
	void OnRep_FedMin(struct FGameplayAttributeData& OldFedMin);
	void OnRep_FedMax(struct FGameplayAttributeData& OldFedMax);
	void OnRep_FedDrain(struct FGameplayAttributeData& OldFedDrain);
	void OnRep_Fed(struct FGameplayAttributeData& OldFed);
	void OnRep_FallVelocity(struct FGameplayAttributeData& OldFallVelocity);
	void OnRep_EstateScore(struct FGameplayAttributeData& OldEstateScore);
	void OnRep_EnergyMin(struct FGameplayAttributeData& OldEnergyMin);
	void OnRep_EnergyMax(struct FGameplayAttributeData& OldEnergyMax);
	void OnRep_Energy(struct FGameplayAttributeData& OldEnergy);
	void OnRep_EffectDuration(struct FGameplayAttributeData& OldEffectDuration);
	void OnRep_DurabilityDrainRate(struct FGameplayAttributeData& OldDurabilityDrainRate);
	void OnRep_Durability(struct FGameplayAttributeData& OldDurability);
	void OnRep_DryRate(struct FGameplayAttributeData& OldDryRate);
	void OnRep_DiseaseResistance(struct FGameplayAttributeData& OldDiseaseResistance);
	void OnRep_DebuffTicketsMax(struct FGameplayAttributeData& OldDebuffTicketsMax);
	void OnRep_DamageReductionToxic(struct FGameplayAttributeData& OldDamageReductionToxic);
	void OnRep_DamageReductionFalling(struct FGameplayAttributeData& OldDamageReductionFalling);
	void OnRep_DamageReduction(struct FGameplayAttributeData& OldDamageReduction);
	void OnRep_DamageBonus(struct FGameplayAttributeData& OldDamageBonus);
	void OnRep_DamageAttack03(struct FGameplayAttributeData& OldDamageAttack03);
	void OnRep_DamageAttack02(struct FGameplayAttributeData& OldDamageAttack02);
	void OnRep_DamageAttack01(struct FGameplayAttributeData& OldDamageAttack01);
	void OnRep_CurseResistance(struct FGameplayAttributeData& OldCurseResistance);
	void OnRep_CrouchingSpeedBonus(struct FGameplayAttributeData& OldCrouchingSpeedBonus);
	void OnRep_CraftQualityMin(struct FGameplayAttributeData& OldCraftQualityMin);
	void OnRep_CraftQualityMax(struct FGameplayAttributeData& OldCraftQualityMax);
	void OnRep_CraftQuality(struct FGameplayAttributeData& OldCraftQuality);
	void OnRep_CraftIntegrityMin(struct FGameplayAttributeData& OldCraftIntegrityMin);
	void OnRep_CraftIntegrityMax(struct FGameplayAttributeData& OldCraftIntegrityMax);
	void OnRep_CraftIntegrity(struct FGameplayAttributeData& OldCraftIntegrity);
	void OnRep_CraftingTime(struct FGameplayAttributeData& OldCraftingTime);
	void OnRep_CraftingCost(struct FGameplayAttributeData& OldCraftingCost);
	void OnRep_CraftBuildPointsMin(struct FGameplayAttributeData& OldCraftBuildPointsMin);
	void OnRep_CraftBuildPointsMax(struct FGameplayAttributeData& OldCraftBuildPointsMax);
	void OnRep_CraftBuildPoints(struct FGameplayAttributeData& OldCraftBuildPoints);
	void OnRep_ComfortDuration(struct FGameplayAttributeData& OldComfortDuration);
	void OnRep_CombatTicketsMax(struct FGameplayAttributeData& OldCombatTicketsMax);
	void OnRep_ColdResistance(struct FGameplayAttributeData& OldColdResistance);
	void OnRep_ClimbSpeedBonus(struct FGameplayAttributeData& OldClimbSpeedBonus);
	void OnRep_CharacterWeightMax(struct FGameplayAttributeData& OldCharacterWeightMax);
	void OnRep_CharacterWeight(struct FGameplayAttributeData& OldCharacterWeight);
	void OnRep_CarryBonus(struct FGameplayAttributeData& OldCarryBonus);
	void OnRep_Capacity(struct FGameplayAttributeData& OldCapacity);
	void OnRep_BuffTicketsMax(struct FGameplayAttributeData& OldBuffTicketsMax);
	void OnRep_AxePickLevel(struct FGameplayAttributeData& OldAxePickLevel);
};

// 0x28 (0xD10 - 0xCE8)
// Class NWX.NWXAutoScrollBox
class UNWXAutoScrollBox : public UScrollBox
{
public:
	float                                        ScrollUpdateRate;                                  // 0xCE8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScrollSpeed;                                       // 0xCEC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScrollStartDelay;                                  // 0xCF0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScrollEndDelay;                                    // 0xCF4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InterruptDelay;                                    // 0xCF8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_91DF[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAutoScrollBox* GetDefaultObj();

	void UserScrolledInternal(float CurrentOffset);
	void StopAutoScrolling(bool bResetOffset);
	void StartAutoScrolling();
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.NWXAutoTraceCaptureComponent
class UNWXAutoTraceCaptureComponent : public UActorComponent
{
public:
	class UWorkerPerformanceSubsystem*           WorkerPerformanceSubsystem;                        // 0xA0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTraceSubsystem*                       TraceSubsystem;                                    // 0xA8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_91E0[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXAutoTraceCaptureComponent* GetDefaultObj();

};

// 0x70 (0x6B0 - 0x640)
// Class NWX.AVFXSpatialComponent
class UAVFXSpatialComponent : public UStaticMeshComponent
{
public:
	uint8                                        Pad_91E1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAVFXSpatialComponentData             SpatialComponentData;                              // 0x648(0x38)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         OcclusionActive;                                   // 0x680(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_91E2[0x2F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAVFXSpatialComponent* GetDefaultObj();

	void SetOcclusionActive(bool IsActive);
};

// 0xF0 (0x7A0 - 0x6B0)
// Class NWX.AVFXPlaneComponent
class UAVFXPlaneComponent : public UAVFXSpatialComponent
{
public:
	uint8                                        Pad_91E4[0xD8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class URainScopedAkComponent*                RainAudioComponent;                                // 0x788(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWindScopedAkComponent*                WindAudioComponent;                                // 0x790(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_91E5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAVFXPlaneComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXAwaitableLibrary
class UNWXAwaitableLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXAwaitableLibrary* GetDefaultObj();

	void AwaitManagerFromGameModeBPTimed(TSubclassOf<class AManagerBase>& ManagerClass, FDelegateProperty_& OnAwaitedManagerReadyDelegate, float Timeout, class UObject* WorldContextObject);
	void AwaitManagerFromGameModeBP(TSubclassOf<class AManagerBase>& ManagerClass, FDelegateProperty_& OnAwaitedManagerReadyDelegate, class UObject* WorldContextObject);
	void AwaitGameModeBPTimed(FDelegateProperty_& OnGameModeReadyDelegate, float Timeout, struct FDelegateHandleBPWrapper* Handle, class UObject* WorldContextObject);
	void AwaitGameModeBP(FDelegateProperty_& OnGameModeReadyDelegate, struct FDelegateHandleBPWrapper* Handle, class UObject* WorldContextObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXBlackboardHelperLibrary
class UNWXBlackboardHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXBlackboardHelperLibrary* GetDefaultObj();

	void TrySetBlackboardVector(class AActor* Actor, enum class EBBVar BBVar, struct FVector& Value, enum class EBlackboardGetResult* Branches);
	void TrySetBlackboardObject(class AActor* Actor, enum class EBBVar BBVar, class UObject* Value, enum class EBlackboardGetResult* Branches);
	void TrySetBlackboardName(class AActor* Actor, enum class EBBVar BBVar, class FName& Value, enum class EBlackboardGetResult* Branches);
	void TrySetBlackboardFloat(class AActor* Actor, enum class EBBVar BBVar, float Value, enum class EBlackboardGetResult* Branches);
	void TrySetBlackboardBool(class AActor* Actor, enum class EBBVar BBVar, bool bValue, enum class EBlackboardGetResult* Branches);
	void TryGetBlackboardVector(class AActor* Actor, enum class EBBVar BBVar, struct FVector* Value, enum class EBlackboardGetResult* Branches);
	void TryGetBlackboardObject(class AActor* Actor, enum class EBBVar BBVar, class UObject** Value, enum class EBlackboardGetResult* Branches);
	void TryGetBlackboardName(class AActor* Actor, enum class EBBVar BBVar, class FName* Value, enum class EBlackboardGetResult* Branches);
	void TryGetBlackboardFloat(class AActor* Actor, enum class EBBVar BBVar, float* Value, enum class EBlackboardGetResult* Branches);
	void TryGetBlackboardBool(class AActor* Actor, enum class EBBVar BBVar, bool* Value, enum class EBlackboardGetResult* Branches);
	class FName GetSquadBBVar(enum class ESquadBlackboardKey BBVar);
	class FName GetBBVar(enum class EBBVar BBVar);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXBlueprintFunctionLibrary
class UNWXBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXBlueprintFunctionLibrary* GetDefaultObj();

	bool ValidateNWXPrintNodes(class UClass* ObjectClass, class FString* Error);
	bool ValidateNWXPlayerStarts(class UObject* Object, class FString* Error);
	bool ValidateGameplayEventData(class UClass* ObjectClass, class FString* Error);
	bool ValidateCrossServerDamageActorNodes(class UClass* ObjectClass, class FString* Error);
	struct FDateTime UnixTimestampToDateTime(int64 UnixTimestamp);
	TArray<class FName> SortSocketsByDistanceToTargetVector(TArray<class FName>& SocketNames, struct FVector& TargetVector, class USkeletalMeshComponent* Mesh);
	TArray<class UObject*> SortObjectsByDistanceToTarget(TArray<class UObject*>& Objects, class UObject* Target);
	TArray<class AActor*> SortByGameplayTags(TArray<class AActor*>& Actors, TArray<struct FGameplayTagContainer>& Tags);
	TArray<struct FVector> SortByDistanceToTargetVector(TArray<struct FVector>& Vectors, struct FVector& TargetVector);
	TArray<class AActor*> SortByDistanceToTargetAndClassType(TArray<class AActor*>& Actors, TArray<class UClass*>& ClassTypes, class AActor* Target);
	TArray<class AActor*> SortByDistanceToTarget(TArray<class AActor*>& Actors, class AActor* Target);
	TArray<class AActor*> SortByClassType(TArray<class AActor*>& Actors, TArray<class UClass*>& ClassTypes);
	void SetComponentIsNavRelavent(class UActorComponent* Componet, bool IsNavRelevant);
	struct FHitResult SetBoneOnHitResult(struct FHitResult& HitResult, class FName& BoneName);
	class UAnimMontage* SelectMontageNearTarget(TArray<class UAnimMontage*>& Montages, class AActor* Actor, struct FTransform& DesiredTransform, float Leeway, bool Rotational);
	TArray<class AActor*> RemoveInvalidEntriesFromArray(TArray<class AActor*>& Actors);
	void PopulateISM(class UInstancedStaticMeshComponent* ISM, TArray<struct FTransform>& Transforms);
	void NWXPrint(class UObject* WorldContextObject, const class FString& LogMessage, enum class ENWXLogLevel NWXLogLevel, enum class ELogCategory LogCategory, bool bPrintToScreen, bool bPrintToLog, bool bSuppressStackTrace);
	bool MontageHasSlot(class UAnimMontage* Montage, class FName& SlotName);
	void LocationToTransform(struct FVector& Location, bool RandomYaw, float MinScale, float MaxScale, struct FTransform* Transform);
	void LocationsToTransforms(TArray<struct FVector>& Locations, bool RandomYaw, float MinScale, float MaxScale, TArray<struct FTransform>* Transforms);
	bool IsTutorial(class UObject* WorldContextObject);
	bool IsTargetReachableOnNavMesh(class APawn* Pawn, class AActor* TargetActor);
	bool IsSteamDeck();
	bool IsStartMenu(class UObject* WorldContextObject);
	bool IsServer(class UObject* Obj);
	bool IsRealmCardRoom(class UObject* WorldContextObject);
	bool IsRealmCanonical(class UObject* WorldContextObject);
	bool IsPossedPawnOnNavMesh(class APawn* Pawn);
	bool IsPointOnAValidNavIsland(class APawn* Pawn, struct FVector& Point);
	bool IsPointInOrOnBox(struct FBox& Box, struct FVector& Point);
	bool IsPlayInEditorSimulateMode();
	bool IsPlayInEditor(class UObject* WorldContextObject);
	bool IsObjectOfClass(class UObject* Object, TSoftClassPtr<class UObject>& SoftClass);
	bool IsNightingaleCity(class UObject* WorldContextObject);
	bool IsLocationReachableOnNavMesh(class APawn* Pawn, struct FVector& TargetLocation, bool ReachingWithFlying);
	bool IsLocationReachableOnDefaultNav(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End);
	bool IsInEditorPreview(class UObject* WorldContextObject);
	bool IsEncroachingBlockingGeometry(class AActor* TestActor);
	bool IsDevEnvironment();
	bool IsDedicatedServer(class UObject* Obj);
	bool IsDataTableStructType(class UDataTable* Table, class UScriptStruct* StructType);
	bool IsBoxInsideBoxXY(struct FBox& BoxA, struct FTransform& BoxATransform, struct FBox& B, struct FTransform& BoxBTransform);
	bool IsBoxInsideBox(struct FBox& BoxA, struct FTransform& BoxATransform, struct FBox& B, struct FTransform& BoxBTransform);
	bool IsBlueprintClass(class UObject* LoadedObject);
	float InvertTest(float A);
	void GroupByShardId(TArray<struct FDeployment>& Deployments, TMap<class FString, struct FDeploymentList>* OutDeploymentsByShardId);
	class ANWXWorldSettings* GetWorldSettings(class UObject* WorldContextObject);
	bool GetWorldIsTearingDown(class UObject* WorldContextObject);
	class FString GetTutorialMapName();
	struct FDeployment GetTargetDeploymentForProfile(class UObject* WorldContextObject, TArray<struct FDeployment>& PotentialDeployments, struct FSelectableProfile& Profile);
	class FString GetStackTraceString();
	TArray<class UAnimMetaData*> GetSectionMetaData(class UAnimMontage* Montage, class FName SectionName, bool bIncludeSequence, class FName SlotName);
	class FString GetRealmCardRoomMapName();
	struct FVector GetQueryExtentsForPawn(class APawn* Pawn);
	class UClass* GetParentClass(class UClass* Class);
	struct FTransform GetObjectTransform(class UObject* Obj);
	class ANWXPlayerController* GetNWXPlayerController(class UObject* WorldContextObject);
	class UNWXGameUserSettings* GetNWXGameUserSettings();
	class ANWXGameStateBase* GetNWXGameStateBase(class UObject* WorldContextObject);
	class ANWXGameModeBase* GetNWXGameModeBase(class UObject* WorldContextObject);
	class FString GetNightingaleCityMapName();
	class ANavigationData* GetNavDataForPawn(class APawn* Pawn);
	TArray<class UAnimMetaData*> GetMetadata(class UAnimMontage* Montage);
	enum class E_LocalCardinalDirection2D GetLocalCardinalDirection(class AActor* TestActor, struct FVector& InVector);
	void GetLandscapeProjectionsWithinBox(class UBoxComponent* Box, int32 Count, TArray<struct FVector>* Locations, int32* FailedTraces, float* HighestZ, float* LowestZ);
	void GetGameplayTagFromString(const class FString& InputString, struct FGameplayTag* OutputTag);
	class FString GetFunctionName();
	bool GetDynamicActorAtLocation(class UObject* WorldContextObject, struct FVector& Location, class UClass* ActorClassFilter, class AActor** Actor);
	class UObject* GetDefaultObject(TSubclassOf<class UObject> ObjectClass);
	struct FTopLevelAssetPath GetDataTableRowStructPath(class UDataTable* Table);
	class FString GetCurrentNetworkEmulationProfileName(class UObject* WorldContextObject);
	TArray<struct FVector> GetConeVertices(struct FVector& Origin, struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides);
	bool GetComponentIsNavRelavent(class UActorComponent* Component);
	class FString GetCommandLineArgument(const class FString& ArgumentName);
	float GetClosestPointOnComponentCollision(class UPrimitiveComponent* Component, struct FVector& Point, class FName& BoneName, struct FVector* OutPointOnBody, enum class EGetResult* Branches);
	class FString GetBrainDescription(class APawn* Pawn);
	void GetBoundsInWorldSpace(struct FVector& LocalMin, struct FVector& LocalMax, struct FTransform& LocalToWorld, struct FVector* WorldMin, struct FVector* WorldMax);
	void GetBoundsInOtherSpace(struct FVector& LocalMin, struct FVector& LocalMax, struct FTransform& LocalToWorld, struct FTransform& OtherToWorld, struct FVector* OtherMin, struct FVector* OtherMax);
	class UClass* GetBlueprintParentClass(class UObject* Object);
	void GetAllAssetsByFilter(struct FARFilter& Filter, TArray<class UObject*>* Objects);
	void GetAllActorsOfClassIncludingInactiveActors(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors);
	class AActor* GetActorInRange(TArray<class AActor*>& Actors, class AActor* Target, float Distance, float* DistanceToTarget);
	bool FindReachableLocationAroundPointOnNavMesh(class APawn* Pawn, float BoxHalfSize, struct FVector& TargetLocation, struct FVector* OutLocation);
	bool FindRandomTopNBestPolyInRangeAtLocation(class UObject* WorldContextObject, struct FNavAgentProperties& NavProperties, struct FBox& BoxExtent, int32 MinIslandSize, int32 TopNTopPickFrom, struct FVector* PolyLocation);
	bool FindRandomTopNBestPolyInRange(class APawn* Pawn, struct FBox& BoxExtent, int32 MinIslandSize, int32 TopNToPickFrom, struct FVector* PolyLocation);
	class AActor* FindOwnerActor(class UObject* Obj);
	class UMaterialParameterCollection* FindMaterialCollectionByName(const class FString& Name);
	bool FindFurthestReachableLocationAroundPointOnNavMesh(class APawn* Pawn, float BoxHalfSize, struct FVector& TargetLocation, struct FVector* OutLocation);
	class UObject* FindFirstImplementor(class UObject* Object, TSubclassOf<class IInterface>& Interface);
	class AController* FindController(class UObject* Obj);
	struct FVector FindClosestVectorToTargetVector(TArray<struct FVector>& Vectors, struct FVector& TargetVector);
	bool FindClosestPointToBoxCenterThatIsReachableFromPawn(class APawn* Pawn, struct FBox& BoxExtent, struct FVector* PolyLocation);
	bool FindClosestPointOnClosestPolyToLocation(class UObject* WorldContextObject, struct FNavAgentProperties& NavProperties, struct FBox& BoxExtent, struct FVector* PolyLocation);
	class APawn* FindClosestPawnToTarget(class APawn* Target, TArray<class APawn*>& Pawns, TSubclassOf<class UNavigationQueryFilter>& FilterClass);
	bool FindBestPolyInRangeAtLocation(class UObject* WorldContextObject, struct FNavAgentProperties& NavProperties, struct FBox& BoxExtent, int32 MinIslandSize, struct FVector* PolyLocation);
	bool FindBestPolyInRange(class APawn* Pawn, struct FBox& BoxExtent, int32 MinIslandSize, struct FVector* PolyLocation);
	void EmptyDataTable(class UDataTable* DataTable);
	bool DoesLineIntersectBox(struct FBox& Box, struct FTransform& BoxTransform, struct FVector& LineStart, struct FVector& LineEnd);
	int32 DateTimeToUnixTimestampClamped(struct FDateTime& DateTime);
	int64 DateTimeToUnixTimestamp(struct FDateTime& DateTime);
	class UActorComponent* CreateAndAttachComponent(TSubclassOf<class UActorComponent>& ComponentClass, class AActor* Actor, class FName& ComponentName);
	void CopyStructIntoObject(class UObject* Struct, class UObject* Object, bool bPrintDebug, bool bIgnoreReplicatedProperties);
	float CombineWeightedScores(float TotalScore, float TotalWeight);
	float ClampAndCurveNormalizedScore(float Score, float MinScore, float MaxScore, class UCurveFloat* ScoreCurve);
	bool CheckHitResultForInterface(TSubclassOf<class IInterface> InDesiredInterface, struct FHitResult& InHitResult);
	void BootstrapDeploymentForShard(class UObject* WorldContextObject, const class FString& ShardId, const class FString& PreferredRegion, bool bReturnToRespite, FDelegateProperty_& Complete);
	bool BooleanArray_Xor(TArray<bool>& BooleanArray);
	bool BooleanArray_Or(TArray<bool>& BooleanArray);
	bool BooleanArray_NotEqual(TArray<bool>& BooleanArrayA, TArray<bool>& BooleanArrayB);
	bool BooleanArray_Nor(TArray<bool>& BooleanArray);
	bool BooleanArray_Nand(TArray<bool>& BooleanArray);
	bool BooleanArray_Equal(TArray<bool>& BooleanArrayA, TArray<bool>& BooleanArrayB);
	bool BooleanArray_And(TArray<bool>& BooleanArray);
	int32 ArithmeticModulo(int32 A, int32 B);
	bool ActorHasTag(class AActor* Actor, struct FGameplayTag& Tag, bool ExactMatch);
	void AccumulateWeightedScore(struct FWeightedScore& NewScore, float InTotalScore, float InTotalWeight, float* OutTotalScore, float* OutTotalWeight);
};

// 0x60 (0x100 - 0xA0)
// Class NWX.NWXCharacterAudioComponent
class UNWXCharacterAudioComponent : public UActorComponent
{
public:
	class UAkRtpc*                               FirstThirdPersonRTPC;                              // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_92E5[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCharacterAudioComponent* GetDefaultObj();

	bool UpdateStructureReverbs();
	void RemoveActorFromStructureReverbs();
	void HandleFirstThirdPersonUpdate(bool IsFirstPerson);
	class UNWXAbilitySystemComponent* GetLocalAbilitySystemComponent();
};

// 0x8 (0x38 - 0x30)
// Class NWX.NWXCharacterMovementSettings
class UNWXCharacterMovementSettings : public UDataAsset
{
public:
	float                                        ClientNetSendMoveDeltaTime;                        // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENetworkSmoothingMode             NetworkSmoothingMode;                              // 0x34(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_92E7[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCharacterMovementSettings* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.NWXPoiIgnoreList
class UNWXPoiIgnoreList : public UObject
{
public:
	TArray<class FString>                        IgnoreList;                                        // 0x28(0x10)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXPoiIgnoreList* GetDefaultObj();

};

// 0x200 (0xA60 - 0x860)
// Class NWX.NWXTravelController
class ANWXTravelController : public APlayerController
{
public:
	uint8                                        Pad_92EB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPlayerDeploymentRequestUpdated;                  // 0x868(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerTravelWithMovie;                           // 0x878(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FNWXPlayerDeploymentRequest           PlayerDeploymentRequest;                           // 0x888(0x98)(Net, RepNotify, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FRealmIntroMovieData> RealmToMovieMap;                                   // 0x920(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UDiscoveryDataAsset*                   ArrivalDataAsset;                                  // 0x970(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                  Travel_ErrorUnknown;                               // 0x978(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                  Travel_OK;                                         // 0x990(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                  Travel_ErrorNoDeploymentsFound;                    // 0x9A8(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                  Travel_RealmAtCapacity;                            // 0x9C0(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                  Travel_PermissionDenied;                           // 0x9D8(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                        Pad_92EC[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXTravelController* GetDefaultObj();

	void TravelToDeploymentByName(const class FString& DeploymentName);
	void TravelByPortalAfterDelay(class ADeploymentPortal* Portal, float Delay);
	void TravelByPortal(class ADeploymentPortal* Portal);
	class UNWXLoadingScreenMoviePlayerWidget* ShowMovieUntilPortalDeployment(const class FString& MovieMediaSourceURL);
	void Server_TravelToSanctuary();
	void Server_ClearTravelRequest();
	void OnRep_PlayerDeploymentRequest();
	void OnConnectToDeploymentFailed(class FText& ErrorMessage);
	struct FNWXPlayerDeploymentRequest GetPlayerDeploymentRequest();
	void Client_PerformTravel();
};

// 0x3B8 (0xE18 - 0xA60)
// Class NWX.NWXPlayerController
class ANWXPlayerController : public ANWXTravelController
{
public:
	uint8                                        Pad_9350[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMapLocationTracker*                   MapLocationTracker;                                // 0xAD8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCancelledResting;                                // 0xAE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9351[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnUsingGamepadChanged;                             // 0xB00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerSpectatorPawnChanged;                      // 0xB10(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UCompanionManagementComponent*         CompanionManagement;                               // 0xB20(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFakeLocalPlayerController;                        // 0xB28(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInFlyCam;                                       // 0xB29(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9352[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextChatComponent*                    TextChatComponent;                                 // 0xB30(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerReportingComponent*             PlayerReportingComponent;                          // 0xB38(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealmDeploymentSystemComponent*       RealmDeploymentSystemComponent;                    // 0xB40(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInGameTimeComponent*            PlayerInGameTimeComponent;                         // 0xB48(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerSpawnComponent*                 PlayerSpawnComponent;                              // 0xB50(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConversationHostComponent*            ConversationHostComponent;                         // 0xB58(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerPositionsComponent*             PlayerPositionsComponent;                          // 0xB60(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBossCombatDetectionComponent*         BossCombatDetectionComponent;                      // 0xB68(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URedemptionComponent*                  RedemptionComponent;                               // 0xB70(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicatedAudioComponent*             ReplicatedAudioComponent;                          // 0xB78(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerGameRulesComponent*             PlayerGameRulesComponent;                          // 0xB80(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInventoryReceived;                                // 0xB88(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9354[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPlayerConfirmedReady;                            // 0xB90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDebugFlyCam*                          DebugFlyCamComponent;                              // 0xBA0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TemporalRealmRemainingTimerUpdatePeriod;           // 0xBA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9356[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class APlayerInputHandler>       PlayerInputHandlerClass;                           // 0xBB0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowDebugCombatLog;                               // 0xBB8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9357[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDamageDebuggerUpdate>         CombatLogEntries;                                  // 0xBC0(0x10)(BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         bPlayerConfirmedReady;                             // 0xBD0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9358[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXServerConfig*                      ServerConfig;                                      // 0xBE8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        PingWarningThresholdSeconds;                       // 0xBF0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9359[0x6C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FServiceDetails                       ServiceDetails;                                    // 0xC60(0x40)(Net, RepNotify, NativeAccessSpecifierPrivate)
	class UXmppConnectionManagerComponent*       XmppConnectionManagerComponent;                    // 0xCA0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935A[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPlayerControllerReadinessAwaiter*     PlayerControllerReadinessAwaiter;                  // 0xCF8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerInputHandler*                   PlayerInputHandler;                                // 0xD10(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EInputContext                     InputContext;                                      // 0xD18(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnClientPlayerPlacementStartedDelegate;            // 0xD20(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnClientPlayerPlacementEndedDelegate;              // 0xD30(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class UObject>                ClientPlacementObject;                             // 0xD50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         InventoryAwaiter;                                  // 0xD68(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_935F[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UChallengeSystem*                      ChallengeSystem;                                   // 0xD80(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9360[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLoadChallengesFromAssetManager;                   // 0xD98(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9361[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TScriptInterface<class IBuildingInterface>   BuildingObject;                                    // 0xDA0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPersistentGASDataComponent*           PersistentGASDataComponent;                        // 0xDB0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9362[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPlayerController* GetDefaultObj();

	void UnbindEventFrom_OnClientPlayerPlacementStarted(FDelegateProperty_& Event);
	void UnbindEventFrom_OnClientPlayerPlacementEnded(FDelegateProperty_& Event);
	void TryRecruitCompanion(class AActor* RecruitedNPC);
	void TryDismissCompanion(class AActor* RecruitedNPC);
	void TravelToDeployment(const class FString& DeploymentName);
	void TogglePermission(class UObject* Structure, enum class EPermissionOptions PermissionType);
	void ToggleHighSpeedMode();
	bool ToggleCombatLog();
	void StartSamplingLogs(const class FString& Category, const class FString& VerbosityLevel, float DurationInMinutes);
	void SlomoServer(float Dilation);
	void SimulateSteamJoin(const class FString& ConnectStr);
	void SimulateEOSJoin(const class FString& ConnectStr);
	void SetTemporalRealmLifespanMinutes(float NewLifespan);
	void SetSpawnerAsGameplayDebuggerActorServer();
	void SetRemainingTemporalRealmTimeMinutes(float NewRemainingMinutes);
	void SetPlayerConfirmedReady(bool bIsReady);
	void SetInvisibleServer(bool IsInvisible);
	void SetInputContext(enum class EInputContext InputContext);
	void SetFeatureFlag(const class FString& FeatureName, bool FeatureEnabled);
	void SetCombatLog_Server(bool bShowCombatLog);
	void SetCachedPlacementRotation(float Rotation);
	void SetBuildingFeedbackMode(enum class EBuildModeContext Mode);
	void ServerEnterCharacterCraftingStation(struct FCraftingRecipeReference& SelectedRecipe);
	void Server_UpdatePlayerOwnedMapPin(struct FGuid& MapPinId, float Radius, class FText& Note);
	void Server_TryRecruitCompanion(class AActor* RecruitedNPC);
	void Server_TryDismissCompanion(class AActor* RecruitedNPC);
	void Server_TravelToDeployment(const class FString& DeploymentName);
	void Server_TogglePermission(class UObject* Structure, enum class EPermissionOptions& PermissionType);
	void Server_TeleportToLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation);
	void Server_TeleportPlayerWithEQS(class UEnvQuery* EQS, class AActor* CustomStartSpot);
	void Server_StartSamplingLogs(const class FString& Category, const class FString& VerbosityLevel, float Duration);
	void Server_SetTemporalRealmLifespanMinutes(float NewLifespan);
	void Server_SetStructureCustomizedName(class AStructureConstructedBase* TargetStructure, const class FString& Name, const class FString& PlayerId);
	void Server_SetRemainingTemporalRealmTimeMinutes(float NewRemainingMinutes);
	void Server_SetPlayerConfirmedReady(bool bIsReady);
	void Server_SetFeatureFlag(const class FString& FeatureName, bool FeatureEnabled);
	void Server_RestartPlayer();
	void Server_RemoveSelfFromWaitingToRest();
	void Server_RemovePlayerOwnedMapPin(struct FGuid& MapPinId);
	void Server_RemoveCardsFromTableOnStartPortal(class UActorComponent* ActorComponent);
	void Server_RemoveCardFromTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToRemove);
	void Server_RemoveCardFromDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToRemove);
	void Server_OverrideMoveSpeed(bool bOverride, float OverrideAmount);
	void Server_OnStructureContainerOpenStateChanged(class UObject* StructureContainer, bool bIsOpen);
	void Server_OnSpawnFinalizedStructure(struct FGameplayAbilityTargetDataHandle& TargetData, struct FStructureAssetReference& StructureRef, bool bIgnoreBudgets);
	void Server_MoveCardFromTableToDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToMove);
	void Server_MoveCardFromDeckToTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToMove);
	void Server_InitializeRealmCardPlacementModel(class UActorComponent* ActorComponent);
	void Server_IgniteFireStructure(class UObject* Structure);
	void Server_ForceEndDowned();
	void Server_ExtinguishFireStructure(class UObject* Structure, enum class EExtinguishReason ExtinguishReason);
	void Server_ClearRealmCardPlacementModel(class UActorComponent* ActorComponent);
	void Server_ClearLastPlayedRealmCardsFromRCM(class UActorComponent* ActorComponent);
	void Server_CheckSavedDeployments(class UActorComponent* ActorComponent, struct FRealmSettings& RealmSettings);
	void Server_AddPlayerOwnedMapPin(struct FTransform& Transform, struct FDataTableRowHandle& PresentationData);
	void Server_AddCardToTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToAdd);
	void Server_AddCardToDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToAdd);
	void RemoveCardsFromTableOnStartPortal(class UActorComponent* ActorComponent);
	void RemoveCardFromTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToRemove);
	void RemoveCardFromDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToRemove);
	void ReceiveOnPawnOrPlayerStateChanged();
	void ReceiveOnClientReady(bool Success);
	void PrintDebugLogs();
	void OverrideAsLocalPlayerController();
	void OpenFeedbackReport();
	void OnServerEnterCharacterCraftingStation(struct FCraftingRecipeReference& SelectedRecipe);
	void OnRep_ServiceToken();
	void OnRep_PlayerConfirmedReady();
	void OnRep_CombatLogEntries();
	void OnPersistenceApplied(class UObject* Object);
	void OnInputModeChanged(bool UIMode);
	void OnCombatLogUpdate(struct FDamageDebuggerUpdate& Update);
	void OnClientPlayerPlacementStarted(class UObject* PlacementActor);
	void OnClientPlayerPlacementEnded(class UObject* PlacementActor, bool bIsPlacementSuccessful);
	void OnBackpackItemRemoved(TScriptInterface<class IItemContainer>& Container, struct FInventoryEntry& Entry, int32 Count);
	void MoveCardFromTableToDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToMove);
	void MoveCardFromDeckToTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToMove);
	bool IsUsingGamepad();
	bool IsPlayerConfirmedReady();
	void InitializeRealmCardPlacementModel(class UActorComponent* ActorComponent);
	bool HasServiceRole(enum class EServiceRole ServiceRole);
	class UPlayerInteractionComponent* GetPlayerInteractionComponent();
	class UBasicAwaiter* GetInventoryAwaiter();
	enum class EInputContext GetInputContext();
	struct FPlacementSettings GetCachedPlacementSettings();
	void ForceSheatheActiveItem();
	void ForceEndDowned();
	void FlyNewLocation();
	void Fly();
	void FlushInput();
	void EnableCheatsServer();
	void DumpClientReadinessDiagnostics();
	void DebugSetOverrideSpeed(float OverrideAmount);
	void Client_UpdateSavedDeploymentResponse(class UActorComponent* ActorComponent, bool IsReopening);
	void Client_ToggleSpectatorCamera(bool bTeleportControlledPawnToSpectator);
	void Client_OnCancelledResting();
	void Client_CheatResponse(const class FString& ResponseString);
	void Client_AddUIFromWorldInteraction(TSubclassOf<class UNWXCommonWindowWidget> WidgetToOpen);
	void ClearRealmCardPlacementModel(class UActorComponent* ActorComponent);
	void ClearLastPlayedRealmCardsFromRCM(class UActorComponent* ActorComponent);
	bool CanUseSupportCommands();
	TScriptInterface<class IBuildingInterface> CacheAndGetBuildingObject();
	void BP_OnRep_Pawn();
	void BindEventTo_OnClientPlayerPlacementStarted(FDelegateProperty_& Event);
	void BindEventTo_OnClientPlayerPlacementEnded(FDelegateProperty_& Event);
	void AfkTimer_KickPlayer();
	void AddUI_FromWorldInteraction(TSubclassOf<class UNWXCommonWindowWidget> WidgetToOpen);
	void AddCardToTable(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToAdd);
	void AddCardToDeck(class UActorComponent* ActorComponent, struct FInventoryEntry& CardToAdd);
};

// 0x30 (0xB8 - 0x88)
// Class NWX.NWXCheatManager
class UNWXCheatManager : public UCheatManager
{
public:
	struct FSoftObjectPath                       TeleportToPOIQueryAsset;                           // 0x88(0x20)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                             TeleportToPOIQuery;                                // 0xA8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         CanViewRecipeAssets;                               // 0xB0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_937E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCheatManager* GetDefaultObj();

	void ViewStructureAssetName(const class FString& AssetName, const class FString& DisplayName, class FString* OutView);
	void ViewCraftingAssetName(const class FString& AssetName, const class FString& DisplayName, class FString* OutView);
	bool ToggleViewRecipeAssetNames();
	void TeleportToResource_Server(const class FString& ResourceId, int32 Value);
	void TeleportToResource(const class FString& ResourceId, int32 Value);
	void TeleportToPOI_Server(int32 InPOIIndex);
	void TeleportToPOI(int32 InPOIIndex);
	void SpawnIvyOnTrees_Server(int32 Value);
	void SpawnIvyOnTrees(int32 Value);
	void SetWorkerFlag_Server(const class FString& Name, const class FString& Value);
	void SetWorkerFlag(const class FString& Name, const class FString& Value);
	void SetTimeOfDay(int32 Hours, int32 Minutes);
	void SavePoiIgnoreList(const TArray<class FString>& InIgnoreEntries);
	void RemoveMinorCard_Server(const class FString& CardName);
	void RemoveMinorCard(const class FString& CardName);
	void RemoveLocalTrees(float Density);
	void RemoveIvyOnTrees();
	void RecruitNearbyNPCs_Server();
	void RecruitNearbyNPCs();
	void PlayMinorCard_Server(const class FString& CardName);
	void PlayMinorCard(const class FString& CardName);
	TArray<class FString> ListPOIs(TMap<int32, struct FPOIPlugNameList>* OutPlugs, bool bShouldLog);
	class UStructureCheats* GetStructureCheatManager();
	class UCraftingCheats* GetCraftingCheatManager();
	void DumpLevelPOIKey_Server();
	void DumpLevelPOIKey();
	void DismissAllNPCs_Server();
	void DismissAllNPCs();
	void DecodePOIKey(const class FString& EncodedPOIKey);
	void CreateRespiteRealmCard_Server(const class FString& ProfileId);
	void CreateRespiteRealmCard(const class FString& ProfileId);
	void CreateNamedRealmCard_Server(const class FString& Name);
	void CreateNamedRealmCard(const class FString& Name);
	void CreateDeploymentRealmCard_Server();
	void CreateDeploymentRealmCard();
	void AutoLogin();
};

// 0x8 (0x38 - 0x30)
// Class NWX.NWXClientPerformanceTelemetrySubsystem
class UNWXClientPerformanceTelemetrySubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                        Pad_937F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXClientPerformanceTelemetrySubsystem* GetDefaultObj();

};

// 0x310 (0x490 - 0x180)
// Class NWX.NWXCommonActionWidget
class UNWXCommonActionWidget : public UWidget
{
public:
	FMulticastInlineDelegateProperty_            OnInputMethodChanged;                              // 0x180(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FSlateBrush                           ProgressMaterialBrush;                             // 0x190(0xD0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                  ProgressMaterialParam;                             // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9385[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           IconRimBrush;                                      // 0x270(0xD0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        IconNumber;                                        // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9386[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDataTableRowHandle>           InputActions;                                      // 0x348(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                          EnhancedInputAction;                               // 0x358(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9387[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              ProgressDynamicMaterial;                           // 0x368(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9388[0x120];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCommonActionWidget* GetDefaultObj();

	void SetInputActions(const TArray<struct FDataTableRowHandle>& NewInputActions);
	void SetInputAction(const struct FDataTableRowHandle& InputActionRow);
	void SetIconRimBrush(const struct FSlateBrush& InIconRimBrush);
	void SetEnhancedInputAction(class UInputAction* InInputAction);
	void OnInputMethodChanged__DelegateSignature(bool bUsingGamepad);
	bool IsHeldAction();
	bool HasValidIcon(class UCommonInputSubsystem* CommonInputSubsystem);
	struct FSlateBrush GetIcon();
	class FText GetDisplayText();
};

// 0x8 (0x420 - 0x418)
// Class NWX.NWXCommonActivatableWidget
class UNWXCommonActivatableWidget : public UCommonActivatableWidget
{
public:
	bool                                         bAutoActivateOnAddedToFocusPath;                   // 0x418(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoDeactivateOnRemovedFromFocusPath;             // 0x419(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoActivateOnMouseEnter;                         // 0x41A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoDeactivateOnMouseLeave;                       // 0x41B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9389[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCommonActivatableWidget* GetDefaultObj();

	void OnInputMethodChanged(enum class ECommonInputType CurrentInputType);
};

// 0x0 (0x2B0 - 0x2B0)
// Class NWX.NWXCommonActivatableWidgetStack
class UNWXCommonActivatableWidgetStack : public UCommonActivatableWidgetStack
{
public:

	static class UClass* StaticClass();
	static class UNWXCommonActivatableWidgetStack* GetDefaultObj();

};

// 0x50 (0x15E0 - 0x1590)
// Class NWX.NWXCommonButton
class UNWXCommonButton : public UCommonButtonBase
{
public:
	bool                                         bDisableAfterClicked;                              // 0x1590(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldInheritWidgetTag;                           // 0x1591(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_938A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DisabledDuration;                                  // 0x1594(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOverrideInputActionIconWidget;                    // 0x1598(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_938B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInputAction*                          InputActionIconOverride;                           // 0x15A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_938C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnTriggeringEnhancedInputActionPressed;            // 0x15B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnTriggeringEnhancedInputActionReleased;           // 0x15C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_938D[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCommonButton* GetDefaultObj();

	void BP_PositionInputActionWidget();
};

// 0x0 (0x3F0 - 0x3F0)
// Class NWX.NWXCommonGameViewportClient
class UNWXCommonGameViewportClient : public UCommonGameViewportClient
{
public:

	static class UClass* StaticClass();
	static class UNWXCommonGameViewportClient* GetDefaultObj();

};

// 0x38 (0x3C8 - 0x390)
// Class NWX.NWXCommonHUDBase
class ANWXCommonHUDBase : public AHUD
{
public:
	uint8                                        Pad_938E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXCommonWindowWidget>    HUDActivatableWidgetClass;                         // 0x398(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          HUDLayerName;                                      // 0x3A0(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          DeathScreensLayerName;                             // 0x3A8(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXPlayerState*                       PlayerState;                                       // 0x3B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBasicAwaiter*                         HUDAwaiter;                                        // 0x3B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXCommonWindowWidget*                HUDActivatableWidget;                              // 0x3C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXCommonHUDBase* GetDefaultObj();

	void OnPlayerSpectatorPawnUnPossessed();
	void OnPlayerSpectatorPawnPossessed(class ASpectatorPawn* NewSpectatorPawn);
	void OnPlayerSpectatorPawnChanged_Internal(class ASpectatorPawn* SpectatorPawn);
	void OnPlayerPawnUnPossessed(class APawn* OldPawn);
	void OnPlayerPawnPossessed(class APawn* NewPawn);
	void OnPlayerPawnChanged_Internal(class APawn* OldPawn, class APawn* NewPawn);
	void OnClientReady(bool Success);
	class UCommonActivatableWidget* GetHUDScreen();
	void DeactivateHUD();
	void ActivateHUD();
};

// 0x90 (0x458 - 0x3C8)
// Class NWX.NWXCommonHUD
class ANWXCommonHUD : public ANWXCommonHUDBase
{
public:
	TSubclassOf<class UNWXMenuDataComponent>     MenuDataComponentClass;                            // 0x3C8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGuideBookComponent>       GuideBookComponentClass;                           // 0x3D0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCraftingCreationComponent> CraftingCreationComponentClass;                    // 0x3D8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, TSubclassOf<class UNWXCommonWindowWidget>> WidgetClassPerTag;                                 // 0x3E0(0x50)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UNWXMenuDataComponent*                 MenuDataComponent;                                 // 0x430(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x438(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCraftingCreationComponent*            CraftingCreationComponent;                         // 0x440(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           OnMenuEntryCalled;                                 // 0x448(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXCommonHUD* GetDefaultObj();

	void UpdateDeathScreens();
	void UninitializeHUD();
	bool IsSpectator();
	void InitializeHUD();
	class ANWXCommonHUD* GetNWXCommonHUD(class ANWXPlayerController* PlayerController);
	class ANWXCommonHUD* GetLocalNWXCommonHUD(class UObject* WorldContext);
	void GenerateRadialMenuEntriesFromInteractions(TArray<struct FNWXInteractionOption>& Interactions, FDelegateProperty_& InteractionConfirmedEvent, TArray<TScriptInterface<class IRadialMenuInterface>>* OutRadialMenuEntries);
	void CallRadialInteractionConfirmed(const struct FGuid& InteractionAssetUID);
};

// 0x98 (0x4B8 - 0x420)
// Class NWX.NWXCommonWindowWidget
class UNWXCommonWindowWidget : public UNWXCommonActivatableWidget
{
public:
	FMulticastInlineDelegateProperty_            OnOpened;                                          // 0x420(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClosed;                                          // 0x430(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bAllowDuplicates;                                  // 0x440(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EInputMode                        DesiredInputMode;                                  // 0x441(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EMouseCaptureMode                 DesiredMouseCaptureMode;                           // 0x442(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_939B[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class ENWXWidgetTelemetryType>   EnabledTelemetryTypes;                             // 0x448(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bFlushInputsOnDeactivate;                          // 0x458(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_939C[0x5F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCommonWindowWidget* GetDefaultObj();

	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnPawnUnpossessed(class APawn* OldPawn);
	void OnPawnPossessedAndReady(class APawn* NewPawn);
	void OnOpenTimerFinished();
	void OnInternalOpened();
	void OnInternalClosed();
	void OnCloseTimerFinished();
	void InitializeDesignerPreview();
	class UWidgetAnimation* GetOpenAnimation();
	class UWidgetAnimation* GetCloseAnimation();
	void Close();
	void BP_UnregisterScrollRecipient(class UWidget* AnalogScrollRecipient);
	void BP_RegisterScrollRecipent(class UWidget* AnalogScrollRecipient);
};

// 0x60 (0x3A0 - 0x340)
// Class NWX.NWXCompassWidget
class UNWXCompassWidget : public UNWXUserWidget
{
public:
	TMap<class FString, class ANWXPlayerState*>  CachedPartyMemberPlayerStates;                     // 0x340(0x50)(Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                   PartyMemberViewData;                               // 0x390(0x10)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXCompassWidget* GetDefaultObj();

	void UpdateCachedPartyMemberPlayerStates();
	bool TryGetPartyMemberLocation(const class FString& ProfileId, struct FVector* OutLocation);
	void PartyMemberLeftRealm(const class FString& ProfileId);
	void PartyMemberJoinedRealm(const class FString& ProfileId);
	void OwningPlayerLeftParty();
	void OwningPlayerJoinedParty();
	void HandlePlayerLeftParty(const class FString& RoomId);
	void HandlePlayerJoinedParty(const class FString& RoomId);
	void HandleMemberLeftRealm(const class FString& ProfileId);
	void HandleMemberLeftParty(const class FString& RoomId, const class FString& ProfileId);
	void HandleMemberJoinedRealm(const class FString& ProfileId);
	void HandleMemberJoinedParty(const class FString& RoomId, const class FString& ProfileId);
	void GetPartyMemberIds(TArray<class FString>* OutIds);
};

// 0x0 (0x168 - 0x168)
// Class NWX.NWXToolbarComponent
class UNWXToolbarComponent : public UToolbarComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXToolbarComponent* GetDefaultObj();

};

// 0x0 (0x168 - 0x168)
// Class NWX.NWXConsumableToolbarComponent
class UNWXConsumableToolbarComponent : public UNWXToolbarComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXConsumableToolbarComponent* GetDefaultObj();

};

// 0x50 (0x398 - 0x348)
// Class NWX.NWXStatCounterWidget
class UNWXStatCounterWidget : public UNWXCommonUserWidget
{
public:
	struct FGameplayAttribute                    Attribute;                                         // 0x348(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93A5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAbilitySystemComponent*               AbilitySystem;                                     // 0x388(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93A6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXStatCounterWidget* GetDefaultObj();

	float GetValue();
	void BP_HandleAttributeChanged(float NewValue, float Delta);
};

// 0x0 (0x398 - 0x398)
// Class NWX.NWXCoreStatCounterWidget
class UNWXCoreStatCounterWidget : public UNWXStatCounterWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXCoreStatCounterWidget* GetDefaultObj();

};

// 0x50 (0x398 - 0x348)
// Class NWX.NWXCraftingRecipeListWidget
class UNWXCraftingRecipeListWidget : public UNWXCommonUserWidget
{
public:
	TArray<struct FGameplayTag>                  ItemQualityPanelOrdering;                          // 0x348(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_93A8[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCraftingRecipeListWidget* GetDefaultObj();

	void SetStationDisciplines(struct FGameplayTagContainer& NewStationDisciplines);
	void RefreshMenu();
	struct FGameplayTagContainer GetDisciplinesForEntry(class UNWXMenuDataEntry* Entry);
	void GenerateListPanels(struct FUIGroupInfo& GroupInfo, TArray<class UNWXMenuDataEntry*>& Entries, bool IsDefaultStationGroup);
	void GenerateAndPopulateListPanels();
};

// 0x2B0 (0x570 - 0x2C0)
// Class NWX.NWXCreatureManagerBase
class ANWXCreatureManagerBase : public AManagerBase
{
public:
	FMulticastInlineDelegateProperty_            OnCreatureSpawned;                                 // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCreatureDestroyed;                               // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCreatureManagerPOIsInitialized;                  // 0x2E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UNWXAIPOI_Component*>           POIs;                                              // 0x2F0(0x10)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_93B3[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWildlifeSpawningDataAsset*            WildlifeSpawnersData;                              // 0x318(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCreatureBudgetComponent*              BudgetComponent;                                   // 0x320(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNWXAIPOI_Component>       POIComponentClass;                                 // 0x328(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                 POIOwnerAppendedTags;                              // 0x330(0x20)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                            CreatureChallengeData;                             // 0x350(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCreatureChallengeEntry>       CreatureChallengeMap;                              // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNWXCreatureMigrationComponent*        CreatureMigrationComponent;                        // 0x368(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            NaturalWildlifeSpawnersData;                       // 0x370(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FClusterTheme>      RealmClusters;                                     // 0x378(0x50)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UPersistentCreatureComponent*          PersistentCreatureComponent;                       // 0x3C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ANWXAICharacter*>               NWXAICharacterRegistry;                            // 0x3D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_93B6[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseOldCreatureDataMap;                            // 0x430(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93B7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class ECreatureTier, int32>        CreatureTierRealmPowerThresholds;                  // 0x438(0x50)(Edit, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<class ANWXAISpawner*>                 SpawnedSpawners;                                   // 0x488(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ANWXAICharacter*>               Creatures;                                         // 0x498(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, int32>                     WildlifeSpawnerCounts;                             // 0x4A8(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_93B8[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSuppressionTraitChangedProperties> SuppressionStructureArray;                         // 0x510(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_93B9[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXCreatureManagerBase* GetDefaultObj();

	void UpdateCounts(class AActor* KilledCreature);
	class ANWXAISpawner* SpawnSpawnerAtPOI(struct FWildlifeSpawner& ChosenCreature, class UNWXAIPOI_Component* ChosenPOI);
	class ANWXAISpawner* RequestNewPetSpawner(class UPetsDataAsset* PetsData, class ANWXStructure* OwnerStructure);
	bool IsSpawnerAbleToMigratePOIs(class ANWXAISpawner* Spawner);
	void InitializePOI(TArray<class AStreamingLevelProxyActor*>& ValidPOIs);
	void InitializeCreatureDataMap_OLD();
	void InitializeCreatureDataMap();
	TArray<struct FDataTableRowHandle> GetValidCreaturesForRealm();
	int32 GetTotalReservations();
	TArray<class AStreamingLevelProxyActor*> GetSpawnPointPOIs();
	int32 GetReservationsForSpawner(class ANWXAISpawner* Spawner);
	struct FGameplayTag GetDenTagFromSpawnDataTable(class UDataTable* SpawnerDataTable, class FName& RowName);
	TArray<class ANWXAICharacter*> GetCreatures();
	void FillNaturalWildlifeBudget();
	void CreatureSuppressionActivated(struct FSuppressionTraitChangedProperties& SuppressionTrait);
	void ClearCreaturePersistence();
	bool CanSpawnerMigrateToPOI(class ANWXAISpawner* Spawner, class UNWXAIPOI_Component* POIComp);
	void CallOnCreatureSpawned(class ANWXAICharacter* Creature);
	void CallOnCreatureDestroyed(class AActor* Creature);
	void AddSpawnerToQueue(class ANWXAISpawner* SpawnerToAdd);
};

// 0xC8 (0x168 - 0xA0)
// Class NWX.NWXCreatureMigrationComponent
class UNWXCreatureMigrationComponent : public UActorComponent
{
public:
	uint8                                        Pad_93BB[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NewMigrationQueryFrequency;                        // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MaxSpawnerPercentInSpawnCluster;                   // 0xEC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SpawnerMigrationCooldown;                          // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        MinimumMigrationDistance;                          // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        MaximumMigrationDistance;                          // 0xF8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_93BC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UAIAction>                 MigrationAction;                                   // 0x100(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_93BD[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXCreatureMigrationComponent* GetDefaultObj();

	void SpawnerPOIChanged(class ANWXAISpawner* Spawner, class UNWXAIPOI_Component* OldPOI, class UNWXAIPOI_Component* NewPOI);
};

// 0x98 (0x550 - 0x4B8)
// Class NWX.NWXCreditsWindowWidget
class UNWXCreditsWindowWidget : public UNWXCommonWindowWidget
{
public:
	TSoftObjectPtr<class UDataTable>             CSVImportedTablePtr;                               // 0x4B8(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_93BE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCreditsData                          ParsedTeam;                                        // 0x4E8(0x58)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FNWXCreditsTeam>               TeamArray;                                         // 0x540(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXCreditsWindowWidget* GetDefaultObj();

	void ParseDataToStructs();
};

// 0x8 (0x350 - 0x348)
// Class NWX.NWXDateTime
class UNWXDateTime : public UNWXCommonUserWidget
{
public:
	bool                                         ShowDate;                                          // 0x348(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93C1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXDateTime* GetDefaultObj();

	class FText FormatDateTime(struct FDateTime& DateTime);
};

// 0x0 (0x4B8 - 0x4B8)
// Class NWX.NWXDBRealmsScreen
class UNWXDBRealmsScreen : public UNWXCommonWindowWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXDBRealmsScreen* GetDefaultObj();

	void SetRealmMachine(class UObject* RealmMachine);
	void InitalizeRealm();
};

// 0x8 (0x510 - 0x508)
// Class NWX.NWXEditableText
class UNWXEditableText : public UEditableText
{
public:
	int32                                        MaxCharacterCount;                                 // 0x508(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_93C2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXEditableText* GetDefaultObj();

};

// 0x0 (0x650 - 0x650)
// Class NWX.NWXFieldSystemComponent
class UNWXFieldSystemComponent : public UFieldSystemComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXFieldSystemComponent* GetDefaultObj();

};

// 0xC0 (0x4D0 - 0x410)
// Class NWX.NWXPlayerAnimInstance
class UNWXPlayerAnimInstance : public UNWXAnimInstance
{
public:
	struct FVector                               PlayerAngularVelocity;                             // 0x410(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsEnteringClimbing;                                // 0x428(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsClimbing;                                        // 0x429(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93C5[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReverseDirection;                                  // 0x42C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JumpPhase;                                         // 0x430(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FallPhase;                                         // 0x434(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EAlertnessLevelType               Alertness;                                         // 0x438(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsGliding;                                         // 0x439(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsSprinting;                                       // 0x43A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93C6[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              LocalControlRotation;                              // 0x440(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                              PlayerRotation;                                    // 0x458(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	enum class EMovementMode                     MovementMode;                                      // 0x470(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERALSMovementState                MovementState;                                     // 0x471(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93C7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AEquippableItem*                       MainhandEquippedItem;                              // 0x478(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AEquippableItem*                       OffhandEquippedItem;                               // 0x480(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMainhandEquippedItemChanged;                     // 0x488(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnOffhandEquippedItemChanged;                      // 0x498(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_93C8[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXPlayerAnimInstance* GetDefaultObj();

};

// 0x50 (0x520 - 0x4D0)
// Class NWX.NWXFirstPersonAnimInstance
class UNWXFirstPersonAnimInstance : public UNWXPlayerAnimInstance
{
public:
	bool                                         IsAiming;                                          // 0x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsJumping;                                         // 0x4D1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsHeavyLanding;                                    // 0x4D2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93CB[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HeavyLandingVelocityThreshold;                     // 0x4D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsBlocking;                                        // 0x4D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsAmmoEmpty;                                       // 0x4D9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bLeftHandIKEnabled;                                // 0x4DA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93CC[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LeftHandOffsetLocation;                            // 0x4E0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         OffhandEquipped;                                   // 0x4F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         OffhandHidden;                                     // 0x4F9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93CD[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SwimExitDelay;                                     // 0x4FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MainHandInactive;                                  // 0x500(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MainHandForcedInactive;                            // 0x501(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         OffHandInactive;                                   // 0x502(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         OffHandForcedInactive;                             // 0x503(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EBodyType                         BodyType;                                          // 0x504(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93CE[0x1B];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXFirstPersonAnimInstance* GetDefaultObj();

	void ShowHands();
	void ShowHand(enum class EHandType HandType);
	void OnSwimmingExited();
	void HideHands(bool bImmediate);
	void HideHand(enum class EHandType HandType, bool bImmediate);
	void AnimNotify_IKStop();
	void AnimNotify_IKStart();
};

// 0x90 (0x560 - 0x4D0)
// Class NWX.NWXFirstPersonFBAnimInstance
class UNWXFirstPersonFBAnimInstance : public UNWXPlayerAnimInstance
{
public:
	bool                                         IsInThirdPerson;                                   // 0x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsTraversalActive;                                 // 0x4D1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ClimbStepInProgress;                               // 0x4D2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ClimbStepActivated;                                // 0x4D3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsInMountingAnimation;                             // 0x4D4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93D5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FromClimbDirection;                                // 0x4D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ToClimbDirection;                                  // 0x4DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ClimbStepDistance;                                 // 0x4E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ClimbIdleDirection;                                // 0x4E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSwimmingActive;                                   // 0x4E8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93D6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SwimEnterDelayTime;                                // 0x4EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsTurningInPlace;                                  // 0x4F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         TurnInPlaceLeft;                                   // 0x4F1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         TurnInPlaceRight;                                  // 0x4F2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93D7[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RelativeLeftRightLookOffset;                       // 0x4F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              IdleFacingRotation;                                // 0x4F8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        CharacterRelativeMovementDirection;                // 0x510(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsMovingBackwards;                                 // 0x514(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93D8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurrentGait;                                       // 0x518(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WalkBaseSpeed;                                     // 0x51C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RunBaseSpeed;                                      // 0x520(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SprintBaseSpeed;                                   // 0x524(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               InAirVelocity;                                     // 0x528(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         TransitionFromLandingToOnGround;                   // 0x540(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EBodyType                         BodyType;                                          // 0x541(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_93D9[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXGameUserSettings*                  NWXGameUserSettings;                               // 0x548(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_93DA[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXFirstPersonFBAnimInstance* GetDefaultObj();

	void OnCameraViewUpdated(bool InThirdPerson);
	void AnimNotify_TurningInPlaceExit();
	void AnimNotify_TurningInPlace();
	void AnimNotify_GroundedIdleEntered();
	void AnimNotify_ExitedClimbMount();
	void AnimNotify_EnteredClimbMount();
	void AnimNotify_ClimbStepEntered();
	void AnimNotify_ClimbStepBlended();
	void AnimNotify_ClimbIdleBlended();
};

// 0x58 (0x80 - 0x28)
// Class NWX.NWXFlyingNavLink
class UNWXFlyingNavLink : public UObject
{
public:
	uint8                                        Pad_93DC[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXFlyingNavLink* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXFuelableObserverInterface
class INWXFuelableObserverInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INWXFuelableObserverInterface* GetDefaultObj();

	void UnbindDelegate_OnRemainingFuelPercentChanged(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnFuelActivelyConsumedChanged(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnAppliedFuelItemsChanged(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnActiveFuelItemChanged(FDelegateProperty_& Delegate);
	bool IsFuelBeingConsumed();
	bool HasAnyFuel();
	TArray<struct FItemConstraint> GetRequiredItemTags();
	double GetRemainingTimeLeft();
	float GetRemainingFuelPercent();
	TArray<struct FInventoryEntry> GetAppliedItems();
	struct FInventoryEntry GetActiveFuelItem();
	void BindDelegate_OnRemainingFuelPercentChanged(FDelegateProperty_& Delegate);
	void BindDelegate_OnFuelActivelyConsumedChanged(FDelegateProperty_& Delegate);
	void BindDelegate_OnAppliedFuelItemsChanged(FDelegateProperty_& Delegate);
	void BindDelegate_OnActiveFuelItemChanged(FDelegateProperty_& Delegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXFunctionalTestFunctionLibrary
class UNWXFunctionalTestFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXFunctionalTestFunctionLibrary* GetDefaultObj();

	void TestPawnLookAtLocation(class UObject* WorldContextCObject, class APawn* Pawn, struct FVector& Location, bool* bSuccess, class FString* ErrorMessage);
	class APawn* SpawnTestPawn(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, struct FTransform& SpawnTransform, bool* bSuccess, class FString* ErrorMessage);
	void SpawnPossessedTestPawn(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, struct FTransform& SpawnTransform, bool* bSuccess, class APawn** Pawn, class APlayerController** PlayerController, class FString* ErrorMessage);
	void EquipItemOnTestPawn(class UObject* WorldContextObject, class APawn* Pawn, struct FItemDataReference& ItemId, bool* bSuccess, class AEquippableItem** EquippedItem, class FString* ErrorMessage);
};

// 0x128 (0x2E8 - 0x1C0)
// Class NWX.NWXGameInstance
class UNWXGameInstance : public UGameInstance
{
public:
	class USocialManager*                        SocialManager;                                     // 0x1C0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_93F0[0xE8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  DriversOutOfDateMsg;                               // 0x2B0(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_93F1[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGameInstance* GetDefaultObj();

	void ReturnToMainMenu();
	void OnTravelFailureHandler(class UWorld* World, enum class ETravelFailure FailureType, const class FString& ErrorString);
	void OnActorEndPlay(class AActor* Actor, enum class EEndPlayReason EndPlayReason);
	void OnActorDestroyed(class AActor* DestroyedActor);
	void OnActorBeginPlay(class AActor* Actor);
	void HandleOnPendingNetGame(class UPendingNetGame* NetGame);
	int32 GetStartLoadTime();
};

// 0x270 (0x5B0 - 0x340)
// Class NWX.NWXGameModeBase
class ANWXGameModeBase : public AGameModeBase
{
public:
	uint8                                        Pad_93FF[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UGameRulePlayer*>               PlayerGameRules;                                   // 0x370(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWorldPersistenceLoadComplete;                    // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        Day;                                               // 0x390(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Month;                                             // 0x394(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Year;                                              // 0x398(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Hour;                                              // 0x39C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Minute;                                            // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GameWorldTimeScale;                                // 0x3A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class AManagerBase>, bool>  DesiredManagers;                                   // 0x3A8(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBasicAwaiter*                         ManagersRegisteredAwaiter;                         // 0x3F8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         InitialFlagsAwaiter;                               // 0x400(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         AllLevelsLoadedAwaiter;                            // 0x408(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiAwaiter*                         GameModeAwaiter;                                   // 0x410(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         LoginValidatorAwaiter;                             // 0x418(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGameRulePlayer*>               ActivePlayerGameRules;                             // 0x420(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UGameRuleRealm*>                ActiveRealmGameRules;                              // 0x430(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9400[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAgonesComponent*                      AgonesSDK;                                         // 0x498(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9401[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasReceivedPlayerHardCapFlag;                     // 0x4A1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9402[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PlayerHardCap;                                     // 0x4A4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WorkerHealthCheckTimerDuration;                    // 0x4A8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WorkerFlagFetchInterval;                           // 0x4AC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9403[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UPlayerGameRulesComponent*>     PlayerRuleComponents;                              // 0x540(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9404[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXGameModeBase* GetDefaultObj();

	void StopServerMetricsHeartbeatTimer();
	void StopDeploymentIdleTimer();
	void StartServerMetricsHeartbeatTimer();
	void StartDeploymentIdleTimer(bool bAfterLogout);
	void OnWorkerFlagUpdate(const class FString& FlagName, const class FString& FlagValue);
	void OnSimStateManagerBaseReady(class ANWXSimStateManagerBase* SimStateManagerBase);
	void OnRealmDeckChanged(TScriptInterface<class IRealmCard>& RealmCard, enum class ERealmCardAction CardAction);
	void OnRealmCardGameRuleEvent(class UGameRule* GameRule, enum class EGameRuleEvent GameRuleEvent);
	void OnDeploymentIdleTimer();
	void OnAllLevelsFinishedLoadingCallback();
	bool IsManagerExpected(TSubclassOf<class AManagerBase> Manager);
	bool GetWorkerFlag(const class FString& FlagName, class FString* OutFlagValue);
	class AManagerBase* GetManager(TSubclassOf<class AManagerBase> RequestedManagerClass);
	void AwaitInitialFlags(FDelegateProperty_& OnReadyDelegate, float Timeout);
	void AwaitAllManagersRegistered(FDelegateProperty_& OnReadyDelegate, float Timeout);
	void Agones_Shutdown(struct FEmptyResponse& Response);
	void Agones_ReceiveGameServer(struct FGameServerResponse& Response);
	void Agones_ReceiveError(struct FAgonesError& Response);
	void Agones_PlayerDisconnect(struct FDisconnectResponse& Response);
	void Agones_PlayerConnect(struct FConnectedResponse& Response);
	void Agones_HandleSetAnnotationSuccess(const struct FEmptyResponse& Response);
	void Agones_Connected(struct FGameServerResponse& Response);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXGameplayAbilityFunctionLibrary
class UNWXGameplayAbilityFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXGameplayAbilityFunctionLibrary* GetDefaultObj();

	bool TargetDataHasVector(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasText(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasString(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasRotator(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasObject(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasName(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasInt64(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasInt(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasGameplayTagContainer(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasGameplayTag(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasFloat(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasByte(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool TargetDataHasBool(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	void SetMultiHitsToEffectContext(struct FGameplayEffectContextHandle& Handle, TArray<struct FHitResult>& Hits);
	void SetContextSource(const struct FGameplayEffectContextHandle& Handle, class UObject* NewSource);
	void RemoveAbility(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilityHandle);
	bool IsValidAbilitySpecHandle(struct FGameplayAbilitySpecHandle& Handle);
	bool IsValid(const struct FActiveGameplayEffectHandle& Handle);
	bool IsTagQueryEmpty(struct FGameplayTagQuery& TagQuery);
	bool IsActiveAbilitySpecHandle(class AActor* Actor, struct FGameplayAbilitySpecHandle& Handle);
	struct FGameplayAbilitySpecHandle GiveAbilityAndActivate(class UAbilitySystemComponent* AbilitySystemComponent, struct FGameplayAbilitySpecDef& Ability);
	struct FGameplayAbilitySpecHandle GiveAbility(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecDef& Ability);
	struct FVector GetVectorFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	struct FVector GetVectorFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	class FText GetTextFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	class FString GetStringFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	class FString GetStringFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	TSubclassOf<class UGameplayAbility> GetSpecDefAbility(struct FGameplayAbilitySpecDef& SpecDefHandle);
	struct FSoftObjectPath GetSoftObjectPathFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	void GetSetByCallerAttributesAndTags(TSubclassOf<class UGameplayEffect>& GameplayEffectClass, TMap<struct FGameplayAttribute, struct FGameplayTag>* AttributeTags);
	struct FRotator GetRotatorFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	class UObject* GetObjectFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	int32 GetNumActiveGameplayEffects(class UAbilitySystemComponent* AbilitySystemComponent);
	class FName GetNameFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	class FName GetNameFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	TArray<struct FHitResult> GetMultiHitsFromEffectContext(struct FGameplayEffectContextHandle& Handle);
	float GetLevel(struct FActiveGameplayEffectHandle& Handle);
	int32 GetIntFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	int32 GetIntegerFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	int64 GetInt64FromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	struct FGuid GetGuidFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	TArray<TSubclassOf<class UGameplayAbility>> GetGrantedAbilities(struct FGameplayEffectSpecHandle& SpecHandle);
	struct FGameplayTag GetGameplayTagFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	struct FGameplayTagContainer GetGameplayTagContainerFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	struct FGameplayTagContainer GetGameplayTagContainerFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	float GetFloatFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	float GetFloatFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	struct FDataTableRowHandle GetDataTableRowHandleFromAbilityTargetData(struct FGameplayAbilityTargetDataHandle& PayloadData, int32 Index);
	struct FDataTableRowHandle GetDataTableRowHandleFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	class UClass* GetClassFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	uint8 GetByteFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool GetBoolFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	bool GetBoolFromAbilityPayload(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	void GetAllObjectsFromTargetData(TArray<class UObject*>* OutObjects, struct FGameplayAbilityTargetDataHandle& TargetData);
	TArray<struct FHitResult> GetAllHitResultsFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index);
	class AActor* GetActorFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData);
	void GetActiveGameplayEffectUIs(class UAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<class UGameplayEffectUIData> UIClass, TArray<class UGameplayEffectUIData*>* GameplayEffectUIs, TArray<struct FActiveGameplayEffectHandle>* EffectHandles);
	TSubclassOf<class UGameplayEffect> GetAbilityCooldownClass(TSubclassOf<class UGameplayAbility> AbilityClass);
	bool DoesContainerMatchTagQuery(struct FGameplayTagContainer& TagContainer, struct FGameplayTagQuery& TagQuery, bool ResultOnEmptyQuery);
	struct FGameplayEffectCue CreateGameplayEffectCue(struct FGameplayTag& Tag, struct FGameplayAttribute& MagnitudeAttribute, float MinLevel, float MaxLevel);
	struct FGameplayAbilitySpecDef CreateAbilitySpecDefFromClass(TSubclassOf<class UGameplayAbility> AbilityClass);
	void ConfirmAbilityTask(class UAbilityTask* AbilityTask, bool bEndTask);
	void CancelAbilityTask(class UAbilityTask* AbilityTask);
	bool CanApplyAttributeModifiers(class AActor* Actor, TSubclassOf<class UGameplayEffect>& GameplayEffectClass, float Level, struct FGameplayEffectContextHandle& Context);
	void BreakGameplayEffectCue(struct FGameplayEffectCue& Cue, struct FGameplayTagContainer* Tags, struct FGameplayAttribute* MagnitudeAttribute, float* MinLevel, float* MaxLevel);
	struct FGameplayAbilityTargetDataHandle AppendTargetDataHandles(TArray<struct FGameplayAbilityTargetDataHandle>& Handles);
	struct FGameplayAbilityPayloadHandle AppendPayloadHandle(const struct FGameplayAbilityPayloadHandle& Handle, struct FGameplayAbilityPayloadHandle& HandleToAdd);
	struct FGameplayEffectSpecHandle AddObjects(struct FGameplayEffectSpecHandle& SpecHandle, TArray<class UObject*>& Objects);
	struct FGameplayEffectSpecHandle AddGrantedAbilities(struct FGameplayEffectSpecHandle& SpecHandle, TArray<struct FGameplayAbilitySpecDef>& NewGrantedAbilities);
	struct FGameplayEffectSpecHandle AddDynamicGameplayCues(struct FGameplayEffectSpecHandle& SpecHandle, TArray<struct FGameplayEffectCue>& Cues);
	bool AbilityTargetDataHasDataTableRowHandle(struct FGameplayAbilityTargetDataHandle& PayloadData, int32 Index);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromVector(struct FVector& Vector);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromTransforms(struct FGameplayAbilityTargetingLocationInfo& SourceLocation, struct FGameplayAbilityTargetingLocationInfo& TargetLocation);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromTransform(struct FTransform& Transform);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromText(class FText& Text);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromTagContainer(struct FGameplayTagContainer& TagContainer);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromString(const class FString& String);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromRotator(struct FRotator& Rotator);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromOverlapResults(TArray<struct FOverlapResultWraper>& OverlapResults);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromObjectArray(TArray<class UObject*>& ObjectArray);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromObject(class UObject* Object);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromName(class FName& Name);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromInt64(int64 Integer64);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromInt(int32 Integer);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromHitResults(TArray<struct FHitResult>& HitResults);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromGameplayTag(struct FGameplayTag& GameplayTag);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromFloat(float Float);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromDataTableRowHandle(struct FDataTableRowHandle& Value);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromClass(class UClass* TargetClass);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromByte(uint8 Byte);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromBool(bool Boolean);
	bool AbilityPayloadHasVector(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasString(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasSoftObjectPath(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasName(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasInteger(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasGuid(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasGameplayTagContainer(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasFloat(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasDataTableRowHandle(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	bool AbilityPayloadHasBool(struct FGameplayAbilityPayloadHandle& PayloadData, int32 Index);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromVector(struct FVector& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromString(const class FString& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromSoftObjectPath(struct FSoftObjectPath& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromName(class FName& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromInteger(int32 Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromGuid(struct FGuid& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromGameplayTagContainer(struct FGameplayTagContainer& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromFloat(float Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromDataTableRowHandle(struct FDataTableRowHandle& Value);
	struct FGameplayAbilityPayloadHandle AbilityPayloadFromBool(bool bValue);
};

// 0x10 (0x400 - 0x3F0)
// Class NWX.NWXGameplayAbilityTargetActor
class ANWXGameplayAbilityTargetActor : public AGameplayAbilityTargetActor
{
public:
	bool                                         bListenToInput;                                    // 0x3F0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9491[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXGameplayAbilityTargetActor* GetDefaultObj();

	void ValidateClientTargetData(struct FGameplayAbilityTargetDataHandle& Data, bool* bIsTargetDataValid);
	void ReceiveStartTargeting(class UGameplayAbility* Ability);
	void ReceiveCleanup();
	void ReceiveCancelTargeting();
	void K2_ConfirmTargeting();
	void K2_CancelTargeting();
	class APawn* GetOwningPawn();
	class ACharacter* GetOwningCharacter();
	class AActor* GetOwningActor();
	class UGameplayAbility* GetOwningAbility();
	void ConfirmAndSendTargetData(struct FGameplayAbilityTargetDataHandle* TargetData);
};

// 0x8 (0xA58 - 0xA50)
// Class NWX.NWXGameplayEffect
class UNWXGameplayEffect : public UGameplayEffect
{
public:
	bool                                         bPersistEffect;                                    // 0xA50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSkipIfExistingEffect;                             // 0xA51(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGameplayEffectPersistedTimeType  PersistedTimeType;                                 // 0xA52(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9494[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGameplayEffect* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class NWX.NWXGameplayEffectUIData
class UNWXGameplayEffectUIData : public UGameplayEffectUIData
{
public:
	class FText                                  EffectName;                                        // 0x28(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  EffectDescription;                                 // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             EffectIcon;                                        // 0x58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowStateChangedDescription;                      // 0x80(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_949A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  EffectAppliedDescription;                          // 0x88(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  EffectRemovedDescription;                          // 0xA0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	enum class EGameplayImpact                   GameplayImpact;                                    // 0xB8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_949B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 EffectTags;                                        // 0xC0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXGameplayEffectUIData* GetDefaultObj();

	bool HasAppliedDescription();
	class UTexture2D* GetLoadedEffectIcon();
	struct FGameplayTagContainer GetEffectTags();
	class FText GetEffectRemovedDescription();
	class FText GetEffectName();
	enum class EGameplayImpact GetEffectGameplayImpact();
	class FText GetEffectDescription();
	class FText GetEffectAppliedDescription();
};

// 0x0 (0x2B8 - 0x2B8)
// Class NWX.NWXGameSession
class ANWXGameSession : public AGameSession
{
public:

	static class UClass* StaticClass();
	static class ANWXGameSession* GetDefaultObj();

};

// 0x2E8 (0x5E0 - 0x2F8)
// Class NWX.NWXGameStateBase
class ANWXGameStateBase : public AGameStateBase
{
public:
	uint8                                        Pad_94A5[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBPAnalyticsEventAttr>         BlueprintGameStateInfo;                            // 0x318(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNWXStatRecorderComponent*             StatRecorder;                                      // 0x328(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXAutoTraceCaptureComponent*         AutoTraceCaptureComponent;                         // 0x330(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULogSamplingComponent*                 LogSamplingComponent;                              // 0x338(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Seed;                                              // 0x340(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_94A6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                POIDistributionKey;                                // 0x348(0x10)(BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeploymentInformation                DeployInformation;                                 // 0x358(0x58)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                        Pad_94A7[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsTestRealm;                                       // 0x3C8(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_94A8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnDamageDebuggerEvent;                             // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFarCreatureAudioEvent;                           // 0x3E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClientIsReady;                                   // 0x3F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCommunityPlayerIdsUpdated;                       // 0x400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        TemporalRealmLifespanMinutes;                      // 0x410(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InaccessibilityTimeValueMinutes;                   // 0x414(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EInaccessibilityMode              InaccessibilityMode;                               // 0x418(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94AA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDeathComponent*                       DeathComponent;                                    // 0x420(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URealmRespitesComponent*               RealmRespitesComponent;                            // 0x428(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                        CommunityPlayerIds;                                // 0x430(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	class USyncRestComponent*                    SyncRestComponent;                                 // 0x440(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        ServerSendGameStateDuration;                       // 0x448(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         SendGameState;                                     // 0x44C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94AB[0x4B];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXSignificanceMangerComponent*       SignificanceManagerUpdater;                        // 0x498(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94AC[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMultiAwaiter*                         GameStateAwaiter;                                  // 0x4B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         ValidReferencesAwaiter;                            // 0x4C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         GameStateServerReadyAwaiter;                       // 0x4C8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureCompositeCreationCoordinator* CompositeCreationCoordinator;                      // 0x4D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bSupportRolesEnforced;                             // 0x4D8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94AE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FDelegateProperty_                           WorkerFlagWatcher;                                 // 0x4DC(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GameStartTime;                                     // 0x4EC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVislogRecordingConfig                VislogConfig;                                      // 0x4F0(0x50)(Edit, NativeAccessSpecifierPrivate)
	bool                                         bGameStateServerReady;                             // 0x540(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94B0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRealmStructureCountContext           RealmStructureCountContext;                        // 0x542(0x4)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94B1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGuid>                         RealmCards;                                        // 0x548(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                         bIsStructurePlacementCollisionEnabled;             // 0x558(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsStructureBudgetDisabled;                        // 0x559(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsStructurePieceBudgetDisabled;                   // 0x55A(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsStructureSkillUnlockBypassEnabled;              // 0x55B(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94B3[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRealmSettings                        RealmSettings;                                     // 0x580(0x40)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94B4[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FRealmCardDefinitionReference> ActiveRealmCards;                                  // 0x5D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXGameStateBase* GetDefaultObj();

	void UpdateCommunityPlayerIds();
	void UpdateBPGameState();
	bool SupportRolesEnforced();
	void StopVisLog();
	void StartVisLog();
	void SetRealmCards(TArray<struct FGuid>& NewRealmCards);
	void SendHeartbeat();
	void OnWorkerFlagsUpdated(const class FString& FlagName, const class FString& FlagValue);
	void OnRep_RealmStructureCountContext();
	void OnRep_RealmSettings();
	void OnRep_GameStateServerReady();
	void OnRep_DeployInformation();
	void OnRep_CommunityPlayerIds();
	void OnRep_ActiveRealmCards();
	void OnRealmSettingsReady(struct FRealmSettings& NewRealmSettings);
	void OnRealmDeckChanged(TScriptInterface<class IRealmCard>& RealmCard, enum class ERealmCardAction CardAction);
	void OnFarCreatureAudioEvent__DelegateSignature(struct FVector& Location, struct FDataTableRowHandle& SpawnerData);
	void OnDamageEventDelegate__DelegateSignature(struct FDamageDebuggerUpdate& UpdateData);
	void OnCommunityPlayerIdsUpdatedDelegate__DelegateSignature(TArray<class FString>& IdList);
	void OnClientIsReady__DelegateSignature();
	void Multicast_SetVislogWhiteListOnly(bool bEnabled);
	void Multicast_SetVislogEnabledOnAllServers(bool IsEnabled);
	void Multicast_SetRecordingWhiteListedVislogOnAllServers(bool IsEnabled);
	void Multicast_FarCreatureAudioEvent(struct FVector& Location, struct FDataTableRowHandle& SpawnerData);
	void ListAllPOIsInRealm(TArray<class APOIConfigBase*>* POIList);
	class USyncRestComponent* GetSyncRestComponent();
	class URealmRespitesComponent* GetRealmRespitesComponent();
	TArray<class FString> GetCommunityPlayerIds();
	void ExecuteRestForPlayer(class APlayerController* Controller, class UObject* Structure);
	bool DoesRealmHaveOtherCommunityMembers(const class FString& PlayerId);
	void CallOnDamageDebuggerEvent(struct FDamageDebuggerUpdate& DamageUpdate);
};

// 0x130 (0x278 - 0x148)
// Class NWX.NWXGameUserSettings
class UNWXGameUserSettings : public UGameUserSettings
{
public:
	FMulticastInlineDelegateProperty_            OnTrackedSettingChanged;                           // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        AudioVolumeMasterLevel;                            // 0x158(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AudioVolumeSFXLevel;                               // 0x15C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AudioVolumeMusicLevel;                             // 0x160(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AudioVolumeVoiceLevel;                             // 0x164(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         HeadphonePanningEnabled;                           // 0x168(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94CF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AudioPlayerVoiceEmoteLevel;                        // 0x16C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AudioReducedPlayerBreathEmotes;                    // 0x170(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AudioTextToSpeechVoicesEnabled;                    // 0x171(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AudioVoiceChatEnabled;                             // 0x172(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EVoiceChatMode                    AudioVoiceChatListenMode;                          // 0x173(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EVoiceChatMode                    AudioVoiceChatSendMode;                            // 0x174(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EVoiceChatMicMode                 AudioVoiceChatMicMode;                             // 0x175(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EVoiceChatVoiceEffectMode         AudioVoiceChatVoiceEffect;                         // 0x176(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AudioVoiceChatVolume;                              // 0x178(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AudioVoiceChatMicVolume;                           // 0x17C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         AudioMonoMixEnabled;                               // 0x180(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MouseSensitivity;                                  // 0x184(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InvertMouseX;                                      // 0x188(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InvertMouseY;                                      // 0x189(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GamepadSensitivity;                                // 0x18C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GamepadDeadzone;                                   // 0x190(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InvertGamepadX;                                    // 0x194(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         InvertGamepadY;                                    // 0x195(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EGamepadType                      GamepadType;                                       // 0x196(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D4[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Brightness;                                        // 0x198(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FieldOfView;                                       // 0x19C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TPFieldOfView;                                     // 0x1A0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         MotionBlurEnabled;                                 // 0x1A4(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EUpscalingTechnique               UpscaleTechnique;                                  // 0x1A5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TSRQuality;                                        // 0x1A8(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        DLSSQuality;                                       // 0x1AC(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FSRQuality;                                        // 0x1B0(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        XeSSQuality;                                       // 0x1B4(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DLSSSharpness;                                     // 0x1B8(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         DLSSFrameGeneration;                               // 0x1BC(0x1)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EUStreamlineReflexMode            NvidiaReflexMode;                                  // 0x1BD(0x1)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94D8[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FSRSharpness;                                      // 0x1C0(0x4)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         FSRFrameGeneration;                                // 0x1C4(0x1)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bThirdPersonEnabled;                               // 0x1C5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNonGameplayThirdPersonEnabled;                    // 0x1C6(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnableCameraShake;                                // 0x1C7(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnableArachnophobiaMode;                          // 0x1C8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDamageFloatyEnabled;                              // 0x1C9(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94DA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageFloatySize;                                  // 0x1CC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DamageFloatySpeed;                                 // 0x1D0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAutoHideHUD;                                      // 0x1D4(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShowTutorials;                                    // 0x1D5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EPartyInvitesMode                 PartyInvitesMode;                                  // 0x1D6(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EPrivateNamesMode                 MyPrivateNameMode;                                 // 0x1D7(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EPrivateNamesMode                 OthersPrivateNameMode;                             // 0x1D8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EChatMode                         ChatMode;                                          // 0x1D9(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanCrossPlay;                                     // 0x1DA(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bStreamerModeEnabled;                              // 0x1DB(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         SettingsInitialized;                               // 0x1DC(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAcceptedEULA;                                     // 0x1DD(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94DC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MapZoomLevel;                                      // 0x1E0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       NWXVersion;                                        // 0x1E4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                SavedConsoleLanguage;                              // 0x1E8(0x10)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        QualitySettingsVersion;                            // 0x1F8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94DD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FKey>               PlayerKeyMappings;                                 // 0x200(0x50)(Config, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_94DE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShowSubtitles;                                    // 0x260(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_94DF[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGameUserSettings* GetDefaultObj();

	void SetUpscalingTechnique(enum class EUpscalingTechnique NewUpscalingTechnique);
	void SetTPFieldOfView(float NewTPFOV);
	void SetStreamerModeEnabled(bool StreamerModeEnabled);
	void SetShowTutorials(bool bNewShowTutorials);
	void SetShowSubtitles(bool ShouldShowSubtitles);
	void SetSettingsInitialized(bool Initialized);
	void SetPartyInvitesMode(enum class EPartyInvitesMode PartyInvitesMode);
	void SetOthersPrivateNameMode(enum class EPrivateNamesMode PrivateNameMode);
	void SetNvidiaReflexMode(enum class EUStreamlineReflexMode NewReflexMode);
	void SetNonGameplayThirdPersonEnabled(bool bNewThirdPersonEnabled);
	void SetMyPrivateNameMode(enum class EPrivateNamesMode PrivateNameMode);
	void SetMouseSensitivity(float Sensitivity);
	void SetMouseInvertY(bool Inverted);
	void SetMouseInvertX(bool Inverted);
	void SetMotionBlurEnabled(bool NewMotionBlurEnabled);
	void SetMapZoomLevel(float ZoomLevel);
	void SetHeadphonePanningEnabled(bool Enable);
	void SetGameplayThirdPersonEnabled(bool bNewThirdPersonEnabled);
	void SetGamepadType(enum class EGamepadType GamepadType);
	void SetGamepadSensitivity(float Sensitivity);
	void SetGamepadInvertY(bool Inverted);
	void SetGamepadInvertX(bool Inverted);
	void SetGamepadDeadzone(float DeadZone);
	void SetFieldOfView(float NewFOV);
	void SetEnableCameraShake(bool bNewEnableCameraShake);
	void SetDLSSSharpness(float NewDLSSSharpness);
	void SetDLSSFrameGeneration(bool NewDLSSFrameGeneration);
	void SetDamageFloatySpeed(float NewDamageFloatySpeed);
	void SetDamageFloatySize(float NewDamageFloatySize);
	void SetDamageFloatyEnabled(bool bNewDamageFloatyEnabled);
	void SetChatMode(enum class EChatMode ChatMode);
	void SetCanCrossPlay(bool CanCrossPlay);
	void SetBrightness(float NewBrightness);
	void SetAutoHideHUD(bool bNewAutoHideHUD);
	void SetAudioVolumeVoice(float VolumeVoice);
	void SetAudioVolumeSFX(float VolumeSFX);
	void SetAudioVolumeMusic(float VolumeMusic);
	void SetAudioVolumeMaster(float VolumeMaster);
	void SetAudioVoiceChatVolume(float Volume);
	void SetAudioVoiceChatVoiceEffect(enum class EVoiceChatVoiceEffectMode Effect);
	void SetAudioVoiceChatSendMode(enum class EVoiceChatMode Mode);
	void SetAudioVoiceChatMicVolume(float Volume);
	void SetAudioVoiceChatMicMode(enum class EVoiceChatMicMode Mode);
	void SetAudioVoiceChatListenMode(enum class EVoiceChatMode Mode);
	void SetAudioVoiceChatEnabled(bool Enable);
	void SetAudioTextToSpeechVoicesEnabled(bool Enable);
	void SetAudioReducedPlayerBreathEmotes(bool Enable);
	void SetAudioPlayerVoiceEmoteLevel(float VolumeEmotes);
	void SetAudioMonoMixEnabled(bool Enable);
	void SetArachnophobiaModeEnabled(bool bNewArachnophobiaModeEnabled);
	void SetAcceptedEULA(bool Accepted);
	void RemoveAllPlayerKeyMappings();
	bool IsNvidiaReflexSupported();
	bool IsDLSSFrameGenSupported();
	enum class EUpscalingTechnique GetUpscalingTechnique();
	float GetTPFieldOfView();
	TArray<struct FIntPoint> GetSupportedFullscreenResolutions();
	bool GetStreamerModeEnabled();
	bool GetShowTutorials();
	bool GetShowSubtitles();
	bool GetSettingsInitialized();
	float GetRescaledBrightness();
	TMap<class FName, struct FKey> GetPlayerKeyMappings();
	enum class EPartyInvitesMode GetPartyInvitesMode();
	enum class EPrivateNamesMode GetOthersPrivateNameMode();
	enum class EUStreamlineReflexMode GetNvidiaReflexMode();
	bool GetNonGameplayThirdPersonEnabled();
	enum class EPrivateNamesMode GetMyPrivateNameMode();
	float GetMouseSensitivity();
	bool GetMouseInvertY();
	bool GetMouseInvertX();
	bool GetMotionBlurEnabled();
	float GetMapZoomLevel();
	bool GetHeadphonePanningEnabled();
	bool GetGameplayThirdPersonEnabled();
	enum class EGamepadType GetGamepadType();
	float GetGamepadSensitivity();
	bool GetGamepadInvertY();
	bool GetGamepadInvertX();
	float GetGamepadDeadzone();
	float GetFieldOfView();
	bool GetEnableCameraShake();
	float GetDLSSSharpness();
	bool GetDLSSFrameGeneration();
	float GetDamageFloatySpeed();
	float GetDamageFloatySize();
	bool GetDamageFloatyEnabled();
	enum class EChatMode GetChatMode();
	bool GetCanCrossPlay();
	float GetBrightness();
	bool GetAutoHideHUD();
	float GetAudioVolumeVoice();
	float GetAudioVolumeSFX();
	float GetAudioVolumeMusic();
	float GetAudioVolumeMaster();
	float GetAudioVoiceChatVolume();
	enum class EVoiceChatVoiceEffectMode GetAudioVoiceChatVoiceEffect();
	enum class EVoiceChatMode GetAudioVoiceChatSendMode();
	float GetAudioVoiceChatMicVolume();
	enum class EVoiceChatMicMode GetAudioVoiceChatMicMode();
	enum class EVoiceChatMode GetAudioVoiceChatListenMode();
	bool GetAudioVoiceChatEnabled();
	bool GetAudioTextToSpeechVoicesEnabled();
	bool GetAudioReducedPlayerBreathEmotes();
	float GetAudioPlayerVoiceEmoteLevel();
	bool GetAudioMonoMixEnabled();
	bool GetArachnophobiaModeEnabled();
	bool GetAcceptedEULA();
	TArray<enum class EUpscalingTechnique> GatherSupportedUpscalingTechniques();
	void FlushTelemetryAttributes();
	void FindDisplaySize(int32* X, int32* Y, enum class EWindowMode WindowMode);
	void ClearTelemetryAttributes();
	void BroadcastTrackedSettingChange(enum class ETrackedGameUserSetting Setting);
	void ApplyUpscalingSettings();
	void ApplyAudioSettings();
	void AddTelemetryAttribute(const class FString& Name, const class FString& Value);
	void AddPlayerKeyMapping(class FName NewKeyMappingName, const struct FKey& NewKey);
};

// 0x28 (0x58 - 0x30)
// Class NWX.NWXGauntletController
class UNWXGauntletController : public UGauntletTestController
{
public:
	uint8                                        Pad_94E1[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGauntletController* GetDefaultObj();

	void LoadAndRunTests();
};

// 0x108 (0x138 - 0x30)
// Class NWX.NWXGauntletPerfController
class UNWXGauntletPerfController : public UGauntletTestController
{
public:
	uint8                                        Pad_94E7[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ANWXPlayerController*                  PlayerController;                                  // 0x48(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_94E8[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGauntletPerfController* GetDefaultObj();

	void TeleportToPOI(int32 POIIndex);
	void StopPerformanceCapture();
	void StartPerformanceCapture();
	void PrepareTest();
	void OnPlayerReady(bool Success);
};

// 0x198 (0x4D8 - 0x340)
// Class NWX.NWXGenericContainerWidget
class UNWXGenericContainerWidget : public UNWXUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnContainerEntryHovered;                           // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntrySubContextMenuOpened;              // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntrySelected;                          // 0x360(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntryFocused;                           // 0x370(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntryDoubleClicked;                     // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntryMouseButtonUp;                     // 0x390(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerSortOrderUpdated;                       // 0x3A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerUpdated;                                // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntryTopButton;                         // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnContainerEntryLeftButton;                        // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWidgetInventoryEntryFilter>> DefaultFilterClasses;                              // 0x3E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UWidgetInventoryEntryFilter*>   Filters;                                           // 0x3F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TScriptInterface<class IItemContainer>       Container;                                         // 0x400(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGenericContainerCosmeticSettings     CosmeticSettings;                                  // 0x410(0x18)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_94F9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EEntrySortOrder, class FText> SortingDisplayNames;                               // 0x430(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGenericContainerItemGroup>    ItemGroupOrdering;                                 // 0x480(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_94FA[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGenericContainerWidget* GetDefaultObj();

	void UpdateSortOrderPersistence();
	void ToggleToNextSortingOrder();
	bool ShouldShowEntry(struct FInventoryEntry& InventoryEntry);
	void SetSortingOrder(enum class EEntrySortOrder NewSortingOrder);
	void RemoveFilter(TSubclassOf<class UWidgetInventoryEntryFilter> FilterClass, bool bShouldRefreshEntries);
	void RefreshGridEntries();
	void PostIntialize();
	void PopulateGrid();
	bool IsSortingByWeight();
	bool IsFilterActive(TSubclassOf<class UWidgetInventoryEntryFilter> FilterClass);
	bool IsContainerValid();
	void InitializeGenericContainer(TScriptInterface<class IItemContainer>& ItemContainer, struct FGenericContainerCosmeticSettings& ContainerCosmeticSettings);
	bool HasEntries();
	class FText GetSortOrderName(enum class EEntrySortOrder SortOrder);
	int32 GetNumRemainingSlots();
	class FText GetGroupNameForEntry(struct FInventoryEntry& InventoryEntry);
	enum class EEntrySortOrder GetCurrentSortOrder();
	TArray<struct FInventoryEntry> GetCurrentlyDisplayedEntries();
	void CreateAndAddWidget(struct FInventoryEntry& InventoryEntry);
	void CreateAndAddEmptyWidget();
	void ContainerItemsUpdated(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void AddFilter(TSubclassOf<class UWidgetInventoryEntryFilter> FilterClass, bool bShouldRefreshEntries);
};

// 0x190 (0x430 - 0x2A0)
// Class NWX.NWXGeometryCollection
class ANWXGeometryCollection : public AActor
{
public:
	FMulticastInlineDelegateProperty_            OnGeometryDisplaced;                               // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            MaterialOverrides;                                 // 0x2B0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_94FE[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  CollisionBox;                                      // 0x350(0x38)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_94FF[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXFieldSystemComponent*              FieldSystem;                                       // 0x3C8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGeometryCollectionComponent*          GeometryCollection;                                // 0x3D0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                     SimplifiedCollision;                               // 0x3D8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9500[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseRadiusSize;                                    // 0x3F8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DefaultRadiusMultiplier;                           // 0x3FC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9501[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXGeometryCollection* GetDefaultObj();

	void ShowDamage(struct FVector& DamageLocation, float DamageAmount, class AActor* DamageSource);
	void SetMaterialOverrides(TArray<class UMaterialInterface*>& NewOverrides);
	void OnRep_CollisionBox();
	void OnGeomBreak(struct FChaosBreakEvent& Event);
	void InternalCleanupAndDestroyCollection();
	void ApplyDamage(struct FVector& Location, float ToolDamage, float ImpulseForce, class AActor* DamageSource);
};

// 0x10 (0x40 - 0x30)
// Class NWX.NWXGeometryCollectionTrackerSubsystem
class UNWXGeometryCollectionTrackerSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_9502[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGeometryCollectionTrackerSubsystem* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.NWXMenuDataEntryRelationsTracker
class UNWXMenuDataEntryRelationsTracker : public UObjectWithWorld
{
public:
	class UNWXMenuDataEntrySorter*               EntrySorter;                                       // 0x28(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UNWXMenuDataEntry*>             TotalRelatedEntriesCached;                         // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryRelationsTracker* GetDefaultObj();

	void OnMenuDataInitializationComplete();
	TArray<class UNWXMenuDataEntry*> GetRelatedEntries();
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXGlossaryToAssociatedRealmsRelationsTracker
class UNWXGlossaryToAssociatedRealmsRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXGlossaryToAssociatedRealmsRelationsTracker* GetDefaultObj();

};

// 0x0 (0x348 - 0x348)
// Class NWX.NWXGoalTrackerPanel
class UNWXGoalTrackerPanel : public UNWXCommonUserWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXGoalTrackerPanel* GetDefaultObj();

};

// 0x50 (0x390 - 0x340)
// Class NWX.NWXGridEntryItemWidget
class UNWXGridEntryItemWidget : public UNWXUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnGridItemFocusReceived;                           // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGridItemFocusLost;                               // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGridItemLeftButton;                              // 0x360(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGridItemTopButton;                               // 0x370(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGridItemConfirmButton;                           // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXGridEntryItemWidget* GetDefaultObj();

};

// 0x18 (0x358 - 0x340)
// Class NWX.NWXGuideBookCategoryTabWidget
class UNWXGuideBookCategoryTabWidget : public UNWXUserWidget
{
public:
	bool                                         IsSelected;                                        // 0x340(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9507[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTag                          TabCategory;                                       // 0x344(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9508[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x350(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXGuideBookCategoryTabWidget* GetDefaultObj();

	void OnSelected();
	void OnObservationStateUpdated(int32 NumObservableEntries);
	void OnEntryObservationStateUpdated(struct FGameplayTag& Category, int32 NumObservableEntries);
	void OnDeselected();
	void OnCategoryChanged(struct FGameplayTag& Category);
};

// 0x18 (0x360 - 0x348)
// Class NWX.NWXGuidebookDetailPane
class UNWXGuidebookDetailPane : public UNWXCommonUserWidget
{
public:
	class UNWXMenuDataEntry*                     CurrentEntry;                                      // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          DetailPaneCategory;                                // 0x350(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x358(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXGuidebookDetailPane* GetDefaultObj();

	void UpdateDetails(class UNWXMenuDataEntry* MenuDataEntry);
	void UpdateCosmetics();
	void ResetCosmetics();
	void OnExecuteCategoryOperation();
	void OnCategoryChanged(struct FGameplayTag& Category);
};

// 0x28 (0x370 - 0x348)
// Class NWX.NWXGuideBookGridList
class UNWXGuideBookGridList : public UNWXCommonUserWidget
{
public:
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_950F[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGuideBookGridList* GetDefaultObj();

	void RefreshMenu(struct FGameplayTag& Category);
	void OnFilteringComplete(struct FGameplayTag& CategoryTag, int32 NumFilteredEntries);
	void GenerateListPanels(struct FUIGroupInfo& GroupInfo, TArray<class UNWXMenuDataEntry*>& Entries);
	void GenerateAndPopulateListPanels();
};

// 0x0 (0x340 - 0x340)
// Class NWX.NWXGuideBookGridListFilters
class UNWXGuideBookGridListFilters : public UNWXUserWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXGuideBookGridListFilters* GetDefaultObj();

	void UpdateEntryFilters(TSubclassOf<class UNWXMenuDataEntryFilter> Filter, struct FGameplayTag& CategoryTag, bool IsAdding);
};

// 0x60 (0x518 - 0x4B8)
// Class NWX.NWXGuideBookScreen
class UNWXGuideBookScreen : public UNWXCommonWindowWidget
{
public:
	struct FGameplayTag                          OpenOnCategory;                                    // 0x4B8(0x8)(BlueprintVisible, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x4C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9512[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXGuideBookScreen* GetDefaultObj();

	void OnEntrySelected(class UNWXMenuDataEntry* Entry);
	void OnCategoryChanged(struct FGameplayTag& NewCategory);
	void NavigatePrevious();
	void NavigateNext();
	void InitializeGuideBookScreen();
};

// 0x3F0 (0x820 - 0x430)
// Class NWX.NWXHarvestableGeometryCollection
class ANWXHarvestableGeometryCollection : public ANWXGeometryCollection
{
public:
	uint8                                        Pad_951B[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ImpulseSource;                                     // 0x490(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_951C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       TemplateItem;                                      // 0x4B0(0x2F0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_951D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInstancedResourceNodeComponent*       SpawningIIMComponent;                              // 0x7A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SpawningInstanceId;                                // 0x7B0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_951E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UItemReward*                           ResourceData;                                      // 0x7B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           PowerLevelRatioCurve;                              // 0x7C0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           ToolStrengthCurve;                                 // 0x7C8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_951F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultImpulseMultiplier;                          // 0x7E8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9520[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EResourceType                     ResourceType;                                      // 0x7F8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsDepleted;                                       // 0x7F9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9522[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            NotifyNearbyPhysics;                               // 0x800(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9523[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXHarvestableGeometryCollection* GetDefaultObj();

	bool SpawnResource(class AActor* DamageSource, struct FTransform& SpawnTransform, struct FVector& Impulse, int32 Count);
	void HideIIMInstanceMesh(int32 InstanceID, class UInstancedResourceNodeComponent* IIMComponent);
	TSoftObjectPtr<class UTexture2D> GetResourceVulnerabilityIcon();
	bool GetPowerLevel_Implementation(struct FPowerLevel* OutPowerLevel);
	TArray<struct FInventoryEntry> GenerateEssencesForResource(int32 Count);
};

// 0x8 (0x900 - 0x8F8)
// Class NWX.NWXHierarchicalISMComponent
class UNWXHierarchicalISMComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:
	uint8                                        Pad_9525[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXHierarchicalISMComponent* GetDefaultObj();

	bool RebuildTreeIfUpdated();
};

// 0xC8 (0x458 - 0x390)
// Class NWX.NWXHUDBase
class ANWXHUDBase : public AHUD
{
public:
	uint8                                        Pad_9543[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXMenuDataComponent>     MenuDataComponentClass;                            // 0x398(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGuideBookComponent>       GuideBookComponentClass;                           // 0x3A0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCraftingCreationComponent> CraftingCreationComponentClass;                    // 0x3A8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXPlayerState*                       PlayerState;                                       // 0x3B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHUDIsHidden;                                      // 0x3B8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9545[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGameplayTag, TSubclassOf<class UNWXWindowWidget>> WidgetClassPerTag;                                 // 0x3C0(0x50)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UBasicAwaiter*                         HUDAwaiter;                                        // 0x410(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXMenuDataComponent*                 MenuDataComponent;                                 // 0x418(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGuideBookComponent*                   GuideBookComponent;                                // 0x420(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCraftingCreationComponent*            CraftingCreationComponent;                         // 0x428(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9547[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FDelegateProperty_                           OnMenuEntryCalled;                                 // 0x444(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9548[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXHUDBase* GetDefaultObj();

	void UpdateTemporalRealmTimer(float TimeRemaining);
	void UpdateDeathScreens();
	void SetHudInteractionOverlayOn(bool bNewState);
	void SetBuildRadialMenuMappingModeAndRemove();
	void RevealWindowUnderneath(class UNWXWindowWidget* Window, enum class ESlateVisibility Visibility);
	void RefreshHUD();
	void PushWindow(class UNWXWindowWidget* Window, int32 ZOrder);
	class UNWXWindowWidget* PopWindow(class UNWXWindowWidget* OptionalWindowToRemove);
	void OpenWindow(class UNWXWindowWidget* Window, int32 ZOrder);
	void OnWindowOpened(class UNWXWindowWidget* Window);
	void OnWindowClosed(class UNWXWindowWidget* Window);
	void OnPlayerPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnClientReady(bool Success);
	bool IsWindowOfTypeInStack(class UClass* TestClass);
	bool IsWindowInStack(class UNWXWindowWidget* Window);
	bool IsOpeningWindow();
	bool IsHudInteractionOverlayOn();
	bool IsCurrentlyOpenWindowOfClass(class UClass* TestClass, bool bIncludeIsChildOfTestClass);
	bool IsChatComponentFocused();
	class ANWXHUDBase* GetNWXHUD(class ANWXPlayerController* PlayerController);
	class ANWXHUDBase* GetLocalNWXHUD(class UObject* WorldContext);
	bool GetIsSpectator();
	class UBasicAwaiter* GetHUDAwaiter();
	class UNWXWindowWidget* GetCurrentlyOpenWindow();
	void GenerateRadialMenuEntriesFromInteractions(TArray<struct FNWXInteractionOption>& Interactions, FDelegateProperty_& InteractionConfirmedEvent, TArray<TScriptInterface<class IRadialMenuInterface>>* OutRadialMenuEntries);
	void DisplayHUD_Internal(bool bShowingHUD);
	void CloseWindow_Internal(class UNWXWindowWidget* Window);
	void CloseCurrentlyOpenWindow();
	void CloseAllWindows();
	void CallServerUpdatePlayerStateCharacterState(bool bAddState, bool bDialogue);
	void CallRadialInteractionConfirmed(const struct FGuid& InteractionAssetUID);
};

// 0xA8 (0xD0 - 0x28)
// Class NWX.ItemInstanceData_CharacteristicInfo
class UItemInstanceData_CharacteristicInfo : public UItemInstanceData
{
public:
	uint8                                        Pad_954A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacteristicDataReference          PrimaryCharacteristic;                             // 0x30(0x90)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCharacteristicDataReference>  AdditionalCharacteristics;                         // 0xC0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemInstanceData_CharacteristicInfo* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.ItemInstanceData_Traits
class UItemInstanceData_Traits : public UItemInstanceData
{
public:
	struct FGameplayTagContainer                 Traits;                                            // 0x28(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemInstanceData_Traits* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemInstanceData_SpellTechniques
class UItemInstanceData_SpellTechniques : public UItemInstanceData
{
public:
	TArray<TSoftObjectPtr<class UTechniqueDataAsset>> ItemSpellTechniques;                               // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemInstanceData_SpellTechniques* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ItemInstanceData_Perks
class UItemInstanceData_Perks : public UItemInstanceData
{
public:
	TArray<TSoftObjectPtr<class UItemPerkDataAsset>> ItemPerkDataAssets;                                // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemInstanceData_Perks* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ItemInstanceData_Quality
class UItemInstanceData_Quality : public UItemInstanceData
{
public:
	enum class EItemQuality                      Quality;                                           // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_954C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemInstanceData_Quality* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.ItemInstanceData_AttributeModifiers
class UItemInstanceData_AttributeModifiers : public UItemInstanceData
{
public:
	TArray<struct FInstancedItemAttributeModifier> Modifiers;                                         // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInstancedItemAttributeModifier> AdditionalModifiers;                               // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UItemInstanceData_AttributeModifiers* GetDefaultObj();

};

// 0xC0 (0xF0 - 0x30)
// Class NWX.NWXItemPresentationDataAsset
class UNWXItemPresentationDataAsset : public UItemPresentationDataAsset
{
public:
	class FText                                  TokenizedName;                                     // 0x30(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bUseTokenizedNameWhenOverriden;                    // 0x48(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_954E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemPresentationData                 DefaultData;                                       // 0x50(0x88)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bUsePerkOrSpellPresentationData;                   // 0xD8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9550[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemTagPresentationData>      OverrideData;                                      // 0xE0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXItemPresentationDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXItemProxyCheats
class UNWXItemProxyCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UNWXItemProxyCheats* GetDefaultObj();

	void SetItemProxyLifespan(int32 LifeSpan);
	void ForceDeleteAllProxies();
	void EnableProxySpawning();
	void DisableProxySpawning();
};

// 0x80 (0xC0 - 0x40)
// Class NWX.NWXItemProxySpawnerSubsystem
class UNWXItemProxySpawnerSubsystem : public UNWXTickableWorldSubsystem
{
public:
	TSoftClassPtr<class AItemProxyBase>          ProxyClass;                                        // 0x40(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        MaximumProxies;                                    // 0x68(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        ProxyLifetime;                                     // 0x6C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        SpawnsPerTick;                                     // 0x70(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9552[0x4C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXItemProxySpawnerSubsystem* GetDefaultObj();

	void SpawnItemProxy(struct FInventoryEntry& Entry, struct FTransform& Location, struct FVector& Impulse, class UObject* SourceObject, FDelegateProperty_ OnSpawnComplete);
};

// 0x318 (0x7D0 - 0x4B8)
// Class NWX.NWXItemSplitterPopup
class UNWXItemSplitterPopup : public UNWXCommonWindowWidget
{
public:
	FMulticastInlineDelegateProperty_            OnSplit;                                           // 0x4B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        AmountToSplit;                                     // 0x4C8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9555[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       InventoryEntry;                                    // 0x4D0(0x2F0)(BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	int32                                        TotalAmount;                                       // 0x7C0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESplittingUnits                   SplittingUnit;                                     // 0x7C4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9557[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXItemSplitterPopup* GetDefaultObj();

	void UpdateAmountToSplitFromSlider(float SliderValue);
	void SplitEntry();
	float GetTotalUnits();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXItemTagGlobals
class UNWXItemTagGlobals : public UObject
{
public:

	static class UClass* StaticClass();
	static class UNWXItemTagGlobals* GetDefaultObj();

};

// 0x340 (0x370 - 0x30)
// Class NWX.NWXJoinFriendSubsystem
class UNWXJoinFriendSubsystem : public UNWXGameInstanceSubsystem
{
public:
	uint8                                        Pad_955A[0x340];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXJoinFriendSubsystem* GetDefaultObj();

	bool HasPendingJoinRequest();
	bool GetServerData(struct FTargetServerData* OutServerData);
	void ClearTargetPresence();
};

// 0x38 (0x378 - 0x340)
// Class NWX.NWXOptionsSettingWidget
class UNWXOptionsSettingWidget : public UNWXUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnSettingValueUpdated;                             // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FString                                TelemetryName;                                     // 0x350(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_955D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         RequestUIUpdateOnValueChange;                      // 0x370(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_955E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXOptionsSettingWidget* GetDefaultObj();

	void OnResetValue();
	void Internal_OnResetValue();
	void Internal_OnApplyValue();
	bool GetValueChanged();
	void ApplyValue();
	void AddTelemetryData();
};

// 0xB8 (0x430 - 0x378)
// Class NWX.NWXKeyMappingWidget
class UNWXKeyMappingWidget : public UNWXOptionsSettingWidget
{
public:
	struct FPlayerKeyMapping                     Mapping;                                           // 0x378(0x90)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_955F[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXKeyMappingWidget* GetDefaultObj();

	void SetValue(struct FKey& NewKey);
};

// 0x58 (0x510 - 0x4B8)
// Class NWX.NWXOptionTabWindowWidget
class UNWXOptionTabWindowWidget : public UNWXCommonWindowWidget
{
public:
	FMulticastInlineDelegateProperty_            OnOptionsConfirmed;                                // 0x4B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOptionsReverted;                                 // 0x4C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOptionsDefaulted;                                // 0x4D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOptionsUpdated;                                  // 0x4E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UNWXOptionsSettingWidget*>      DirtiedSettings;                                   // 0x4F8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9563[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXOptionTabWindowWidget* GetDefaultObj();

	void UpdateDirtiedSettings(class UNWXOptionsSettingWidget* SettingsWidget);
	void SetToDefault();
	void RevertChanges();
	void InternalRevertChanges();
	void InternalDefaultChanges();
	void InternalConfirmChanges();
	bool HasDirtiedSettings();
	TArray<class UNWXOptionsSettingWidget*> GetDirtiedSettings();
	void ConfirmChanges();
};

// 0x0 (0x510 - 0x510)
// Class NWX.NWXKeyMappingWindowWidget
class UNWXKeyMappingWindowWidget : public UNWXOptionTabWindowWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXKeyMappingWindowWidget* GetDefaultObj();

};

// 0x18 (0x358 - 0x340)
// Class NWX.NWXLevelInstance
class ANWXLevelInstance : public ALevelInstance
{
public:
	class FString                                LevelSuffix;                                       // 0x340(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  WorldAssetToLoad;                                  // 0x350(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXLevelInstance* GetDefaultObj();

	void OnRep_WorldAssetToLoad();
};

// 0x8 (0x2A8 - 0x2A0)
// Class NWX.NWXLoadingLevelActor
class ANWXLoadingLevelActor : public AActor
{
public:
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2A0(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ANWXLoadingLevelActor* GetDefaultObj();

};

// 0x28 (0x4E0 - 0x4B8)
// Class NWX.NWXLoadingScreenMoviePlayerWidget
class UNWXLoadingScreenMoviePlayerWidget : public UNWXCommonWindowWidget
{
public:
	class UBinkMediaPlayer*                      MyBinkMediaPlayer;                                 // 0x4B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                MyMediaSourceURL;                                  // 0x4C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnMovieDone;                                       // 0x4D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXLoadingScreenMoviePlayerWidget* GetDefaultObj();

	void SetMediaSourceURL(const class FString& URL);
};

// 0x18 (0x2C8 - 0x2B0)
// Class NWX.NWXLocalPlayer
class UNWXLocalPlayer : public ULocalPlayer
{
public:
	uint8                                        Pad_9566[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXLocalPlayer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXMenuDataCategoryGlobals
class UNWXMenuDataCategoryGlobals : public UObject
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataCategoryGlobals* GetDefaultObj();

	struct FGameplayTag GuideBookTutorialCategoryTag();
	struct FGameplayTag GuideBookShopCategoryTag();
	struct FGameplayTag GuideBookQuestCategoryTag();
	struct FGameplayTag GuideBookGlossaryCategoryTag();
	struct FGameplayTag GuideBookCraftingRecipesCategoryTag();
	struct FGameplayTag GuideBookCodexCategoryTag();
	struct FGameplayTag GuideBookChallengeCategoryTag();
	struct FGameplayTag GuideBookBuildingCategoryTag();
	struct FGameplayTag CraftingUpgradeCategoryTag();
	struct FGameplayTag CraftingEnchantmentCategoryTag();
	struct FGameplayTag CraftingCreationCategoryTag();
};

// 0x140 (0x168 - 0x28)
// Class NWX.NWXMenuDataCategoryManager
class UNWXMenuDataCategoryManager : public UObjectWithWorld
{
public:
	uint8                                        Pad_956A[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAutoRefreshesEnabled;                            // 0x68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_956B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNWXMenuDataEntrySorter>   SorterClass;                                       // 0x80(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UNWXMenuDataEntryPESTracker>> StatesToTrack;                                     // 0x88(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UNWXMenuDataEntryRelationsTracker>> RelationshipsToTrack;                              // 0x98(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FMenuDataRelevantFilter>       RelevantFilters;                                   // 0xA8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	class UNWXMenuDataEntrySorter*               EntrySorter;                                       // 0xB8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UNWXMenuDataEntrySearcher> EntrySearcherClass;                                // 0xC0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UNWXMenuDataEntryFilter*>       Filters;                                           // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UNWXMenuDataEntry*>             TotalEntries_Cached;                               // 0xD8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UNWXMenuDataEntry*>             FilteredEntries_Cached;                            // 0xE8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_956C[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGuid, class UNWXMenuDataEntry*> EntryIDMapping;                                    // 0x118(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXMenuDataCategoryManager* GetDefaultObj();

	void RemoveEntry(class UNWXMenuDataEntry* EntryToRemove);
	void RefreshFilteredEntries();
	void QuickAddEntry(class UNWXMenuDataEntry* EntryToAdd);
	void PostInitialize();
	void OnEntryObservationStateUpdated(bool HasObservableEntry);
	void HandleRequestToRefreshList();
	class ANWXPlayerController* GetOwningPlayerController();
	class UNWXMenuDataEntry* GetEntryFromID(struct FGuid& ID);
	class UNWXMenuDataEntry* CreateEntry(TSubclassOf<class UNWXMenuDataEntry> DataCacheEntryClass);
	void ClearCache();
	void AddFilter(TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	void AddEntry(class UNWXMenuDataEntry* EntryToAdd);
};

// 0x1A0 (0x240 - 0xA0)
// Class NWX.NWXMenuDataComponent
class UNWXMenuDataComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnMenuDataFilteredEntriesEmptied;                  // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMenuDataFilteredEntriesUpdated;                  // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMenuDataFilteredEntriesCompleted;                // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMenuDataCategoryEntryObservationStateUpdated;    // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9577[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGameplayTag, TSubclassOf<class UNWXMenuDataCategoryManager>> CategoryManagerClassMapping;                       // 0xF0(0x50)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UNWXMenuDataCategoryManager*> MenuDataManagers;                                  // 0x140(0x50)(NativeAccessSpecifierPrivate)
	TMap<enum class EItemQuality, class UCraftingRecipeAsset*> ItemQualityUpgradeRecipes;                         // 0x190(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCraftingRecipeAsset*                  InfuseRecipeAsset;                                 // 0x1E0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<enum class EItemQuality, class UNWXMenuDataEntryCrafting*> ItemQualityUpgradeRecipeEntries;                   // 0x1E8(0x50)(NativeAccessSpecifierPrivate)
	class UNWXMenuDataEntryCrafting*             InfuseRecipeEntry;                                 // 0x238(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXMenuDataComponent* GetDefaultObj();

	void SetSearchStringForCategory(const class FString& NewSearchString, struct FGameplayTag& CategoryTag);
	void SetFilterRefreshesPermissionsForCategory(struct FGameplayTag& CategoryTag, bool bAllowFilterAutoRefreshes);
	void RemoveNecessaryFiltersToDisplayEntryInCategory(struct FGameplayTag& CategoryTag, class UNWXMenuDataEntry* Entry);
	void RemoveFilterFromCategory(struct FGameplayTag& CategoryTag, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	void RemoveAllRemovableFiltersFromCategory(struct FGameplayTag& CategoryTag);
	void OnMenuDataCategoryObservableStateUpdated(struct FGameplayTag& Category, int32 NumObservableEntries);
	void OnMenuDataCategoryFilteredEntriesUpdated(struct FGameplayTag& Category, class UNWXMenuDataEntry* NewFilteredEntry);
	void OnMenuDataCategoryFilteredEntriesEmptied(struct FGameplayTag& Category);
	void OnMenuDataCategoryFilteredEntriesCompleted(struct FGameplayTag& Category, int32 TotalResults);
	bool IsSearchStringEmptyForCategory(struct FGameplayTag& CategoryTag);
	bool IsFilterActiveForCategory(struct FGameplayTag& Category, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
	TArray<struct FMenuDataRelevantFilter> GetRelevantFiltersFromCategory(struct FGameplayTag& CategoryTag);
	int32 GetNumObservableEntriesForCategory(struct FGameplayTag& CategoryTag);
	int32 GetFilteredEntryCountByCategory(struct FGameplayTag& CategoryTag);
	void GetFilteredEntriesByCategory(struct FGameplayTag& CategoryTag, TArray<class UNWXMenuDataEntry*>* OutEntries);
	void GetAllEntriesByCategory(struct FGameplayTag& CategoryTag, TArray<class UNWXMenuDataEntry*>* OutEntries);
	class UNWXMenuDataEntry* FindEntryWithIDFromCategory(struct FGameplayTag& CategoryTag, struct FGuid& AssetID);
	void AddFilterToCategory(struct FGameplayTag& CategoryTag, TSubclassOf<class UNWXMenuDataEntryFilter>& FilterClass);
};

// 0x50 (0x78 - 0x28)
// Class NWX.NWXMenuDataEntry
class UNWXMenuDataEntry : public UObjectWithWorld
{
public:
	uint8                                        Pad_957F[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EEntryProgressionStates           DefaultState;                                      // 0x34(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9580[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UNWXMenuDataEntryPESTracker*>   PersistedStateTrackers;                            // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UNWXMenuDataEntryRelationsTracker*> RelationsTrackers;                                 // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9581[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntry* GetDefaultObj();

	void TogglePinnedState();
	void PostInitialize();
	bool IsUnlocked();
	bool IsPinned();
	class UWidget* GetTooltipWidget();
	class UNWXMenuDataEntryPESTracker* GetStateTracker(TSubclassOf<class UNWXMenuDataEntryPESTracker> Filter);
	enum class EEntryProgressionStates GetState();
	struct FGameplayTagContainer GetSortingGroups();
	class UNWXMenuDataEntryRelationsTracker* GetRelationsTracker(TSubclassOf<class UNWXMenuDataEntryRelationsTracker> Filter);
	class ANWXPlayerState* GetOwningPlayerState();
	class ANWXPlayerController* GetOwningPlayerController();
	class UNWXMenuDataComponent* GetOwningMenuDataComponent();
	void GetImage(bool* IsValidReference, TSoftObjectPtr<class UTexture2D>* EntryImage);
	struct FGuid GetID();
	struct FUIGroupInfo GetGroupInfo();
	class FText GetDisplayName();
	class FText GetDescription();
	bool CanViewDetails();
};

// 0x108 (0x180 - 0x78)
// Class NWX.NWXMenuDataEntryBuilding
class UNWXMenuDataEntryBuilding : public UNWXMenuDataEntry
{
public:
	uint8                                        Pad_9582[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAssetReference              AssetReference;                                    // 0x80(0x80)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStructureTraitCollectionAsset*> TraitTypes;                                        // 0x100(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStructureTraitAsset*>          EmittedTraits;                                     // 0x110(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStructureTraitCollectionAsset*> ReceivingTraitCollections;                         // 0x120(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FStructureTraitCollectionRecipeAssetGrouping> GrantingTraitCollectionRecipeGrouping;             // 0x130(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9583[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryBuilding* GetDefaultObj();

	int32 TryGetMaxCapacity();
	void SetStructureAssetReference(struct FStructureAssetReference& AssetRef);
	TArray<class UStructureTraitCollectionAsset*> GetTraitTypes();
	struct FStructureData GetStructureData();
	struct FStructureAssetReference GetStructureAssetReference();
	TArray<class UStructureTraitCollectionAsset*> GetReceivingTraitCollections();
	TArray<struct FStructureTraitCollectionRecipeAssetGrouping> GetGrantingTraitCollectionRecipeGrouping();
	TArray<class UStructureTraitAsset*> GetEmittedTraits();
};

// 0x8 (0x80 - 0x78)
// Class NWX.NWXMenuDataEntryChallenge
class UNWXMenuDataEntryChallenge : public UNWXMenuDataEntry
{
public:
	class UChallengeDataAsset*                   ChallengeDataAsset;                                // 0x78(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryChallenge* GetDefaultObj();

	void SetChallengeDataAsset(class UChallengeDataAsset* Asset);
	class UChallengeDataAsset* GetChallengeDataAsset();
};

// 0x98 (0x110 - 0x78)
// Class NWX.NWXMenuDataEntryCrafting
class UNWXMenuDataEntryCrafting : public UNWXMenuDataEntry
{
public:
	uint8                                        Pad_9585[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStructureTraitCollectionAsset*> ReceivingTraitCollections;                         // 0xF0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStructureTraitCollectionAsset*> EmittingTraitCollections;                          // 0x100(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryCrafting* GetDefaultObj();

	void SetCraftingRecipeAssetReference(struct FCraftingRecipeReference& AssetRef);
	bool IsQuickCraftable();
	bool IsCraftable();
	TArray<class UStructureTraitCollectionAsset*> GetReceivingTraitCollections();
	TArray<class UStructureTraitCollectionAsset*> GetEmittingTraitCollections();
	struct FCraftingRecipe GetCraftingRecipeData();
	struct FCraftingRecipeReference GetCraftingRecipeAssetReference();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXMenuDataEntryPESTracker
class UNWXMenuDataEntryPESTracker : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryPESTracker* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.NWXMenuDataEntryCreatedStateTracker
class UNWXMenuDataEntryCreatedStateTracker : public UNWXMenuDataEntryPESTracker
{
public:
	FMulticastInlineDelegateProperty_            OnEntryCreationStateUpdated;                       // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9589[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryCreatedStateTracker* GetDefaultObj();

	void OnCreationStateChanged(struct FExperienceStateID& StateId, int32 OldValue, int32 NewValue);
	bool IsCreated();
};

// 0x18 (0x40 - 0x28)
// Class NWX.NWXMenuDataEntryFilter
class UNWXMenuDataEntryFilter : public UObjectWithWorld
{
public:
	uint8                                        Pad_958D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanBeRemoved;                                     // 0x38(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_958E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryFilter* GetDefaultObj();

	bool ShouldFilterIn(class UNWXMenuDataEntry* Entry);
	void RequestListRefresh();
	void InitializeListenersForListRefresh();
	class ANWXPlayerController* GetOwningPlayerController();
	class UNWXMenuDataComponent* GetOwningMenuDataComponent();
	class UCraftingCreationComponent* GetCraftingCreationComponent();
};

// 0xF0 (0x168 - 0x78)
// Class NWX.NWXMenuDataEntryGlossary
class UNWXMenuDataEntryGlossary : public UNWXMenuDataEntry
{
public:
	struct FResourceGlossaryData                 ResourceGlossaryData;                              // 0x78(0xD8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_9591[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryGlossary* GetDefaultObj();

	bool SpawnsInAllLevels();
	void SetRawResourceData(struct FResourceGlossaryData& NewRawResourceData);
	bool HasFiniteMaxLevel();
	struct FResourceGlossaryData GetRawResourceData();
	struct FResourceLevelRange GetLevelRange();
};

// 0x2F8 (0x370 - 0x78)
// Class NWX.NWXMenuDataEntryItem
class UNWXMenuDataEntryItem : public UNWXMenuDataEntry
{
public:
	uint8                                        Pad_9595[0x2F8];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryItem* GetDefaultObj();

	void SetInventoryEntry(struct FInventoryEntry& NewInventoryEntry);
	enum class EItemQuality GetItemQuality();
	struct FItemData GetItemData();
	struct FInventoryEntry GetInventoryEntry();
};

// 0x28 (0x50 - 0x28)
// Class NWX.NWXMenuDataEntryObservedStateTracker
class UNWXMenuDataEntryObservedStateTracker : public UNWXMenuDataEntryPESTracker
{
public:
	FMulticastInlineDelegateProperty_            OnEntryObservationStateUpdated;                    // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9599[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryObservedStateTracker* GetDefaultObj();

	void SetState(enum class EEntryObservedStates NewState);
	void OnObservationStateChanged(struct FExperienceStateID& StateId, int32 OldValue, int32 NewValue);
	bool IsObservable();
};

// 0x108 (0x180 - 0x78)
// Class NWX.NWXMenuDataEntryQuest
class UNWXMenuDataEntryQuest : public UNWXMenuDataEntry
{
public:
	uint8                                        Pad_959B[0x108];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryQuest* GetDefaultObj();

	void SetTaskProgress(struct FOngoingTaskProgress& NewTaskProgress);
	struct FOngoingTaskProgress GetTaskProgress();
	struct FQuestPresentationData GetPresentationData();
};

// 0x10 (0x50 - 0x40)
// Class NWX.NWXMenuDataEntrySearcher
class UNWXMenuDataEntrySearcher : public UNWXMenuDataEntryFilter
{
public:
	uint8                                        Pad_959C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntrySearcher* GetDefaultObj();

};

// 0x68 (0xE0 - 0x78)
// Class NWX.NWXMenuDataEntryShop
class UNWXMenuDataEntryShop : public UNWXMenuDataEntry
{
public:
	uint8                                        Pad_959D[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataEntryShop* GetDefaultObj();

	void SetShopDescriptorRegistryEntry(struct FShopDescriptorRegistryEntry& ShopData);
	struct FShopDescriptorRegistryEntry GetShopDescriptorRegistryEntry();
	class UShopDescriptorDataAsset* GetLoadedShopDescriptor();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXMenuDataEntrySorter
class UNWXMenuDataEntrySorter : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataEntrySorter* GetDefaultObj();

};

// 0x10 (0x50 - 0x40)
// Class NWX.NWXMenuDataFilterCraftableEntries
class UNWXMenuDataFilterCraftableEntries : public UNWXMenuDataEntryFilter
{
public:
	uint8                                        Pad_95A0[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterCraftableEntries* GetDefaultObj();

	void OnRecipeSkillsUnlocked(TArray<struct FCraftingRecipeReference>& NewlyUnlockedRecipes);
	void OnItemsAddedOrRemoved(TScriptInterface<class IItemContainer>& Container, struct FInventoryEntry& Entry, int32 Count);
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXMenuDataFilterDecorations
class UNWXMenuDataFilterDecorations : public UNWXMenuDataEntryFilter
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterDecorations* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXMenuDataFilterLockedEntries
class UNWXMenuDataFilterLockedEntries : public UNWXMenuDataEntryFilter
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterLockedEntries* GetDefaultObj();

	void OnSkillUnlocked(struct FSkillDataReference& UnlockedSkill);
};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXMenuDataFilterLockedEntriesPermanent
class UNWXMenuDataFilterLockedEntriesPermanent : public UNWXMenuDataFilterLockedEntries
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterLockedEntriesPermanent* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXMenuDataFilterOpenInfusionSlots
class UNWXMenuDataFilterOpenInfusionSlots : public UNWXMenuDataEntryFilter
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterOpenInfusionSlots* GetDefaultObj();

	void OnSkillUnlocked(struct FSkillDataReference& UnlockedSkill);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXMenuDataFilterPESTracker
class UNWXMenuDataFilterPESTracker : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterPESTracker* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXMenuDataFilterUpgradeableItems
class UNWXMenuDataFilterUpgradeableItems : public UNWXMenuDataEntryFilter
{
public:

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterUpgradeableItems* GetDefaultObj();

	void OnSkillUnlocked(struct FSkillDataReference& UnlockedSkill);
};

// 0x48 (0x388 - 0x340)
// Class NWX.NWXMenuDataFilterWidget
class UNWXMenuDataFilterWidget : public UNWXUserWidget
{
public:
	struct FMenuDataRelevantFilter               FilterInfo;                                        // 0x340(0x40)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	bool                                         IsCheckboxActive;                                  // 0x380(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_95A3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMenuDataFilterWidget* GetDefaultObj();

	void SetFilterStateForCategory(bool IsChecked, struct FGameplayTag& CategoryTag);
};

// 0x18 (0x360 - 0x348)
// Class NWX.NWXMicrophoneStatusWidget
class UNWXMicrophoneStatusWidget : public UNWXCommonUserWidget
{
public:
	class FString                                PersistentUniqueID;                                // 0x348(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAlwaysShowIcon;                                   // 0x358(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOpacityChangeWhileSpeaking;                       // 0x359(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95A8[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXMicrophoneStatusWidget* GetDefaultObj();

	void SetUniqueID(const class FString& InUniqueID);
	void OnRemoteSpeakerStatusChanged(const class FString& InPlayerName, bool IsSpeaking, bool IsLocalPlayer, const class FString& UniqueID);
	void OnMuteStatusChanged(const class FString& InPersistentUniqueID, enum class EMuteAction MuteAction);
	bool GetIsPlayerMuted(const class FString& InUniqueID);
	void BP_HandleSpeakerStatusChanged(const class FString& InPlayerName, bool IsSpeaking, bool IsLocalPlayer, const class FString& UniqueID);
	void BP_HandleMuteStatusChanged(enum class EMuteAction MuteAction);
};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_NearWall
class UNavArea_NearWall : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_NearWall* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_MinorEntranceCost
class UNavArea_MinorEntranceCost : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_MinorEntranceCost* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Flying
class UNavArea_Flying : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Flying* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Traversal
class UNavArea_Traversal : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Traversal* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Road
class UNavArea_Road : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Road* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Water
class UNavArea_Water : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Water* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_WaterShallow
class UNavArea_WaterShallow : public UNavArea_Water
{
public:

	static class UClass* StaticClass();
	static class UNavArea_WaterShallow* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_WaterDeep
class UNavArea_WaterDeep : public UNavArea_Water
{
public:

	static class UClass* StaticClass();
	static class UNavArea_WaterDeep* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Steep
class UNavArea_Steep : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Steep* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_Cave
class UNavArea_Cave : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Cave* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_ConstructionSite
class UNavArea_ConstructionSite : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_ConstructionSite* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.NavArea_NullSmallNavIsland
class UNavArea_NullSmallNavIsland : public UNavArea_Null
{
public:

	static class UClass* StaticClass();
	static class UNavArea_NullSmallNavIsland* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class NWX.NWXNavFilter_LongRange
class UNWXNavFilter_LongRange : public UNavigationQueryFilter
{
public:
	int32                                        MaxAbstractNodeExpansions;                         // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDistanceSqForAbstractNavigation;                // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJustUseRecastNavigation;                          // 0x50(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95AC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXNavFilter_LongRange* GetDefaultObj();

};

// 0x18 (0x15A8 - 0x1590)
// Class NWX.NWXNavigationSystemV1
class UNWXNavigationSystemV1 : public UNavigationSystemV1
{
public:
	bool                                         bFullyGenerateAllNavOnceLockIsReleased;            // 0x1590(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95AE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnNavLockRemoved;                                  // 0x1598(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXNavigationSystemV1* GetDefaultObj();

	class UNWXNavigationSystemV1* GetNWXNavigationSystem(class UObject* WorldContextObject);
	void BuildAIPath();
};

// 0x0 (0x60 - 0x60)
// Class NWX.NWXNavigationSystemModuleConfig
class UNWXNavigationSystemModuleConfig : public UNavigationSystemModuleConfig
{
public:

	static class UClass* StaticClass();
	static class UNWXNavigationSystemModuleConfig* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXNavLinkFollowerInterface
class INWXNavLinkFollowerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INWXNavLinkFollowerInterface* GetDefaultObj();

	void OnNavLinkStart(struct FVector& Left, struct FVector& Right, struct FVector& Destination, enum class ENavLinkDirection Direction, enum class ENavLinkType NavType);
};

// 0x0 (0x2B0 - 0x2B0)
// Class NWX.NWXNavStaticMeshActor
class ANWXNavStaticMeshActor : public AStaticMeshActor
{
public:

	static class UClass* StaticClass();
	static class ANWXNavStaticMeshActor* GetDefaultObj();

};

// 0x10 (0x650 - 0x640)
// Class NWX.NWXNavStaticMeshComponent
class UNWXNavStaticMeshComponent : public UStaticMeshComponent
{
public:
	bool                                         AlwaysNavRelevant;                                 // 0x640(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95B2[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXNavStaticMeshComponent* GetDefaultObj();

};

// 0x178 (0x218 - 0xA0)
// Class NWX.NWXNPCSatisfactionComponent
class UNWXNPCSatisfactionComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnDesireFulfilled;                                 // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   SatisfactionDataRow;                               // 0xB0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDataTableRowHandle>           StartingDesires;                                   // 0xC0(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bShouldAddRandomDesires;                           // 0xD0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_95B7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTag                          RestingTag;                                        // 0xD4(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          RestedTag;                                         // 0xDC(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          OnPlayerOpenedManagementScreenTag;                 // 0xE4(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_95B8[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SatisfactionScore;                                 // 0x140(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95B9[0x84];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNWXNPCDesireData>             CompletedDesires;                                  // 0x1C8(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNWXNPCDesireData>             IncompleteDesires;                                 // 0x1D8(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNWXNPCDesireData>             RandomDesiresAvailable;                            // 0x1E8(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95BA[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXNPCSatisfactionComponent* GetDefaultObj();

	void UpdateStructureDesires(const struct FGameplayTag& Tag, bool Added);
	void UpdateSquadMemberDesires(class ANWXAICharacter* Character);
	bool StartRest();
	void PrintDebugInfo();
	void OnPlayerOpenedEmployeeManagementScreen(class APlayerController* PlayerController);
	void OnPlayerClosedEmployeeManagementScreen(class APlayerController* PlayerController);
	void OnItemTagCountChanged(struct FGameplayTag& Tag, int32 Count);
	void OnDesireAdded(struct FNWXNPCDesireData& InDesire);
	void InitializeDesires();
	bool HasPlayerOpenedEmployeeManagementScreen(class APlayerController* PlayerController);
	void GetUnlockedCustomizations(int32* OptionsUnlocked, bool* Shoes, bool* Gloves, bool* Pants, bool* Shirt, bool* Hat);
	int32 GetSatisfactionScore();
	float GetSatisfactionRatio();
	float GetRestTimeBetween();
	float GetRestDuration();
	TArray<struct FNWXNPCDesireData> GetIncompleteDesires();
	TArray<struct FNWXNPCDesireData> GetCompletedDesires();
	bool FinishRest();
	bool AddDesire(struct FNWXNPCDesireData& InDesire);
};

// 0x18 (0x390 - 0x378)
// Class NWX.NWXOptionsSettingBoolWidget
class UNWXOptionsSettingBoolWidget : public UNWXOptionsSettingWidget
{
public:
	uint8                                        Pad_95BB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            BoolChangedDelegate;                               // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXOptionsSettingBoolWidget* GetDefaultObj();

	void ValueChanged(bool NewValue);
	void SetCheckBox(bool NewValue, bool bUseAsResetValue);
	class UCheckBox* GetCheckBoxWidget();
};

// 0x18 (0x390 - 0x378)
// Class NWX.NWXOptionsSettingDropdownWidget
class UNWXOptionsSettingDropdownWidget : public UNWXOptionsSettingWidget
{
public:
	uint8                                        Pad_95C0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSelectionChangedDelegate;                        // 0x380(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXOptionsSettingDropdownWidget* GetDefaultObj();

	void ValueChanged(int32 NewValue);
	void SetOptionindex(int32 NewValue, bool bUseAsResetValue);
	void OptionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void InitializeOptions(TArray<class FText>& Options, int32 SelectedOption, bool bHandleRefreshManually);
	int32 GetResetIndex();
	bool GetIsInitalized();
	class UComboBoxString* GetDropDownWidget();
};

// 0x40 (0x3B8 - 0x378)
// Class NWX.NWXOptionsSettingSlider
class UNWXOptionsSettingSlider : public UNWXOptionsSettingWidget
{
public:
	float                                        SliderMinValue;                                    // 0x378(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SliderMaxValue;                                    // 0x37C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SliderStepSize;                                    // 0x380(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NumberOfDecimalsDigits;                            // 0x384(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            SliderValueChangedDelegate;                        // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_95C5[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXOptionsSettingSlider* GetDefaultObj();

	void SliderValueChanged(float NewValue);
	void SetSliderValue(float NewValue, bool bUseAsResetValue);
	void SetSliderConstraints(float Min, float Max, float StepSize);
	class USlider* GetSliderWidget();
	class UEditableTextBox* GetSliderValueBox();
	void CommitText(class FText& Text, enum class ETextCommit CommitType);
	void CheckTextIsValid(class FText& Text);
};

// 0x80 (0x350 - 0x2D0)
// Class NWX.NWXPlayerStart
class ANWXPlayerStart : public APlayerStart
{
public:
	uint8                                        Pad_95CA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 MapPinId;                                          // 0x2D8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AverageFrameDelta;                                 // 0x2E8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95CC[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 PersistentUniqueID;                                // 0x2FC(0x10)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95CD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FNavAgentProperties                   NavAgentProperties;                                // 0x310(0x38)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bBeginUnlocked;                                    // 0x348(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95CE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPlayerStart* GetDefaultObj();

	void UnlockPlayerStart();
	void LockPlayerStart();
	bool IsPlayerStartUnlocked();
	bool IsDiscoveredByPlayer(class ANWXPlayerState* PlayerState);
	bool IsDiscoverable();
	struct FGuid GetPersistentUniqueId();
};

// 0x18 (0x368 - 0x350)
// Class NWX.NWXOwnedPlayerStart
class ANWXOwnedPlayerStart : public ANWXPlayerStart
{
public:
	class FString                                OwningPlayerId;                                    // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPlayerStartContext               PlayerStartContext;                                // 0x360(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95D1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXOwnedPlayerStart* GetDefaultObj();

	bool IsOwnedByPlayer(class ANWXPlayerState* PlayerState);
};

// 0x80 (0x348 - 0x2C8)
// Class NWX.NWXPathFollowingComponent
class UNWXPathFollowingComponent : public UPathFollowingComponent
{
public:
	uint8                                        Pad_95D5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXFlyingNavLink*                     FlyingLink;                                        // 0x2D8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANWXAIController*                      NWXAIController;                                   // 0x2E0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNavigationSystemV1*                   NavSystem;                                         // 0x2E8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXAICharacter*                       CurrentNWXAICharacter;                             // 0x2F0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAITraversalComponent*              CurrentTraversalComponent;                         // 0x2F8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95D6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimMontage*>                  TurnOnSpotMontges;                                 // 0x308(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        SimulationTimeStep;                                // 0x318(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumberOfPathStepsAheadToCheck;                     // 0x31C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXAIAnimInstance*                    AnimInstance;                                      // 0x320(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95D7[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXPathFollowingComponent* GetDefaultObj();

	void SetCarTurnsData(struct FCarTurnData& CarTurns);
	void OnEnterMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
};

// 0x28 (0x2C8 - 0x2A0)
// Class NWX.NWXPerformanceTest
class ANWXPerformanceTest : public AActor
{
public:
	bool                                         IsEnabled;                                         // 0x2A0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95D9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaximumDurationInMinutes;                          // 0x2A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                        Ordinal;                                           // 0x2A8(0x2)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95DA[0x1E];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPerformanceTest* GetDefaultObj();

	void TestIsReady();
	void ReceiveStartTest();
	void ReceivePrepareTest();
	void FinishTest();
	void DestroyOnFinish(class UObject* Object);
};

// 0x120 (0x200 - 0xE0)
// Class NWX.NWXPhysicalAnimationComponent
class UNWXPhysicalAnimationComponent : public UPhysicalAnimationComponent
{
public:
	uint8                                        Pad_95DB[0x118];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           InterpolationCurve;                                // 0x1F8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXPhysicalAnimationComponent* GetDefaultObj();

};

// 0x28 (0xB0 - 0x88)
// Class NWX.NWXPhyiscalMaterial
class UNWXPhyiscalMaterial : public UPhysicalMaterial
{
public:
	struct FGameplayTagContainer                 NWXGameplayTags;                                   // 0x88(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                        SurfaceSwitch;                                     // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXPhyiscalMaterial* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.NWXPlayerAnimBank
class UNWXPlayerAnimBank : public UObject
{
public:
	TArray<struct FAbilityMontageFields>         AbilityMontageFields;                              // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXPlayerAnimBank* GetDefaultObj();

	void GetAbilityMontageSet(struct FGameplayTag& Tag, struct FAbilityMontages* OutMontageSets, bool* bSucceeded);
};

// 0x0 (0x38 - 0x38)
// Class NWX.AnimB
class UAnimB : public UNWXPlayerAnimBank
{
public:

	static class UClass* StaticClass();
	static class UAnimB* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.AnimB_FP
class UAnimB_FP : public UNWXPlayerAnimBank
{
public:

	static class UClass* StaticClass();
	static class UAnimB_FP* GetDefaultObj();

};

// 0x20 (0x23E0 - 0x23C0)
// Class NWX.NWXPlayerCameraManager
class ANWXPlayerCameraManager : public APlayerCameraManager
{
public:
	class UCameraComponent*                      CurCameraComponent;                                // 0x23C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpringArmComponent*                   CurSpringArmComponent;                             // 0x23C8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95E1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPlayerCameraManager* GetDefaultObj();

	void SwitchCamera(enum class ECameraType NewCameraType, class ANWXCharacter* Character);
	void SetLockCameraMode(bool bNewLockCameraMode);
	bool GetThirdPersonEnabled();
	bool GetLockCameraMode();
	class UAmbienceManager* GetAmbienceManager();
	class UAkComponent* GetAk2DComponent();
	enum class ECameraType GetActiveCameraType();
};

// 0x0 (0x28 - 0x28)
// Class NWX.GlidingInterface
class IGlidingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGlidingInterface* GetDefaultObj();

	void UnbindDelegate_OnGlideStopped(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnGlideStarted(FDelegateProperty_& Delegate);
	void StopGliding();
	void StartGliding();
	void SetGlidingRotationRateMultiplier(float Multiplier);
	void SetGlidingGravityMultiplier(float Multiplier);
	void SetGlidingForwardSpeedMultiplier(float Multiplier);
	bool IsGliding();
	float GetGlidingRotationRateMultiplier();
	float GetGlidingGravityMultiplier();
	float GetGlidingForwardSpeedMultiplier();
	void BindDelegate_OnGlideStopped(FDelegateProperty_& Delegate);
	void BindDelegate_OnGlideStarted(FDelegateProperty_& Delegate);
};

// 0x170 (0xB50 - 0x9E0)
// Class NWX.NWXPlayerCharacter
class ANWXPlayerCharacter : public ANWXCharacter
{
public:
	uint8                                        Pad_95E8[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            CharacterViewUpdated;                              // 0xA30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            CharacterChangedNavArea;                           // 0xA40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            EffectDisplayAuthorizationChanged;                 // 0xA50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_95EA[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnEmoteStartedDelegate;                            // 0xA80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEmoteEndedDelegate;                              // 0xA90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_95EB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsAiming;                                          // 0xAB0(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         IsBlocking;                                        // 0xAB1(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95EC[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AEquippableItem*                       CurrentlyEquippedMainhandItem;                     // 0xAB8(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AEquippableItem*                       CurrentlyEquippedOffhandItem;                      // 0xAC0(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterEmoteComponent*              CharacterEmoteComponent;                           // 0xAC8(0x8)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95ED[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsGliding;                                        // 0xB08(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95EF[0x37];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlideForwardSpeedMultiplier;                       // 0xB40(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GlideRotationRateMultiplier;                       // 0xB44(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GlideGravityMultiplier;                            // 0xB48(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95F0[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPlayerCharacter* GetDefaultObj();

	void UpdateCharacterView(bool InThirdPerson);
	void StartDissolve(bool bDissolveIn, enum class ECharacterDissolveType DissolveType);
	void SetIsBlocking(bool NewIsBlocking);
	void SetIsAiming(bool NewIsAiming);
	void Server_StopGliding();
	void OnStartDissolve(bool bDissolveIn, enum class ECharacterDissolveType DissolveType);
	void OnMovementStateChangedNative(enum class ERALSMovementState PreviousMovementState, enum class ERALSMovementState NewMovementState);
	void OnLoadoutSlotChanged(enum class ELoadoutSlotType SlotType, class AEquippableItem* Item);
	void OnGlideStop();
	void OnGlideStart();
	bool GetPowerLevel_Implementation(struct FPowerLevel* OutPowerLevel);
	bool GetIsBlocking();
	bool GetIsAiming();
	void ChangeEffectDisplayAuthorization(const struct FGameplayTag& EffectTag, bool IsDisplayAllowed);
};

// 0x8 (0x30 - 0x28)
// Class NWX.NWXServerConfig
class UNWXServerConfig : public UObject
{
public:
	float                                        PersistenceSendRate;                               // 0x28(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_95F1[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXServerConfig* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class NWX.EQSPlayerSpawnSettings
class UEQSPlayerSpawnSettings : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UEnvQuery>              EQSPlayerSpawn;                                    // 0x38(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEQSPlayerSpawnSettings* GetDefaultObj();

};

// 0x200 (0x558 - 0x358)
// Class NWX.NWXPlayerState
class ANWXPlayerState : public APlayerState
{
public:
	uint8                                        Pad_95F9[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnClientInitialized;                               // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerRespawned;                                 // 0x398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPawnGameplayTagCountChanged;                     // 0x3A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLatestDamageSourceUpdated;                       // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_95FA[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMapTrailProvider*                     MapTrailProvider;                                  // 0x3E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPuckMomentComponent*                  PuckMomentComponent;                               // 0x3E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSkillReferenceUnlocked;                          // 0x3F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRecipeSkillsUnlocked;                            // 0x400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStructureSkillsUnlocked;                         // 0x410(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEmoteSkillsUnlocked;                             // 0x420(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemDurabilityDepleted;                          // 0x430(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UGroupComponentBase*                   GroupComponent;                                    // 0x440(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_95FB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCachedActorData                      LatestDamageSource;                                // 0x450(0x28)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         bLoadDiscoveriesFromAssetManager;                  // 0x478(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_95FC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDiscoveryActivationRule>      DiscoveryActivationRules;                          // 0x480(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UEntitlementsComponent*                EntitlementsComponent;                             // 0x490(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                 PlayerTags;                                        // 0x498(0x20)(Net, NativeAccessSpecifierPrivate)
	class UDiscoverySystem*                      DiscoverySystem;                                   // 0x4B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayerSkillUnlockComponent*           PlayerSkillUnlockComponent;                        // 0x4C0(0x8)(Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEncounterProgressTracker*             EncounterProgressTracker;                          // 0x4C8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95FE[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMultiAwaiter*                         PlayerStateReadyAwaiter;                           // 0x520(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         OutlawComponentAwaiter;                            // 0x528(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UExperienceStateTrackerComponent*      ExperienceStateTrackerComponent;                   // 0x530(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_95FF[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXPlayerState* GetDefaultObj();

	void UpdatePlayerTags(class UNWXAbilitySystemComponent* ASC);
	void SetUniqueIdAndTokenForTesting(const class FString& ID);
	void SetLatestDamageSource(class AActor* NewDamageSourceActor);
	void Server_SetLatestDamageSource(class AActor* NewDamageSourceActor);
	void Server_PlayerOpenedEmployeeMGMT(class UObject* NPC);
	void Server_PlayerClosedEmployeeMGMT(class UObject* NPC);
	void OnRep_LatestDamageSource();
	void OnPlayerOpenedEmployeeMGMT(class UObject* NPC);
	void OnPlayerClosedEmployeeMGMT(class UObject* NPC);
	void OnClientReady(bool Success);
	void MarkAsClientAndServerReady();
	bool HasSkillUnlocked(struct FGuid& SkillUID);
	bool HasSkillFullyUnlocked(struct FSkillDataReference& SkillReference);
	void GrantSkillUnlockables(struct FSkillDataReference& UnlockedSkill, struct FSkillReferenceContainer& SkillUnlockables);
	class FString GetPersistentUniqueId();
	struct FCachedActorData GetLatestDamageSource();
	bool GetIsClientAndServerReady();
	class UEntitlementsComponent* GetEntitlementsComponent();
	void GetCurrentStructureSkillsUnlocked(TArray<struct FStructureAssetReference>* CurrentlyUnlockedStructures);
	void GetCurrentSkillsUnlocked(struct FSkillReferenceContainer* CurrentUnlockables);
	void GetCurrentRecipeSkillsUnlocked(TArray<struct FCraftingRecipeReference>* CurrentlyUnlockedRecipes);
	void GetCurrentEmoteSkillsUnlocked(TArray<TSoftObjectPtr<class UEmoteDataAsset>>* CurrentlyUnlockedEmotes);
	void CrossServer_TeleportPlayer(struct FVector& Location);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXPlayerStateFunctionLibrary
class UNWXPlayerStateFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXPlayerStateFunctionLibrary* GetDefaultObj();

	void GetPlayerStateFromId(class UObject* __WorldContext, const class FString& PlayerId, class APlayerState** PlayerState);
};

// 0x10 (0x358 - 0x348)
// Class NWX.NWXPlayerStatsWidget
class UNWXPlayerStatsWidget : public UNWXCommonUserWidget
{
public:
	TArray<struct FAttributesForBox>             AttributesToPresent;                               // 0x348(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXPlayerStatsWidget* GetDefaultObj();

	int32 GetIndexOfAttribute(struct FGameplayAttribute& Attribute);
	void GetAttributeValues(TMap<struct FGameplayAttribute, float>* OutAttributeValuesMap);
};

// 0xC0 (0x140 - 0x80)
// Class NWX.NWXPlayMontageAndWaitForEvent
class UNWXPlayMontageAndWaitForEvent : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_            OnCompleted;                                       // 0x80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBlendOut;                                        // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInterrupted;                                     // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCancelled;                                       // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            EventReceived;                                     // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MontageToPlay;                                     // 0xD0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                 EventTags;                                         // 0xD8(0x20)(NativeAccessSpecifierPrivate)
	float                                        Rate;                                              // 0xF8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  StartSection;                                      // 0xFC(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        AnimRootMotionTranslationScale;                    // 0x104(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bStopWhenAbilityEnds;                              // 0x108(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_960A[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXPlayMontageAndWaitForEvent* GetDefaultObj();

	class UNWXPlayMontageAndWaitForEvent* PlayMontageAndWaitForEvent(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimMontage* MontageToPlay, const struct FGameplayTagContainer& EventTags, float Rate, class FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXPortalFunctionLibrary
class UNWXPortalFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXPortalFunctionLibrary* GetDefaultObj();

	bool OpenRealmsMenu(class AController* InstigatingController, class UObject* RealmCardMachine, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
	void OpenRealmCardMachine(class AController* InstigatingController, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
	bool OpenPortalUI(class AController* InstigatingController, class UObject* PortalController, class URealmCardMachineComponent* RealmCardMachineComponent, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
	class UNWXWindowWidget* GetOpenedUI(class AController* InstigatingController);
	void AddWidget(class AController* InstigatingController, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
};

// 0x170 (0x860 - 0x6F0)
// Class NWX.NWXProceduralAnimationTemplate
class UNWXProceduralAnimationTemplate : public UNWXAIAnimInstance
{
public:
	FMulticastInlineDelegateProperty_            OnProceduralAnimationStepStarted;                  // 0x6F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProceduralAnimationStepEnded;                    // 0x700(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FName>                          NativeLegList;                                     // 0x710(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                NativeFrontLegIndexes;                             // 0x720(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                NativeBackLegIndexes;                              // 0x730(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                NativeRightLegIndexes;                             // 0x740(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                NativeLeftLegIndexes;                              // 0x750(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	enum class ETraceTypeQuery                   NativeLegTraceType;                                // 0x760(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_961A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLegItem>                      NativeLegItems;                                    // 0x768(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                        NativeStepSpeed;                                   // 0x778(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NativeStepHeight;                                  // 0x77C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           NativeTimeCurve;                                   // 0x780(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           NativeFootRaiseCurve;                              // 0x788(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           NativeStepLengthCurve;                             // 0x790(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           NativeStepThresholdCurve;                          // 0x798(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              NativeRotationOffset;                              // 0x7A0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        NativeBodyPitchMultiplier;                         // 0x7B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NativeBodyRollMultiplier;                          // 0x7BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NativeDeltaYawThreshold;                           // 0x7C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsProceduralAnimationOn;                           // 0x7C4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         IsWalkOn;                                          // 0x7C5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_961B[0x9A];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXProceduralAnimationTemplate* GetDefaultObj();

	bool UpdateAnimation();
	struct FVector NativeGetLegPosition(class FName& LegName, enum class ELegLocationType LegLocation);
	float NativeGetLegAlpha(class FName& LegName);
	void NativeGetActorSpeed(float* OutNormSpeed, float* OutSpeed);
	struct FVector NativeCalculateAveragePosition(TArray<int32>& LegIndexes);
	void InitializeTemplate();
	void CalculateLegsAlpha(TArray<class FName>& CurrentLegList, float CurrentTime, float AnimationStart, float AnimationEnd);
};

// 0x28 (0x300 - 0x2D8)
// Class NWX.NWXRadialForceComponent
class UNWXRadialForceComponent : public URadialForceComponent
{
public:
	TArray<class AActor*>                        IgnoredActors;                                     // 0x2D8(0x10)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_961E[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXRadialForceComponent* GetDefaultObj();

	void FireImpulseWithIgnore(TArray<class AActor*>& IgnoreActors);
};

// 0x20 (0x360 - 0x340)
// Class NWX.NWXRadialMenuButtonWidget
class UNWXRadialMenuButtonWidget : public UNWXUserWidget
{
public:
	TScriptInterface<class IRadialMenuInterface> EntryData;                                         // 0x340(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LineRadius;                                        // 0x350(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LineWidth;                                         // 0x354(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Center;                                            // 0x358(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Radius;                                            // 0x35C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXRadialMenuButtonWidget* GetDefaultObj();

	void OnButtonUnHovered();
	void OnButtonHovered();
	void ButtonPressed();
	struct FVector2D AngleToVector(float InAngle);
};

// 0x20 (0x4D8 - 0x4B8)
// Class NWX.NWXRadialMenuWidget
class UNWXRadialMenuWidget : public UNWXCommonWindowWidget
{
public:
	uint8                                        Pad_9622[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnalogStick                      AnalogStick;                                       // 0x4BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9623[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Selection;                                         // 0x4C0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RotationOffset;                                    // 0x4C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Separation;                                        // 0x4C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumberOfOptions;                                   // 0x4CC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CenterRadius;                                      // 0x4D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9624[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXRadialMenuWidget* GetDefaultObj();

	void OnSelectionChanged(int32 SelectionIndex);
	void OnCenterSelected();
	void OnAngleChanged(float Angle);
	float GetSegmentRadius();
	float GetCenterAngle(int32 SegmentIncrement);
	TArray<enum class EAnalogStick> GetAnalogStick();
};

// 0x90 (0x3D8 - 0x348)
// Class NWX.NWXRealmCardGridListWidget
class UNWXRealmCardGridListWidget : public UNWXCommonUserWidget
{
public:
	TArray<enum class ERealmCardType>            CardTypes;                                         // 0x348(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_962A[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXRealmCardGridListWidget* GetDefaultObj();

	void HandleItemsRemoved(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void HandleItemsAdded(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void GetCardsForType(enum class ERealmCardType CardType, TArray<struct FInventoryEntry>* OutCards);
	void BP_HandleCardsUpdatedForType(enum class ERealmCardType CardType, TArray<struct FInventoryEntry>& NewCards);
};

// 0x0 (0x4B8 - 0x4B8)
// Class NWX.NWXRealmCardMachineScreen
class UNWXRealmCardMachineScreen : public UNWXCommonWindowWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXRealmCardMachineScreen* GetDefaultObj();

	void InitalizeCardMachine(class UPortalControllerComponent* PortalController, class URealmCardMachineComponent* RealmCardMachineComponent);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.NWXRealmEffectComponent
class UNWXRealmEffectComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXRealmEffectComponent* GetDefaultObj();

};

// 0x520 (0xB10 - 0x5F0)
// Class NWX.NWXRecastNavMesh
class ANWXRecastNavMesh : public ARecastNavMesh
{
public:
	bool                                         GatherDebugDataOnRepair;                           // 0x5F0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShowAbstractDebugData;                             // 0x5F1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         CreateFlightMesh;                                  // 0x5F2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_962B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumberOfTilesPerFlightTile;                        // 0x5F4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinimumValidNavIslandArea;                         // 0x5F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_962C[0x514];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXRecastNavMesh* GetDefaultObj();

	void PrintNavMeshToVLog();
};

// 0x0 (0xB10 - 0xB10)
// Class NWX.NWXRecastNavMeshDefault
class ANWXRecastNavMeshDefault : public ANWXRecastNavMesh
{
public:

	static class UClass* StaticClass();
	static class ANWXRecastNavMeshDefault* GetDefaultObj();

};

// 0x0 (0xB10 - 0xB10)
// Class NWX.NWXRecastNavMeshGiant
class ANWXRecastNavMeshGiant : public ANWXRecastNavMesh
{
public:

	static class UClass* StaticClass();
	static class ANWXRecastNavMeshGiant* GetDefaultObj();

};

// 0x18 (0x360 - 0x348)
// Class NWX.NWXRecipeIngredientListWidget
class UNWXRecipeIngredientListWidget : public UNWXCommonUserWidget
{
public:
	class UPanelWidget*                          IngredientListContainer;                           // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FIngredientPresentationData>   Ingredients;                                       // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXRecipeIngredientListWidget* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXRecipeToAssociatedRecipesRelationsTracker
class UNWXRecipeToAssociatedRecipesRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXRecipeToAssociatedRecipesRelationsTracker* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXRecipeToAssociatedStructuresRelationsTracker
class UNWXRecipeToAssociatedStructuresRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXRecipeToAssociatedStructuresRelationsTracker* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXRecipeToGrantingStructureRelationsTracker
class UNWXRecipeToGrantingStructureRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXRecipeToGrantingStructureRelationsTracker* GetDefaultObj();

};

// 0x190 (0x700 - 0x570)
// Class NWX.NWXReplicationGraph
class UNWXReplicationGraph : public UReplicationGraph
{
public:
	TArray<class UClass*>                        SpatializedClasses;                                // 0x570(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                        NonSpatializedChildClasses;                        // 0x580(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                        AlwaysRelevantClasses;                             // 0x590(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                        RelevantToSingleConnectionClasses;                 // 0x5A0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                        CustomCullDistanceClasses;                         // 0x5B0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_GridSpatialization2D* GridNode;                                          // 0x5C0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_ActorList*       AlwaysRelevantNode;                                // 0x5C8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNWXReplicationGraphNode_StreamingLevelProxyActor_PerConnection*> StreamingLevelProxyActorNodes;                     // 0x5D0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                ClassesOnlyReleventToSingleConnection;             // 0x5E0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                ClassesWithCustomCullDistance;                     // 0x5F0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_9630[0x100];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXReplicationGraph* GetDefaultObj();

	void OnPhasedActorConnectionOwnerChange(class AActor* PhasedActor, class APlayerController* PrevConnectionOwner, class APlayerController* NewConnectionOwner);
	void OnPhasedActorBeginPlay(class AActor* PhasedActor);
};

// 0x250 (0x2A0 - 0x50)
// Class NWX.NWXReplicationGraphNode_AlwaysRelevant_ForConnection
class UNWXReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
{
public:
	uint8                                        Pad_9631[0x230];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                LastPawn;                                          // 0x280(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FNWXAlwaysRelevantActorInfo>   PastRelevantActors;                                // 0x288(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9633[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj();

};

// 0x28 (0x78 - 0x50)
// Class NWX.NWXReplicationGraphNode_PlayerStateFrequencyLimiter
class UNWXReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
{
public:
	uint8                                        Pad_9634[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXReplicationGraphNode_PlayerStateFrequencyLimiter* GetDefaultObj();

};

// 0x2020 (0x2070 - 0x50)
// Class NWX.NWXReplicationGraphNode_StreamingLevelProxyActor_PerConnection
class UNWXReplicationGraphNode_StreamingLevelProxyActor_PerConnection : public UReplicationGraphNode
{
public:
	uint8                                        Pad_9635[0x2020];                                  // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXReplicationGraphNode_StreamingLevelProxyActor_PerConnection* GetDefaultObj();

};

// 0x90 (0xC0 - 0x30)
// Class NWX.NWXResourceGlossaryMappingAsset
class UNWXResourceGlossaryMappingAsset : public UDataAsset
{
public:
	TMap<struct FGuid, struct FResourceGlossaryData> ResourceGlossaryDataCache;                         // 0x30(0x50)(NativeAccessSpecifierPublic)
	TSubclassOf<class UResourceGlossaryHelper>   GlossaryHelperClass;                               // 0x80(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>             LSTResourceDataPtr;                                // 0x88(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                            LSTResourceDataTable;                              // 0xB0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResourceGlossaryHelper*               HelperInstance;                                    // 0xB8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXResourceGlossaryMappingAsset* GetDefaultObj();

	void BuildResourceGlossaryDataCache();
};

// 0x30 (0x60 - 0x30)
// Class NWX.NWXResourceGlossarySubsystem
class UNWXResourceGlossarySubsystem : public UNWXGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UNWXResourceGlossaryMappingAsset> ResourceGlossaryCookedDataSourcePtr;               // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXResourceGlossaryMappingAsset*      ResourceGlossaryMappingDataSource;                 // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXResourceGlossarySubsystem* GetDefaultObj();

	TArray<struct FResourceGlossaryData> GetResourceInformation();
};

// 0x8 (0x30 - 0x28)
// Class NWX.NWXRichTextBlockInputImageDecorator
class UNWXRichTextBlockInputImageDecorator : public URichTextBlockDecorator
{
public:
	class UTexture2D*                            ChordedActionConcatImage;                          // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXRichTextBlockInputImageDecorator* GetDefaultObj();

};

// 0x10 (0x650 - 0x640)
// Class NWX.NWXScatterMaskComponent
class UNWXScatterMaskComponent : public UStaticMeshComponent
{
public:
	class UMaterialInterface*                    ScatterMaskMaterial;                               // 0x640(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9639[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXScatterMaskComponent* GetDefaultObj();

};

// 0x78 (0xB0 - 0x38)
// Class NWX.StructureScatterMaskSettings
class UStructureScatterMaskSettings : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class URuntimeVirtualTexture> RuntimeVirtualTexture;                             // 0x38(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>              ScatterMaskMaterial;                               // 0x60(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>            DefaultMesh;                                       // 0x88(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureScatterMaskSettings* GetDefaultObj();

};

// 0x8 (0x350 - 0x348)
// Class NWX.NWXShopCategoryEntryWidget
class UNWXShopCategoryEntryWidget : public UNWXCommonUserWidget
{
public:
	class UNWXShopCategoryListItem*              ShopCategory;                                      // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopCategoryEntryWidget* GetDefaultObj();

};

// 0x70 (0x3B8 - 0x348)
// Class NWX.NWXShopIngredientWidget
class UNWXShopIngredientWidget : public UNWXCommonUserWidget
{
public:
	TSoftObjectPtr<class UTexture2D>             IngredientIcon;                                    // 0x348(0x28)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>             BackgroundTexture;                                 // 0x370(0x28)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Quantity;                                          // 0x398(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_963C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ResourceName;                                      // 0x3A0(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopIngredientWidget* GetDefaultObj();

};

// 0x28 (0x370 - 0x348)
// Class NWX.NWXShopOfferDetailsPanelWidget
class UNWXShopOfferDetailsPanelWidget : public UNWXCommonUserWidget
{
public:
	uint8                                        Pad_9641[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXShopSelectableListItem*            SelectedShopOffer;                                 // 0x358(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNWXShopOfferDetailsSimpleWidget> DefaultDetailsWidget;                              // 0x360(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXShopOfferDetailsSimpleWidget*      CurrentDetailsBreakdownWidget;                     // 0x368(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopOfferDetailsPanelWidget* GetDefaultObj();

	void ShowReward(class UNWXShopRewardListItem* InShopOffer);
	void ShowOffer(class UNWXShopOfferListItem* InShopOffer);
	void RequestPurchase(struct FGuid& OfferId);
	void OnShowReward(class UNWXShopRewardListItem* RewardToShow);
	void OnShowOffer(class UNWXShopOfferListItem* OfferToShow);
	void OnHideOffer();
	void HideListItem();
};

// 0x8 (0x350 - 0x348)
// Class NWX.NWXShopOfferDetailsSimpleWidget
class UNWXShopOfferDetailsSimpleWidget : public UNWXCommonUserWidget
{
public:
	class UNWXShopSelectableListItem*            Offer;                                             // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopOfferDetailsSimpleWidget* GetDefaultObj();

};

// 0x10 (0x360 - 0x350)
// Class NWX.NWXShopOfferDetailsWithRecipeWidget
class UNWXShopOfferDetailsWithRecipeWidget : public UNWXShopOfferDetailsSimpleWidget
{
public:
	TArray<struct FItemConstraintPresentationData> ItemConstraintPresentationDatas;                   // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopOfferDetailsWithRecipeWidget* GetDefaultObj();

};

// 0x8 (0x350 - 0x348)
// Class NWX.NWXShopOfferEntryWidget
class UNWXShopOfferEntryWidget : public UNWXCommonUserWidget
{
public:
	class UNWXShopSelectableListItem*            OfferEntry;                                        // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopOfferEntryWidget* GetDefaultObj();

};

// 0x140 (0x490 - 0x350)
// Class NWX.NWXShopOfferItemDetailsWidget
class UNWXShopOfferItemDetailsWidget : public UNWXShopOfferDetailsSimpleWidget
{
public:
	TSoftObjectPtr<class UAttributeUIDataRegistry> AttributeRegistryPtr;                              // 0x350(0x28)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAttributeValueAndUIData>      SortedAttributeDatas;                              // 0x378(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAttributeValueAndUIData>      SortedAttributeModifierDatas;                      // 0x388(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	enum class EItemQuality                      Quality;                                           // 0x398(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9645[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ItemLevel;                                         // 0x39C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Weight;                                            // 0x3A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FItemInstanceDurabilityData           DurabilityData;                                    // 0x3A4(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_9646[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInstanceData_CharacteristicInfo      CharacteristicInfo;                                // 0x3C0(0xC0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                        ExtractionCount;                                   // 0x480(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9647[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopOfferItemDetailsWidget* GetDefaultObj();

	void OnReady();
};

// 0x20 (0x48 - 0x28)
// Class NWX.NWXShopSelectableListItem
class UNWXShopSelectableListItem : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnSelected;                                        // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_964B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopSelectableListItem* GetDefaultObj();

	void Select(bool bSelected);
	void Hover(bool bHover);
	enum class ETransactableType GetTransactableType();
	class FText GetItemLabel();
	class FText GetItemDescription();
	TSoftObjectPtr<class UTexture2D> GetIcon();
	TSoftObjectPtr<class UTexture2D> GetCurrencyIcon();
};

// 0x8 (0x50 - 0x48)
// Class NWX.NWXShopRewardListItem
class UNWXShopRewardListItem : public UNWXShopSelectableListItem
{
public:
	class UShopTransactablePresentationData*     TransactablePresentationData;                      // 0x48(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXShopRewardListItem* GetDefaultObj();

};

// 0xF0 (0x138 - 0x48)
// Class NWX.NWXShopOfferListItem
class UNWXShopOfferListItem : public UNWXShopSelectableListItem
{
public:
	struct FGuid                                 OfferId;                                           // 0x48(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         AreRequirementsMet;                                // 0x58(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_964C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FShopOfferPresentation                PresentationData;                                  // 0x60(0xC0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UNWXShopRewardListItem*>        Rewards;                                           // 0x120(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EShopOfferPurchasableState        PurchasableState;                                  // 0x130(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         StartSelected;                                     // 0x131(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_964D[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopOfferListItem* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.NWXShopCategoryListItem
class UNWXShopCategoryListItem : public UObject
{
public:
	class FText                                  CategoryName;                                      // 0x28(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                          SortingGroup;                                      // 0x40(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNWXShopOfferListItem*>         OfferListItems;                                    // 0x48(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_964E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         StartExpanded;                                     // 0x68(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_964F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopCategoryListItem* GetDefaultObj();

	void SetAsLastSelectedCategory();
};

// 0x20 (0x368 - 0x348)
// Class NWX.NWXShopOfferListPanelWidget
class UNWXShopOfferListPanelWidget : public UNWXCommonUserWidget
{
public:
	FMulticastInlineDelegateProperty_            MissingRequirementsFilterChanged;                  // 0x348(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNWXShopCategoryListItem*>      CategoryListItems;                                 // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopOfferListPanelWidget* GetDefaultObj();

	void ToggleOffersWithMissingRequirements(bool bShow);
	void OnDataLoaded();
};

// 0x58 (0x3A8 - 0x350)
// Class NWX.NWXShopRecipeDetailsWidget
class UNWXShopRecipeDetailsWidget : public UNWXShopOfferDetailsSimpleWidget
{
public:
	class UNWXMenuDataEntryCrafting*             RecipeDataEntry;                                   // 0x350(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCraftingConstraintSlot>       RecipeSlots;                                       // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNWXMenuDataEntry*>             RelatedBenchEntries;                               // 0x368(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UNWXMenuDataEntry*>             RelatedDecorationEntries;                          // 0x378(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStructureTraitCollectionAsset*> AugmentationTraits;                                // 0x388(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStructureTraitCollectionAsset*> RelatedAugmentationTraits;                         // 0x398(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopRecipeDetailsWidget* GetDefaultObj();

};

// 0x8 (0x350 - 0x348)
// Class NWX.NWXShopRewardEntryWidget
class UNWXShopRewardEntryWidget : public UNWXCommonUserWidget
{
public:
	class UNWXShopRewardListItem*                RewardListItem;                                    // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXShopRewardEntryWidget* GetDefaultObj();

};

// 0x48 (0x398 - 0x350)
// Class NWX.NWXShopSchematicsDetailsWidget
class UNWXShopSchematicsDetailsWidget : public UNWXShopOfferDetailsSimpleWidget
{
public:
	class UNWXMenuDataEntryBuilding*             BuildingDataEntry;                                 // 0x350(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UStructureTraitCollectionAsset*> ReceivingTraits;                                   // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStructureTraitAsset*>          EmittedTraits;                                     // 0x368(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UStructureResourceRequirementsData*    StructureResourceRequirements;                     // 0x378(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNWXMenuDataEntry*>             RelatedEntries;                                    // 0x380(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        AugmentationSlotCount;                             // 0x390(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9652[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopSchematicsDetailsWidget* GetDefaultObj();

};

// 0x170 (0x628 - 0x4B8)
// Class NWX.NWXShopScreenWidget
class UNWXShopScreenWidget : public UNWXCommonWindowWidget
{
public:
	TSoftObjectPtr<class UItemDataAsset>         TierZeroEssenceDAPtr;                              // 0x4B8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UItemDataAsset>         TierOneEssenceDAPtr;                               // 0x4E0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UItemDataAsset>         TierTwoEssenceDAPtr;                               // 0x508(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UItemDataAsset>         TierThreeEssenceDAPtr;                             // 0x530(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_965B[0x34];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsReadOnly;                                        // 0x58C(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_965C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UShopDescriptorDataAsset*              CurrentShopDescriptor;                             // 0x590(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadOnlyShopInteractionSession*       CurrentReadOnlyShopSession;                        // 0x598(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      ShopTitleLabel;                                    // 0x5A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      PlayerCurrencyLabelTierZero;                       // 0x5A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      PlayerCurrencyLabelTierOne;                        // 0x5B0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      PlayerCurrencyLabelTierTwo;                        // 0x5B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      PlayerCurrencyLabelTierThree;                      // 0x5C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXShopOfferListPanelWidget*          ShopOfferListPanel;                                // 0x5C8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXShopOfferDetailsPanelWidget*       ShopOfferDetailsPanel;                             // 0x5D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                ShopOwnerActor;                                    // 0x5D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXShopSelectableListItem*            SelectedOffer;                                     // 0x5E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNWXShopSelectableListItem*            HoveredOffer;                                      // 0x5E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNWXShopSelectableListItem*>    ShopOfferListItems;                                // 0x5F0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UNWXShopCategoryListItem*>      ShopCategoryListItems;                             // 0x600(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_965D[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXShopScreenWidget* GetDefaultObj();

	void OnShopReady();
	void OnPurchaseResponse(enum class EShopTransactionResponse Response);
	void OnPurchaseRequested();
	void HandleShopSessionChanged(TScriptInterface<class IShopInteractionModel>& ShopInteractionModel);
	void HandleShopOffersChanged();
	void HandleShopFiltersChanged(bool bShowMissingRequirements);
	void HandlePurchaseRequestResponse(int32 TransactionID, enum class EShopTransactionResponse TransactionResponse);
	void HandlePurchaseRequest(const struct FGuid& OfferId);
	void HandleLastSelectedCategoryChanged(struct FGameplayTag& CategoryTag);
	void HandleItemSelectionChanged(class UNWXShopSelectableListItem* OfferEntry, bool bSelected);
	void HandleItemHoverChanged(class UNWXShopSelectableListItem* OfferEntry, bool bHovered);
	void HandleEssenceDustChanged(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	class UNWXShopOfferListPanelWidget* GetShopOfferList();
};

// 0x80 (0x340 - 0x2C0)
// Class NWX.NWXSimStateManagerBase
class ANWXSimStateManagerBase : public AManagerBase
{
public:
	uint8                                        Pad_9672[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCreatureBudgetComponent*              CreatureBudgetComponent;                           // 0x2C8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEncounterManagerComponent*            EncounterManagerComponent;                         // 0x2D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEncounterWatcherComponent*            EncounterWatcherComponent;                         // 0x2D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          ClusterThemes;                                     // 0x2E0(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRealmSettings                        RealmSettings;                                     // 0x2F0(0x40)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9674[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXSimStateManagerBase* GetDefaultObj();

	void SetRealmSettings(const struct FRealmSettings& Settings);
	bool RealmSettingsSatisfyRequirement(struct FRealmSettings& RealmSettingsIn, struct FRealmPlacementRequirement& Requirement);
	bool RealmSettingsSatisfyOneOfRequirements(struct FRealmSettings& RealmSettingsIn, TArray<struct FRealmPlacementRequirement>& Requirements);
	bool RealmSettingsAndRequirementsSatisfyMinorCardTag(struct FRealmSettings& RealmSettingsIn, TArray<struct FRealmPlacementRequirement>& Requirements);
	bool RealmSatisfiesRequirement(struct FRealmPlacementRequirement& Requirement);
	bool RealmSatisfiesOneOfRequirements(TArray<struct FRealmPlacementRequirement>& Requirements);
	bool RealmSatisfiesBiomeRestriction(TArray<enum class EBiomeID>& BiomeRestriction);
	bool RealmPowerSatisfiesAllComparisons(int32 BaseRealmPower, TArray<struct FRealmPowerComparison>& Comparisons);
	class FString RealmPlacementRequirementToString(struct FRealmPlacementRequirement& Requirement);
	class FString RealmPlacementRequirementListToString(TArray<struct FRealmPlacementRequirement>& Requirements);
	class FString InfluenceToString(struct FRealmInfluenceValues& Influence);
	bool InfluenceSatisfiesComparison(struct FRealmInfluenceValues& Influence, struct FInfluenceComparison& Comparison);
	bool InfluenceSatisfiesAllComparisons(struct FRealmInfluenceValues& Influence, TArray<struct FInfluenceComparison>& Comparisons);
	bool InfluenceInRange(struct FRealmInfluenceValues& Value, struct FRealmInfluenceValues& Min, struct FRealmInfluenceValues& Max);
	int32 GetRelevantInfluenceValue(struct FRealmInfluenceValues& Influence, enum class EInfluenceRequirement InfluenceRequirement);
	int32 GetRealmPower();
	enum class EBiomeID GetBiomeFromContext(class AActor* ContextActor);
	bool BiomeRequirementSatisfied(enum class EBiomeID BiomeId, TArray<enum class EBiomeID>& BiomeRequirement);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXSocialHelperLibrary
class UNWXSocialHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXSocialHelperLibrary* GetDefaultObj();

	bool AreSocialFeaturesDisabled(class UObject* WorldContextObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXSpatialUtils
class UNWXSpatialUtils : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXSpatialUtils* GetDefaultObj();

};

// 0x138 (0x488 - 0x350)
// Class NWX.NWXSpectatorPawn
class ANWXSpectatorPawn : public ASpectatorPawn
{
public:
	class AActor*                                SelectedActor;                                     // 0x350(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                   SelectedComponent;                                 // 0x358(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            SelectedHitPoint;                                  // 0x360(0xE8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        SpeedScaleAdjustment;                              // 0x448(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinimumOrbitRadius;                                // 0x44C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SpeedScale;                                        // 0x450(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        StartingSpeed;                                     // 0x454(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinMoveSpeed;                                      // 0x458(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxMoveSpeed;                                      // 0x45C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentMoveSpeed;                                  // 0x460(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FOVScale;                                          // 0x464(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANWXPlayerController*                  NWXPlayerController;                               // 0x468(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsFrozenRendering : 1;                            // Mask: 0x1, PropSize: 0x10x470(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1A7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_9678[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCameraManager*                  PlayerCameraManager;                               // 0x478(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXSpectatorPawnMovement*             SpectatorMovement;                                 // 0x480(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXSpectatorPawn* GetDefaultObj();

	void OnClearSelection();
	void OnActorSelected(class AActor* ActorSelected, struct FVector& SelectedLocation, struct FVector& SelectedNormal, struct FHitResult& Hit);
	float GetCurrentSpeed();
	float GetCurrentFOV();
};

// 0x0 (0x178 - 0x178)
// Class NWX.NWXSpectatorPawnMovement
class UNWXSpectatorPawnMovement : public USpectatorPawnMovement
{
public:

	static class UClass* StaticClass();
	static class UNWXSpectatorPawnMovement* GetDefaultObj();

};

// 0x50 (0x3F0 - 0x3A0)
// Class NWX.NWXSpringArmComponent
class UNWXSpringArmComponent : public USpringArmComponent
{
public:
	struct FVector                               MeleeSocketOffset;                                 // 0x3A0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               RangedSocketOffset;                                // 0x3B8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MeleeTargetArmLength;                              // 0x3D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RangedTargetArmLength;                             // 0x3D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CollisionInterpSpeed;                              // 0x3D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DefaultTargetArmLength;                            // 0x3DC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_967B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSpringArmComponent* GetDefaultObj();

	void EmoteCameraTick(class ANWXCharacter* Character, float DeltaTime);
};

// 0x20 (0x88 - 0x68)
// Class NWX.NWXSquadActionBase
class UNWXSquadActionBase : public UAIAction
{
public:
	uint8                                        Pad_967D[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSquadActionBase* GetDefaultObj();

	bool IsFinished();
	class AActor* GetTarget();
	class UNWXSquadComponent* GetSquad();
};

// 0x8 (0x90 - 0x88)
// Class NWX.NWXSquadAction
class UNWXSquadAction : public UNWXSquadActionBase
{
public:
	uint8                                        Pad_967E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSquadAction* GetDefaultObj();

};

// 0x10 (0x450 - 0x440)
// Class NWX.NWXSquadActionComponent
class UNWXSquadActionComponent : public UAIActionComponent
{
public:
	TArray<struct FNWXSquadActionData>           SquadActions;                                      // 0x440(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXSquadActionComponent* GetDefaultObj();

	void OnActionFinished(class UNWXSquadComponent* SquadComponent, class UNWXSquadAction* Action, class AActor* Target);
};

// 0x30 (0x58 - 0x28)
// Class NWX.NWXSquadMember
class UNWXSquadMember : public UObject
{
public:
	uint8                                        Pad_967F[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSquadMember* GetDefaultObj();

	void OnTargetPerceptionUpdated(class AActor* Source, const struct FAIStimulus& Stimulus);
	void OnSquadActionFinished(class UNWXSquadComponent* SquadComponent, class UNWXSquadAction* InAction, class AActor* InTarget);
	void OnDestroyed(class AActor* Actor);
	void OnDeath(class ANWXAICharacter* AICharacter);
};

// 0x128 (0x1C8 - 0xA0)
// Class NWX.NWXSquadComponent
class UNWXSquadComponent : public UActorComponent
{
public:
	TArray<class UNWXSquadMember*>               Members;                                           // 0xA0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnMemberAdded;                                     // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberRemoved;                                   // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLeaderChanged;                                   // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinalPreferredLeaderDeath;                       // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bAttachToLeader;                                   // 0xF0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9689[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ANWXAICharacter>           PreferredLeaderClass;                              // 0x100(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_968A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBlackboardData*                       SquadBlackboardAsset;                              // 0x110(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_968B[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UAIAction>                 PlaceholderActionClass;                            // 0x140(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActionFinished;                                  // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_968C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPerceptionUpdated;                               // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_968D[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSquadComponent* GetDefaultObj();

	void SetFocusTargetTimeout(float Time);
	void SetFocusTarget(class UObject* FocusTarget);
	void OnPerceivedActorDestroyed(class AActor* Actor);
	void OnMemberSquadChanged(class ANWXAICharacter* Character, class ANWXAISpawner* OldSpawner, class ANWXAISpawner* NewSpawner);
	void OnMemberSpawned(class ANWXAICharacter* CharacterSpawned, class ANWXAISpawner* OwningSpawner);
	bool HasMultipleMembers();
	class UNWXSquadComponent* GetSquad(class ANWXAICharacter* AICharacter);
	void GetPerceivedActors(TArray<class AActor*>* OutActors);
	void GetMembers(TArray<class ANWXAICharacter*>* OutMembers);
	class ANWXAICharacter* GetLeader();
	float GetFocusTargetTimeout();
	class FName GetBlackboardKeyName(enum class ESquadBlackboardKey SquadBBVar);
	class UBlackboardComponent* GetBlackboard();
	void ClearFocusTarget();
};

// 0x18 (0xA0 - 0x88)
// Class NWX.NWXSquadMemberAction
class UNWXSquadMemberAction : public UNWXSquadActionBase
{
public:
	uint8                                        Pad_968E[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSquadMemberAction* GetDefaultObj();

};

// 0x0 (0x88 - 0x88)
// Class NWX.NWXSquadPlaceholderAction
class UNWXSquadPlaceholderAction : public UNWXSquadActionBase
{
public:

	static class UClass* StaticClass();
	static class UNWXSquadPlaceholderAction* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class NWX.NWXSquadConfigData
class UNWXSquadConfigData : public UPrimaryDataAsset
{
public:
	TSoftClassPtr<class ANWXAICharacter>         PreferredLeaderClass;                              // 0x30(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNWXSquadActionDataSoft>       SquadActions;                                      // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXSquadConfigData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXStates
class UNWXStates : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXStates* GetDefaultObj();

	struct FGameplayTag UsingSpyglassTag();
	struct FGameplayTag StructurePlayerStartSpawningTag();
	struct FGameplayTag PlayerInRespiteRealmTag();
	struct FGameplayTag PlayerControlledTag();
	struct FGameplayTag LoadingInvulnerabilityTag();
	struct FGameplayTag DeathRevivingTag();
	struct FGameplayTag DeathRevivedTag();
	struct FGameplayTag DeathRespawnTimeRemainingTag();
	struct FGameplayTag DeathRespawningTag();
	struct FGameplayTag DeathDownedTimeRemainingTag();
	struct FGameplayTag DeathDownedTag();
	struct FGameplayTag DeathDeathTimeRemainingTag();
	struct FGameplayTag DeathDeadTag();
	struct FGameplayTag DeathChoosingRespawnPointTag();
};

// 0x20 (0x660 - 0x640)
// Class NWX.NWXStaticMeshComponent
class UNWXStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct FGameplayTagContainer                 MeshTags;                                          // 0x640(0x20)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXStaticMeshComponent* GetDefaultObj();

};

// 0x200 (0x2A0 - 0xA0)
// Class NWX.NWXStatRecorderComponent
class UNWXStatRecorderComponent : public UActorComponent
{
public:
	bool                                         AutoShowProfileStats;                              // 0xA0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9698[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        ProfilesToRecord;                                  // 0xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         SendHitchDetection;                                // 0xC1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9699[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinNumberOfPlayerRequiredToStartRecordingPerFrameProfiles; // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         DumpActorMemory;                                   // 0xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_969B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxNumberOfProfilesRecorded;                       // 0xCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_969C[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRecordPerformanceConfig              RPCPerfConfiguration;                              // 0x108(0x40)(Edit, NativeAccessSpecifierPrivate)
	bool                                         RecordNetprofile;                                  // 0x148(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_969D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRecordPerformanceConfig              PerFramePerfConfiguration;                         // 0x150(0x40)(Edit, NativeAccessSpecifierPrivate)
	uint8                                        Pad_969E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         PrintDetailedDebugInfo;                            // 0x191(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_969F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRecordPerformanceConfig              DumpActorAndUobjectCountConfiguration;             // 0x198(0x40)(Edit, NativeAccessSpecifierPrivate)
	struct FRecordPerformanceConfig              FPSPerformanceConfiguration;                       // 0x1D8(0x40)(Edit, NativeAccessSpecifierPrivate)
	int32                                        MemoryReportThreshold;                             // 0x218(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_96A0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRecordPerformanceConfig              CheckMemoryUsageConfiguration;                     // 0x220(0x40)(Edit, NativeAccessSpecifierPrivate)
	struct FRecordPerformanceConfig              MemoryReportConfiguration;                         // 0x260(0x40)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXStatRecorderComponent* GetDefaultObj();

};

// 0x100 (0x3C8 - 0x2C8)
// Class NWX.NWXStatsPerformanceTest
class ANWXStatsPerformanceTest : public ANWXPerformanceTest
{
public:
	TArray<class FString>                        StatCommands;                                      // 0x2C8(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          StatGroups;                                        // 0x2D8(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bWriteToCsvFile;                                   // 0x2E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPrintToConsole;                                   // 0x2E9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96A2[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class FName>                            TrackedStats;                                      // 0x2F0(0x50)(Edit, Protected, NativeAccessSpecifierProtected)
	class FString                                DataPrefix;                                        // 0x340(0x10)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96A3[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXStatsPerformanceTest* GetDefaultObj();

	void TriggerInEditor();
};

// 0xA0 (0x140 - 0xA0)
// Class NWX.NWXStatusEffectComponent
class UNWXStatusEffectComponent : public UActorComponent
{
public:
	uint8                                        Pad_96A4[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FStatusEffectHandle, struct FStatusEffectInstance> StatusEffectInstances;                             // 0xE8(0x50)(NativeAccessSpecifierPrivate)
	class UNWXAbilitySystemComponent*            AbilitySystemComponent;                            // 0x138(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXStatusEffectComponent* GetDefaultObj();

};

// 0x398 (0x6E0 - 0x348)
// Class NWX.NWXStoragePanelWidget
class UNWXStoragePanelWidget : public UNWXCommonUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnEntryHovered;                                    // 0x348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSelectedEntryUpdated;                            // 0x358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntryDoubleClicked;                              // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStoragePanelSortOrderUpdated;                    // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPanelUpdated;                                    // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UNWXGenericContainerWidget*            GenericContainer;                                  // 0x398(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IItemContainer>       Container;                                         // 0x3A0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntryConfirmButton;                              // 0x3B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntryTopButton;                                  // 0x3C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEntryLeftButton;                                 // 0x3D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                         ShowWeightCounter;                                 // 0x3E0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96AF[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       SelectedEntry;                                     // 0x3F0(0x2F0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXStoragePanelWidget* GetDefaultObj();

	void UpdateSelectedWidgetCosmetic();
	void UpdateSelectedEntry(struct FInventoryEntry& InventoryEntry);
	void SetGenericContainer(class UNWXGenericContainerWidget* NewGenericContainer);
	void OnInitialize(class FText& PanelLabel);
	void InitializePanel(TScriptInterface<class IItemContainer>& ItemContainer, const struct FGenericContainerCosmeticSettings& CosmeticSettings, bool ShouldShowWeightCounter, class FText& PanelLabel);
	struct FInventoryEntry GetSelectedEntry();
	class FText GetGroupNameForEntry(struct FInventoryEntry& Entry);
	bool CanAcceptEntry(struct FInventoryEntry& Entry);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXStringFunctionLibrary
class UNWXStringFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXStringFunctionLibrary* GetDefaultObj();

	class FString GetStringWithOutMarkUp(const class FString& SourceString);
	TArray<class FString> GetCharacterArrayFromStringIncRichTextTags(const class FString& SourceString);
};

// 0x148 (0x4A0 - 0x358)
// Class NWX.NWXStructure
class ANWXStructure : public ANWXActor
{
public:
	uint8                                        Pad_96B4[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnStructureStateUpdated;                           // 0x3E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EStructureState                   CurrentStructureState;                             // 0x3F0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStructureOriginatorType          OriginatorType;                                    // 0x3F1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96B5[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UStructureStateObject>   StructureStateObjectClass;                         // 0x3F8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerOwnershipComponent*             PlayerOwnershipComponent;                          // 0x420(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAddResourcesComponent*                ConstructionResourcesComponent;                    // 0x428(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAddResourcesComponent*                PostConstructionResourcesComponent;                // 0x430(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96B6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 UniqueID;                                          // 0x440(0x10)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                 ServerOnly_RuntimeGameplayTags;                    // 0x450(0x20)(SaveGame, NativeAccessSpecifierPrivate)
	class UStructureEventsObject*                EventsObject;                                      // 0x470(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureUIObject*                    UIObject;                                          // 0x478(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        ServerBlockingQueryCount;                          // 0x480(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_96B7[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStructureExperienceStateComponent*    StructureCreatedStateComponent;                    // 0x498(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXStructure* GetDefaultObj();

	void SetStructureWorldTransform(struct FTransform& Transform, bool bTeleport);
	bool ServerOnly_GetIsRestoredFromPersistence();
	void OnResourceUpdated();
	void OnRep_CurrentStructureState();
	struct FTransform GetStructureWorldTransform();
};

// 0x90 (0x4A0 - 0x410)
// Class NWX.NWXStructureAnimInstance
class UNWXStructureAnimInstance : public UNWXAnimInstance
{
public:
	class UObject*                               StructureOwner;                                    // 0x410(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStructureFXActivationTime        ActivationTime;                                    // 0x418(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96B8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, class UStructureAnimationDataAsset*> StructureAnimationDAs;                             // 0x420(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UStructureAnimationDataAsset*          SelectedAnimDA;                                    // 0x470(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    ActiveStateSequence;                               // 0x478(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    IdleStateSequence;                                 // 0x488(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_96B9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXStructureAnimInstance* GetDefaultObj();

	void UpdateActivationTime(enum class EStructureFXActivationTime NewActivationTime);
	void SetStructureOwner(class UObject* Structure);
	void InitializeDataAssetCache(class FName& Key);
};

// 0x10 (0x2B0 - 0x2A0)
// Class NWX.NWXStructureBuilder
class ANWXStructureBuilder : public AActor
{
public:
	uint8                                        Pad_96BA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         StructureBuilderAwaiter;                           // 0x2A8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXStructureBuilder* GetDefaultObj();

	void MarkStructureBuilderReady();
	void DevOnly_ProcessAllLevelProxyActors();
};

// 0x18 (0x2B8 - 0x2A0)
// Class NWX.NWXStructurePartProxyActor
class ANWXStructurePartProxyActor : public AActor
{
public:
	enum class EProxyStructureState              InitialState;                                      // 0x2A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStructureHealthMode              HealthMode;                                        // 0x2A1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96BB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNWXStructurePartProxyComponent*       ProxyComponent;                                    // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXStructure*                         NWXStructure;                                      // 0x2B0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ANWXStructurePartProxyActor* GetDefaultObj();

	void SetStructure(class ANWXStructure* Structure);
	enum class EStructureState GetStructureSpawnState();
	void GetStructure(class ANWXStructure** Structure);
};

// 0x48 (0x2F0 - 0x2A8)
// Class NWX.NWXStructurePartProxyComponent
class UNWXStructurePartProxyComponent : public USceneComponent
{
public:
	TSoftObjectPtr<class UStructureDataAsset>    StructureAsset;                                    // 0x2A8(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStructurePartInitialData             InitialData;                                       // 0x2D0(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_96BC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXStructurePartProxyComponent* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXStructureToAssociatedRecipesRelationsTracker
class UNWXStructureToAssociatedRecipesRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXStructureToAssociatedRecipesRelationsTracker* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.NWXStructureToUnlockedRecipesRelationsTracker
class UNWXStructureToUnlockedRecipesRelationsTracker : public UNWXMenuDataEntryRelationsTracker
{
public:

	static class UClass* StaticClass();
	static class UNWXStructureToUnlockedRecipesRelationsTracker* GetDefaultObj();

};

// 0x418 (0x8D0 - 0x4B8)
// Class NWX.NWXStructureTraitsScreenWidget
class UNWXStructureTraitsScreenWidget : public UNWXCommonWindowWidget
{
public:
	class UObject*                               Structure;                                         // 0x4B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStructureData                        StructureData;                                     // 0x4C0(0x3E0)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                  StructureName;                                     // 0x8A0(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FStructureTrait>               ActiveTraits;                                      // 0x8B8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_96BE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXStructureTraitsScreenWidget* GetDefaultObj();

};

// 0x38 (0x4F0 - 0x4B8)
// Class NWX.NWXStructureTransfer
class UNWXStructureTransfer : public UNWXCommonWindowWidget
{
public:
	class AActor*                                StructureActor;                                    // 0x4B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96C2[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidget*                               SingleTransferButton;                              // 0x4D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                               BulkTransferButton;                                // 0x4D8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXStoragePanelWidget*                InventoryPanel;                                    // 0x4E0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                               FuelPanel;                                         // 0x4E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXStructureTransfer* GetDefaultObj();

	void UpdateCurrentlyRequiredItems();
	void UpdateButtonStatus();
	void SetStructureActor(class AActor* Actor);
	void SetInventoryPanel(class UNWXStoragePanelWidget* StoragePanel);
	void SetFuelPanel(class UWidget* NewFuelPanel);
	void SetButtonReferences(class UWidget* NewLeftButton, class UWidget* NewRightButton);
	void RemoveResourceFromStructure(struct FInventoryEntry& InventoryEntry);
	bool CanAddEntry(struct FInventoryEntry& InventoryEntry);
	void AddResourceToStructure(struct FInventoryEntry& InventoryEntry);
	void AddAllAvailableResourcesToStructure();
};

// 0x0 (0x348 - 0x348)
// Class NWX.NWXSubtitleDisplayWidget
class UNWXSubtitleDisplayWidget : public UNWXCommonUserWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXSubtitleDisplayWidget* GetDefaultObj();

	void UnbindFromSubtitleManager();
	void OnSubtitleManagerSet(class FText& InText);
	void OnSetSubtitleFromManager(class FText& InText);
};

// 0x4F0 (0x670 - 0x180)
// Class NWX.NWXSynth2DSlider
class UNWXSynth2DSlider : public UWidget
{
public:
	float                                        ValueX;                                            // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ValueY;                                            // 0x184(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FDelegateProperty_                           ValueXDelegate;                                    // 0x188(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FDelegateProperty_                           ValueYDelegate;                                    // 0x198(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96C4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FNWXSynth2DSliderStyle                WidgetStyle;                                       // 0x1B0(0x430)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                          SliderHandleColor;                                 // 0x5E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IndentHandle;                                      // 0x5F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         Locked;                                            // 0x5F1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96C5[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StepSize;                                          // 0x5F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GamepadMultiplier;                                 // 0x5F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsFocusable;                                       // 0x5FC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96C6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMouseCaptureBegin;                               // 0x600(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMouseCaptureEnd;                                 // 0x610(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnControllerCaptureBegin;                          // 0x620(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnControllerCaptureEnd;                            // 0x630(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnValueChangedX;                                   // 0x640(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnValueChangedY;                                   // 0x650(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_96C7[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSynth2DSlider* GetDefaultObj();

	void SetValue(const struct FVector2D& InValue);
	void SetStepSize(float InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetLocked(bool InValue);
	void SetIndentHandle(bool InValue);
	void SetForceCheckGamepadInput(bool bForceCheck);
	void SetControllerCapture(bool bShouldCapture);
	struct FVector2D GetValue();
};

// 0x4D8 (0x508 - 0x30)
// Class NWX.NWXTechTreeCacheAsset
class UNWXTechTreeCacheAsset : public UDataAsset
{
public:
	bool                                         IsTechTreeCacheInitialized;                        // 0x30(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_96C8[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGuid, struct FGuid>             CRAToResultItem;                                   // 0x48(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuidArrayWithQuantity> CRARequirements;                                   // 0x98(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuidArray>        ItemToCRAProducing;                                // 0xE8(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuidArray>        ICDAToITM;                                         // 0x138(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuidArray>        ITMToICDA;                                         // 0x188(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FGuidArrayWithQuantity> SDAToICDAs;                                        // 0x1D8(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class UItemConstraintDataAsset*> AllICDAs;                                          // 0x228(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           RawResourceITMs;                                   // 0x278(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           ICDAsSatisfiedByRawResource;                       // 0x2C8(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           CurrencyITMs;                                      // 0x318(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           ICDAsSatisfiedByCurrency;                          // 0x368(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           ToolITMs;                                          // 0x3B8(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           ICDAsSatisfiedByTool;                              // 0x408(0x50)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                           CRAsThatDoesNotRequireSDA;                         // 0x458(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FSKAChildrenArray> SKAChildren;                                       // 0x4A8(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_96C9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXTechTreeCacheAsset* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class NWX.NWXTechTreeSubSystem
class UNWXTechTreeSubSystem : public UNWXGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UNWXTechTreeCacheAsset> TechTreeCacheAssetPtr;                             // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXTechTreeCacheAsset*                TechTreeCacheDA;                                   // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_96CA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXTechTreeSubSystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTelemetryBlueprintLibrary
class UNWXTelemetryBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTelemetryBlueprintLibrary* GetDefaultObj();

	void TelemetrySystem_DriversOutOfDate();
	void TelemetryMovement_PlayerHeartbeat(class APlayerState* PlayerState);
	void TelemetryLogin_ReportPlatformSignin(const class FString& AccountId, enum class ELoginPlatform Platform);
	void TelemetryGameplay_RewardGranted(class APlayerState* PlayerState, const class FString& RewardType, const class FString& RewardAssetName, const class FString& RewardAssetId, const class FString& ExtraRewardData, class UObject* SenderContextObject);
	void TelemetryGameplay_PlayerKilledCreature(class AActor* PlayerActor, class AActor* CreatureActor);
	void TelemetryGameplay_PlayerDied(class UDeathBehaviour* DeathBehaviour);
	void TelemetryGameplay_ItemStored(class AActor* StoringActor, class AActor* ReceiverActor, struct FInventoryEntry& Item);
	void TelemetryGameplay_ItemProxyTimeout(class AItemProxyBase* Proxy);
	void TelemetryGameplay_ItemProxySpawned(class AItemProxyBase* Proxy, class UObject* SourceObject);
	void TelemetryGameplay_ItemClaimed(class AActor* ClaimActor, const class FString& ClaimTarget, class UObject* ItemSource, struct FInventoryEntry& Item);
	void TelemetryGameplay_ConsumeFood(class ANWXPlayerState* PlayerState, struct FInventoryEntry& FoodItem);
	void TelemetryCurrencyProxy(class ANWXPlayerState* PS, struct FInventoryEntry& EssenceProxy);
	void TelemetryCurrencyChange(class ANWXPlayerState* PS, bool IsSink, const class FString& CurrencyChangeEvent, int32 T0Delta, int32 T1Delta, int32 T2Delta, int32 T3Delta);
	void TelemetryCrafting_SpellApplied(class ANWXPlayerState* PlayerState, struct FInventoryEntry& PlayerEquipment, struct FInventoryEntry& AppliedSpell, struct FInventoryEntry& PreviousSpell);
	void TelemetryCrafting_PerkApplied(class ANWXPlayerState* PlayerState, struct FInventoryEntry& PlayerEquipment, struct FInventoryEntry& AppliedPerk, struct FInventoryEntry& PreviousPerk);
	void TelemetryCrafting_InfusionApplied(class ANWXPlayerState* PlayerState, struct FInventoryEntry& PlayerEquipment, struct FInventoryEntry& AppliedInfusion, struct FInventoryEntry& PreviousInfusion);
	void TelemetryConnection_PlayerDisconnectedFromServer(class APlayerState* PlayerState);
	void TelemetryConnection_PlayerConnectedToServer(class APlayerState* PlayerState);
	void TelemetryClient_ReportPerformanceHeartbeat(const class FString& ProfileId, float Ping, float FrameTime, const class FString& Deployment, const class FString& Map);
	void TelemetryClient_ReportFpsTest(float LocationX, float LocationY, float LocationHeight, float AnglePitch, float AngleYaw, float AngleRoll, const class FString& MapName, float FrameTime, const class FString& ImageResolution, const class FString& TestRunId, struct FDateTime& TestRunStartTime);
	void ReportWorldEventWithAttributes(const class FString& EventName, enum class EMetricsClass MetricsClass, class UObject* WorldContextObject, TArray<struct FMetricsEventAttr>& Attributes, bool OverrideClientGuard);
	void ReportWorldEvent(const class FString& EventName, enum class EMetricsClass MetricsClass, class UObject* WorldContextObject, bool OverrideClientGuard);
	void ReportSimpleEvent(const class FString& EventName, enum class EMetricsClass MetricsClass);
	void ReportPlayerWorldEventWithAttributes(const class FString& EventName, enum class EMetricsClass MetricsClass, class ANWXPlayerState* PlayerState, TArray<struct FMetricsEventAttr>& Attributes, bool OverrideClientGuard);
	void ReportPlayerWorldEvent(const class FString& EventName, enum class EMetricsClass MetricsClass, class ANWXPlayerState* PlayerState, bool OverrideClientGuard);
	void MakeEventRealtime(TArray<struct FMetricsEventAttr>* Attributes);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTelemetryCreaturesLibrary
class UNWXTelemetryCreaturesLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTelemetryCreaturesLibrary* GetDefaultObj();

	void Telemetry_NPCRecruitedEvent(class AActor* RecruitedNPC, class AActor* Recruiter);
	void Telemetry_NPCDismissedEvent(class AActor* RecruitedNPC, class AActor* Recruiter);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTelemetryStructuresLibrary
class UNWXTelemetryStructuresLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTelemetryStructuresLibrary* GetDefaultObj();

	void Telemetry_StructureDestroyedEvent(class UObject* DestructionSource, class UObject* Structure);
	void Telemetry_StructureDeconstructedEvent(class UObject* Structure, class APlayerState* PlayerState);
	void Telemetry_StructureDamagedEvent(class UObject* DamageSource, class UObject* Structure, float Damage, struct FGameplayTagContainer& EffectTags, struct FHitResult& HitResult);
	void Telemetry_EstateOnPlayerToggleEnterEvent(class UObject* Object, class UStructureTraitAuraComponent* Aura, bool bOnEnter);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTelemetryUtilityBlueprintLibrary
class UNWXTelemetryUtilityBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTelemetryUtilityBlueprintLibrary* GetDefaultObj();

	void TelemetryUtility_GetInteractableName(class UObject* InteractableObject, class FString* OutInteractableName);
	bool AugmentWithItemEntryAttribute(struct FInventoryEntry& Item, TArray<struct FMetricsEventAttr>& InArray, const class FString& AttributeName);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTestingBlueprintLibrary
class UNWXTestingBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTestingBlueprintLibrary* GetDefaultObj();

	float TESTONLY_GetMaxSpeedInMontage(class UAnimMontage* Montage);
	void GetAllSubclasses(class UClass* ParentClass, TArray<TSoftClassPtr<class UObject>>& Subclasses, const class FString& SearchPath);
};

// 0x220 (0x6F0 - 0x4D0)
// Class NWX.NWXThirdPersonAnimInstance
class UNWXThirdPersonAnimInstance : public UNWXPlayerAnimInstance
{
public:
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0x4D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                World;                                             // 0x4D8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               MovementInput;                                     // 0x4E0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETraceTypeQuery                   IKTraceChannel;                                    // 0x4F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96EC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FootLockLAlpha;                                    // 0x4FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FootLockRAlpha;                                    // 0x500(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96ED[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FootLockLLocation;                                 // 0x508(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               FootLockRLocation;                                 // 0x520(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              FootLockLRotation;                                 // 0x538(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                              FootLockRRotation;                                 // 0x550(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                               FootOffsetLTarget;                                 // 0x568(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               FootOffsetLLocation;                               // 0x580(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              FootOffsetLRotation;                               // 0x598(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                               FootOffsetRTarget;                                 // 0x5B0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               FootOffsetRLocation;                               // 0x5C8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              FootOffsetRRotation;                               // 0x5E0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        IKTraceDistanceAboveFoot;                          // 0x5F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IKTraceDistanceBelowFoot;                          // 0x5FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FootHeight;                                        // 0x600(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PelvisAlpha;                                       // 0x604(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PelvisOffset;                                      // 0x608(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GroundAngleFB;                                     // 0x620(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GroundAngleLR;                                     // 0x624(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnAlertnessLevelChanged;                           // 0x628(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	double                                       RALSSpeed;                                         // 0x638(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         RALSIsMoving;                                      // 0x640(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         HasMovementInput;                                  // 0x641(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96F0[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              AimingRotation;                                    // 0x648(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        AimYawRate;                                        // 0x660(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96F1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           StrideBlendNWalk;                                  // 0x668(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           StrideBlendNRun;                                   // 0x670(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WalkStride;                                        // 0x678(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RunStride;                                         // 0x67C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WalkPlayRate;                                      // 0x680(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RunPlayRate;                                       // 0x684(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AnimatedWalkSpeed;                                 // 0x688(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AnimatedRunSpeed;                                  // 0x68C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               EyeOffset;                                         // 0x690(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               EyeScale;                                          // 0x6A8(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinLocoPlayRate;                                   // 0x6C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxLocoPlayRate;                                   // 0x6C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96F3[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXThirdPersonAnimInstance* GetDefaultObj();

};

// 0x1D0 (0x5E0 - 0x410)
// Class NWX.NWXTitleScreenAnimInstance
class UNWXTitleScreenAnimInstance : public UNWXAnimInstance
{
public:
	uint8                                        Pad_96F5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, class UTitleScreenAnimationDataAsset*> TitleScreenAnimationDAs;                           // 0x418(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTitleScreenAnimationDataAsset*        SelectedDA;                                        // 0x468(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SittingIdle;                                       // 0x470(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    StandingIdleClose;                                 // 0x480(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    StandingIdleFar;                                   // 0x490(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FaceMouth;                                         // 0x4A0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FaceMouthTeeth;                                    // 0x4B0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FaceEye;                                           // 0x4C0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FaceEyeBrow;                                       // 0x4D0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FaceEyeLash;                                       // 0x4E0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    HandNail;                                          // 0x4F0(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SittingToStanding;                                 // 0x500(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    SittingToStandingFast;                             // 0x510(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    StandingToSitting;                                 // 0x520(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    StandingToSittingFast;                             // 0x530(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimSequenceCache                    FinalAnim;                                         // 0x540(0x10)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMap<enum class ERealmDifficulty, struct FAnimSequenceCache> GearEquipAnimations;                               // 0x550(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                               EyeOffset;                                         // 0x5A0(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               EyeScale;                                          // 0x5B8(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EBodyType                         BodyType;                                          // 0x5D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_96F7[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXTitleScreenAnimInstance* GetDefaultObj();

};

// 0xB8 (0x2E0 - 0x228)
// Class NWX.NWXTowerActionStationComponent
class UNWXTowerActionStationComponent : public UNWXActionStationComponentV2
{
public:
	TMap<int32, class UAnimSequence*>            PositionToAnimPos;                                 // 0x228(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                  VisionSyncBone;                                    // 0x278(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PeripheralVisionAngleDegrees;                      // 0x280(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SightRadiusSq;                                     // 0x284(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_96FA[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXTowerActionStationComponent* GetDefaultObj();

	int32 GetMostVisiblePosition(TArray<class AActor*>& ActorsToSee);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTraceLibrary
class UNWXTraceLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXTraceLibrary* GetDefaultObj();

	struct FHitResult ResolveHitResult(struct FHitResult& InitialResult, bool bBypassInstanceResolution);
	void OverwriteTraceLine(struct FHitResult& HitResult, struct FVector& Start, struct FVector& End);
	void OverwriteImpactLocation(struct FHitResult& HitResult, struct FVector& Impact);
	bool NWXSphereOverlapActors(class UObject* WorldContextObject, struct FVector& SpherePos, float SphereRadius, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class UObject*>& ObjectsToIgnore, TArray<struct FOverlapResultWraper>* OutOverlaps, bool bBypassInstanceResolution);
	bool NWXMultiSphereTraceByChannel(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXLineTraceSingle(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXLineTraceMultiForObjects(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXLineTraceMulti(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXCapsuleTraceSingle(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXCapsuleTraceMulti(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXBoxTraceMultiForObjects(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, struct FVector& HalfSize, struct FRotator& Orientation, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXBoxTraceMulti(class UObject* WorldContextObject, struct FVector& Start, struct FVector& End, struct FVector& HalfSize, struct FRotator& Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class UObject*>& ObjectsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, struct FLinearColor& TraceColor, struct FLinearColor& TraceHitColor, float DrawTime, bool bBypassInstanceResolution);
	bool NWXBoxOverlapActors(class UObject* WorldContextObject, struct FVector& BoxPosition, struct FRotator& BoxRotation, struct FVector& BoxHalfExtent, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class UObject*>& ObjectsToIgnore, TArray<struct FOverlapResultWraper>* OutOverlaps, bool bBypassInstanceResolution);
	bool IsComponentEncroachingBlockingGeometry(class UPrimitiveComponent* PrimComp, TArray<class UObject*>& IgnoreObjects, TArray<struct FOverlapResultWraper>* OutOverlaps, class FName& TraceTag, bool bBypassInstanceResolution);
	void IsBlockingHit(struct FOverlapResultWraper& OverlapResultWrapper, bool* bIsBlockingHit);
	void GetItemIndex(struct FOverlapResultWraper& OverlapResultWrapper, int32* OutIndex);
	void GetHitObjectFromOverlap(struct FOverlapResultWraper& OverlapResultWrapper, class UObject** OutObject, bool bBypassInstanceResolution);
	void GetHitObject(struct FHitResult& HitResult, TSubclassOf<class UObject> ObjectClass, class UObject** OutObject, bool bBypassInstanceResolution);
	void GetComponent(struct FOverlapResultWraper& OverlapResultWrapper, class UPrimitiveComponent** OutComponent);
	TArray<struct FHitResult> GetClosestHitResultForEachHitActor(TArray<struct FHitResult>& HitResults);
	void GetActor(struct FOverlapResultWraper& OverlapResultWrapper, class AActor** OutActor);
};

// 0x288 (0x328 - 0xA0)
// Class NWX.NWXTraversalComponent
class UNWXTraversalComponent : public UActorComponent
{
public:
	uint8                                        Pad_9751[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         TraversalEnabled;                                  // 0xC0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9752[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IntentHalfAngleDegrees;                            // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedAdjustment;                                // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9753[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 SprintingGameplayTag;                              // 0xD0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 BlockingGameplayTags;                              // 0xF0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        TotalWhiskers;                                     // 0x110(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WhiskerTraceLengthGround;                          // 0x114(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WhiskerTraceLengthAir;                             // 0x118(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WhiskerCapsuleRadius;                              // 0x11C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WhiskerTraceHeight;                                // 0x120(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxVaultHeight;                                    // 0x124(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MantleMidHeight;                                   // 0x128(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxMantleHeight;                                   // 0x12C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VaultHeightThreshold;                              // 0x130(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VaultLandingHeightThreshold;                       // 0x134(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxVaultingWidth;                                  // 0x138(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MantleAdjustedHeightThreshold;                     // 0x13C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StaggerRatioAlpha;                                 // 0x140(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9755[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 LerpBlockingTags;                                  // 0x148(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                        WallAngleMin;                                      // 0x168(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WallAngleMax;                                      // 0x16C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinClimbingWallAngle;                              // 0x170(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxClimbingWallAngle;                              // 0x174(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WallClimbMoveLookAhead;                            // 0x178(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9757[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 ClimbingGameplayTag;                               // 0x180(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                        WallAlignmentRotationRate;                         // 0x1A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WallAlignmentForwardSearchDistance;                // 0x1A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LocalSpaceVelocityExitMoveThreshold;               // 0x1A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CanMoveInDirectionMoveThreshold;                   // 0x1AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CanMoveInDirectionSphereSweepRadius;               // 0x1B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CheckForExitsRaycastDistance;                      // 0x1B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExitUpwardsForwardCheckOffset;                     // 0x1B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CheckForExitsSphereSweepRadius;                    // 0x1BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AttachedToWallCheckSphereRadius;                   // 0x1C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ModifyCapsuleWhileClimbing;                        // 0x1C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsClimbing;                                        // 0x1C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 TraversalTraceChannel;                             // 0x1C6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9758[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TotalVerticalTraces;                               // 0x1C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialVerticalForwardOffset;                      // 0x1CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalTraceDownwardsDistance;                    // 0x1D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalTraceCapsuleRadius;                        // 0x1D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            TransitionDataTable;                               // 0x1D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StopMontageBlendOutTime;                           // 0x1E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9759[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               EyeOffset;                                         // 0x1E8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BodyOffset;                                        // 0x200(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               FeetOffset;                                        // 0x218(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartLerpDelegate;                               // 0x230(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndLerpDelegate;                                 // 0x240(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_975A[0xD8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXTraversalComponent* GetDefaultObj();

	bool TraversalTrace(struct FVector& StartLocation, struct FVector& Direction, struct FTraversalTraceResult* OutResult);
	void SetTraversalEnabled(bool Enabled);
	bool IsValidClimbAngle(struct FVector& WallNormal, bool bCheckMinAngle);
	bool IsStillOnClimbableSurface(struct FRotator& WallAlignRotation);
	bool CanMoveInDirectionLocalSpace(struct FVector& Direction, struct FRotator& WallAlignment);
	bool CanExitUp(struct FRotator& ForwardRotation, struct FVector* OutLocation);
	bool CanExitDown(struct FRotator& ForwardRotation, struct FVector* OutLocation);
};

// 0xC0 (0x4F0 - 0x430)
// Class NWX.NWXTreeTrunkGeometryCollection
class ANWXTreeTrunkGeometryCollection : public ANWXGeometryCollection
{
public:
	uint8                                        Pad_975F[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageMultiplier;                                  // 0x450(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ImpulseMultiplier;                                 // 0x454(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnchorWidthPercentage;                             // 0x458(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnchorHeightPercentage;                            // 0x45C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TrunkDamageThreshold;                              // 0x460(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9760[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ImpulseRange;                                      // 0x468(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           PowerLevelRatioCurve;                              // 0x480(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EResourceType                     ResourceType;                                      // 0x488(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9761[0x47];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UItemReward*                           ItemReward;                                        // 0x4D0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9762[0x11];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsFalling;                                        // 0x4E9(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9763[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXTreeTrunkGeometryCollection* GetDefaultObj();

	void SetResourceData(struct FResourceData& InResourceData);
	TSoftObjectPtr<class UTexture2D> GetResourceVulnerabilityIcon();
	bool GetPowerLevel_Implementation(struct FPowerLevel* OutPowerLevel);
	bool GetIsFalling();
};

// 0x8 (0x358 - 0x350)
// Class NWX.NWXTutorialPlayerStart
class ANWXTutorialPlayerStart : public ANWXPlayerStart
{
public:
	bool                                         bSpawnPointIsValid;                                // 0x350(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasPendingPlayer;                                 // 0x351(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9766[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXTutorialPlayerStart* GetDefaultObj();

	void MarkAsHasPendingPlayer();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXTutorialStrategy
class UNWXTutorialStrategy : public UAbstractPlayerStartStrategy
{
public:

	static class UClass* StaticClass();
	static class UNWXTutorialStrategy* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class NWX.NWXTwoInventories
class UNWXTwoInventories : public UNWXCommonWindowWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXTwoInventories* GetDefaultObj();

	void UpdateButtonStatus(class UWidget* LeftButton, class UWidget* RightButton, class UNWXStoragePanelWidget* SourcePanel, class UNWXStoragePanelWidget* TargetPanel);
	void TransferItem(struct FInventoryEntry& InventoryEntry, class UNWXStoragePanelWidget* SourcePanel, class UNWXStoragePanelWidget* TargetPanel);
	void MoveItemToPanel(struct FInventoryEntry& InventoryEntry, class UNWXStoragePanelWidget* SourcePanel, class UNWXStoragePanelWidget* TargetPanel);
	void BulkTransferItems(class UNWXStoragePanelWidget* SourcePanel, class UNWXStoragePanelWidget* TargetPanel);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXUIFunctionLibrary
class UNWXUIFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXUIFunctionLibrary* GetDefaultObj();

	void SetInputModeAndCursorVisibility(class UObject* WorldContextObject, enum class EInputMode InputMode, class UWidget* InWidgetToFocus);
	float RoundFloatToSingleDecimal(float ValueToRound);
	void PopAllContentInLayers(class APlayerController* PlayerController, const TArray<struct FGameplayTag>& Layers);
	void OpenNWXWindow(class APlayerController* OwningPlayer, int32 ZOrder, class UNWXWindowWidget* Window);
	bool IsUsingGamepad(class UUserWidget* InWorldContext);
	bool IsOnXboxSeries();
	bool IsOnPlaystation5();
	bool IsOnConsolePlatform();
	class ANWXPlayerState* GetOwningPlayerState(class UUserWidget* InWorldContext);
	class ANWXPlayerController* GetOwningPlayerController(class UUserWidget* InWorldContext);
	class UNWXLocalPlayer* GetOwningLocalPlayer(class UUserWidget* InWorldContext);
	class ANWXCommonHUDBase* GetNWXCommonHUDBase(class ANWXPlayerController* PlayerController);
	class UNWXMenuDataComponent* GetMenuDataComponent(class APlayerController* OwningPlayer);
	struct FVector2D GetLocalPositionWithinReferenceWidget(class UWidget* WidgetToTrack, class UWidget* FrameOfReferenceWidget, struct FVector2D& RelativeSubLocation);
	class FString GetHMSFormattedTime(float TotalSeconds);
	enum class EFocusCause GetFocusCause(struct FFocusEvent& FocusEvent);
	bool GetErrorNotificationFromGameplayTagContainer(struct FGameplayTagContainer& Tags, class FText* ErrorNotification);
	TArray<struct FGameplayTag> GetAllLayerTags();
	class UNWXCommonWindowWidget* GetActiveWindowInLayer(class APlayerController* PlayerController, const struct FGameplayTag& LayerName);
	void GetActiveKeysFromInputAction(class UInputAction* InputAction, class ULocalPlayer* LocalPlayer, TArray<struct FKey>* OutKeys);
	class UNWXCommonWindowWidget* FindWindowInLayers(class APlayerController* PlayerController, const TArray<struct FGameplayTag>& Layers, TSubclassOf<class UNWXCommonWindowWidget> WindowClass);
	class UNWXWindowWidget* CreateNWXWindow(TSubclassOf<class UUserWidget> WidgetType, class APlayerController* OwningPlayer);
	void CollapseWidgetIfOnConsolePlatform(class UUserWidget* WidgetToHide);
	void CenterMouseOnScreen(class UUserWidget* InWorldContext);
	void BroadcastUIEvent(class UCommonUserWidget* InWorldContext, struct FGameplayTag& InEventTag);
};

// 0x50 (0x80 - 0x30)
// Class NWX.NWXUIGroupInfoMappingAsset
class UNWXUIGroupInfoMappingAsset : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FUIGroupInfo> UIGroupInfoCache;                                  // 0x30(0x50)(Edit, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXUIGroupInfoMappingAsset* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class NWX.NWXUIGroupInfoSubsystem
class UNWXUIGroupInfoSubsystem : public UGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UNWXUIGroupInfoMappingAsset> UIGroupInfoMappingAssetPtr;                        // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXUIGroupInfoMappingAsset*           UIGroupInfoMappingAsset;                           // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXUIGroupInfoSubsystem* GetDefaultObj();

};

// 0x458 (0x488 - 0x30)
// Class NWX.NWXUILoginSubsystem
class UNWXUILoginSubsystem : public UNWXGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnUILoginStateChangedEvent;                        // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9784[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DebugTargetDeploymentName;                         // 0x58(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDebugTargetSanctuary;                             // 0x68(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9786[0x407];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class ULoadingProcessTask*                   LoadingProcessTask;                                // 0x470(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9787[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXUILoginSubsystem* GetDefaultObj();

	bool TrySignin();
	bool TryPlayerProfileLogin(struct FSelectableProfile& Profile);
	bool TryPlayerProfileCreate(struct FCreateProfile& Profile);
	bool TryFetchProfiles(const class FString& ShardId);
	bool TryFetchDeployments();
	bool TryBootstrapDeploymentToRespite();
	bool TryBootstrapDefaultDeployment();
	bool TryAcceptEula();
	bool ReadyToTravel();
	void OnLoginPlayerWithProfileComplete(struct FOnlineServiceStatus& Status);
	void OnFetchProfilesComplete(TArray<struct FSelectableProfile>& Profiles, struct FOnlineServiceStatus& Status);
	void OnCreateProfileComplete(struct FSelectableProfile& Profile, struct FOnlineServiceStatus& Status);
	bool IsPlayerLoggedIn();
	bool IsBootstrappedDeploymentRespite(struct FSelectableProfile& Profile);
	bool HasSupportPermissions();
	struct FUILoginInfo GetInfo();
	bool AutoLogin();
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.NWXUserSettingsComponent
class UNWXUserSettingsComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UNWXUserSettingsComponent* GetDefaultObj();

};

// 0x30 (0x370 - 0x340)
// Class NWX.NWXVerticalAutoScrollingTextWidget
class UNWXVerticalAutoScrollingTextWidget : public UNWXUserWidget
{
public:
	TSubclassOf<class UCommonTextScrollStyle>    ScrollStyle;                                       // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                      TextBlock;                                         // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                            ScrollBox;                                         // 0x350(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9789[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCommonTextScrollStyle*                TextScrollStyle;                                   // 0x368(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXVerticalAutoScrollingTextWidget* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXVisualLoggerLibrary
class UNWXVisualLoggerLibrary : public UVisualLoggerKismetLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXVisualLoggerLibrary* GetDefaultObj();

	void LogCylinder(class UObject* WorldContextObject, struct FVector& StartLocation, struct FVector& EndLocation, float Radius, const struct FColor& ObjectColor, class FName CategoryName, const class FString& Message, bool bAddToMessageLog);
	void LogCone(class UObject* WorldContextObject, struct FVector& OriginPoint, struct FVector& ConeDirection, float ConeLength, float ConeAngleInDegrees, const struct FColor& ObjectColor, class FName CategoryName, const class FString& Message, bool bAddToMessageLog);
	void LogCapsule(class UObject* WorldContextObject, struct FVector& Center, float HalfHeight, float Radius, struct FRotator& Rotator, const struct FColor& ObjectColor, class FName CategoryName, const class FString& Message, bool bAddToMessageLog);
};

// 0x18 (0x360 - 0x348)
// Class NWX.NWXVoiceChatSpeakersWidget
class UNWXVoiceChatSpeakersWidget : public UNWXCommonUserWidget
{
public:
	uint8                                        Pad_9796[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            HandleVoiceChatEnabled;                            // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXVoiceChatSpeakersWidget* GetDefaultObj();

};

// 0x10 (0x700 - 0x6F0)
// Class NWX.NWXWidgetComponent
class UNWXWidgetComponent : public UWidgetComponent
{
public:
	TArray<class UVisibilityRule*>               VisibilityRules;                                   // 0x6F0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UNWXWidgetComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXWidgetEventGlobals
class UNWXWidgetEventGlobals : public UObject
{
public:

	static class UClass* StaticClass();
	static class UNWXWidgetEventGlobals* GetDefaultObj();

	struct FGameplayTag SelectedRightEventTag();
	struct FGameplayTag SelectedLeftEventTag();
	struct FGameplayTag SelectedEventTag();
	struct FGameplayTag OpenEventTag();
	struct FGameplayTag HoverStopEventTag();
	struct FGameplayTag HoverStartEventTag();
	struct FGameplayTag DropEventTag();
	struct FGameplayTag DragEventTag();
	struct FGameplayTag CloseEventTag();
};

// 0x80 (0x3C0 - 0x340)
// Class NWX.NWXWindowWidget
class UNWXWindowWidget : public UNWXUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnOpened;                                          // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClosed;                                          // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EInputMode                        DesiredInputMode;                                  // 0x360(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         CanInstantlySwitchFromWindow;                      // 0x361(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_979B[0x5E];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXWindowWidget* GetDefaultObj();

	void OnOpenTimerFinished();
	void OnInternalOpened();
	void OnInternalClosed();
	void OnCloseTimerFinished();
	class UWidgetAnimation* GetOpenAnimation();
	enum class EInputMode GetDesiredInputMode();
	class UWidgetAnimation* GetCloseAnimation();
	void Close();
};

// 0xD8 (0x598 - 0x4C0)
// Class NWX.NWXWorldSettings
class ANWXWorldSettings : public AWorldSettings
{
public:
	float                                        FlyingHeightOffset;                                // 0x4C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFreezeAI;                                         // 0x4C4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_979E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AInteractiveInstancedMeshManagerIndex* IIMManagerIndex;                                   // 0x4C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UAbstractPlayerStartStrategy>> PlayerStartStrategies;                             // 0x4D0(0x50)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	enum class EBiomeID                          BiomeId;                                           // 0x520(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IgnoreInfluence;                                   // 0x521(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97A0[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   TimeOfDayProfileOverride;                          // 0x528(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPOIData>                      POIData;                                           // 0x538(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNWXCharacterMovementSettings*         CharacterMovementSettings;                         // 0x548(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSocialRealm;                                    // 0x550(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97A1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UTemporalRealm>         TemporalRealmData;                                 // 0x558(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Ferocity;                                          // 0x580(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97A2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            CreatureBudgetOverride;                            // 0x588(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         TestRealm;                                         // 0x590(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97A3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANWXWorldSettings* GetDefaultObj();

	bool IsTestRealm();
	int32 GetFerocity();
	class UDataTable* GetCreatureBudgetOverride();
};

// 0x0 (0x340 - 0x340)
// Class NWX.NWXZoomablePannableWidget
class UNWXZoomablePannableWidget : public UNWXUserWidget
{
public:

	static class UClass* StaticClass();
	static class UNWXZoomablePannableWidget* GetDefaultObj();

};

// 0x6E0 (0x1650 - 0xF70)
// Class NWX.NWX_CharacterMovementComponent
class UNWX_CharacterMovementComponent : public UCharacterMovementComponent
{
public:
	bool                                         RegisterForAvoidance;                              // 0xF70(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97C7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FACANavAvoidanceData                  ACAAvoidanceData;                                  // 0xF78(0xA0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         ShowDebug;                                         // 0x1018(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShowRootMotionDebug;                               // 0x1019(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         UseACAAvoidanceForce;                              // 0x101A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97C8[0x1D];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bReturnToNavMesh;                                  // 0x1038(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EReturnToNavMeshPolicy            ReturnToNavPolicy;                                 // 0x1039(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97C9[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnFailedToReturnToNav;                             // 0x1040(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<float>                                ReturnToNavMeshSearchExtents;                      // 0x1050(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                        ReturnToNavTimeOutLimit;                           // 0x1060(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReturnToNavWalkableAngle;                          // 0x1064(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_97CA[0x9C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMovementSpeed                    DefaultMovementSpeed;                              // 0x1104(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97CB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EMovementSpeed, float>       MovementSpeedMap;                                  // 0x1108(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<enum class EMovementSpeed, bool>        MovementSpeedStates;                               // 0x1158(0x50)(NativeAccessSpecifierPublic)
	bool                                         UseSquashAndStretchSystem;                         // 0x11A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97CC[0x15F];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        JumpPhase;                                         // 0x1308(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FallPhase;                                         // 0x130C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StopPhase;                                         // 0x1310(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 ClimbingTraceChannel;                              // 0x1314(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97CD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WallAlignmentRotationRate;                         // 0x1318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WallAlignmentForwardSearchDistance;                // 0x131C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWadingUpdated;                                   // 0x1320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSwimmingUpdated;                                 // 0x1330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFloorUpdated;                                    // 0x1340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_97CE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayAttribute                    JumpVelocityAttribute;                             // 0x1358(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                    FallVelocityAttribute;                             // 0x1390(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANWXCharacter*                         NWXCharacterOwner;                                 // 0x13C8(0x8)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        JumpFallVelocityIncrementPerc;                     // 0x13D0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_97CF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BodyOffset;                                        // 0x13D8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          ClimbingNoWallTag;                                 // 0x13F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MoveScrambleTimer;                                 // 0x13F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxMoveScrambleTime;                               // 0x13FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxMoveAdjustment;                                 // 0x1400(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScrambleStartAngle;                                // 0x1404(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_97D0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         SquashAndStretchRestoreOriginalMovementMode;       // 0x140C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D1[0x153];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UNavigationSystemV1*                   NavSys;                                            // 0x1560(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXACACrowdManager*                   AvoidanceManager;                                  // 0x1568(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                     CachedCapsuleComponent;                            // 0x1570(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                              WallAlignmentRotator;                              // 0x1578(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D2[0x82];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldOverrideMovespeed;                          // 0x1612(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D3[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideMovespeedAmount;                           // 0x1614(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsInAnyDepthWater;                                // 0x1618(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsInSwimDepthWater;                               // 0x1619(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D4[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WaterDepthNormalized;                              // 0x161C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WaterDepth;                                        // 0x1620(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WaterWadingDepth;                                  // 0x1628(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SwimUpMultiplier;                                  // 0x162C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MaxSwimUpSpeed;                                    // 0x1630(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MaxSinkDownSpeed;                                  // 0x1634(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SwimDepthThreshold;                                // 0x1638(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WaterCheckTimerInterval;                           // 0x1640(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class ETraceTypeQuery                   WaterTraceType;                                    // 0x1644(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bAICapableOfSwimming;                              // 0x1645(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D7[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CapsuleHalfHeightPercentageRequiredInWaterToEnterSwimmingMode; // 0x1648(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97D8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWX_CharacterMovementComponent* GetDefaultObj();

	void UpdateWaterState();
	void UpdateWading__DelegateSignature(bool Apply);
	void UpdateSwimming__DelegateSignature(bool Apply);
	void UpdateMovementSpeeds(TMap<enum class EMovementSpeed, float>& Speeds);
	void UpdateFloor__DelegateSignature(bool IsOnWalkableFloor, class UPhysicalMaterial* PhysMat);
	void SetMovementSpeedActive(enum class EMovementSpeed Speed, bool NewIsActive);
	void SetMovementSpeed(enum class EMovementSpeed NewSpeed);
	void SetCanJump(bool bEnabled);
	void SetAvoidanceDownedStatus(bool Value);
	void RemoveCrowdAgent();
	bool IsScrambling();
	bool IsMovementSpeedActive(enum class EMovementSpeed Speed);
	bool IsInAnyDepthWater();
	bool IsCurrentlyReturningToNavMesh();
	bool IsClimbing();
	float ImmersionDepth();
	float GetWaterDepth();
	struct FRotator GetWallAlignment();
	float GetMovementSpeedForState(enum class EMovementSpeed Speed);
	bool GetIsMoveSpeedOveridden();
	enum class EMovementSpeed GetCurrentSpeedUsedByWalkingMovementMode();
	bool GetCurrentSlopeInDegrees(float* Slope);
	bool GetCanJump();
	float GetAccelerationRatio();
	void DebugOverrideMovespeed(bool bOverride, float OverrideSpeed);
	void BeginWallClimbing(struct FVector& WallAttachPoint, struct FRotator& WallRotation);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ObjectInWorld
class IObjectInWorld : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IObjectInWorld* GetDefaultObj();

	struct FTransform GetWorldTransform();
};

// 0x88 (0xB0 - 0x28)
// Class NWX.ObjectWrapper_ResourceData
class UObjectWrapper_ResourceData : public UObject
{
public:
	struct FResourceData                         ResourceData;                                      // 0x28(0x80)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                  ResourceRowName;                                   // 0xA8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UObjectWrapper_ResourceData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.OnlineServicesFunctionLibrary
class UOnlineServicesFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UOnlineServicesFunctionLibrary* GetDefaultObj();

	void ValidateProfileNameBP(class UObject* ContextObject, const class FString& OwningAccount, const class FString& Name, const class FString& PrivateName, FDelegateProperty_& Callback);
};

// 0x20 (0x2E0 - 0x2C0)
// Class NWX.OptionsControls
class UOptionsControls : public UUserWidget
{
public:
	TArray<class FName>                          ActionNames;                                       // 0x2C0(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                          AxisNames;                                         // 0x2D0(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UOptionsControls* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.OwnershipAccessInterface
class IOwnershipAccessInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IOwnershipAccessInterface* GetDefaultObj();

	class UObject* GetOwnershipObject();
};

// 0x0 (0x28 - 0x28)
// Class NWX.OwnershipInterface
class IOwnershipInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IOwnershipInterface* GetDefaultObj();

	bool TrySetOwningPlayer(class AController* Controller);
	bool IsPlayerInsideAllowedList(class APlayerState* PlayerState);
	bool IsOwningPlayer(const class FString& PlayerId);
	class FString GetOwningPlayerPersistentID();
	class FString GetOwningPlayerName();
	TArray<struct FPlayerPermission> GetCurrentPermissionList();
	bool DoesControllerHaveOwnership(class AController* Controller);
};

// 0x198 (0x250 - 0xB8)
// Class NWX.PartyComponentBase
class UPartyComponentBase : public UDelayedRegistrationComponent
{
public:
	FMulticastInlineDelegateProperty_            PartyInviteReceived;                               // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            JoinFailed;                                        // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            InviteFailed;                                      // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerJoinedParty;                               // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerLeftParty;                                 // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberJoinedParty;                               // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberLeftParty;                                 // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPartyLeaderChanged;                              // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberLeftRealm;                                 // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMemberJoinedRealm;                               // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTravelInvite;                                    // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPartyMemberDataDirtied;                          // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                OwnerProfileId;                                    // 0x178(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97E8[0xB8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PartyMembersInRealm;                               // 0x240(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPartyComponentBase* GetDefaultObj();

	void ShowPlatformInviteUI();
	void SetPlayerProfileId(class AGameModeBase* GameMode, class APlayerController* NewPlayer);
	void Server_TravelToDeployment(const class FString& DeploymentName);
	void Server_KickPlayer(const class FString& ProfileIdToKick);
	void Server_InviteServerToParty();
	void Server_InvitePlayerToTravelToPlayer(const class FString& ProfileId);
	void Server_InvitePlayerToRoom(const class FString& RoomName, const class FString& ToUserId);
	void Server_CreateRoomAndInvitePlayerToRoom(TArray<class FString>& Members);
	bool RejectPendingPartyInvite(struct FPartyInvite& Invite);
	void OnRep_PartyMembersInRealm(TArray<class FString>* PrevArray);
	void OnPlayerLeftParty_UpdatePartyMembersInRealm(const class FString& RoomId);
	void OnPlayerJoinedParty_UpdatePartyMembersInRealm(const class FString& RoomId);
	void OnMemberLeftParty_UpdatePartyMembersInRealm(const class FString& RoomId, const class FString& ProfileId);
	void OnMemberJoinedParty_UpdatePartyMembersInRealm(const class FString& RoomId, const class FString& ProfileId);
	bool LeaveCurrentParty();
	void KickPlayer(const class FString& ProfileIdToKick);
	bool IsPlayerInParty();
	bool IsPlayerInMyParty(const class FString& PlayerId);
	void InvitePlayerToParty(const class FString& ToPlayerId);
	void HandleSettingChanged(enum class ETrackedGameUserSetting Setting);
	void HandlePossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void HandlePartyJoin(const class FString& RoomId);
	void HandlePartyExit(const class FString& RoomId);
	void HandleMemberJoin(const class FString& RoomId, const class FString& ProfileId);
	void HandleMemberExit(const class FString& RoomId, const class FString& ProfileId);
	void HandleLeaderChanged(const class FString& RoomId, const class FString& ProfileId);
	void HandleInviteReceived(struct FPartyInvite& Invite);
	void HandleGameModePostLogin(class AGameModeBase* GameModeBase, class APlayerController* PlayerController);
	void HandleGameModeLogout(class AGameModeBase* GameModeBase, class AController* PlayerController);
	class FString GetRoomName();
	TArray<class ANWXPlayerState*> GetPlayerStatesOfPartyMembers();
	TArray<struct FPartyInvite> GetPendingPartyInvites();
	void GatherPartyMemberData(FDelegateProperty_& OnComplete);
	void CreatePartyInternal(FDelegateProperty_& OnComplete);
	void Client_UpdateParty(const class FString& PartyId, bool bSuccess, const class FString& RoomId, const class FString& Error);
	void AcceptTravelInviteFrom(struct FTravelInviteBP& Invite);
	bool AcceptPendingPartyInvite(struct FPartyInvite& Invite);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PawnPossessorInterface
class IPawnPossessorInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPawnPossessorInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PerfTestBPFunctionLibrary
class UPerfTestBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPerfTestBPFunctionLibrary* GetDefaultObj();

	bool IsStatActive(const class FString& StatName);
	bool GetTopFrametimesFromHUD(int32 TopN, struct FPerfStats& PerfLimits, TMap<class FString, struct FPerfStats>* OutPerfs);
	bool GetFrametimesFromHUD(const class FString& StatName, class FString* ShortName, struct FPerfStats* OutPerfInMS);
	bool GetCountsFromHUD(const class FString& StatName, class FString* ShortName, struct FCountStats* OutCounts);
	void GetActiveStats(TSet<class FString>* ActiveStats);
	bool AreFrameTimesBelowThresholds(const class FString& StatName, struct FPerfStats& Threshold, struct FPerfStats* PerfInMS);
	bool AreCountsBelowThresholds(const class FString& StatName, struct FCountStats& CountLimit, struct FCountStats* OutCounts);
};

// 0x18 (0x40 - 0x28)
// Class NWX.RealmDataSource
class URealmDataSource : public UObject
{
public:
	uint8                                        Pad_97F0[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URealmDataSource* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class NWX.PersistedRealmConfigSource
class UPersistedRealmConfigSource : public URealmDataSource
{
public:
	class UPersistedRealmConfig*                 PersistedRealmConfig;                              // 0x40(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPersistedRealmConfigSource* GetDefaultObj();

	class UPersistedRealmConfig* GetPersistedRealmConfig();
};

// 0x18 (0x40 - 0x28)
// Class NWX.PersistedRealmState
class UPersistedRealmState : public UObject
{
public:
	uint8                                        Pad_97F1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRealmState                           RealmState;                                        // 0x30(0x10)(BlueprintVisible, BlueprintReadOnly, SaveGame, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPersistedRealmState* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class NWX.PersistedRealmStateSource
class UPersistedRealmStateSource : public URealmDataSource
{
public:
	class UPersistedRealmState*                  RealmState;                                        // 0x40(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPersistedRealmStateSource* GetDefaultObj();

	class UPersistedRealmState* GetPersistedRealmState();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PersistenceApplierInterface
class IPersistenceApplierInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPersistenceApplierInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.CreatureSpecificPersistentData
class UCreatureSpecificPersistentData : public UObject
{
public:
	uint8                                        Pad_97F2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCreatureSpecificPersistentData* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class NWX.CreatureSpecificPersistentData_NPC
class UCreatureSpecificPersistentData_NPC : public UCreatureSpecificPersistentData
{
public:
	struct FDataTableRowHandle                   NPCDataHandle;                                     // 0x30(0x10)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Name;                                              // 0x40(0x18)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FStringTableEntryHandle               NameHandle;                                        // 0x58(0x18)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCreatureSpecificPersistentData_NPC* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.CreaturePersistentObject
class UCreaturePersistentObject : public UObject
{
public:
	uint8                                        Pad_97F3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCreaturePersistentData>       PersistedCreatureData;                             // 0x30(0x10)(ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCreaturePersistentObject* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.PersistentCreatureComponent
class UPersistentCreatureComponent : public UActorComponent
{
public:
	class UCreaturePersistentObject*             CreaturePersistence;                               // 0xA0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPersistentCreatureComponent* GetDefaultObj();

	void GetPersistedCreatures(TArray<struct FCreaturePersistentData>* PeristedCreatures);
	void ClearPersistentCreatures();
};

// 0xC8 (0x1C0 - 0xF8)
// Class NWX.PersistentGASDataComponent
class UPersistentGASDataComponent : public UPersistentDataComponent
{
public:
	class UNWXAbilitySystemComponent*            AbilitySystemComponent;                            // 0xF8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXStatusEffectComponent*             StatusEffectComponent;                             // 0x100(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FPersistedGameplayEffect>      PersistedGameplayEffects;                          // 0x108(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TArray<struct FPersistedStatusEffect>        PersistedStatusEffects;                            // 0x118(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	struct FDateTime                             LastPersistedTime;                                 // 0x128(0x8)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FSoftObjectPath>   IDToAssetPath;                                     // 0x130(0x50)(Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_97F4[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnGasDataPersisted;                                // 0x1A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bDataPersisted;                                    // 0x1B8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_97F5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPersistentGASDataComponent* GetDefaultObj();

	void OnPlayerPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnGASDataPersisted__DelegateSignature();
};

// 0x10 (0x40 - 0x30)
// Class NWX.PetsDataAsset
class UPetsDataAsset : public UDataAsset
{
public:
	struct FDataTableRowHandle                   PetSpawnerData;                                    // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPetsDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PetsFunctionLibrary
class UPetsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPetsFunctionLibrary* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PetsInterface
class IPetsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPetsInterface* GetDefaultObj();

	void UpdatePetCentreLocation(struct FVector& NewLocation);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PhasedRelevencyInterface
class IPhasedRelevencyInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPhasedRelevencyInterface* GetDefaultObj();

	void UnbindEventFrom_PhaseConnectionOwnerChanged(FDelegateProperty_& Event);
	class APlayerController* GetPhaseConnectionOwner();
	void BindEventTo_PhaseConnectionOwnerChanged(FDelegateProperty_& Event);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlaceableEntityInterface
class IPlaceableEntityInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlaceableEntityInterface* GetDefaultObj();

	void UnbindFrom_EntityMovedDelegate(FDelegateProperty_& EntityMovedDelegate);
	bool SetPlacementFeedback(struct FGameplayAbilityTargetDataHandle& PlacementTargetData, class AController* Controller, struct FStructurePlacementFeedback* FeedbackData);
	bool MoveEntity(struct FGameplayAbilityTargetDataHandle& PlacementTargetData, class AController* InstigatingController);
	void IsValidPlacement(class AController* Controller, struct FGameplayAbilityTargetDataHandle& TargetData, struct FStructurePlacementFeedback* PlacementFeedbackData);
	bool InitializePlacementState(class APawn* PlacingCharacter);
	void GetPlacementTransform(class ACharacter* Character, float OptionalDeltaRotationZ, float OptionalDeltaHeightZ, struct FGameplayAbilityTargetDataHandle* TargetData);
	class UStaticMeshComponent* GetEntitySupportMesh();
	float GetEntityPlacementZOffset();
	class UBoxComponent* GetEntityPlacementCollider();
	bool FinalizePlacement(class AController* Controller, struct FSnapPlacementTargetData& SnapData, class FString* Message);
	bool CanPlayerCancelPlacedEntity();
	bool CanMoveEntity(enum class EBuildingFeedback* OutReason);
	void CacheBaseMeshInitParameters(struct FSupportMeshInitParameters& InitParameters);
	void BindTo_EntityMovedDelegate(FDelegateProperty_& EntityMovedDelegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlacementFunctionLibrary
class UPlacementFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlacementFunctionLibrary* GetDefaultObj();

	bool TryMoveStructureFromBuildmode(class UObject* Structure, struct FGameplayAbilityTargetDataHandle& TargetDataHandle, class AController* InstigatingController);
	class UObject* SpawnStructure(class UObject* WorldContextObj, class APawn* Instigator, struct FStructureAssetReference& StructureRef, struct FStructureSpawnContext& SpawnContext);
	class UObject* SpawnEncounterStructure(class UObject* WorldContextObj, struct FStructureAssetReference& StructureRef, struct FStructureSpawnContext& SpawnContext, struct FStructureEncounterSpawnContext& EncounterSpawnContext);
	class ANWXStructure* SpawnConstructedStructure(class UObject* WorldContextObject, class APawn* Instigator, struct FStructureData& StructureData, struct FStructureAssetReference& StructureRef, struct FStructureSpawnContext& SpawnContext);
	class UStructureCompositePiece* SpawnCompositeStructureWithPiece(class UObject* WorldContextObject, class APawn* Instigator, struct FStructureData& StructureData, struct FStructureAssetReference& StructureRef, struct FStructureSpawnContext& SpawnContext);
	class AStructureComposite* SpawnCompositeStructure(class UObject* WorldContextObject, TArray<struct FCompositePieceGameplay>& PieceData, struct FStructureSpawnContext& SpawnContext);
	class UStructureCompositePiece* SpawnAttachedPiece(class UStructureCompositePiece* AttachmentPiece, struct FStructureAssetReference& StructureRef, struct FTransform& SpawnTransform, enum class EStructureState SpawnState);
	class UObject* SpawnAndFinalizeStructureFromPlacement(class AController* Controller, struct FGameplayAbilityTargetDataHandle& TargetDataHandle, struct FStructureAssetReference& StructureRef, bool bIgnoreStructureBudgets);
	void SetVisibilityOnAllStructureMeshes(class UObject* Structure, bool bNewVisibility, bool bPropagateToChildren);
	void SetMeshMaterialsOnStructure(class UObject* Structure, class UMaterialInterface* Material);
	struct FRotator MakeRotatorForPlacement(float DeltaRotationZ);
	bool IsStructureTooDeepInWater(class UObject* Structure, double WaterDepth);
	bool IsStructureOverlappingPlayerOrNPC(class UObject* TargetStructure, TArray<class AActor*>* OutOverlappingActors, bool* IsBlockedByPlayer);
	bool IsStructureIntersectingObjectsOfType(class UObject* TargetStructure, TArray<enum class EObjectTypeQuery>& ObjectTypes, class FString* Message, TArray<struct FHitResult>* HitResults);
	bool IsStructureIntersectingObject(class UObject* Structure, TArray<enum class EObjectTypeQuery>& ObjectTypes, class FString* OutMessage, TArray<struct FHitResult>* OutHitResults);
	bool IsStructureEncroachingBlockingGeometry(class UObject* Structure, const TArray<class UObject*>& IgnoreObjects, class FString* OutMessage);
	bool IsStructureActorInPlacement(class AActor* Structure);
	bool IsObjectAtGroundLevel(class UObject* Structure);
	bool IsHitResultHittingWater(struct FHitResult& HitResult);
	bool IsHitObjectLandscape(class UObject* Object);
	bool IsHitObjectGround(class UObject* Object);
	bool IsActorNPC(class AActor* Actor);
	bool HasMovingTag(class UObject* Structure);
	struct FStructurePlacementFeedback GetValidPlacementFeedbackData();
	struct FTransform GetStructureOriginTransform(class UObject* Structure);
	TArray<class UMeshComponent*> GetStructureMeshes(class UObject* Object);
	TArray<struct FVector> GetStructure3DWorldFourCorners(class UObject* Structure, bool bUseBottomCorners, bool bIsSupportTrace);
	void GetSelectionSphereSweep(class ACharacter* ControllingCharacter, float MinRange, float MaxRange, float TraceRadius, bool* OutFoundHits, TArray<struct FHitResult>* OutHitResults);
	void GetPlacementRaytraceHits(class ACharacter* ControllingCharacter, class UObject* PlaceableActor, enum class EDrawDebugTrace DrawDebugType, float DrawTime, bool* OutFoundHits, TArray<struct FHitResult>* OutHitResults);
	class UMaterialInstance* GetPlacementMaterial(class UObject* StructureObject, struct FStructurePlacementFeedback& PlacementData);
	float GetPlacementLinecastMin();
	float GetPlacementLinecastMax();
	void GetPlacementLinecast(class ACharacter* Character, struct FVector* OutStartPoint, struct FVector* OutEndPoint);
	enum class EPlacementFeedbackType GetPlacementFeedbackType(struct FStructurePlacementFeedback& PlacementFeedback);
	bool GetPlacementFeedbackText(enum class EPlacementFeedbackType FeedbackType, class FText* OutFeedbackText);
	class UMaterialInstance* GetPlacementFeedbackMaterial(enum class EPlacementFeedbackType FeedbackType);
	float GetPlacementBuffer();
	struct FTransform GetObjectTransform(class UObject* Object);
	void GetForwardLinecast(class ACharacter* Character, float MinRange, float MaxRange, struct FVector* OutStartPoint, struct FVector* OutEndPoint);
	class UObject* GetClientPlacementObject(class ACharacter* Character);
	TArray<struct FHitResult> FindCornerHits(class UObject* Structure, struct FVector& ImpactNormal, TArray<class UObject*>& ObjectsToIgnore, struct FVector& MeshBounds, struct FTransform& Transform, enum class EDrawDebugTrace DrawDebugType, float DrawTime);
	bool CreatePieceData(struct FStructureAssetReference& StructureRef, struct FTransform& Transform, enum class EStructureState StartingState, struct FCompositePieceGameplay* OutPieceData);
	bool CanPlayerCancelStructure(class UObject* Structure);
	struct FTransform AddZHeightToPlacementTransform(struct FTransform& Transform, float PlacementZOffset);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerAnimationInterface
class IPlayerAnimationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerAnimationInterface* GetDefaultObj();

	void UnbindFrom_MovementStateChanged(FDelegateProperty_& MovementStateChangedDelegate);
	enum class ERALSMovementState GetRALSMovementState();
	void BindTo_MovementStateChanged(FDelegateProperty_& MovementStateChangedDelegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerCheats
class UPlayerCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UPlayerCheats* GetDefaultObj();

	void UpdateStartSpot(const class FString& Portal);
	void TeleportToCreature(class FName& TagName, float DesiredMinDistance);
	void ShowEntitlements();
	void ShowCharacterId();
	void SetPESValue(const class FString& ID, int32 Value);
	void SetPESGroup(const class FString& Group, int32 Value);
	void DumpPESState();
	void DumpPESIDs();
	void DeleteStartSpot();
	void CopyCharacterId();
	void AllowSetRespite(bool bAllowRespite);
};

// 0x18 (0x2F8 - 0x2E0)
// Class NWX.PlayerControllerReadinessAwaiter
class UPlayerControllerReadinessAwaiter : public UMultiAwaiter
{
public:
	class UBasicAwaiter*                         RelatedActorsAwaiter;                              // 0x2E0(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelStreamingAwaiter*                LevelStreamingAwaiter;                             // 0x2E8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsReady;                                          // 0x2F0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9847[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerControllerReadinessAwaiter* GetDefaultObj();

};

// 0x8 (0x60 - 0x58)
// Class NWX.PlayerDeathBehaviour
class UPlayerDeathBehaviour : public UDeathBehaviour
{
public:
	bool                                         bCanSetRespite;                                    // 0x58(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9848[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerDeathBehaviour* GetDefaultObj();

	void SafeRespawnPlayer();
	bool RunSpawningEQS();
	void OnRespawnComplete(class APawn* NewPawn);
};

// 0x80 (0x120 - 0xA0)
// Class NWX.PlayerGameRulesComponent
class UPlayerGameRulesComponent : public UActorComponent
{
public:
	uint8                                        Pad_9849[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UGameRulePlayer*>               RuleArchetypes;                                    // 0xF0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UGameRulePlayer*>               RuleInstances;                                     // 0x100(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class APawn*                                 TargetPawn;                                        // 0x110(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_984A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerGameRulesComponent* GetDefaultObj();

	void OnPosessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnPersistenceAppliedByOwner();
};

// 0x38 (0xD8 - 0xA0)
// Class NWX.PlayerInGameTimeComponent
class UPlayerInGameTimeComponent : public UActorComponent
{
public:
	uint8                                        Pad_984B[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int64                                        InGameTimeSeconds;                                 // 0xC0(0x8)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_984C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInitializedPersistence;                           // 0xD0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_984D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerInGameTimeComponent* GetDefaultObj();

	int64 GetTotalInGamePlayerTime();
};

// 0x60 (0x300 - 0x2A0)
// Class NWX.PlayerInputHandler
class APlayerInputHandler : public AActor
{
public:
	class ANWXPlayerController*                  PlayerController_Cached;                           // 0x2A0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9851[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerInputHandler* GetDefaultObj();

	void RequestToRemoveMappingContexts(TArray<class UInputMappingContext*>& MappingContexts);
	void RequestToRemoveMappingContext(class UInputMappingContext* MappingContext);
	void RequestToAddMappingContexts(TArray<class UInputMappingContext*>& MappingContexts, int32 Priority);
	void RequestToAddMappingContext(class UInputMappingContext* MappingContext, int32 Priority);
	void OnPossessedPawnChangedInternal(class APawn* OldPawn, class APawn* NewPawn);
	void OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnInitialize(class ANWXPlayerController* PlayerController);
	class ANWXPlayerState* GetPlayerState();
	class ANWXPlayerController* GetPlayerController();
	class ANWXCharacter* GetCharacter();
	void AddMappingContext(class UInputMappingContext* MappingContext, int32 Priority);
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.PlayerInteractionComponent
class UPlayerInteractionComponent : public UActorComponent
{
public:
	float                                        DefaultInteractionRange;                           // 0xA0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SwimInteractionRange;                              // 0xA4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_985A[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerInteractionComponent* GetDefaultObj();

	bool TraceForTargetDataForInteractionDisplay(TArray<class UObject*>& ObjectsToIgnore, struct FInteractionData* OutInteractionData);
	bool TraceForTargetDataForInteraction(TArray<class UObject*>& ObjectsToIgnore, struct FInteractionData* OutInteractionData);
	void SendInteractionToTarget(struct FInteractionData& InteractionData);
	bool IsInteractionDisabled(class UObject* InteractableObject, class AController* Controller, struct FInteractionData& InteractionData, class FString* OutDisabledText);
	bool IsInteractableHarvestable(class UObject* InteractableObject, struct FInteractionData& InteractionData);
	bool GetInteractRaycastEndpoints(float InRange, struct FVector* OutRaycastStart, struct FVector* OutRaycastEnd);
	TSoftObjectPtr<class UTexture2D> GetHarvestableIcon(class UObject* InteractableObject, struct FInteractionData& InteractionData);
	bool CanQueryInteractable(class UObject* InteractableObject);
	bool CanInteractWithActor(class UObject* InteractableObject, class AController* Controller, struct FInteractionData& InteractionData);
	void BuildInteractionAbilityPayloadHandle(class UObject* InteractableObject, class AController* Controller, struct FGameplayAbilityPayloadHandle* OutPayloadHandle);
};

// 0x250 (0x278 - 0x28)
// Class NWX.PlayerInventoryContainer
class UPlayerInventoryContainer : public UObject
{
public:
	uint8                                        Pad_9865[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 OwningActor;                                       // 0x48(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EPlayerInventoryContainerType     ContainerType;                                     // 0x50(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9866[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FContainerCapacityData                CapacityData;                                      // 0x54(0x8)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9867[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntryArraySerializer        ContainerItemReplicator;                           // 0x60(0x1C0)(Net, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9868[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerInventoryContainer* GetDefaultObj();

	bool UpdateItem(struct FInventoryEntry& Entry);
	bool RemoveItem(struct FGuid& InstanceID, int32 Amount);
	void RegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void RegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	void OnRep_OwningActor();
	void OnItemRemovedEvent(struct FInventoryEntry& InventoryEntry, int32 Quanity);
	void OnItemAddedEvent(struct FInventoryEntry& InventoryEntry, int32 Quanity);
	void OnInventoryEntryQuantityUpdated(struct FInventoryEntry& Entry, int32 OldQuantity);
	void OnContainerInitializedEvent();
	int32 GetNumberItemEntries();
	bool GetItem(struct FGuid& InstanceID, struct FInventoryEntry* Entry);
	uint8 GetContainerId();
	struct FItemContainerHandle GetContainerHandle();
	struct FContainerCapacityData GetContainerCapacityData();
	void GetAllItems(TArray<struct FInventoryEntry>* Entries);
	bool FindFirstItemByItemId(struct FItemDataReference& ItemId, struct FInventoryEntry* Entry);
	void DeRegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void DeRegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	bool CanAddItem(struct FInventoryEntry& Entry);
	bool AddItem(struct FInventoryEntry& Entry, int32* AmountAdded, TArray<struct FGuid>* ModifiedInstances, bool bIgnoreCapacity);
};

// 0x1A0 (0x1D0 - 0x30)
// Class NWX.PlayerLoadoutDataAsset
class UPlayerLoadoutDataAsset : public UDataAsset
{
public:
	struct FPlayerLoadout                        Loadout;                                           // 0x30(0x1A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlayerLoadoutDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerLoadoutDataFunctionLibrary
class UPlayerLoadoutDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlayerLoadoutDataFunctionLibrary* GetDefaultObj();

	void TryGetPlayerLoadoutData(struct FPlayerLoadoutDataReference& LoadoutReference, struct FPlayerLoadout* OutLoadoutData, enum class EGetResult* OutBranches);
	bool NotEqual_FPlayerLoadoutDataReference(struct FPlayerLoadoutDataReference& A, struct FPlayerLoadoutDataReference& B);
	bool IsValid(struct FPlayerLoadoutDataReference& LoadoutReference);
	TArray<struct FPlayerLoadoutDataReference> GetAllLoadoutReferences(bool bIncludeDebugLoadouts);
	bool EqualEqual_FPlayerLoadoutDataReference(struct FPlayerLoadoutDataReference& A, struct FPlayerLoadoutDataReference& B);
	void ConvertLoadoutItemCustomizationToInstanceData(struct FLoadoutItemCustomization& Customization, struct FEquippedInstanceData* OutInstanceData);
	void ConvertEntryToCustomizationInstanceData(struct FInventoryEntry& Entry, struct FEquippedInstanceData* OutInstanceData);
	void ApplyLoadoutItemCustomizationToEntry(struct FLoadoutItemCustomization& Customization, struct FInventoryEntry& InOutEntry);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerLocationsInterface
class IPlayerLocationsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerLocationsInterface* GetDefaultObj();

	bool IsLocationDiscovered(struct FGuid& LocationId);
	TArray<struct FMapPinData> GetAllMapPins();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerMapPinControllerInterface
class IPlayerMapPinControllerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerMapPinControllerInterface* GetDefaultObj();

	void UpdatePlayerOwnedMapPin(struct FGuid& MapPinId, float Radius, class FText& Note);
	void RemovePlayerOwnedMapPin(struct FGuid& MapPinId);
	void AddPlayerOwnedMapPin(struct FTransform& Transform, struct FDataTableRowHandle& PresentationData);
};

// 0x28 (0x4E0 - 0x4B8)
// Class NWX.PlayerMapScreen
class UPlayerMapScreen : public UNWXCommonWindowWidget
{
public:
	class UInputAction*                          ZoomIn;                                            // 0x4B8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                          ZoomOut;                                           // 0x4C0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                          AddPin;                                            // 0x4C8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9876[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerMapScreen* GetDefaultObj();

	void HandleTriggeringActionZoomOutReleased();
	void HandleTriggeringActionZoomOutPressed();
	void HandleTriggeringActionZoomInReleased();
	void HandleTriggeringActionZoomInPressed();
	void HandleTriggeringActionAddPin();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerMovementInterface
class IPlayerMovementInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerMovementInterface* GetDefaultObj();

	void ApplyMovementInput(bool bIsForwardAxis, float MovementInput);
};

// 0x20 (0x2C0 - 0x2A0)
// Class NWX.PlayerOwnedMapPinActor
class APlayerOwnedMapPinActor : public AActor
{
public:
	uint8                                        Pad_9878[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerOwnedMapPinActor* GetDefaultObj();

	class ANWXPlayerState* GetOwningPlayerState();
	class FString GetOwningPlayerPersistentUniqueId();
	class ANWXPlayerController* GetOwningPlayerController();
	struct FMapPinData GetMapPinData();
};

// 0x40 (0x3E0 - 0x3A0)
// Class NWX.PlayerOwnedMapPinComponent
class UPlayerOwnedMapPinComponent : public UMapPinComponent
{
public:
	class FString                                OwningPlayerPersistentUniqueId;                    // 0x3A0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                OwningPlayerName;                                  // 0x3B0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                Note;                                              // 0x3C0(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Radius;                                            // 0x3D0(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9879[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerOwnedMapPinComponent* GetDefaultObj();

};

// 0x40 (0xE0 - 0xA0)
// Class NWX.PlayerOwnershipComponent
class UPlayerOwnershipComponent : public UActorComponent
{
public:
	uint8                                        Pad_987B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OwningPlayerPersistentID;                          // 0xA8(0x10)(Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         HasSetOwningPlayer;                                // 0xB8(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_987C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentPermissions;                                // 0xBC(0x4)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AController*                           CachedOwningPlayerController;                      // 0xC0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_987D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPermissionsInitialized;                           // 0xD8(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_987E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerOwnershipComponent* GetDefaultObj();

	void OnRep_CurrentPermissions();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerOwnershipFunctionLibrary
class UPlayerOwnershipFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlayerOwnershipFunctionLibrary* GetDefaultObj();

	bool SetOwningPlayer(class UObject* Object, class AController* NewOwner);
	bool IsOwningPlayer(class UObject* Object, const class FString& PlayerId);
	bool IsContributingPlayer(class UObject* Structure, const class FString& PlayerId);
	bool HasOwningPlayer(class UObject* Object);
	bool GetOwningPlayerState(class UObject* Object, class APlayerState** OutPlayerState);
	bool GetOwningPlayerID(class UObject* Object, class FString* OutPlayerId);
	bool GetOwningPlayerController(class UObject* Object, class AController** OutPlayerController);
	bool DoesControllerHaveOwnershipOfObject(class UObject* Object, class AController* Controller);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerOwnershipInterface
class IPlayerOwnershipInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerOwnershipInterface* GetDefaultObj();

	void UnbindFrom_PermissionsUpdatedDelegate(FDelegateProperty_& PermissionsUpdatedDelegate);
	bool TogglePermission(enum class EPermissionOptions PermissionOption);
	bool SetOwningPlayerInfo(class AController* Controller);
	bool IsPermissionActive(enum class EPermissionOptions PermissionOption);
	bool HasOwningPlayer();
	class FString GetOwningPlayerID();
	class AController* GetOwningPlayerController();
	void BindTo_PermissionsUpdatedDelegate(FDelegateProperty_& PermissionsUpdatedDelegate);
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.PlayerReportingComponent
class UPlayerReportingComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UPlayerReportingComponent* GetDefaultObj();

	void Server_ReportNameOfPlayerToTelemetry(const class FString& ProfileId, const class FString& Reason);
	bool ReportPlayerAction(const class FString& UniquePlayerIdToReport, enum class ENWXPlayerReportAction Action);
	bool ReportPlayer(const class FString& UniquePlayerId, const class FString& Reason, const class FString& Comment);
};

// 0x178 (0x230 - 0xB8)
// Class NWX.PlayerSkillUnlockComponent
class UPlayerSkillUnlockComponent : public UDelayedRegistrationComponent
{
public:
	uint8                                        Pad_989B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSkillReferenceContainer              UnlockedSkills;                                    // 0xC0(0x10)(Edit, Net, EditConst, SaveGame, RepNotify, NativeAccessSpecifierPublic)
	struct FSkillDataReference                   DefaultUnlockedSkill;                              // 0xD0(0xE0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillReferenceContainer              UnlockedSkillReferences;                           // 0x1B0(0x10)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_989C[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerSkillUnlockComponent* GetDefaultObj();

	void OnRep_UnlockedSkills(struct FSkillReferenceContainer& PreviousUnlockedSkills);
	void OnRep_UnlockedSkillReferences(struct FSkillReferenceContainer& PreviousUnlockedReferences);
};

// 0x1A8 (0x2A0 - 0xF8)
// Class NWX.PlayerSpawnComponent
class UPlayerSpawnComponent : public UPersistentDataComponent
{
public:
	FMulticastInlineDelegateProperty_            OnPlayerRespiteDataUpdated;                        // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerRespawnDataUpdated;                        // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                         TeleportToRespite;                                 // 0x118(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_98A3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPlayerSpawnContextData               RespiteData;                                       // 0x120(0xA0)(Net, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	struct FPlayerSpawnContextData               RespawnData;                                       // 0x1C0(0xA0)(Net, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	bool                                         bWasRespiteSetViaStructure;                        // 0x260(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bWaitingForDeployment;                             // 0x261(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_98A4[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDateTime                             PlayerSpawnTimestamp;                              // 0x268(0x8)(Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_98A5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        OwnedRespawnPoints;                                // 0x280(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                OriginalStartSpot;                                 // 0x290(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                BestPlayerStart;                                   // 0x298(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPlayerSpawnComponent* GetDefaultObj();

	void TravelToSanctuary();
	void Server_TravelToRespitePoint();
	void Server_TravelToRespawnPoint();
	void Server_SetRespawnContextData(struct FPlayerSpawnContextData& NewRespawnContextData);
	void Server_RemovePlayerIdFromAllowedRespiteList(const class FString& PlayerId);
	void Server_AddPlayerIdToAllowedRespiteList(const class FString& PlayerId);
	void RemovePlayerIdFromAllowedRespiteList(const class FString& PlayerId);
	void OnRep_PlayerRespiteData(struct FPlayerSpawnContextData& PreviousPlayerSpawnData);
	void OnRep_PlayerRespawnContextData(struct FPlayerSpawnContextData& PreviousPlayerRespawnContextData);
	bool HasAuthority();
	void AddPlayerIdToAllowedRespiteList(const class FString& PlayerId);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerSpawningFunctionLibrary
class UPlayerSpawningFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlayerSpawningFunctionLibrary* GetDefaultObj();

	bool TryTravelToRespitePoint(class ANWXPlayerController* PlayerController);
	void SetRespawnContextToRespite(class ANWXPlayerController* PlayerController);
	void SetRespawnContextToCurrentMap(class ANWXPlayerController* PlayerController);
	void SetRespawnContextToClosestPoint(class ANWXPlayerController* PlayerController);
	bool SetPlayerHasRespiteStructure(class ANWXPlayerController* PlayerController, bool bHasRespiteStructure);
	bool RemoveRespitePoint(class ANWXPlayerController* PlayerController);
	bool RemoveRespawnPoint(class ANWXPlayerController* PlayerController, class AActor* RespawnPoint);
	void MoveRespitePoint(class ANWXPlayerController* PlayerController, struct FTransform& RespiteTransform);
	bool IsPlayerRespiteDeploymentName(class ANWXPlayerController* PlayerController, const class FString& DeploymentName);
	bool IsPlayerInRespiteRealm(class ANWXPlayerController* PlayerController);
	class AActor* GetRespitePoint(class ANWXPlayerController* PlayerController);
	struct FPlayerSpawnContextData GetRespiteData(class ANWXPlayerController* PlayerController);
	bool DoesPlayerHaveRespiteStructure(class ANWXPlayerController* PlayerController);
	bool DoesPlayerHaveRespitePoint(class ANWXPlayerController* PlayerController);
	class ANWXOwnedPlayerStart* CreateRespitePoint(class ANWXPlayerController* PlayerController, struct FTransform& RespiteTransform, bool bOptionalWasRespiteSetViaStructure);
	class AActor* CreateRespiteAtStartSpot(class ANWXPlayerController* PlayerController);
	class AActor* CreateRespawnPoint(class ANWXPlayerController* PlayerController, struct FTransform& Transform);
	bool CanTravelToRespite(class ANWXPlayerController* PlayerController);
	bool CanSetRespitePoint(class ANWXPlayerController* PlayerController);
	bool CanPlayerSetRespiteInRealm(class ANWXPlayerController* PlayerController);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerTravelInterface
class IPlayerTravelInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPlayerTravelInterface* GetDefaultObj();

	void Client_FastTravelToMapPinLocation(struct FMapPinData& MapPinData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlayerUtilityBPFunctionLibrary
class UPlayerUtilityBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlayerUtilityBPFunctionLibrary* GetDefaultObj();

	int32 NumberOfPlayersInRadius(class UObject* WorldContextObject, struct FVector& Position, float Radius);
	bool IsAnySpecifiedPlayerInRadius(TArray<class APlayerState*>& PlayerArray, struct FVector& Position, float Radius);
	bool IsAnyPlayerInRadius(class UObject* WorldContextObject, struct FVector& Position, float Radius);
	void GetPlayersInRange(class UObject* WorldContextObject, struct FVector& Position, float Radius, TArray<class APawn*>* Players);
	class APawn* GetClosestPlayer(class UObject* WorldContextObject, struct FVector& Position);
};

// 0x58 (0x80 - 0x28)
// Class NWX.PlugAssetPartition
class UPlugAssetPartition : public UObject
{
public:
	class FName                                  PlugCollectionsPath;                               // 0x28(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98CA[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlugAssetPartition* GetDefaultObj();

	bool Load(class UPlugCollectionAsset* Collection, bool bReplace);
	bool Add(class FName& CollectionName, class UPlugDefinitionAsset* Plug);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PlugPartitionFunctionLibrary
class UPlugPartitionFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPlugPartitionFunctionLibrary* GetDefaultObj();

	void GetPlugNames(class UPlugAssetPartition* PlugPartition, TArray<class FName>* OutPlugNames);
	struct FGuid GetPlugGuid(class UPlugDefinitionAsset* Asset);
	struct FPOIPlugStreamingLevelDefinition CopyPlugFromPartition(class UPlugAssetPartition* PlugPartition, class FName& PlugName, bool* bFound);
};

// 0xF8 (0x120 - 0x28)
// Class NWX.POIAssetPartition
class UPOIAssetPartition : public UObject
{
public:
	class FName                                  POIAssetsPath;                                     // 0x28(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98D0[0xF0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPOIAssetPartition* GetDefaultObj();

	bool Load(class FName& Path, bool bRecursive);
	bool Add(class FName& Path, class UPOIDefinitionAsset* Asset);
};

// 0x80 (0x320 - 0x2A0)
// Class NWX.POIBakedDistributionInfo
class APOIBakedDistributionInfo : public AInfo
{
public:
	TArray<TSoftObjectPtr<class UPOIDefinitionAsset>> POIDefinitions;                                    // 0x2A0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>           Clusters;                                          // 0x2B0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                           RegionThemeMappings;                               // 0x2C0(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   ThemeForCreatures;                                 // 0x310(0x10)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APOIBakedDistributionInfo* GetDefaultObj();

};

// 0x18 (0x2B8 - 0x2A0)
// Class NWX.POIConfigBase
class APOIConfigBase : public AActor
{
public:
	int32                                        DependencyCount;                                   // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98D5[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APOIConfigBase* GetDefaultObj();

	bool SpawnDependency(class ULevelAwareComponent* LevelAware, struct FPOIStreamingLevelDefinition& POIData, struct FVector& Location, struct FRotator& Rotation);
	void SpawnDependencies(class ULevelAwareComponent* LevelAware);
	void SetRuntimeRealmPlacerPOIReadiness(class ULevelAwareComponent* LevelAware);
	void RegisterAVFXSpatialComponents(class AActor* LevelActor);
	void InitializeDependencies(class ULevelAwareComponent* LevelAware);
	class AStreamingLevelProxyActor* GetLevelProxy(class ULevelAwareComponent* LevelAware);
	class AInteractiveInstancedMeshManagerIndex* GetIIMManagerIndex();
};

// 0x40 (0x70 - 0x30)
// Class NWX.PlugPredicateModifier
class UPlugPredicateModifier : public UPrimaryDataAsset
{
public:
	struct FGameplayTagContainer                 Tags;                                              // 0x30(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   TargetPredicate;                                   // 0x50(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPOIPlugSelectionPredicate            ReplacementPredicate;                              // 0x60(0x10)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlugPredicateModifier* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.POIScriptablePlugRuleset
class UPOIScriptablePlugRuleset : public UObject
{
public:
	uint8                                        Pad_98D7[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPOIScriptablePlugRuleset* GetDefaultObj();

	TArray<struct FGuid> GetPlugsForDatapoint(int32 Datapoint, class FName& POIName, class FName& ThemeName, TArray<struct FGuid>& Plugs);
};

// 0x10 (0x2B0 - 0x2A0)
// Class NWX.POIInfo
class APOIInfo : public AInfo
{
public:
	TArray<struct FPOIData>                      Data;                                              // 0x2A0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APOIInfo* GetDefaultObj();

};

// 0x178 (0x1C0 - 0x48)
// Class NWX.POIDefinitionAsset
class UPOIDefinitionAsset : public UUniquelyIdentifiablePrimaryDataAsset
{
public:
	struct FPOIStreamingLevelDefinition          Data;                                              // 0x48(0x178)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPOIDefinitionAsset* GetDefaultObj();

};

// 0x70 (0xB8 - 0x48)
// Class NWX.PlugDefinitionAsset
class UPlugDefinitionAsset : public UUniquelyIdentifiablePrimaryDataAsset
{
public:
	struct FPOIPlugStreamingLevelDefinition      Data;                                              // 0x48(0x70)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlugDefinitionAsset* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.POIDefinitionAssetReference
class UPOIDefinitionAssetReference : public UPrimaryDataAsset
{
public:
	class UPOIDefinitionAsset*                   POIDefinitionAsset;                                // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPOIDefinitionAssetReference* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.PlugDefinitionAssetReference
class UPlugDefinitionAssetReference : public UPrimaryDataAsset
{
public:
	class UPlugDefinitionAsset*                  PlugDefinitionAsset;                               // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlugDefinitionAssetReference* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class NWX.PlugCollectionAsset
class UPlugCollectionAsset : public UPrimaryDataAsset
{
public:
	struct FDirectoryPath                        PathToCollection;                                  // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 Tags;                                              // 0x40(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bRecursive;                                        // 0x60(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98D8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlugCollectionAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.POIDataFunctionLibrary
class UPOIDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPOIDataFunctionLibrary* GetDefaultObj();

	bool IsConfigLevelSelectionValid(struct FConfigLevelSelection& Selection);
	struct FPOIStreamingLevelDefinition GetStreamingLevelDefinitionFromProxy(struct FPOIStreamingLevelDefinitionProxy& ProxyReference);
	void FindIndexOfClosestDatapoint(struct FVector& CurrentLocation, class UWorld* ContextObject, int32* OutIndex, enum class EGetResult* OutBranches);
	void FindClosestCluster(struct FTransform& Transform, class UObject* ContextObject, class FName* ClusterName, enum class EGetResult* OutBranches);
	void FindCharacteristicForClusterTheme(struct FDataTableRowHandle& ClusterHandle, class UObject* ContextObject, struct FCharacteristicDataReference* OutCharacteristic, enum class EGetResult* OutBranches);
	void ConvertConfigLevelSelectionToPOIStreamingLevelDefinition(struct FConfigLevelSelection& Selection, struct FPOIStreamingLevelDefinition* OutLevelDefinition);
};

// 0x0 (0x28 - 0x28)
// Class NWX.POIDependencySource
class IPOIDependencySource : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPOIDependencySource* GetDefaultObj();

	TArray<struct FPOIStreamingLevelDependency> GatherStreamingLevelDependencies();
};

// 0x80 (0xA8 - 0x28)
// Class NWX.POIDistributionDatapointDictionary
class UPOIDistributionDatapointDictionary : public UObject
{
public:
	uint8                                        Pad_98EB[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPOIDistributionDatapointDictionary* GetDefaultObj();

	void GetDatapointPOI(int32 Datapoint, class FName* POI, int32* ThemeIndex, TArray<class FName>* Plugs);
	int32 GetCount();
};

// 0x0 (0x28 - 0x28)
// Class NWX.POIDistributionMapLibrary
class UPOIDistributionMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPOIDistributionMapLibrary* GetDefaultObj();

	bool IsPOIStringKeyValid(const class FString& Key);
	bool DecodeKeyAsString(const class FString& Key, TArray<class FString>* KeyData, TArray<class FString>* Errors);
	bool DecodeKey(const class FString& Key, int32* RuleSet, class FString* MapName, TArray<class FString>* Datatables, TArray<class FName>* Clusters, TArray<class FName>* Themes, class UPOIDistributionDatapointDictionary* Datapoints, TArray<class FName>* Tags);
};

// 0x30 (0x58 - 0x28)
// Class NWX.POIPartitionExtensionDistributionStage
class UPOIPartitionExtensionDistributionStage : public UPOIDistributionStage
{
public:
	struct FGameplayTagContainer                 Tags;                                              // 0x28(0x20)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDirectoryPath                        POIDirectoryPath;                                  // 0x48(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPOIPartitionExtensionDistributionStage* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class NWX.POIPlacementSimulator
class UPOIPlacementSimulator : public UObject
{
public:
	class FString                                AnalyticsSchemaSemVersion;                         // 0x28(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                AnalyticsSchemaFriendlyVersion;                    // 0x38(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                ClusterThemeDataTableRef;                          // 0x48(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                POIDataTableRef;                                   // 0x58(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        MatrixRuns;                                        // 0x68(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_98F5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSimulatorMatrixConfigMap>     MatrixMaps;                                        // 0x70(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FSimulatorMatrixConfigTemporal> MatrixTemporals;                                   // 0x80(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	uint8                                        Pad_98F6[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPOIPlacementSimulator* GetDefaultObj();

};

// 0xB0 (0xD8 - 0x28)
// Class NWX.POIScriptableRuleset
class UPOIScriptableRuleset : public UObject
{
public:
	uint8                                        Pad_98FC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDataTableRowHandle>           Clusters;                                          // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_98FD[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPOIScriptableRuleset* GetDefaultObj();

	class FName GetPOIForDatapoint(struct FPOIData& Datapoint, struct FClusterTheme& Theme, int32 Index);
	int32 GetDatapointCount();
	int32 GetClusterForDatapoint(struct FPOIData& Datapoint, int32 Index);
	void AddAsset(class UPOIDefinitionAsset* POIAsset);
};

// 0x0 (0x80 - 0x80)
// Class NWX.POISimulatorCommandlet
class UPOISimulatorCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class UPOISimulatorCommandlet* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.NWXEditorPOISimulatorLocalConfig
class UNWXEditorPOISimulatorLocalConfig : public UObject
{
public:
	TArray<struct FPOISimulatorEditorConfig>     Runs;                                              // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        RunCount;                                          // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98FE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXEditorPOISimulatorLocalConfig* GetDefaultObj();

};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.POISubLevelProxy
class APOISubLevelProxy : public AActor
{
public:

	static class UClass* StaticClass();
	static class APOISubLevelProxy* GetDefaultObj();

};

// 0x58 (0x2F8 - 0x2A0)
// Class NWX.POIBiomeSelectionSubLevelProxy
class APOIBiomeSelectionSubLevelProxy : public APOISubLevelProxy
{
public:
	uint8                                        Pad_98FF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EBiomeID, struct FPOIStreamingLevelDefinitionProxy> BiomeToSubLevel;                                   // 0x2A8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APOIBiomeSelectionSubLevelProxy* GetDefaultObj();

};

// 0x68 (0x308 - 0x2A0)
// Class NWX.POIRealmTagPredicatedSubLevelProxy
class APOIRealmTagPredicatedSubLevelProxy : public APOISubLevelProxy
{
public:
	uint8                                        Pad_9900[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 RequiredRealmTags;                                 // 0x2A8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPOIStreamingLevelDefinitionProxy     SubLevel;                                          // 0x2C8(0x40)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APOIRealmTagPredicatedSubLevelProxy* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PortalActorInterface
class IPortalActorInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPortalActorInterface* GetDefaultObj();

	class URealmCardMachineComponent* GetRealmCardMachineComponent();
	class UPortalControllerComponent* GetPortalController();
	struct FTransform GetPlayerSpawnTransform();
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.PortalControllerComponent
class UPortalControllerComponent : public UActorComponent
{
public:
	uint8                                        Pad_990B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OptionalTargetPlayerStartTag;                      // 0xB8(0x10)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADeploymentPortal*                     Portal;                                            // 0xC8(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                PortalVisuals;                                     // 0xD0(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_990C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         PortalControllerAwaiter;                           // 0xF0(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPortalControllerComponent* GetDefaultObj();

	void SetOptionalTargetPlayerStartTag(const class FString& PlayerStartTag);
	void Server_UnbindEventFrom_OnPortalStateChanged(FDelegateProperty_& Listener);
	void Server_UnbindEventFrom_OnPortalCardsCommitted(FDelegateProperty_& Listener);
	bool Server_IsInitialized();
	void Server_BindEventTo_OnPortalStateChanged(FDelegateProperty_& Listener);
	void Server_BindEventTo_OnPortalCardsCommitted(FDelegateProperty_& Listener);
	void OnPortalStateChanged(enum class ETemporalPortalState State, class ADeploymentPortal* DeploymentPortal);
	bool IsServer();
	void InitializePortalController(class ADeploymentPortal* DeploymentPortal, class AActor* PortalVisualsActor);
	bool HasAuthority();
	class AActor* GetPortalVisualsActor();
	class FString GetOptionalTargetPlayerStartTag();
	class ADeploymentPortal* GetDeploymentPortal();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PortalControllerInterface
class IPortalControllerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPortalControllerInterface* GetDefaultObj();

	bool RestartPortal(class APlayerController* PlayerController);
	bool OpenPortalWithCards(class APlayerController* PlayerController, class URealmCardMachineComponent* RealmCardMachineComponent, TArray<struct FInventoryEntry>& Cards, bool bPublicRealm, bool bFreshRealm);
	bool OpenPortalToRealmVault(class APlayerController* PlayerController);
	enum class ETemporalPortalState GetPortalState();
	bool GetIsPortalOpen();
	bool GetCanRestartPortal();
	bool GetCanOpenPortal();
	bool GetCanClosePortal();
	bool ClosePortal(class APlayerController* PlayerController);
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.PortalStructureProxyLinkComponent
class UPortalStructureProxyLinkComponent : public UActorComponent
{
public:
	class ANWXStructureBuilder*                  StructureBuilderRef;                               // 0xA0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADeploymentPortal*                     DeploymentPortalRef;                               // 0xA8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                PortalVisualsActorRef;                             // 0xB0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANWXPlayerStart*                       PlayerStart;                                       // 0xB8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPortalStructureProxyLinkComponent* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.PrioritizePlayerStartPIEStrategy
class UPrioritizePlayerStartPIEStrategy : public UAbstractPlayerStartStrategy
{
public:
	bool                                         bHasPlayerStartPIE;                                // 0x28(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9914[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrioritizePlayerStartPIEStrategy* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.ProceduralAnimationAVFXComponent
class UProceduralAnimationAVFXComponent : public UActorComponent
{
public:
	uint8                                        Pad_9915[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProceduralAnimationAVFXComponent* GetDefaultObj();

	class USkeletalMeshComponent* GetPrimarySkeletalMesh();
	class UAnimInstance* GetPATemplateInstance();
	class ACharacter* GetOwnerAsCharacter();
	class UFootstepComponent* GetFootstepComponent();
	class UCharacterMovementComponent* GetCharacterMovementComponent();
	void CacheFootstepComponent();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ProcessCheats
class UProcessCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UProcessCheats* GetDefaultObj();

	void ForceServerCrash(const class FString& KillCode);
	void ForceServerCleanExit(const class FString& KillCode);
	void ForceClientCrash(bool bForce);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ProfileSearchServiceLibrary
class UProfileSearchServiceLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UProfileSearchServiceLibrary* GetDefaultObj();

	void SearchForProfilesWithName(class UObject* WorldContextObject, const class FString& Name, int32 Limit, const class FString& NextPageToken, FDelegateProperty_& CompleteBP);
};

// 0x30 (0x60 - 0x30)
// Class NWX.ProgressionGateVolumeDataAsset
class UProgressionGateVolumeDataAsset : public UDataAsset
{
public:
	class UImpulseVolumeDataAsset*               ImpulseVolumeDataAsset;                            // 0x30(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEffectVolumeDataAsset*        GameplayEffectVolumeDataAsset;                     // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCollisionVolumeDataAsset*             CollisionVolumeDataAsset;                          // 0x40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         HasAssociatedQuest;                                // 0x48(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9918[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UQuestDataAsset*                       AssociatedQuest;                                   // 0x50(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PassThroughTimeInSeconds;                          // 0x58(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9919[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProgressionGateVolumeDataAsset* GetDefaultObj();

};

// 0x68 (0x308 - 0x2A0)
// Class NWX.ProgressionGateVolume
class AProgressionGateVolume : public AActor
{
public:
	class UProgressionGateVolumeDataAsset*       DataAsset;                                         // 0x2A0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2A8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         QuestTriggerVolume;                                // 0x2B0(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AImpulseVolume*                        ImpulseVolume;                                     // 0x2B8(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameplayEffectVolume*                 GameplayEffectVolume;                              // 0x2C0(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACollisionVolume*                      CollisionVolume;                                   // 0x2C8(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_991F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAwaitableChildActorComponent*         ImpulseChildActorComponent;                        // 0x2E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAwaitableChildActorComponent*         GameplayEffectChildActorComponent;                 // 0x2F0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAwaitableChildActorComponent*         CollisionChildActorComponent;                      // 0x2F8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiAwaiter*                         ChildActorComponentAwaiter;                        // 0x300(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AProgressionGateVolume* GetDefaultObj();

	void OnReady(bool bSuccess);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnCollisionEventFired(class AActor* Actor, bool bMetRequirements, bool bWasBlocked);
	class UAwaitableChildActorComponent* GetImpulseVolumeChildActorComponent();
	class UAwaitableChildActorComponent* GetGameplayEffectVolumeChildActorComponent();
	class UAwaitableChildActorComponent* GetCollisionVolumeChildActorComponent();
};

// 0x30 (0xD0 - 0xA0)
// Class NWX.ProjectileAudioComponent
class UProjectileAudioComponent : public UActorComponent
{
public:
	bool                                         ShouldUseDoppler;                                  // 0xA0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9923[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DopplerUpdateTime;                                 // 0xA4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRtpc*                               DopplerRTPC;                                       // 0xA8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                         StartLoopEvent;                                    // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         StopLoopEvent;                                     // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9924[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProjectileAudioComponent* GetDefaultObj();

	void StopLoopingSoundIfLoaded();
	void StartLoopingSoundIfLoaded();
	void HandleOneShotEventLoaded(class UAkAudioEvent* LoadedEvent);
	void HandleLoopingEventsLoaded(class UAkAudioEvent* StartEvent, class UAkAudioEvent* StopEvent);
	class UScopedAkComponent* GetAudioComponent();
	float CalculateDopplerShift(struct FVector& Velocity);
	void AsyncStartLoopingSound(TSoftObjectPtr<class UAkAudioEvent>& SoftStartEvent, TSoftObjectPtr<class UAkAudioEvent>& SoftStopEvent);
	void AsyncPostOneShot(TSoftObjectPtr<class UAkAudioEvent>& SoftOneShotEvent);
	void ApplyDopplerShift();
};

// 0x0 (0x28 - 0x28)
// Class NWX.PuckCharacterInterface
class IPuckCharacterInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPuckCharacterInterface* GetDefaultObj();

	void SetPuckMomentParams(const struct FPuckMomentParams& Params);
	void SetPuckInteractionState(bool State);
	void SetPuckDialogue(class UDialogue* Dialogue);
	void DismissPuck();
};

// 0x48 (0x90 - 0x48)
// Class NWX.PuckMoment
class UPuckMoment : public UUniquelyIdentifiableDataAsset
{
public:
	class UDialogue*                             Dialogue;                                          // 0x48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                             EQSQuery;                                          // 0x50(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DespawnAndMoveCloserRadius;                        // 0x58(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ForceInteractionWithPlayer;                        // 0x5C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPuckMomentTriggerType            TriggerType;                                       // 0x5D(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9927[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URequirement*                          TriggerRequirement;                                // 0x60(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPuckMomentCompletionType         CompletionType;                                    // 0x68(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9928[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URequirement*                          CompletionRequirement;                             // 0x70(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasDependencyRules;                               // 0x78(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9929[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UPuckMoment>>    TakePriorityOverAnyOfThese;                        // 0x80(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPuckMoment* GetDefaultObj();

};

// 0xA8 (0x148 - 0xA0)
// Class NWX.PuckMomentComponent
class UPuckMomentComponent : public UActorComponent
{
public:
	uint8                                        Pad_992C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AActor>                    PuckClass;                                         // 0xB0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URequirement*                          MinimumRequirementsToSpawnPuck;                    // 0xB8(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PuckSpawnVerticalOffset;                           // 0xC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PuckSpawnRetryTimer;                               // 0xC4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPuckMoment*>                   Moments;                                           // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                CurrentPuck;                                       // 0xD8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_992D[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPuckMomentComponent* GetDefaultObj();

	void OnReevaluationTimeElapsed();
	void OnExperienceStatesReady();
	void HandlePuckDestroyed(class AActor* Actor);
	void HandleConversationStarted(struct FGuid& ConversationID);
	void HandleConversationEnded(struct FGuid& ConversationID);
};

// 0x28 (0x50 - 0x28)
// Class NWX.PuckMomentExperienceStateIDBuilder
class UPuckMomentExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	TSoftObjectPtr<class UPuckMoment>            Moment;                                            // 0x28(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPuckMomentExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(TSoftObjectPtr<class UPuckMoment>& MomentDataAsset);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PuckMomentExperienceStateIDEnumerator
class UPuckMomentExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UPuckMomentExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.PuckMomentProviderInterface
class IPuckMomentProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPuckMomentProviderInterface* GetDefaultObj();

	bool RequestMoment(class UPuckMoment* Moment);
};

// 0x0 (0x28 - 0x28)
// Class NWX.PuckMomentQueryInterface
class IPuckMomentQueryInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPuckMomentQueryInterface* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.PuckMomentReward
class UPuckMomentReward : public URewardBehaviour
{
public:
	class UPuckMoment*                           Moment;                                            // 0x30(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPuckMomentReward* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.PuckMomentSequence
class UPuckMomentSequence : public UDataAsset
{
public:
	TArray<class UPuckMoment*>                   MomentsToPlayInSequence;                           // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPuckMomentSequence* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.PuckMomentSequenceReward
class UPuckMomentSequenceReward : public URewardBehaviour
{
public:
	class UPuckMomentSequence*                   MomentSequence;                                    // 0x30(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPuckMomentSequenceReward* GetDefaultObj();

};

// 0x78 (0x130 - 0xB8)
// Class NWX.DialogueNodeQuest
class UDialogueNodeQuest : public UDialogueNodePlayer
{
public:
	uint8                                        Pad_9934[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuestAssetReference                  Quest;                                             // 0xC0(0x70)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDialogueNodeQuest* GetDefaultObj();

};

// 0x0 (0x130 - 0x130)
// Class NWX.DialogueNodeAcceptQuest
class UDialogueNodeAcceptQuest : public UDialogueNodeQuest
{
public:

	static class UClass* StaticClass();
	static class UDialogueNodeAcceptQuest* GetDefaultObj();

};

// 0x0 (0x130 - 0x130)
// Class NWX.DialogueNodeTurnInTask
class UDialogueNodeTurnInTask : public UDialogueNodeQuest
{
public:

	static class UClass* StaticClass();
	static class UDialogueNodeTurnInTask* GetDefaultObj();

};

// 0x90 (0xD0 - 0x40)
// Class NWX.TurnInTaskDialogueEvent
class UTurnInTaskDialogueEvent : public UDialogueEvents
{
public:
	struct FQuestAssetReference                  QuestReference;                                    // 0x40(0x70)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	uint8                                        Pad_9936[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTurnInTaskDialogueEvent* GetDefaultObj();

	void OnTurnInClosed(struct FOngoingTaskProgress& TaskForTurnIn);
	void OnTaskCompleted(struct FOngoingTaskProgress& TaskCompleted);
};

// 0x78 (0xA0 - 0x28)
// Class NWX.QuestExperienceStateIDBuilder
class UQuestExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	uint8                                        Pad_993A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuestAssetReference                  Quest;                                             // 0x30(0x70)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UQuestExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(struct FQuestAssetReference& QuestDataAsset);
};

// 0x0 (0x28 - 0x28)
// Class NWX.QuestExperienceStateIDEnumerator
class UQuestExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UQuestExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.TestQuestExperienceStateIDEnumerator
class UTestQuestExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:
	TArray<struct FSoftObjectPath>               TestQuestAssets;                                   // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTestQuestExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.QuestPresentationDataFunctionLibrary
class UQuestPresentationDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UQuestPresentationDataFunctionLibrary* GetDefaultObj();

	bool GetQuestTaskPresentationDataFromExperienceStateCondition(class UExperienceStateCondition* ExperienceStateCondition, class FText* OutName, class FText* OutDescription, TSoftObjectPtr<class UTexture2D>* OutIcon);
};

// 0x70 (0xA0 - 0x30)
// Class NWX.AcceptQuestRewardBehaviour
class UAcceptQuestRewardBehaviour : public URewardBehaviour
{
public:
	struct FQuestAssetReference                  QuestReference;                                    // 0x30(0x70)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAcceptQuestRewardBehaviour* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.QuestRewardItemInterface
class IQuestRewardItemInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IQuestRewardItemInterface* GetDefaultObj();

	class UItemDataAsset* GetRewardItem();
};

// 0x390 (0x448 - 0xB8)
// Class NWX.QuestTrackerComponent
class UQuestTrackerComponent : public UDelayedRegistrationComponent
{
public:
	uint8                                        Pad_9949[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCurrentQuestCountChanged;                        // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOngoingTasksProgressChanged;                     // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_994B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnQuestAccepted;                                   // 0x120(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQuestCompleted;                                  // 0x130(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQuestAbandoned;                                  // 0x140(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTaskAccepted;                                    // 0x150(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTaskProgressChanged;                             // 0x160(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTaskReadyToComplete;                             // 0x170(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTaskCompleted;                                   // 0x180(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRequestItemTurnIn;                               // 0x190(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemTurnInClosed;                                // 0x1A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>           SetQuestScoreEffect;                               // 0x1B0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_994C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPersistentDataHelper*                 PersistentDataHelper;                              // 0x1C8(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_994D[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FOngoingTaskProgress>          TasksReadyToComplete;                              // 0x270(0x10)(Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TArray<struct FOngoingTaskProgress>          OngoingTasksProgress;                              // 0x280(0x10)(Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FOngoingTaskProgress>          TransientTasksProgress;                            // 0x290(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FTrackedCondition>             TrackedConditions;                                 // 0x2A0(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FQuestAssetReference> AutoCompleteConditions;                            // 0x2B0(0x50)(NativeAccessSpecifierPrivate)
	class UBasicAwaiter*                         RealmWideQuestDataReplicatorAwaiter;               // 0x300(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FQuestGiverStatus>             QuestGiverStatuses;                                // 0x308(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_994E[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FQuestAssetReference>          PendingQuests;                                     // 0x3A0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FPlayerQuestProfile                   PlayerQuestProfile;                                // 0x3B0(0x58)(SaveGame, NativeAccessSpecifierPrivate)
	int32                                        bRerouteQuestModule;                               // 0x408(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_994F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AQuestGiverSession*                    QuestGiverSession;                                 // 0x410(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        CurrentQuestCount;                                 // 0x418(0x4)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9950[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FOngoingTaskProgress>          QuestVisibilityOnHUD;                              // 0x420(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGameplayTag                          QuestScoreAttributeTag;                            // 0x430(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9951[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UQuestTrackerComponent* GetDefaultObj();

	void UpdateAllQuestHUDPersistenceData();
	void Server_UpdateQuestFromHUDVisibilityList(TArray<struct FOngoingTaskProgress>& Tasks);
	void Server_NotifyItemTurnInClosed(struct FOngoingTaskProgress& TaskForTurnIn);
	void Server_HandInTaskWithItems(struct FOngoingTaskProgress& TaskProgress, TArray<struct FInventoryEntryIdAndQuantity>& ItemInstanceIdsAndQuantities);
	void Server_HandInTask(struct FOngoingTaskProgress& TaskProgress);
	void Server_ExitQuestGiverInteraction(class AActor* QuestGiver);
	void Server_EnterQuestGiverInteraction(class AActor* QuestGiver);
	void Server_DoExchange(struct FQuestAssetReference& ExchangeReference, TArray<struct FInventoryEntryIdAndQuantity>& ItemInstanceIdsAndQuantities);
	void Server_CheatSetQuestRequirementPolicy(enum class EQuestRequirementsPolicy NewRequirementsPolicy);
	void Server_AcceptQuest(struct FQuestAssetReference& QuestRowHandle);
	void Server_AbandonQuest(struct FQuestAssetReference& QuestRowHandle);
	void OnRep_QuestGiverStatuses();
	void OnRep_QuestGiverSession();
	void OnRep_OngoingTasksProgressChanged();
	void OnRep_CurrentQuestCountChanged();
	void OnExperienceStatesReady();
	void NotifyPreconditionMayHaveChanged();
	void IncrementQuestScore();
	void GetQuestGiverStatus(struct FQuestGiverKey& QuestGiverKey, bool* bAvailableQuests, bool* bTasksToComplete, bool* bFoundQuestGiver);
	bool FindQuestHUDVisibilityFromTask(struct FOngoingTaskProgress& TaskProgress);
	bool FindQuestHUDVisibility(class FName QuestName);
	void Client_RequestItemTurnIn(struct FOngoingTaskProgress& TaskForTurnIn);
	void Client_BroadcastTaskProgressChanged(struct FOngoingTaskProgress& TaskProgressed);
	void Client_BroadcastTaskCompleted(struct FOngoingTaskProgress& TaskCompleted);
	void Client_BroadcastTaskAccepted(struct FOngoingTaskProgress& TaskAccepted);
	void Client_BroadcastQuestCompleted(struct FQuestAssetReference& CompletedQuest);
	void Client_BroadcastQuestAccepted(struct FQuestAssetReference& AcceptedQuest);
	void Client_BroadcastQuestAbandoned(struct FQuestAssetReference& AbandonedQuest);
	void AddOrChangeQuestVisibilityOnHUDVisibilityList(class FName QuestName, bool Visible);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RadialMenuInterface
class IRadialMenuInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRadialMenuInterface* GetDefaultObj();

	bool IsEnabled();
	class FText GetName();
	class UTexture2D* GetIconTexture();
	class FText GetDisabledDescription();
	class FText GetDescription();
	enum class ERadialButtonType GetButtonType();
	void CallFunction();
};

// 0x118 (0x7F0 - 0x6D8)
// Class NWX.RainScopedAkComponent
class URainScopedAkComponent : public UScopedAkComponent
{
public:
	uint8                                        Pad_995A[0x118];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URainScopedAkComponent* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.RangedWeaponComponent
class URangedWeaponComponent : public UActorComponent
{
public:
	uint8                                        Pad_995B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URangedWeaponComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.RangedWeaponInterface
class IRangedWeaponInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRangedWeaponInterface* GetDefaultObj();

	float GetRaycastDistance();
};

// 0x18 (0x2B8 - 0x2A0)
// Class NWX.ReadOnlyShopInteractionSession
class AReadOnlyShopInteractionSession : public AInfo
{
public:
	uint8                                        Pad_995C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGuid>                         AvailableOffers;                                   // 0x2A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AReadOnlyShopInteractionSession* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmCard
class IRealmCard : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRealmCard* GetDefaultObj();

	int32 GetUsageCost();
	enum class ERealmCardType GetType();
	class URealmCardDefinitionDataAsset* GetRealmCardDataAsset();
	int32 GetPowerLevel();
	class FText GetName(class UObject* WorldContext);
	TSoftObjectPtr<class UTexture2D> GetIcon(class UObject* WorldContext);
	struct FGameplayTagContainer GetGameplayTags();
	class FText GetDescription(class UObject* WorldContext);
};

// 0x0 (0x48 - 0x48)
// Class NWX.RealmCardDefinitionDataAsset
class URealmCardDefinitionDataAsset : public UUniquelyIdentifiablePrimaryDataAsset
{
public:

	static class UClass* StaticClass();
	static class URealmCardDefinitionDataAsset* GetDefaultObj();

};

// 0x18 (0x60 - 0x48)
// Class NWX.MajorRealmCardAsset
class UMajorRealmCardAsset : public URealmCardDefinitionDataAsset
{
public:
	uint8                                        Pad_9965[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UsageCost;                                         // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PowerLevel;                                        // 0x54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealmGameplayTags*                    GameplayTags;                                      // 0x58(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMajorRealmCardAsset* GetDefaultObj();

};

// 0x78 (0xC0 - 0x48)
// Class NWX.MinorRealmCardAsset
class UMinorRealmCardAsset : public URealmCardDefinitionDataAsset
{
public:
	uint8                                        Pad_9966[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UNWXItemPresentationDataAsset> PresentationData;                                  // 0x58(0x28)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        UsageCost;                                         // 0x80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9967[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URealmGameplayTags*                    GameplayTags;                                      // 0x88(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameRule_ApplyPlayerStatusEffects*    AppliedStatusEffects;                              // 0x90(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameRule_ItemRewardModifier*          AppliedItemRewardModifiers;                        // 0x98(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameRule_ApplyStructureTraits*        AppliedStructureTraits;                            // 0xA0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameRule_ApplyEnvironmentEffect*      AppliedEnvironmentEffects;                         // 0xA8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameRule*>                     GameRuleContainer;                                 // 0xB0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMinorRealmCardAsset* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class NWX.BiomeRealmCardAsset
class UBiomeRealmCardAsset : public URealmCardDefinitionDataAsset
{
public:
	uint8                                        Pad_9968[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UsageCost;                                         // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PowerLevel;                                        // 0x54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBiomeID                          BiomeId;                                           // 0x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9969[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URealmGameplayTags*                    GameplayTags;                                      // 0x60(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBiomeRealmCardAsset* GetDefaultObj();

};

// 0x18 (0x60 - 0x48)
// Class NWX.AddressRealmCardAsset
class UAddressRealmCardAsset : public URealmCardDefinitionDataAsset
{
public:
	uint8                                        Pad_996A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UsageCost;                                         // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_996B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URealmGameplayTags*                    GameplayTags;                                      // 0x58(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAddressRealmCardAsset* GetDefaultObj();

};

// 0x20 (0x378 - 0x358)
// Class NWX.RealmCardMachine
class ARealmCardMachine : public ANWXActor
{
public:
	uint8                                        Pad_996C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URealmCardMachineComponent*            RealmCardMachineComponent;                         // 0x360(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 UniqueID;                                          // 0x368(0x10)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ARealmCardMachine* GetDefaultObj();

	class FString GetSpawnPointUniqueId();
};

// 0x98 (0x138 - 0xA0)
// Class NWX.RealmCardMachineComponent
class URealmCardMachineComponent : public UActorComponent
{
public:
	uint8                                        Pad_9981[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UInWorldItemContainerComponent*        TableContainer;                                    // 0xB0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInventoryEntry>               LastPlayedRealmCards;                              // 0xB8(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9982[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsRealmCardPlacementModelInitialized;              // 0xD8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9983[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInUse;                                            // 0xF0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9984[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnRealmCardPlacementModelInitialized;              // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSavedRealmResponseUpdated;                       // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLastPlayedRealmCardsChanged;                     // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9985[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URealmCardMachineComponent* GetDefaultObj();

	void UpdateTableCardVariables(TScriptInterface<class IItemContainer>& Source, struct FInventoryEntry& Item, int32 Quantity);
	void UpdateSavedDeploymentResponse(bool IsReopening);
	void RemoveCardsFromTableOnStartPortal(class ANWXPlayerController* PlayerController);
	void RemoveCardFromTable(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToRemove);
	void RemoveCardFromDeck(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToRemove);
	void OnRep_LastPlayedCards();
	void MoveCardFromTableToDeck(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToMove);
	void MoveCardFromDeckToTable(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToMove);
	bool IsInUse();
	void InitializeRealmCardPlacementModel(class ANWXPlayerController* PlayerController);
	bool GetTableHasMajorCard();
	bool GetTableHasBiomeCard();
	bool GetTableHasAddressCard();
	class UInWorldItemContainerComponent* GetTableContainer();
	TArray<struct FInventoryEntry> GetLastPlayedRealmCards();
	TScriptInterface<class IItemContainer> GetDeckContainer();
	void GetCardsOnTable(TArray<struct FInventoryEntry>* OutTableCards);
	void GetCardsInDeck(TArray<struct FInventoryEntry>* OutDeckCards);
	void ClearRealmCardPlacementModel(class ANWXPlayerController* PlayerController);
	void ClearLastPlayedRealmCardsFromRCM(class ANWXPlayerController* PlayerController);
	void CheckSavedDeployments(class ANWXPlayerController* PlayerController, struct FRealmSettings& RealmSettings);
	bool CanAddCardToTable(struct FInventoryEntry& CardToAdd);
	void AddCardToTable(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToAdd);
	void AddCardToDeck(class ANWXPlayerController* PlayerController, struct FInventoryEntry& CardToAdd);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmCardMachineDataProvider
class IRealmCardMachineDataProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRealmCardMachineDataProvider* GetDefaultObj();

	bool GetTableHasMajorCard();
	bool GetTableHasBiomeCard();
	bool GetTableHasAddressCard();
	void GetCardsOnTable(TArray<struct FInventoryEntry>* OutTableCards);
	void GetCardsInDeck(TArray<struct FInventoryEntry>* OutDeckCards);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmCardsFunctionLibrary
class URealmCardsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class URealmCardsFunctionLibrary* GetDefaultObj();

	void TryGetProfileFromRespiteAddressCard(struct FInventoryEntry& Card, class FString* Profile, enum class EGetResult* Branches);
	void TryGetNameFromNamedAddressCard(struct FInventoryEntry& Card, class FString* Name, enum class EGetResult* Branches);
	void TryGetDeploymentFromNPCAddressCard(struct FInventoryEntry& Card, class FString* Deployment, enum class EGetResult* Branches);
	struct FGameplayTagContainer TagNameArrayToTagConatiner(TArray<class FString>& InTagNames);
	TArray<struct FGuid> SetRealmCardIDArray(const TArray<struct FItemDataReference>& RealmCardDataReferences);
	bool IsMapInBuild(const class FString& MapName);
	bool IsInventoryEntryRealmCard(struct FInventoryEntry& Entry);
	bool HasVaultTags(struct FGameplayTagContainer& InRealmTagsContainer);
	bool HasTutorialTags(struct FGameplayTagContainer& InRealmTagsContainer);
	bool HasOnboardingRealmsTags(struct FGameplayTagContainer& InRealmTagsContainer);
	struct FRealmSettings GetRealmSettingsFromRealmCards(TArray<struct FItemData>& Items, bool* IsValidCardSet);
	int32 GetRealmCardUsageCost(struct FInventoryEntry& Card);
	TScriptInterface<class IRealmCard> GetRealmCardInterfaceFromRealmCardDefinitionReference(struct FRealmCardDefinitionReference& RealmCardDefinitionReference);
	int32 GetRealmCardAssetUsageCost(struct FItemData_RealmCard& RealmCard);
	enum class ERealmCardType GetRealmCardAssetTypeFromEntry(struct FInventoryEntry& InventoryEntry);
	enum class ERealmCardType GetRealmCardAssetType(struct FItemData_RealmCard& RealmCard);
	int32 GetRealmCardAssetPowerLevel(struct FItemData_RealmCard& RealmCard);
	struct FGameplayTagContainer GetRealmCardAssetGameplayTags(struct FItemData_RealmCard& RealmCard);
	class FText GetRealmCardAssetDescription(class UObject* WorldContextObject, struct FItemData_RealmCard& RealmCard);
	void GetPlayerRealmCards(class ANWXPlayerController* PlayerController, TArray<struct FInventoryEntry>* RealmCardsArray);
	enum class EBiomeID GetBiomeIDFromRealmCard(struct FItemData_RealmCard& RealmCardStructData);
	void GetActiveRealmCardGameRules(class UObject* WorldContextObject, TArray<class UGameRule*>* GameRules);
	TArray<struct FItemData> GenerateRealmCardsData(class ANWXGameStateBase* GameStateBase);
	class FString FindVaultMeetingRequirements(struct FRealmSettings& RealmSettingsIn);
	TArray<class FString> FindMapsMeetingRequirements(struct FRealmSettings& RealmSettingsIn);
	void CreateRespiteRealmCard(class UObject* WorldContextObject, const class FString& ProfileId, struct FInventoryEntry* OutInventoryEntry, enum class EGetResult* Branches);
	void CreateNPCAddressRealmCardForThisDeploy(class UObject* WorldContextObject, struct FGameplayTag& NPCTag, struct FInventoryEntry* OutInventoryEntry, enum class EGetResult* Branches);
	void CreateNamedRealmCard(class UObject* WorldContextObject, const class FString& Name, struct FInventoryEntry* OutInventoryEntry, enum class EGetResult* Branches);
	void CreateAddressRealmCardForThisDeploy(class UObject* WorldContextObject, struct FInventoryEntry* OutInventoryEntry, enum class EGetResult* Branches);
	TArray<class FString> ConvertTagContainerToStringArray(struct FGameplayTagContainer& InTagContainer);
	void BP_GetActiveRealmCards(class UObject* WorldContextObject, TArray<TScriptInterface<class IRealmCard>>* RealmCards);
};

// 0x50 (0x90 - 0x40)
// Class NWX.RealmDataProcessor
class URealmDataProcessor : public URealmDataSource
{
public:
	TSet<class UClass*>                          RequiredSources;                                   // 0x40(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmDataProcessor* GetDefaultObj();

};

// 0x88 (0x118 - 0x90)
// Class NWX.RealmCardsProcessor
class URealmCardsProcessor : public URealmDataProcessor
{
public:
	uint8                                        Pad_99B2[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class URealmCardTagInfoAsset> RealmCardTagInfoAsset;                             // 0xB8(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                       ActiveRealmCards;                                  // 0xE0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UStringTable>           RealmCardStringTable;                              // 0xF0(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmCardsProcessor* GetDefaultObj();

	void UnbindEventFrom_OnRealmCardDeckEvent(FDelegateProperty_& Event);
	void UnbindEventFrom_GameRuleEvents(FDelegateProperty_& Event);
	class URealmCardsProcessor* GetRealmCardsProcessor(class UObject* WorldContext);
	TArray<TScriptInterface<class IRealmCard>> GetCopyOfActiveRealmCards();
	bool ExecuteCardAction(class UObject* WorldContext, TScriptInterface<class IRealmCard>& RealmCard, enum class ERealmCardAction CardAction);
	void BindEventTo_OnRealmCardDeckEvent(FDelegateProperty_& Event);
	void BindEventTo_GameRuleEvents(FDelegateProperty_& Event);
};

// 0x1C0 (0x1F0 - 0x30)
// Class NWX.RealmCardsRegistry
class URealmCardsRegistry : public UDataAsset
{
public:
	int32                                        MaxRealmCardsPossible;                             // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_99B3[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemDataReference                    AddressRealmCardReference;                         // 0x40(0x80)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDataReference                    RespiteAddressRealmCardReference;                  // 0xC0(0x80)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDataReference                    NamedAddressRealmCardReference;                    // 0x140(0x80)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>             RealmTagFormulaTable;                              // 0x1C0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_99B4[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URealmCardsRegistry* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.RealmCardTagInfoAsset
class URealmCardTagInfoAsset : public UDataAsset
{
public:
	TMap<struct FGameplayTag, class FText>       TagDescriptors;                                    // 0x30(0x50)(Edit, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmCardTagInfoAsset* GetDefaultObj();

	bool GetDescriptor(struct FGameplayTag& Tag, class FText* Text);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmCheats
class URealmCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class URealmCheats* GetDefaultObj();

	void OpenMagistrate();
	void CountResources();
};

// 0xA0 (0xD0 - 0x30)
// Class NWX.RealmDataSubsystem
class URealmDataSubsystem : public UNWXWorldSubsystem
{
public:
	TMap<class UClass*, class URealmDataSource*> DataSources;                                       // 0x30(0x50)(NativeAccessSpecifierPrivate)
	TMap<class UClass*, class URealmDataProcessor*> DataProcessors;                                    // 0x80(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmDataSubsystem* GetDefaultObj();

	class UObject* FindDataProcessor(class UClass* ProcessorClass);
};

// 0x118 (0x210 - 0xF8)
// Class NWX.RealmDeploymentSystemComponent
class URealmDeploymentSystemComponent : public UPersistentDataComponent
{
public:
	FMulticastInlineDelegateProperty_            CreateRealmRequest;                                // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            JoinDeploymentRequest;                             // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                MapName;                                           // 0x118(0x10)(Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                DeploymentName;                                    // 0x128(0x10)(Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                PreviousDeploymentName;                            // 0x138(0x10)(Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                RespiteDeploymentName;                             // 0x148(0x10)(Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99C3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            LastSavedPlayerTransform;                          // 0x160(0x60)(Net, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>           SavedDeployments;                                  // 0x1C0(0x50)(SaveGame, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmDeploymentSystemComponent* GetDefaultObj();

	void Server_SaveRealmTagsAndRealm(struct FRealmSettings& RealmSettings, TScriptInterface<class IServerKeyProvider>& KeyProvider, const class FString& DeploymentToSave, bool ResetSavedRealm);
	void Server_RealmCardMachine_RestartPortal(class UObject* Machine);
	void Server_RealmCardMachine_OpenRealm(class UObject* Machine, class URealmCardMachineComponent* RealmCardMachineComponent, TArray<struct FInventoryEntry>& Cards, bool bPublicRealm, bool bFreshRealm);
	void Server_RealmCardMachine_OnMenuClosed(class URealmCardMachineComponent* RealmCardMachineComponent);
	void Server_RealmCardMachine_ClosePortal(class UObject* Machine);
	void Server_JoinDeployment(const class FString& ID);
	void Server_CreateRealm(struct FRealmRecipe& Recipe, int32 Ferocity, int32 Seed, struct FRealmSettings& RealmSettings, bool IsTestRealm, const class FString& POIDistributionKey);
	void JoinDeploymentRequest__DelegateSignature(class AController* Controller, const class FString& ID);
	bool HasSavedRealmWithTags(struct FRealmSettings& RealmSettings, TScriptInterface<class IServerKeyProvider>& KeyProvider);
	class FString GetSavedRealmWithTags(struct FRealmSettings& RealmSettings, TScriptInterface<class IServerKeyProvider>& KeyProvider);
	void CreateRealmRequest__DelegateSignature(class AController* Controller, struct FRealmRecipe& Recipe, int32 Ferocity, int32 Seed, struct FRealmSettings& RealmSettings, bool IsTestRealm, const class FString& POIDistributionKey);
	void Client_RealmCardMachine_OpenMenu(class UObject* Machine, class URealmCardMachineComponent* RealmCardMachineComponent, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
	void Client_OpenRealmsMenu(class UObject* Machine, TSubclassOf<class UNWXCommonWindowWidget> WidgetClass);
};

// 0x20 (0x48 - 0x28)
// Class NWX.RealmGameplayTags
class URealmGameplayTags : public UGameRuleRealm
{
public:
	struct FGameplayTagContainer                 Tags;                                              // 0x28(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URealmGameplayTags* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.RealmMeetsRequirements
class URealmMeetsRequirements : public URequirement
{
public:
	struct FRealmPlacementRequirement            Requirements;                                      // 0x28(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URealmMeetsRequirements* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.AllowedRespitesPersistentObject
class UAllowedRespitesPersistentObject : public UObject
{
public:
	uint8                                        Pad_99C6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PersistenceAllowedRespitePlayerIds;                // 0x30(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAllowedRespitesPersistentObject* GetDefaultObj();

};

// 0x28 (0xC8 - 0xA0)
// Class NWX.RealmRespitesComponent
class URealmRespitesComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnAllowedRespitePlayerIdsUpdated;                  // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FString>                        AllowedRespitePlayerIds;                           // 0xB0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	class UAllowedRespitesPersistentObject*      AllowedRespitesPersistentObject;                   // 0xC0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URealmRespitesComponent* GetDefaultObj();

	void Server_RemoveIdFromAllowedRespiteList(const class FString& PlayerId);
	void Server_AddIdToAllowedRespiteList(const class FString& PlayerId);
	void RemoveIdFromAllowedRespitePlayerIds(const class FString& PlayerId);
	void OnRep_AllowedRespitePlayerIds();
	void OnAllowedRespitePlayerIdsUpdatedDelegate__DelegateSignature(TArray<class FString>& IdList);
	bool IsPlayerOnAllowedRespiteList(const class FString& PlayerId);
	TArray<class FString> GetAllowedRespitePlayerIds();
	void AddIdToAllowedRespitePlayerIds(const class FString& PlayerId);
};

// 0xC0 (0xE8 - 0x28)
// Class NWX.PersistedRealmConfig
class UPersistedRealmConfig : public UObject
{
public:
	uint8                                        Pad_99CB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTemporalConfig                       TemporalConfig;                                    // 0x30(0x78)(Edit, BlueprintVisible, SaveGame, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FRealmSettings                        RealmSettings;                                     // 0xA8(0x40)(Edit, BlueprintVisible, SaveGame, ExposeOnSpawn, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPersistedRealmConfig* GetDefaultObj();

};

// 0x128 (0x1B8 - 0x90)
// Class NWX.RealmSettingsProcessor
class URealmSettingsProcessor : public URealmDataProcessor
{
public:
	uint8                                        Pad_99CE[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorkerFlagSource*                     WorkerFlagSource;                                  // 0xA8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_99CF[0x108];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URealmSettingsProcessor* GetDefaultObj();

	void UnbindEventFrom_RealmSettingsChanged(FDelegateProperty_& Event);
	void OnNewData();
	void MarkSettingsInvalid();
	struct FTemporalConfig GetTemporalConfig();
	struct FRealmSettings GetRealmSettings();
	bool GetCurrentRealmSettings(class UObject* WorldContext, struct FRealmSettings* OutRealmSettings);
	void BindEventTo_RealmSettingsChanged(FDelegateProperty_& Event);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmSettingsProvider
class IRealmSettingsProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRealmSettingsProvider* GetDefaultObj();

	void UnbindEventFrom_RealmSettingsChanged(FDelegateProperty_& Event);
	struct FRealmSettings GetRealmSettings();
	void BindEventTo_RealmSettingsChanged(FDelegateProperty_& Event);
};

// 0x0 (0x28 - 0x28)
// Class NWX.RealmTimeFunctionLibrary
class URealmTimeFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class URealmTimeFunctionLibrary* GetDefaultObj();

	bool IsNightTime(class UObject* WorldContextObject);
	float GetNormalizedNightTime();
	float GetNormalizedMiddayTime();
	float GetNormalizedDuskTime();
	float GetNormalizedDayHalfWayPointTime();
	float GetNormalizedDawnTime();
	class FString GetFormattedSetRealmTimeCommand(float DesiredNormalizedTime);
	bool GetCurrentNormalizedRealmTime(class UObject* WorldContextObject, float* OutNormalizedRealmTime);
	float ConvertToVisualTimeScaleFromNormalizedTime(float NormalizedTime);
	float ConvertNormalizedTimeto24Hr(float NormalizedTime);
};

// 0x50 (0x80 - 0x30)
// Class NWX.RecipeCollectionAsset
class URecipeCollectionAsset : public UDataAsset
{
public:
	TSet<struct FCraftingRecipeReference>        RelatedRecipes;                                    // 0x30(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class URecipeCollectionAsset* GetDefaultObj();

	void GetAllRelatedRecipes(TSet<struct FCraftingRecipeReference>* OutReferences);
};

// 0x20 (0xA0 - 0x80)
// Class NWX.DisciplineRecipeCollectionAsset
class UDisciplineRecipeCollectionAsset : public URecipeCollectionAsset
{
public:
	struct FGameplayTag                          DisciplineTag;                                     // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDisciplineRecipeCollectionAsset*> LinkedDisciplines;                                 // 0x88(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FPowerLevel                           PowerLevel;                                        // 0x98(0x4)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99D9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDisciplineRecipeCollectionAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.RedemptionsCheats
class URedemptionsCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class URedemptionsCheats* GetDefaultObj();

	void UpdateCurrentRedemptions();
	void SyncMyTwitchRedemptions();
	void PrintClaimableRedemptions();
	void ClaimRedemption(class FString* RedemptionId);
};

// 0x190 (0x1C0 - 0x30)
// Class NWX.RegionHidingRegistry
class URegionHidingRegistry : public UDataAsset
{
public:
	TMap<enum class EClothHidingRegions_Torso, struct FCustomizationMaterialParameter> ClothHidingTorsoSettings;                          // 0x30(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class EClothHidingRegions_Legs, struct FCustomizationMaterialParameter> ClothHidingLegsSettings;                           // 0x80(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class EClothHidingRegions_Gloves, struct FCustomizationMaterialParameter> ClothHidingGlovesSettings;                         // 0xD0(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class ESkinHidingRegions_UpperBody, struct FCustomizationMaterialParameter> SkinHidingUpperBodySettings;                       // 0x120(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class ESkinHidingRegions_LowerBody, struct FCustomizationMaterialParameter> SkinHidingLowerBodySettings;                       // 0x170(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URegionHidingRegistry* GetDefaultObj();

	TMap<class FName, struct FLinearColor> GetSkinHidingUpperBodyParameters(struct FSkinRegionHiding_UpperBody& Settings);
	TMap<class FName, struct FLinearColor> GetSkinHidingLowerBodyParameters(struct FSkinRegionShowing_LowerBody& Settings);
	TMap<class FName, struct FLinearColor> GetClothHidingTorsoParameters(struct FClothRegionHiding_Torso& Settings);
	TMap<class FName, struct FLinearColor> GetClothHidingLegsParameters(struct FClothRegionHiding_Legs& Settings);
	TMap<class FName, struct FLinearColor> GetClothHidingGlovesParameters(struct FClothRegionHiding_Gloves& Settings);
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.ReleventToSingleConnectionComponent
class UReleventToSingleConnectionComponent : public UActorComponent
{
public:
	uint8                                        Pad_99E1[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReleventToSingleConnectionComponent* GetDefaultObj();

	void SetConnectionToBeReleventFor(class APlayerController* NewConectionOwner);
	void OnConnectionOwnerDestroyed(class AActor* DestroyedActor);
};

// 0x8 (0x30 - 0x28)
// Class NWX.RequirePress
class URequirePress : public UInputModifier
{
public:
	uint8                                        Pad_99E2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URequirePress* GetDefaultObj();

};

// 0xC8 (0x168 - 0xA0)
// Class NWX.ResourceAmbientGlowComponent
class UResourceAmbientGlowComponent : public UActorComponent
{
public:
	float                                        ResourceSearchRadius;                              // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        VfxTypePoolSize;                                   // 0xA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MovingThreshold;                                   // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_99E6[0xBC];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UResourceAmbientGlowComponent* GetDefaultObj();

	bool IsLocal();
	bool HasPlayerReachedThreshold();
	void HandleRecycleIfResourceGone();
	class UInstancedResourceNodeComponent* GetIIMComponentFromActor(class AActor* Actor);
	void CalculateSquaredMovingThreshold();
	void AssignNiagaraSystems();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceCollectionInterface
class IResourceCollectionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IResourceCollectionInterface* GetDefaultObj();

	float RemoveResource(float Amount);
	bool CanRemoveResource();
	struct FPickupResult CalculatePickupResult();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceContainerObservable
class IResourceContainerObservable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IResourceContainerObservable* GetDefaultObj();

	void UnbindDelegate_OnResourceLevelChanged(FDelegateProperty_& Delegate);
	enum class EStructureResourceCollectionType GetResourceType();
	float GetResourceLevel();
	float GetMaxResourceLevel();
	void BindDelegate_OnResourceLevelChanged(FDelegateProperty_& Delegate);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceContainerAccess
class IResourceContainerAccess : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IResourceContainerAccess* GetDefaultObj();

	TScriptInterface<class IResourceContainerObservable> GetResourceContainerObservable();
};

// 0x28 (0x50 - 0x28)
// Class NWX.ResourceContainer
class UResourceContainer : public UObject
{
public:
	uint8                                        Pad_99E9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStructureResourceCollectionType  ResourceType;                                      // 0x30(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResourceLevel;                                     // 0x34(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MaxResourceLevel;                                  // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99EB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnResourceLevelChanged;                            // 0x40(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UResourceContainer* GetDefaultObj();

	void UnbindDelegate_OnResourceLevelChanged(FDelegateProperty_& Delegate);
	void ResourceLevelChangedMulticastDelegate__DelegateSignature(float ResourceLevel);
	void OnRep_Resource();
	enum class EStructureResourceCollectionType GetResourceType();
	float GetResourceLevel();
	float GetMaxResourceLevel();
	void BindDelegate_OnResourceLevelChanged(FDelegateProperty_& Delegate);
};

// 0x18 (0x40 - 0x28)
// Class NWX.ResourceCollector
class UResourceCollector : public UObject
{
public:
	class UResourceContainer*                    ResourceContainer;                                 // 0x28(0x8)(Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99ED[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          FillTimerHandle;                                   // 0x38(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UResourceCollector* GetDefaultObj();

	void CollectResource();
};

// 0x10 (0x38 - 0x28)
// Class NWX.ResourceCustomizationGem
class UResourceCustomizationGem : public UResourceCustomizationType
{
public:
	struct FDataTableRowHandle                   GemValue;                                          // 0x28(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UResourceCustomizationGem* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ResourceCustomizationMetal
class UResourceCustomizationMetal : public UResourceCustomizationType
{
public:
	struct FDataTableRowHandle                   MetalValue;                                        // 0x28(0x10)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UResourceCustomizationMetal* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceDistributionFunctionLibrary
class UResourceDistributionFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UResourceDistributionFunctionLibrary* GetDefaultObj();

	bool UpdateExistingResourceDistributionList(struct FResourceDistributionList* CurrentList, struct FItemConstraint& Constraint, class FName& AssetName);
	void GetResourceDistributionListFromMap(TMap<int32, struct FResourceDistributionList>& ResourceDistribution, const struct FPowerLevel& PowerLevel, struct FResourceDistributionList* OutResourceDistributionList);
	void AddNewEntryToResourceDistributionList(struct FResourceDistributionList* CurrentList, struct FItemConstraint& ItemConstraint, const struct FPowerLevel& AssetPowerLevel, class FName AssetName);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceGlossaryHelper
class UResourceGlossaryHelper : public UObject
{
public:

	static class UClass* StaticClass();
	static class UResourceGlossaryHelper* GetDefaultObj();

	void GetItemRewardsFromCreatureDataTable(TArray<struct FCreatureRewardAndRealm>* CreatureRewardAndRealms);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourceNodeEditorUtils
class UResourceNodeEditorUtils : public UObject
{
public:

	static class UClass* StaticClass();
	static class UResourceNodeEditorUtils* GetDefaultObj();

	class UStaticMesh* GetSingleMeshFromDuplicate(struct FResourceNodeTemplate& TemplateToDuplicate, int32 NumState);
	class UStaticMesh* GetSingleMeshAtIndex(TArray<struct FResourceNodeTemplate>& TemplatesToDuplicate, int32 NumTemplate, int32 NumState);
};

// 0x98 (0x3F0 - 0x358)
// Class NWX.ResourceNodeIIMBase
class AResourceNodeIIMBase : public ANWXActor
{
public:
	uint8                                        Pad_9A04[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPlayHarvestAudio;                                // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnSpawnDepletionVfx;                               // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TSet<int32>                                  PredictedItemsIndexes;                             // 0x398(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsGameplayStateChanging;                          // 0x3E8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A05[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AResourceNodeIIMBase* GetDefaultObj();

	void ScheduleChangeToGameplayState(struct FIIMInstance& Instance, class UInstancedResourceNodeComponent* ResourceNode, float Seconds);
	void PredictPickUp(class AActor* InitiatingPlayer, struct FInteractionTargetData& InteractionTargetData, const struct FGameplayTag& TagToMatch, enum class EResourceType AllowedType);
	void GetResourceForInstance(struct FIIMInstance& Instance, struct FResourceSpawn* OutResource);
	bool AddInstance(class FName& ResourceId, struct FTransform& WorldTransform, class FName& ClusterTheme, struct FIIMInstance* OutInstance);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ResourcesFunctionLibrary
class UResourcesFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UResourcesFunctionLibrary* GetDefaultObj();

	void GetResourceBuffsFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, class FName* SystemBuffsRowName, TArray<struct FDataTableRowHandle>* ResourceNames);
	void GetInventoryEntryFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, struct FInventoryEntry* InventoryEntry);
	void GetCraftingRecipeInstancedFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, class FString* CrafterUniqueID, struct FCraftingRecipeReference* RecipeReference, int32* Quantity, TArray<struct FInventoryEntry>* InputParts, bool* bSlotsSelected, bool* bSlotsChanged);
	void GetCraftingRecipeFromTargetData(struct FGameplayAbilityTargetDataHandle& TargetData, class FString* CrafterUniqueID, struct FCraftingRecipeReference* RecipeReference, int32* Quantity, TArray<class FName>* Items, TArray<int32>* ItemAmounts);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromResourceBuffs(class FName& SystemBuffsRowName, TArray<struct FDataTableRowHandle>& ResourceNames);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromInventoryEntry(struct FInventoryEntry& InventoryEntry);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromCraftingRecipeInstanced(const class FString& CrafterUniqueID, struct FCraftingRecipeReference& RecipeReference, int32 Quantity, TArray<struct FInventoryEntry>& InputParts, bool bSlotsSelected, bool bSlotsChanged);
	struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromCraftingRecipe(const class FString& CrafterUniqueID, struct FCraftingRecipeReference& RecipeReference, int32 Quantity, TArray<class FName>& Items, TArray<int32>& ItemAmounts);
};

// 0x0 (0x38 - 0x38)
// Class NWX.RuleLayerBunkers
class URuleLayerBunkers : public UEncounterRuleLayer
{
public:

	static class UClass* StaticClass();
	static class URuleLayerBunkers* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class NWX.RuleLayerNoMultiples
class URuleLayerNoMultiples : public UEncounterRuleLayer
{
public:

	static class UClass* StaticClass();
	static class URuleLayerNoMultiples* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class NWX.RuleLayerNPC
class URuleLayerNPC : public UEncounterRuleLayer
{
public:
	float                                        MinDistanceBetweenNPCPlugs;                        // 0x38(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A21[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuleLayerNPC* GetDefaultObj();

};

// 0x1D8 (0x210 - 0x38)
// Class NWX.RuleLayerPush
class URuleLayerPush : public UEncounterRuleLayer
{
public:
	bool                                         bPerRealm;                                         // 0x38(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A22[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRuleFrequency                        RealmFrequency;                                    // 0x3C(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bPerCluster;                                       // 0x54(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A23[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRuleFrequency                        ClusterFrequency;                                  // 0x58(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bPerPOI;                                           // 0x70(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A24[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<enum class EPOIType>                    POITypes;                                          // 0x78(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuleFrequency                        POIFrequency;                                      // 0xC8(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bUsePreferredSocketShape;                          // 0xE0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESocketShape                      PreferredSocketShape;                              // 0xE1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A25[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPlugSpecification                    PlugSpecification;                                 // 0xE8(0x88)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A26[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuleLayerPush* GetDefaultObj();

};

// 0x128 (0x150 - 0x28)
// Class NWX.POIDistributionMapContext
class UPOIDistributionMapContext : public UObject
{
public:
	uint8                                        Pad_9A27[0x118];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UPOIAssetPartition*                    POIPartition;                                      // 0x140(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlugAssetPartition*                   PlugPartition;                                     // 0x148(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPOIDistributionMapContext* GetDefaultObj();

};

// 0x330 (0x3D0 - 0xA0)
// Class NWX.RuntimeRealmPlacer
class URuntimeRealmPlacer : public UActorComponent
{
public:
	struct FRealmSettings                        RealmSettings;                                     // 0xA0(0x40)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClusterDistribution                  ClusterDistributionDefault;                        // 0xE0(0xC)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A3B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            ClusterThemeTable;                                 // 0xF0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UPOIDistributionStage>> DistributionStageClasses;                          // 0xF8(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                            PlugPredicates;                                    // 0x108(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            DefaultClusterThemes;                              // 0x110(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            RulesetMappings;                                   // 0x118(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPOIRuleset                       DefaultPOIRulesetType;                             // 0x120(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPlugRuleset                      DefaultPlugRulesetType;                            // 0x121(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseLevelInstances;                                // 0x122(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A3C[0xD];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPOIDistributionMapContext*            DistributionMapContext;                            // 0x130(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPOIAssetPartition*                    POIAssetPartition;                                 // 0x138(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlugAssetPartition*                   PlugAssetPartition;                                // 0x140(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9A3D[0xE0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UDatapointStage*                       DatapointStage;                                    // 0x228(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A3E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPOIScriptableRuleset*                 CustomRuleset;                                     // 0x240(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPOIScriptablePlugRuleset*             CustomPlugRuleset;                                 // 0x248(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A3F[0x168];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UPOIDistributionStage*>         DistributionStages;                                // 0x3B8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A40[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuntimeRealmPlacer* GetDefaultObj();

	class AStreamingLevelProxyActor* SpawnStreamingLevelFromPath(struct FSoftLevelPath& Path, struct FPOIStreamingLevelDefinition& POI, struct FTransform& Transform);
	class AStreamingLevelProxyActor* SpawnStreamingLevel(struct FPOIStreamingLevelDefinition& POIData, struct FVector& Location, struct FRotator& Rotation);
	bool SpawnPOIDebug(struct FPOIStreamingLevelDefinition& StreamingDefinition, struct FPOIData& POIData);
	void SetDistributionStageEnabled(bool bEnable);
	void SetDatapointStage(class UDatapointStage* InDatapointStage);
	void SetCustomPOIRuleset(class UPOIScriptableRuleset* InCustomRuleset);
	void SetCustomPlugRuleset(class UPOIScriptablePlugRuleset* InCustomPlugRuleset);
	void PrintPOIList();
	void PrintClusterDistributions();
	void PlacePOIs();
	TArray<class FName> GetRealmClusterThemeNames();
	class UPOIAssetPartition* GetPOIPartition();
	class FString GetPoiDistributionKey();
	int32 GetPOIDistributionHash();
	bool GetPOIDefinitionByName(class FName& POIName, struct FPOIStreamingLevelDefinition* POIDefinition);
	bool GetPlugDefinitionByName(class FName& PlugName, struct FPOIPlugStreamingLevelDefinition* PlugDefinition);
	class UPlugAssetPartition* GetPlugAssetPartition();
	TArray<struct FPOIData> GetDatapoints();
	bool GeneratePOIDistributionFromKey(const class FString& InKey);
	bool GeneratePOIDistribution();
	void CheckIfLevelsLoaded();
	void AllLevelsLoaded();
	void AddPOIDistributionStage(class UPOIDistributionStage* DistributionStage);
};

// 0x0 (0x28 - 0x28)
// Class NWX.SchematicInfoInterface
class ISchematicInfoInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISchematicInfoInterface* GetDefaultObj();

	bool StructureHasAddedResources();
	TArray<struct FStructureResourceRequirements> GetTotalResourceRequirements();
	TArray<class UStructureInteraction_PostConstructionInteraction_DataAsset*> GetStructureInteractions();
	class FString GetStructureID();
	class FText GetDisplayNameText();
	void GetBuildRadiusInformation(float* OutRadius, struct FVector* OutOrigin);
	class UActorComponent* GetAudioComponent();
	class USphereComponent* GetAreaOfEffect();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ScriptableDatapointStage
class UScriptableDatapointStage : public UDatapointStage
{
public:

	static class UClass* StaticClass();
	static class UScriptableDatapointStage* GetDefaultObj();

	bool OnGenerateDatapoints(TArray<struct FPOIData>& InPOIData, class FString* DistributionKey, TArray<struct FPOIData>* OutPOIData);
};

// 0x100 (0x1A0 - 0xA0)
// Class NWX.ScriptedPlayerAVFXComponent
class UScriptedPlayerAVFXComponent : public UActorComponent
{
public:
	TSubclassOf<class AStructureConstructedBase> RealmicTransmuterStructureClass;                   // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                 PrimaryRealmicTransmuterTags;                      // 0xA8(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        RealmicTransmutationTimeout;                       // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9A4F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        DistantRealmicTransmuterVFX;                       // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                        RealmicTransmutationEndVFX;                        // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkStateValue*                         RealmicTransmutationMusicState;                    // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         RealmicTransmutationEndMusicStinger;               // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkStateValue*                         StartRealmicTransmutationMixState;                 // 0xF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkStateValue*                         EndRealmicTransmutationMixState;                   // 0xF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAkAudioEvent>          StartDistantRealmicTransmuterAkEvent;              // 0x100(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAkAudioEvent>          EndDistantRealmicTransmuterAkEvent;                // 0x128(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         RealmicTransmutationEndAkEvent;                    // 0x150(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PrimaryRealmicTransmuterLocation;                  // 0x158(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A51[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UScriptedPlayerAVFXComponent* GetDefaultObj();

	void Server_TriggerRealmicTransmutationEffects(struct FVector& TransmuterLocation);
	void Server_EndRealmicTransmutationEffects();
	void Client_TriggerRealmicTransmutationEffects(struct FVector& TransmuterLocation);
	void Client_EndRealmicTransmutationEffects();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SelectableProfileLoadoutFunctionLibrary
class USelectableProfileLoadoutFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USelectableProfileLoadoutFunctionLibrary* GetDefaultObj();

	TMap<enum class ELoadoutSlotType, struct FInventoryEntry> GetEquippedEntriesFromMetadata(TMap<class FString, class FString>& Inventory, class ULoadoutComponentBase* LoadoutComponent);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ServerKeyProvider
class IServerKeyProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IServerKeyProvider* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.ServerKeyProviderUsingRealmTags
class UServerKeyProviderUsingRealmTags : public UObject
{
public:
	uint8                                        Pad_9A53[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGameplayTag>                  AllowedTagsToCreateKey;                            // 0x30(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UServerKeyProviderUsingRealmTags* GetDefaultObj();

};

// 0xE0 (0x110 - 0x30)
// Class NWX.SessionSubsystem
class USessionSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                        Pad_9A55[0xE0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USessionSubsystem* GetDefaultObj();

};

// 0x28 (0x58 - 0x30)
// Class NWX.ShadeSubsystem
class UShadeSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_9A57[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShadeSubsystem* GetDefaultObj();

	void UpdatePlayerShade(class APawn* Pawn);
	void StartShadeUpdateOnAllPlayers();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ShelterableEntityInterface
class IShelterableEntityInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IShelterableEntityInterface* GetDefaultObj();

	class UShelterComponent* GetShelterComponentForModify();
	class UShelterComponent* GetShelterComponent();
	struct FVector GetPointToCheckShelter();
};

// 0x18 (0xB8 - 0xA0)
// Class NWX.ShelterComponent
class UShelterComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnShelterStateChanged;                             // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsSheltered;                                      // 0xB0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A58[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShelterComponent* GetDefaultObj();

	void UpdateShelterState();
	void UnregisterForConstantShelterUpdates();
	void RegisterForConstantShelterUpdates();
	void OnRep_IsSheltered();
	bool IsSheltered();
	void EnsureConstantShelterUpdates();
};

// 0x18 (0x48 - 0x30)
// Class NWX.ShelterSubsystem
class UShelterSubsystem : public UNWXWorldSubsystem
{
public:
	uint8                                        Pad_9A59[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShelterSubsystem* GetDefaultObj();

	void OnTick();
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXShopTransactable
class UNWXShopTransactable : public UObject
{
public:

	static class UClass* StaticClass();
	static class UNWXShopTransactable* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ShopCurrency
class UShopCurrency : public UNWXShopTransactable
{
public:

	static class UClass* StaticClass();
	static class UShopCurrency* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.ShopCurrencyReference
class UShopCurrencyReference : public UShopCurrency
{
public:
	class UShopCurrencyDataAsset*                ShopCurrencyDataAsset;                             // 0x28(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopCurrencyReference* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class NWX.EssenceCurrency
class UEssenceCurrency : public UShopCurrency
{
public:
	int32                                        Quantity;                                          // 0x28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A5A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USpawnableTransferContainer*           ContainerToTransfer;                               // 0x30(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UItemDataAsset>         EssenceDAPtr;                                      // 0x38(0x28)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UEssenceCurrency* GetDefaultObj();

};

// 0x0 (0x60 - 0x60)
// Class NWX.Tier1EssenceCurrency
class UTier1EssenceCurrency : public UEssenceCurrency
{
public:

	static class UClass* StaticClass();
	static class UTier1EssenceCurrency* GetDefaultObj();

};

// 0x0 (0x60 - 0x60)
// Class NWX.Tier2EssenceCurrency
class UTier2EssenceCurrency : public UEssenceCurrency
{
public:

	static class UClass* StaticClass();
	static class UTier2EssenceCurrency* GetDefaultObj();

};

// 0x0 (0x60 - 0x60)
// Class NWX.Tier3EssenceCurrency
class UTier3EssenceCurrency : public UEssenceCurrency
{
public:

	static class UClass* StaticClass();
	static class UTier3EssenceCurrency* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.ShopCurrencyDataAsset
class UShopCurrencyDataAsset : public UDataAsset
{
public:
	class UShopCurrency*                         ShopCurrency;                                      // 0x30(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopCurrencyDataAsset* GetDefaultObj();

};

// 0x90 (0xB8 - 0x28)
// Class NWX.ShopTransactablePresentationData
class UShopTransactablePresentationData : public UObject
{
public:
	int32                                        Quantity;                                          // 0x28(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A5C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  Name;                                              // 0x30(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ToolTipText;                                       // 0x48(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             CurrencyIconTexture;                               // 0x60(0x28)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             PreviewIconTexture;                                // 0x88(0x28)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETransactableType                 TransactableType;                                  // 0xB0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A5D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShopTransactablePresentationData* GetDefaultObj();

};

// 0x2F8 (0x3B0 - 0xB8)
// Class NWX.ShopTransactableItemPresentationData
class UShopTransactableItemPresentationData : public UShopTransactablePresentationData
{
public:
	uint8                                        Pad_9A5E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       InventoryEntry;                                    // 0xC0(0x2F0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopTransactableItemPresentationData* GetDefaultObj();

};

// 0x10 (0xC8 - 0xB8)
// Class NWX.ShopTransactableCraftingRecipePresentationData
class UShopTransactableCraftingRecipePresentationData : public UShopTransactablePresentationData
{
public:
	struct FGuid                                 RecipeId;                                          // 0xB8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopTransactableCraftingRecipePresentationData* GetDefaultObj();

};

// 0x10 (0xC8 - 0xB8)
// Class NWX.ShopTransactableSchematicPresentationData
class UShopTransactableSchematicPresentationData : public UShopTransactablePresentationData
{
public:
	struct FGuid                                 SchematicId;                                       // 0xB8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopTransactableSchematicPresentationData* GetDefaultObj();

};

// 0x10 (0xC8 - 0xB8)
// Class NWX.ShopTransactableWithRecipePresentationData
class UShopTransactableWithRecipePresentationData : public UShopTransactablePresentationData
{
public:
	TArray<struct FIngredientPresentationData>   IngredientPresentationDatas;                       // 0xB8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopTransactableWithRecipePresentationData* GetDefaultObj();

};

// 0x48 (0x90 - 0x48)
// Class NWX.ShopDescriptorDataAsset
class UShopDescriptorDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	class FText                                  ShopName;                                          // 0x48(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                  ShopDescription;                                   // 0x60(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bAppearInShopRegistry;                             // 0x78(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A5F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UShopOfferManifestDataAsset*>   ShopOfferManifests;                                // 0x80(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopDescriptorDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ShopExperienceStateIDEnumerator
class UShopExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UShopExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ShopFront
class IShopFront : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IShopFront* GetDefaultObj();

	TArray<class UShopOfferDataAsset*> GetShopOffers();
};

// 0x0 (0x28 - 0x28)
// Class NWX.ShopHelperFunctionLibrary
class UShopHelperFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UShopHelperFunctionLibrary* GetDefaultObj();

	void MakeQuestPresentationDataFromShopOfferPresentation(struct FShopOfferPresentation& ShopOfferPresentation, struct FQuestPresentationData* OutQuestPresentationData);
	struct FShopOfferPresentation MakePresentationData(struct FGuid& ShopOfferID, TScriptInterface<class IShopInteractionModel>& InteractionModel, class UNWXTechTreeSubSystem* NWXTechTreeSubSystem);
	class UNWXTechTreeSubSystem* GetTechTreeSubSystem(class UObject* WorldContext);
	class UShopRegistryDataAsset* GetShopRegistryAsset();
	void GetEssenceQuantityRequiredFromQuestData(struct FQuest& QuestData, int32* QuantityRequired);
	void GetAllShopDescriptors(TArray<struct FShopDescriptorRegistryEntry>* OutShopRegistryEntries);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ShopInteractionModel
class IShopInteractionModel : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IShopInteractionModel* GetDefaultObj();

	void UnbindEventFrom_OnOffersChanged(FDelegateProperty_& Event);
	int32 RequestPurchase(struct FGuid& OfferId, FDelegateProperty_& PurchaseTransactionResponse);
	bool IsValidOfferID(const struct FGuid& OfferId);
	void GetAvailableOffers(TArray<struct FGuid>* OutAvailableOffers);
	void BindEventTo_OnOffersChanged(FDelegateProperty_& Event);
};

// 0x80 (0x320 - 0x2A0)
// Class NWX.ShopInteractionSession
class AShopInteractionSession : public AInfo
{
public:
	uint8                                        Pad_9A64[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Purchaser;                                         // 0x2A8(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IShopFront>           ShopProvider;                                      // 0x2B0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPendingShopTransaction>       PendingTransactions;                               // 0x2C0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                         AvailableOffers;                                   // 0x2D0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	struct FShopOfferPurchasableState            OffersPurchasableState;                            // 0x2E0(0x18)(Net, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A65[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShopInteractionSession* GetDefaultObj();

	void Server_InitiateTransaction(const struct FShopTransaction& Transaction);
	void Server_AcknowledgeServerResponse(int32 LastTransaction);
	void OnRep_OfferPurchasableState();
	void OnRep_AvailableOffers();
	void Client_ConfirmShopTransaction(int32 TransactionID, enum class EShopTransactionResponse Response);
};

// 0x58 (0xA0 - 0x48)
// Class NWX.ShopOfferDataAsset
class UShopOfferDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	bool                                         bIsOneTime;                                        // 0x48(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A67[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  OfferName;                                         // 0x50(0x18)(Edit, NativeAccessSpecifierPublic)
	class FText                                  OfferDescription;                                  // 0x68(0x18)(Edit, NativeAccessSpecifierPublic)
	class UShopCurrency*                         Cost;                                              // 0x80(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNWXShopTransactable*                  Purchase;                                          // 0x88(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                          UI_SortingGroup;                                   // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETransactableType                 TransactableType;                                  // 0x98(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A69[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShopOfferDataAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.ShopOfferManifestDataAsset
class UShopOfferManifestDataAsset : public UDataAsset
{
public:
	TArray<class UShopOfferDataAsset*>           ShopOffers;                                        // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopOfferManifestDataAsset* GetDefaultObj();

	void SetShopOffers(TArray<class UShopOfferDataAsset*>& NewShopOffers);
	TArray<class UShopOfferDataAsset*> GetShopOffers();
};

// 0xF0 (0x120 - 0x30)
// Class NWX.ShopConstraintMapAsset
class UShopConstraintMapAsset : public UDataAsset
{
public:
	TMap<class UItemConstraintDataAsset*, class UShopOfferDataAsset*> ShopItems;                                         // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class UItemConstraintDataAsset*, class UShopOfferDataAsset*> ShopStations;                                      // 0x80(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class UStructureDataAsset*, class UShopOfferDataAsset*> ShopStructures;                                    // 0xD0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopConstraintMapAsset* GetDefaultObj();

};

// 0x38 (0xD8 - 0xA0)
// Class NWX.ShopProviderComponent
class UShopProviderComponent : public UActorComponent
{
public:
	uint8                                        Pad_9A6C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UShopDescriptorDataAsset*              ShopDescriptor;                                    // 0xA8(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UShopOfferDataAsset*>           ShopOfferInventory;                                // 0xB0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A6D[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShopProviderComponent* GetDefaultObj();

};

// 0xA8 (0xD0 - 0x28)
// Class NWX.ShopPurchasebleItems
class UShopPurchasebleItems : public UNWXShopTransactable
{
public:
	uint8                                        Pad_9A6E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemDefinition                       ItemToReward;                                      // 0x30(0xA0)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopPurchasebleItems* GetDefaultObj();

};

// 0xE8 (0x110 - 0x28)
// Class NWX.ShopPurchasableSkills
class UShopPurchasableSkills : public UNWXShopTransactable
{
public:
	uint8                                        Pad_9A6F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSkillDataReference                   SkillToReward;                                     // 0x30(0xE0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UShopPurchasableSkills* GetDefaultObj();

};

// 0x38 (0xD8 - 0xA0)
// Class NWX.ShopPurchaserComponent
class UShopPurchaserComponent : public UActorComponent
{
public:
	class AShopInteractionSession*               ShopInteractionSession;                            // 0xA0(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A71[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnShopSessionStarted;                              // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnShopSessionEnded;                                // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UShopPurchaserComponent* GetDefaultObj();

	void UnbindEventFrom_OnShopSessionChanged(FDelegateProperty_& Event);
	void Server_StartNewShopSession(class AActor* ShopActor);
	void Server_EndShopSession();
	void OnRep_Session(class AShopInteractionSession* PrevSession);
	void InteractWithShop(class AActor* ShopActor);
	TScriptInterface<class IShopInteractionModel> GetShopInteractionSessionModel();
	void BindEventTo_OnShopSessionChanged(FDelegateProperty_& Event);
};

// 0x20 (0x50 - 0x30)
// Class NWX.ShopRegistryDataAsset
class UShopRegistryDataAsset : public UDataAsset
{
public:
	TArray<TSoftObjectPtr<class UShopDescriptorDataAsset>> AllShops;                                          // 0x30(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FShopDescriptorRegistryEntry>  ShopRegistryEntries;                               // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UShopRegistryDataAsset* GetDefaultObj();

	void GetAllShopDescriptors(TArray<struct FShopDescriptorRegistryEntry>* OutShopRegistryEntries);
};

// 0x60 (0x100 - 0xA0)
// Class NWX.NWXSignificanceMangerComponent
class UNWXSignificanceMangerComponent : public UActorComponent
{
public:
	uint8                                        Pad_9A73[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNWXSignificanceMangerComponent* GetDefaultObj();

};

// 0x10 (0xB0 - 0xA0)
// Class NWX.SimulationMonitorComponent
class USimulationMonitorComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnPlayerCountChanged;                              // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USimulationMonitorComponent* GetDefaultObj();

	int32 GetPlayerCount();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SimulationMonitorInterface
class ISimulationMonitorInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISimulationMonitorInterface* GetDefaultObj();

	void UnbindEventFromOnDayNightChanged(FDelegateProperty_& Event);
	bool GetIsNight();
	void BindEventToOnDayNightChanged(FDelegateProperty_& Event);
};

// 0x0 (0x28 - 0x28)
// Class NWX.SkillDataReferenceFunctionLibrary
class USkillDataReferenceFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USkillDataReferenceFunctionLibrary* GetDefaultObj();

	class FString ToString(struct FSkillDataReference& SkillReference);
	bool NotEqual_FSkillDataReference(struct FSkillDataReference& A, struct FSkillDataReference& B);
	struct FStructureAssetReference MakeStructureAssetReferenceFromSkillDataReference(struct FSkillDataReference& SkillReference, enum class EGetResult* Branches);
	struct FSkillDataReference MakeSkillDataReferenceFromStructureAssetReference(struct FStructureAssetReference& StructureReference);
	struct FSkillDataReference MakeSkillDataReferenceFromSkillDataAsset(TSoftObjectPtr<class USkillDataAsset>& SkillDataAsset);
	struct FSkillDataReference MakeSkillDataReferenceFromEmoteDataAsset(TSoftObjectPtr<class UEmoteDataAsset>& EmoteDataAsset);
	struct FSkillDataReference MakeSkillDataReferenceFromCraftingRecipeReference(struct FCraftingRecipeReference& RecipeReference);
	struct FCraftingRecipeReference MakeCraftingRecipeReferenceFromSkillDataReference(struct FSkillDataReference& SkillReference, enum class EGetResult* Branches);
	bool IsValid(struct FSkillDataReference& SkillReference);
	bool IsSkillHidden(struct FSkillDataReference& SkillReference);
	bool IncludesAll(struct FSkillReferenceContainer& MainContainer, struct FSkillReferenceContainer& OtherContainer);
	struct FGuid GetUniqueAssetId(struct FSkillDataReference& SkillReference);
	bool GetSkillUnlockables(struct FSkillDataReference& SkillReference, struct FSkillReferenceContainer* OutSkillUnlockables);
	struct FSkillPresentationData GetSkillPresentationData(struct FSkillDataReference& SkillReference);
	void GatherAllUnlockableStructures(TArray<struct FStructureAssetReference>* OutStructureReferences);
	void GatherAllUnlockableRecipes(TArray<struct FCraftingRecipeReference>* OutRecipeReferences);
	void FindAllUnlockableSkillDataReferences(struct FSkillReferenceContainer* OutSkillReference);
	void FindAllPossibleSkillDataReferences(struct FSkillReferenceContainer* OutSkillReferences);
	bool EqualEqual_FSkillDataReference(struct FSkillDataReference& A, struct FSkillDataReference& B);
	int32 Append(struct FSkillReferenceContainer& MainContainer, struct FSkillReferenceContainer& OtherContainer);
};

// 0xF0 (0x120 - 0x30)
// Class NWX.SkillRewardBehaviour
class USkillRewardBehaviour : public URewardBehaviour
{
public:
	struct FSkillDataReference                   SkillReward;                                       // 0x30(0xE0)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCheckPrerequisiteSkills;                          // 0x110(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A83[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkillRewardBehaviour* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.SkillUnlockFunctionLibrary
class USkillUnlockFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USkillUnlockFunctionLibrary* GetDefaultObj();

	bool UnlockSkillReference(class APlayerState* PlayerState, struct FSkillDataReference& SkillReference);
	bool UnlockAllSkillReferences(class APlayerState* PlayerState);
	void UnlockAllShopSkillReferences(class APlayerState* PlayerState);
	bool HasUnlockedSkill(class APlayerState* PlayerState, struct FSkillDataReference& SkillReference);
	bool HasPlayerUnlockedStructureReference(class APlayerState* PlayerState, struct FStructureAssetReference& StructureReference);
	bool HasPlayerUnlockedStructure(class APlayerState* PlayerState, class UObject* StructureObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.SkillUnlockInterface
class ISkillUnlockInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISkillUnlockInterface* GetDefaultObj();

	bool HasSkillUnlocked(struct FGuid& SkillUID);
	bool HasSkillFullyUnlocked(struct FSkillDataReference& SkillReference);
	void GrantSkillUnlockables(struct FSkillDataReference& UnlockedSkill, struct FSkillReferenceContainer& SkillUnlockables);
	void GetCurrentStructureSkillsUnlocked(TArray<struct FStructureAssetReference>* CurrentlyUnlockedStructures);
	void GetCurrentSkillsUnlocked(struct FSkillReferenceContainer* CurrentUnlockables);
	void GetCurrentRecipeSkillsUnlocked(TArray<struct FCraftingRecipeReference>* CurrentlyUnlockedRecipes);
	void GetCurrentEmoteSkillsUnlocked(TArray<TSoftObjectPtr<class UEmoteDataAsset>>* CurrentlyUnlockedEmotes);
};

// 0x30 (0x60 - 0x30)
// Class NWX.SnapPointDataAsset
class USnapPointDataAsset : public UPrimaryDataAsset
{
public:
	struct FPieceSnapPoints                      SnapPoints;                                        // 0x30(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USnapPointDataAsset* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.SnapPointRules
class USnapPointRules : public UDataAsset
{
public:
	TMap<enum class ESnapType, struct FSnapPointRulesPerType> Rules;                                             // 0x30(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USnapPointRules* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.SocialCheats
class USocialCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class USocialCheats* GetDefaultObj();

	void UnMute(const class FString& PlayerName);
	void SetupEOSJoinButtonCallback();
	void SetupEOSCustomInviteCallbacks();
	void SetupEOSCustomInvite(const class FString& InviteStr);
	void SetRole(const class FString& Role);
	void SetEOSJoinInfo(const class FString& PresenceStr);
	void Server_SetRole(const class FString& RoomId, const class FString& Role);
	void Server_LeaveParty(const class FString& RoomId);
	void RemoveEOSJoinInfo();
	void RemoveEOSCustomInvite();
	void Mute(const class FString& PlayerName);
	void ListPartyMemberData();
	void ExitServerFromCurrentParty();
};

// 0x60 (0x100 - 0xA0)
// Class NWX.SocialServerComponent
class USocialServerComponent : public UActorComponent
{
public:
	uint8                                        Pad_9A97[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USocialServerComponent* GetDefaultObj();

	void InitializeChatConnectionAndSocialSystemsForServer(const class FString& Token, struct FOnlineServiceStatus& Status, const class FString& DeploymentJid);
};

// 0x20 (0xC0 - 0xA0)
// Class NWX.SpatialWorldTimeComponent
class USpatialWorldTimeComponent : public UActorComponent
{
public:
	float                                        WorldTimeUpdateRate;                               // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9A9A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDateTime                             GameWorldDateTime;                                 // 0xA8(0x8)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A9B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASpatialWorldTimeManager*              TimeManager;                                       // 0xB8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class USpatialWorldTimeComponent* GetDefaultObj();

	struct FTimerHandle SetTimerByFunctionName(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping, float FirstDelay);
	void SetGameWorldTime(struct FDateTime& DateTime);
	struct FDateTime GetGameWorldDateTime();
	void ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle& Handle);
};

// 0x18 (0x2B8 - 0x2A0)
// Class NWX.SpatialWorldTimeManager
class ASpatialWorldTimeManager : public AActor
{
public:
	struct FDateTime                             RealWorldStartTime;                                // 0x2A0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                             GameWorldStartTime;                                // 0x2A8(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GameWorldTimeScale;                                // 0x2B0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9A9E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASpatialWorldTimeManager* GetDefaultObj();

	void InitGameWorldTime(struct FDateTime& StartTime, float Scale);
	void DebugSetGameWorldTime(struct FDateTime& StartTime, float Scale);
};

// 0x38 (0x60 - 0x28)
// Class NWX.SpawnableTransferContainer
class USpawnableTransferContainer : public UObject
{
public:
	uint8                                        Pad_9AA5[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpawnableTransferContainer* GetDefaultObj();

	bool RemoveItem(struct FGuid& InstanceID, int32 Amount);
	void RegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void RegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	int32 GetNumberItemEntries();
	bool GetItem(struct FGuid& InstanceID, struct FInventoryEntry* Entry);
	uint8 GetContainerId();
	struct FItemContainerHandle GetContainerHandle();
	struct FContainerCapacityData GetContainerCapacityData();
	TArray<struct FInventoryEntry> GetAllItemsEntries();
	void GetAllItems(TArray<struct FInventoryEntry>* Entries);
	bool FindFirstItemByItemId(struct FItemDataReference& ItemId, struct FInventoryEntry* Entry);
	void DeRegisterItemRemovedDelegate(FDelegateProperty_& Delegate);
	void DeRegisterItemAddedDelegate(FDelegateProperty_& Delegate);
	bool AddItem(struct FInventoryEntry& NewEntry, int32* Amount, TArray<struct FGuid>* ModifiedInstances, bool bIgnoreCapacity);
};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.SpawnerEQSTestManager
class ASpawnerEQSTestManager : public AActor
{
public:

	static class UClass* StaticClass();
	static class ASpawnerEQSTestManager* GetDefaultObj();

};

// 0x28 (0xC8 - 0xA0)
// Class NWX.SpellAVFXComponent
class USpellAVFXComponent : public UActorComponent
{
public:
	class UAkRtpc*                               FirstThirdPersonRTPC;                              // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          ActiveSpellTag;                                    // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          EquippedItemTag;                                   // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSpellcastNiagaraInstance>     ActiveSpellVFX;                                    // 0xB8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USpellAVFXComponent* GetDefaultObj();

	void UpdateVFXFloatParameter(struct FGameplayTag& SpellTag, struct FGameplayTag& SpellStateTag, class FName& ParameterName, float NewValue);
	void UnregisterSpellVFX(struct FGameplayTag& SpellTag, struct FGameplayTag& SpellStateTag);
	void SetEquippedItemTag(struct FGameplayTag& ItemTag);
	void SetActiveSpellTag(struct FGameplayTag& SpellTag);
	void RegisterSpellVFX(class UNiagaraComponent* NiagaraInstance, struct FGameplayTag& SpellTag, struct FGameplayTag& SpellStateTag, bool UseTargetBone, class FName& TargetBoneName, bool UseMeshSource, struct FVector& LocationOffset, struct FRotator& RotationOffset, float VFXScaleFirstPerson, float VFXScaleThirdPerson);
	void ReattachVFXToSocket(class USkeletalMeshComponent* VisibleMesh, class UNiagaraComponent* NiagaraComponent, class FName& SocketToAttachTo, struct FVector& LocationOffset, struct FRotator& RotationOffset, enum class EAttachmentRule LocationRule, bool bUseAbsoluteLocation, enum class EAttachmentRule RotationRule, bool bUseAbsoluteRotation, enum class EAttachmentRule ScaleRule, bool bUseAbsoluteScale);
	void HandleSpellChargeUpdated(struct FGameplayTag& SpellTag, float NewSpellCharge);
	void HandleAnimNotifyTick(class USkeletalMeshComponent* MeshComponent, struct FGameplayTag& SpellcastingStateTag, bool IsSFXNotify, bool IsVFXNotify);
	void HandleAnimNotifyEnd(class USkeletalMeshComponent* MeshComponent, struct FGameplayTag& SpellcastingStateTag, bool IsSFXNotify, bool IsVFXNotify);
	void HandleAnimNotifyBegin(class USkeletalMeshComponent* MeshComponent, struct FGameplayTag& SpellcastingStateTag, bool IsSFXNotify, bool IsVFXNotify);
	void EndAllAVFXForSpell(struct FGameplayTag& SpellTag);
	void ClearEquippedItemTag();
	void ClearActiveSpellTag();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SpellCasterInterface
class ISpellCasterInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISpellCasterInterface* GetDefaultObj();

	void RemoveActiveSpellGlyphs(TArray<class AActor*>& SpellGlyphs);
	int32 GetActiveSpellGlyphCount();
	void DestroyOldestActiveSpellGlyphs(int32 GlyphToDestroyCount);
	void DestroyAllActiveSpellGlyphs();
	void AddActiveSpellGlyphs(TArray<class AActor*>& SpellGlyphs);
};

// 0x48 (0xD8 - 0x90)
// Class NWX.SpellRadialMenuEntry
class USpellRadialMenuEntry : public URadialMenuEntry
{
public:
	FMulticastInlineDelegateProperty_            OnSpellSelected;                                   // 0x90(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_9ABB[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpellRadialMenuEntry* GetDefaultObj();

};

// 0x18 (0x2C0 - 0x2A8)
// Class NWX.SplineRoad
class ASplineRoad : public ASpline
{
public:
	class UInstancedStaticMeshComponent*         NavMarkupIsm;                                      // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>          SplineMeshes;                                      // 0x2B0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASplineRoad* GetDefaultObj();

};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.SplineRoadDecorationGenerator
class ASplineRoadDecorationGenerator : public AActor
{
public:

	static class UClass* StaticClass();
	static class ASplineRoadDecorationGenerator* GetDefaultObj();

};

// 0x20 (0x2C0 - 0x2A0)
// Class NWX.SplineRoadIntersection
class ASplineRoadIntersection : public AActor
{
public:
	TArray<class USplineComponent*>              Splines;                                           // 0x2A0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>          SplineMeshes;                                      // 0x2B0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASplineRoadIntersection* GetDefaultObj();

};

// 0x0 (0x2A0 - 0x2A0)
// Class NWX.SplineRoadIntersectionGenerator
class ASplineRoadIntersectionGenerator : public AActor
{
public:

	static class UClass* StaticClass();
	static class ASplineRoadIntersectionGenerator* GetDefaultObj();

};

// 0x20 (0xC0 - 0xA0)
// Class NWX.SpreadComponent
class USpreadComponent : public UActorComponent
{
public:
	uint8                                        Pad_9AC7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpreadBonus;                                       // 0xA4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SpreadOverride;                                    // 0xA8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bShouldOverrideSpread;                             // 0xAC(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9AC9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           SpeedToSpreadTable;                                // 0xB0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9ACA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpreadComponent* GetDefaultObj();

	void SetSpreadBonus(float SpreadBonusIn);
	void SetOverrideSpread(bool bShouldOverride, float OverrideAmount);
	float GetSpread();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SquadMemberNativeInterface
class ISquadMemberNativeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISquadMemberNativeInterface* GetDefaultObj();

	class AActor* GetSpawnerActor();
	class AActor* GetLeaderActor();
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.StagedConstructionComponent
class UStagedConstructionComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UStagedConstructionComponent* GetDefaultObj();

	void UpdatePieceConstructionBucket(class UObject* NewPiece);
	void GetPieceIdsInConstructionOrder(TArray<int32>* OutPieceIds);
	void AddPieceToConstructionBucket(class UObject* NewPiece);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StateFunctionLibrary
class UStateFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStateFunctionLibrary* GetDefaultObj();

	void ToggleState(class AActor* Actor, struct FGameplayTag& StateTag);
	void RemoveStates(class AActor* Actor, struct FGameplayTagContainer& StateTags);
	void RemoveState(class AActor* Actor, struct FGameplayTag& StateTag);
	bool IsStateActiveForObject(class UObject* Object, struct FGameplayTag& StateTag);
	bool IsStateActive(class AActor* Actor, struct FGameplayTag& StateTag);
	float GetRemainingStateDuration(class AActor* Actor, struct FGameplayTag& StateTag);
	bool ContainerContainsState(struct FGameplayTagContainer& TagContainer, struct FGameplayTag& StateTag);
	void AddTimedState(class AActor* Actor, struct FGameplayTag& StateTag, float TimePeriod);
	void AddStates(class AActor* Actor, struct FGameplayTagContainer& StateTags);
	void AddState(class AActor* Actor, struct FGameplayTag& StateTag);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StateReplicationInterface
class IStateReplicationInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStateReplicationInterface* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.StaticMeshGroupObject
class UStaticMeshGroupObject : public UStaticMeshGroupObjectBase
{
public:
	class USceneComponent*                       GroupRoot;                                         // 0x28(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>               MeshesToIgnore;                                    // 0x30(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>          Meshes;                                            // 0x40(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UStaticMeshGroupObject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StatusEffectAccessInterface
class IStatusEffectAccessInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStatusEffectAccessInterface* GetDefaultObj();

	void RemoveStatusEffectInstance(struct FStatusEffectHandle& ActiveStatusEffectHandle);
	bool RemoveStatusEffect(class UStatusEffectDataAsset* StatusEffect);
	void RemoveAllStatusEffects();
	bool IsStatusEffectInstanceValid(struct FStatusEffectHandle& StatusEffectHandle);
	bool IsStatusEffectInstanceActive(struct FStatusEffectHandle& StatusEffectHandle);
	bool IncreaseStatusEffectLevelByDataAsset(class UStatusEffectDataAsset* StatusEffect);
	bool IncreaseStatusEffectLevel(struct FStatusEffectHandle& StatusEffectHandle);
	bool GetStatusEffectLevel(class UStatusEffectDataAsset* StatusEffect, uint8* Level);
	bool DecreaseStatusEffectLevelByDataAsset(class UStatusEffectDataAsset* StatusEffect);
	bool DecreaseStatusEffectLevel(struct FStatusEffectHandle& StatusEffectHandle);
	bool ApplyTimedStatusEffectWithMagnitude(class UStatusEffectDataAsset* StatusEffect, float Duration, uint8 Level, TMap<struct FGameplayTag, float>& SetByCallerMagnitudes, struct FStatusEffectHandle* ActiveStatusEffectHandle);
	bool ApplyTimedStatusEffect(class UStatusEffectDataAsset* StatusEffect, float Duration, uint8 Level, struct FStatusEffectHandle* ActiveStatusEffectHandle);
	bool ApplyInfiniteStatusEffectWithMagnitude(class UStatusEffectDataAsset* StatusEffect, uint8 Level, TMap<struct FGameplayTag, float>& SetByCallerMagnitudes, struct FStatusEffectHandle* ActiveStatusEffectHandle);
	bool ApplyInfiniteStatusEffect(class UStatusEffectDataAsset* StatusEffect, uint8 Level, struct FStatusEffectHandle* ActiveStatusEffectHandle);
};

// 0x18 (0x60 - 0x48)
// Class NWX.StatusEffectDataAsset
class UStatusEffectDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	TArray<struct FStatusEffectLevelData>        StatusEffectLevels;                                // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         ShouldPersist;                                     // 0x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStatusEffectPersistedTimeType    PersistedTimeType;                                 // 0x59(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9AF5[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectDataAsset* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.StatusEffectFXBase
class UStatusEffectFXBase : public UObject
{
public:
	class AActor*                                Actor;                                             // 0x28(0x8)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStatusEffectFXManagerComponent*       StatusEffectPresentationManagerComponent;          // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9AF7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXBase* GetDefaultObj();

	void Initialize(class AActor* InActor, class UStatusEffectFXManagerComponent* InStatusEffectPresentationManagerComponent);
};

// 0xF0 (0x130 - 0x40)
// Class NWX.StatusEffectFXAudio
class UStatusEffectFXAudio : public UStatusEffectFXBase
{
public:
	class UComponentAudioBucket*                 DefaultSFXPlaybackBucket;                          // 0x40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComponentAudioBucket*                 EmoteAudioComponentBucket;                         // 0x48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkSwitchValue*                        DefaultEmoteSwitch;                                // 0x50(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               ActorSizeRTPC;                                     // 0x58(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ActorSizeMultipositionThreshold;                   // 0x60(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9AFA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DefaultMultipositionSockets;                       // 0x68(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FActiveAudioFXData                    ActiveData;                                        // 0x78(0x78)(Transient, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          MultipositionUpdateTimer;                          // 0xF0(0x8)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          SuppressionUpdateTimer;                            // 0xF8(0x8)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9AFB[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXAudio* GetDefaultObj();

	void UpdateSuppression();
	void UpdateMultipositionLocations();
};

// 0x38 (0x78 - 0x40)
// Class NWX.StatusEffectFXCharacter
class UStatusEffectFXCharacter : public UStatusEffectFXBase
{
public:
	TArray<struct FActiveMaterialData>           ActiveMaterials;                                   // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9AFC[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXCharacter* GetDefaultObj();

};

// 0xD8 (0x118 - 0x40)
// Class NWX.StatusEffectFXCrust
class UStatusEffectFXCrust : public UStatusEffectFXBase
{
public:
	class USkeletalMeshComponent*                SkeletalMesh_3P;                                   // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraComponent*                     Active1PCrust;                                     // 0x48(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraComponent*                     Active3PCrust;                                     // 0x50(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9AFE[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           CurrentFloatCurve;                                 // 0x98(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9AFF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGameplayTag, class UNiagaraComponent*> ActivePerks;                                       // 0xA8(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B00[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXCrust* GetDefaultObj();

	void OnViewUpdated(bool InThirdPerson);
};

// 0x8 (0x48 - 0x40)
// Class NWX.StatusEffectFXItemAudio
class UStatusEffectFXItemAudio : public UStatusEffectFXBase
{
public:
	uint8                                        Pad_9B01[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXItemAudio* GetDefaultObj();

};

// 0x228 (0x2C8 - 0xA0)
// Class NWX.StatusEffectFXManagerComponent
class UStatusEffectFXManagerComponent : public UActorComponent
{
public:
	struct FGameplayTag                          OwnerActorTypeTag;                                 // 0xA0(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                          DefaultTag;                                        // 0xA8(0x8)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                            StatusEffectPresentationManagerSettingsDataTable;  // 0xB0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldAutoInitialize;                             // 0xB8(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9B08[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<TSubclassOf<class UStatusEffectFXBase>, class UAffinityTable*> FXSystemMap;                                       // 0xC8(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FEffectSettings> EffectsSettingsMap;                                // 0x118(0x50)(NativeAccessSpecifierPrivate)
	struct FGameplayTag                          AffinityTableIdentifierTag;                        // 0x168(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                OwnerActor;                                        // 0x170(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                AbilitySystemComponentOwner;                       // 0x178(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B09[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAbilitySystemComponent*               AbilitySystemComponent;                            // 0x188(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStatusEffectFXBase*>           FXSystems;                                         // 0x190(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B0B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGameplayTag>                  EffectStack;                                       // 0x1A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGameplayTag                          DisplayManagedEffect;                              // 0x1B8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B0C[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, class UStatusEffectProcessorBase*> StatusEffectProcessorsByName;                      // 0x270(0x50)(NativeAccessSpecifierPrivate)
	class UStatusEffectFXBase*                   FXSystemToRetry;                                   // 0x2C0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStatusEffectFXManagerComponent* GetDefaultObj();

	void SetDisplayAuthorizationForEffect(struct FGameplayTag& EffectTag, bool bIsDisplayAllowed);
	void InitializeStatusEffectFXManagerComponent();
	float GetEffectDuration(const struct FGameplayTag& RowTagName, const struct FGameplayTag& EffectTag, bool IsInDuration);
};

// 0xA0 (0xE0 - 0x40)
// Class NWX.StatusEffectFXScreen
class UStatusEffectFXScreen : public UStatusEffectFXBase
{
public:
	class UCameraComponent*                      FirstPersonCamera;                                 // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      ThirdPersonCamera;                                 // 0x48(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      UIThirdPersonCamera;                               // 0x50(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      CinematicThirdPersonCamera;                        // 0x58(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B0D[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectFXScreen* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.StatusEffectProcessorBase
class UStatusEffectProcessorBase : public UObject
{
public:
	class UStatusEffectFXManagerComponent*       SEPMComponent;                                     // 0x28(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UStatusEffectProcessorBase* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.StatusEffectProcessorDissolve
class UStatusEffectProcessorDissolve : public UStatusEffectProcessorBase
{
public:
	uint8                                        Pad_9B10[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectProcessorDissolve* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.StatusEffectProcessorDissolveIn
class UStatusEffectProcessorDissolveIn : public UStatusEffectProcessorDissolve
{
public:

	static class UClass* StaticClass();
	static class UStatusEffectProcessorDissolveIn* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class NWX.StatusEffectProcessorDissolveOut
class UStatusEffectProcessorDissolveOut : public UStatusEffectProcessorDissolve
{
public:

	static class UClass* StaticClass();
	static class UStatusEffectProcessorDissolveOut* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.StatusEffectProcessorFade
class UStatusEffectProcessorFade : public UStatusEffectProcessorBase
{
public:
	uint8                                        Pad_9B11[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatusEffectProcessorFade* GetDefaultObj();

};

// 0xB0 (0xE0 - 0x30)
// Class NWX.StoredVault
class UStoredVault : public UPrimaryDataAsset
{
public:
	struct FStoredVaultData                      StoredVaultData;                                   // 0x30(0xB0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStoredVault* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class NWX.StoredVaultManifest
class UStoredVaultManifest : public UPrimaryDataAsset
{
public:
	TArray<struct FGameplayTagsToVaultLayoutsMapping> TagsToVaultsMappings;                              // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStoredVault>>   StoredVaults;                                      // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStoredVaultManifest* GetDefaultObj();

};

// 0x20 (0x2C0 - 0x2A0)
// Class NWX.VaultLayoutData
class AVaultLayoutData : public AInfo
{
public:
	TArray<int32>                                DatapointToChamberIndex;                           // 0x2A0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPackedChamber>                LayoutData;                                        // 0x2B0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AVaultLayoutData* GetDefaultObj();

};

// 0x68 (0x308 - 0x2A0)
// Class NWX.StoredVaultCache
class AStoredVaultCache : public AInfo
{
public:
	int32                                        CurrentVaultIndex;                                 // 0x2A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9B20[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                DatapointToChamberIndex;                           // 0x2A8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class APackedLevelActor>> BppClasses;                                        // 0x2B8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UPOIDefinitionAsset>> POIDefinitions;                                    // 0x2C8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>           Clusters;                                          // 0x2D8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPackedVaultData>              Vaults;                                            // 0x2E8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagsToVaultLayoutsMapping> TagsToVaultsMappings;                              // 0x2F8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AStoredVaultCache* GetDefaultObj();

	bool GetChamberIdByDataPointId(int32 DataPointId, int32* OutChamberId);
	bool GetChamberDataByDataPointId(int32 DataPointId, struct FPackedChamber* OutChamberData);
	bool GetChamberDataByChamberId(int32 ChamberId, struct FPackedChamber* OutChamberData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StoredVaultDatapointStage
class UStoredVaultDatapointStage : public UDatapointStage
{
public:

	static class UClass* StaticClass();
	static class UStoredVaultDatapointStage* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StreamedActorInformationProviderInterface
class IStreamedActorInformationProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStreamedActorInformationProviderInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.SoftLevelPathBlueprintFunctionLibrary
class USoftLevelPathBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USoftLevelPathBlueprintFunctionLibrary* GetDefaultObj();

	class FString GetAssetName(struct FSoftLevelPath& SoftLevelPath);
	struct FSoftObjectPath Conv_SoftLevelPathToSoftObjectPath(struct FSoftLevelPath& SoftLevelPath);
};

// 0x130 (0x3D0 - 0x2A0)
// Class NWX.StreamingLevelProxyActor
class AStreamingLevelProxyActor : public AActor
{
public:
	uint8                                        Pad_9B2A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OptionalStreamedLevelSuffix;                       // 0x2A8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       LevelToStream;                                     // 0x2B8(0x20)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        ContainedActors;                                   // 0x2D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, NonTransactional, TextExportTransient, NativeAccessSpecifierPublic)
	int32                                        SocketIndex;                                       // 0x2E8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DatapointIndex;                                    // 0x2EC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DependencyIndex;                                   // 0x2F0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9B2B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnLevelPackageLoadedDelegate;                      // 0x2F8(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_9B2C[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPackage*                              LoadedPackage;                                     // 0x328(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, NonTransactional, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsServerLevelLoaded;                              // 0x330(0x1)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, IsPlainOldData, RepNotify, NonTransactional, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B2D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ServerLevelInstanceName;                           // 0x338(0x10)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, RepNotify, NonTransactional, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelStreamingDynamic*                LevelStreamingInstance;                            // 0x348(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, NonTransactional, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsLocalInstanceLoaded;                            // 0x350(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B2E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 GameplayTags;                                      // 0x358(0x20)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	struct FEncounterLevelData                   EncounterLevelData;                                // 0x378(0x24)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B30[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AStoredVaultCache*                     VaultCache;                                        // 0x3C0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B31[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStreamingLevelProxyActor* GetDefaultObj();

	void TryGetResourceListDT(class UDataTable** OutResourceListDT, enum class EGetResult* OutBranches);
	void TryGetClusterTheme(class FName* OutClusterTheme, enum class EGetResult* OutBranches);
	void SetPlugData(class FName& InPlugName, struct FPOIPlugStreamingLevelDefinition& Plug);
	void OnRep_ServerLevelInstanceLoaded();
	class FName GetLoadedLevelInstanceName();
	void BindAndExecuteOnLevelPackageLoaded(FDelegateProperty_ DelegateToBind);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StreamingLevelProxyInterface
class IStreamingLevelProxyInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStreamingLevelProxyInterface* GetDefaultObj();

	void SetStreamingDefData(struct FPOIStreamingLevelDefinition& Definition);
	struct FGameplayTagContainer GetGameplayTags();
	void GetEncounterPlugData(struct FEncounterPlugData* EncounterPlugData);
	struct FEncounterLevelData GetEncounterLevelData();
	void AddGameplayTags(struct FGameplayTagContainer& Tags);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureAIFunctionLibrary
class UStructureAIFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureAIFunctionLibrary* GetDefaultObj();

	float GetCreatureSuppressionRadius(class UObject* WorldContextObject, float TargetRadius);
};

// 0x50 (0x80 - 0x30)
// Class NWX.StructureAnimationDataAsset
class UStructureAnimationDataAsset : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>      ActiveState;                                       // 0x30(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>      IdleState;                                         // 0x58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureAnimationDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureAssetReferenceFunctionLibrary
class UStructureAssetReferenceFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureAssetReferenceFunctionLibrary* GetDefaultObj();

	struct FStructureAssetReference MakeStructureAssetReferenceFromSoftObjectPath(struct FSoftObjectPath& SoftObjectPath);
	struct FStructureAssetReference MakeStructureAssetReferenceFromAsset(TSoftObjectPtr<class UStructureDataAsset>& Asset);
	bool IsStructureReferenceValid(struct FStructureAssetReference& Reference);
	bool IsStructureAssetPathValid(struct FSoftObjectPath& AssetPath);
	bool IsFTESTStructure(struct FStructureAssetReference& AssetRef);
	class FName GetUniqueNameFromStructureAssetReference(struct FStructureAssetReference& Reference);
	struct FGuid GetUniqueIDFromStructureAssetReference(struct FStructureAssetReference& Reference);
	void GetStructureDataFromStructureAssetReference(struct FStructureAssetReference& Reference, bool* IsValid, struct FStructureData* OutData);
	class FString GetStructureAssetName(struct FStructureAssetReference& AssetReference);
	class FString GetDebugStringFromStructureAssetReference(struct FStructureAssetReference& Reference);
	struct FSoftObjectPath GetAssetPathFromStructureAssetReference(struct FStructureAssetReference& Reference);
	void DebugGetAllStructureAssetReferences(TArray<struct FStructureAssetReference>* StructureReferences, bool bUnlockableOnly);
	bool AreStructureAssetReferencesEqual(struct FStructureAssetReference& A, struct FStructureAssetReference& B);
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.StructureAudioComponent
class UStructureAudioComponent : public UActorComponent
{
public:
	float                                        OscillatorUpdateRate;                              // 0xA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9B4C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkRtpc*                               OscillatorRTPC;                                    // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  VFXOscillatorParam;                                // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9B4D[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FOscillatingStructureAudio>    OscillatingAudioComponents;                        // 0xD8(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B4E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureAudioComponent* GetDefaultObj();

	bool UpdatePieceIdLists();
	TArray<int32> GetPreviouslyPlacedPieceIds();
	TArray<int32> GetCurrentCompletedPieceIds();
};

// 0x0 (0x30 - 0x30)
// Class NWX.StructureAudioSubsystem
class UStructureAudioSubsystem : public UNWXWorldSubsystem
{
public:

	static class UClass* StaticClass();
	static class UStructureAudioSubsystem* GetDefaultObj();

	class UPhysicalMaterial* GetObstructionOcclusionCoefficientsForHit(struct FHitResult& HitResult, float* ObstructionCoefficientOut, float* OcclusionCoefficientOut);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureCheats
class UStructureCheats : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UStructureCheats* GetDefaultObj();

	void ToggleStructureSkillBypass();
	void ToggleStructurePieceCountBudget();
	void ToggleStructureCountBudget();
	void ToggleSnapPointVisibility();
	void TogglePlacementCollision();
	void ShowEstateBounds();
	void GetResourceDistributionForStructures(TMap<int32, struct FResourceDistributionList>* OutResourceDistribution);
	void CompleteAllStructures();
	void ClaimStructure(class UObject* Structure, class AController* Controller);
	void ClaimEstate();
};

// 0x18 (0xB8 - 0xA0)
// Class NWX.StructureComponentBase
class UStructureComponentBase : public UActorComponent
{
public:
	struct FGameplayTag                          MaxHealthTag;                                      // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                          MinHealthTag;                                      // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                          CurrentHealthTag;                                  // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureComponentBase* GetDefaultObj();

};

// 0x108 (0x5A8 - 0x4A0)
// Class NWX.StructureComposite
class AStructureComposite : public ANWXStructure
{
public:
	uint8                                        Pad_9B67[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCompositePieceRemoved;                           // 0x4D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                         bHasAllRequiredResources;                          // 0x4E8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasAllRequiredResourcesIsValid;                   // 0x4E9(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B68[0xBE];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStructureComposite* GetDefaultObj();

	void UpdateOptionalMeshes();
	void ResetHasAllRequiredResourcesCache();
	void OnCompositePieceStateChanged(class UStructureCompositePiece* CompositePiece, enum class EStructureState NewState);
	bool HasAllRequiredResources();
	class UStructureVolumeComponent* GetVolumeComponent();
	class UStructureSupportComponent* GetSupportComponent();
	void GetStructureDebugData(class FString* StructureName, class FString* StructureStatus, TArray<class FString>* ResourceRequirements, float* Health);
	class UStructureGridComponent* GetSnapComponent();
	class UStructureReverbComponent* GetReverbComponent();
	class UStructureResourcesManagerObject* GetPostConstructionResourcesManagerForPiece(class UStructureCompositePiece* Piece);
	void GetPieceIdsInConstructionOrder(TArray<int32>* PieceIds);
	void GetPieceDebugData(int32 PieceIndex, class FString* PieceName, class FString* PieceStatus, TArray<class FString>* ResourceRequirements, float* Health);
	class UStructureMeshesContainer* GetMeshesContainer();
	class UStructureResourcesManagerObject* GetConstructionResourcesManagerForPiece(class UStructureCompositePiece* Piece);
	class UStructureCompositeComponent* GetCompositeComponent();
	bool GetClosestDamagedTargetData(class APawn* AIPawn, struct FAIStructureTargetData* OutTargetData);
	void ClientOnly_OnyForceCompleteAllPieces();
	void CacheHasAllRequiredResources();
	void AddPieceToStructure(struct FCompositePieceGameplay& CompositePieceData, class UStructureCompositePiece** Piece);
	void AddPiecesToConstructionBuckets();
};

// 0x318 (0x3D0 - 0xB8)
// Class NWX.StructureCompositeComponent
class UStructureCompositeComponent : public UStructureComponentBase
{
public:
	uint8                                        Pad_9B78[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCompositePieceCountChanged;                      // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ServerOnly_OnTiledFoundationsSpawned;              // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FCompositePieces                      CompositePieces;                                   // 0xE8(0x178)(Net, SaveGame, NativeAccessSpecifierPrivate)
	bool                                         bIsProcessingPieceChanges;                         // 0x260(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B79[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStructureMeshesContainer*             InstancesContainer;                                // 0x268(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureGridComponent*               SnapComponent;                                     // 0x270(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureSupportComponent*            SupportComponent;                                  // 0x278(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                        PiecesPendingAdd;                                  // 0x280(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayAttribute, struct FCompositeInstanceAttribute> AttributesToPropertyName;                          // 0x290(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStructureCompositePiece>  PieceClass;                                        // 0x2E0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, class UStructureCompositePiece*> CompositePieceLogicObjects;                        // 0x2E8(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayEffect>           OnPieceAddedEffect;                                // 0x338(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayEffect>           OnPieceDestroyedEffect;                            // 0x340(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NextPieceId;                                       // 0x348(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B7B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCompositePieceResourceDropContext> ServerOnly_PendingResourceDrops;                   // 0x350(0x10)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B7C[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureCompositeComponent* GetDefaultObj();

	void UpdateOptionalMeshesForPiece(struct FCompositePieceGameplay& Piece);
	void SpawnDroppedResource(struct FCompositePieceResourceDropContext& ResourceDropContext);
	bool RemovePieceHealthFromOwningStructure(struct FCompositePieceGameplay& Piece);
	void RemovePiece(struct FCompositePieceGameplay& Piece);
	void K2_OnRepCompositePieces();
	int32 GetPieceCount();
	class UCompositePieceInstance* GetMeshInstance(int32 PieceIndex);
	void GetLowestPieces(TArray<class UStructureCompositePiece*>* OutPieces);
	class UStructureCompositePiece* GetCompositePieceById(int32 PieceId);
	class UStructureCompositePiece* GetCompositePiece(int32 PieceIndex);
	void CacheIsProcessingPieceChanges();
	bool AddPieceHealthToOwningStructure(struct FCompositePieceGameplay& Piece);
	int32 AddPiece(struct FCompositePieceGameplay& Piece);
	void AddPendingResourceDrop(struct FCompositePieceResourceDropContext& ResourceDropContext);
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.StructureCompositeCreationCoordinator
class UStructureCompositeCreationCoordinator : public UActorComponent
{
public:
	TMap<class UStructureCompositeComponent*, struct FPiecesPendingAdd> CompositesWithPiecesPendingAdd;                    // 0xA0(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureCompositeCreationCoordinator* GetDefaultObj();

};

// 0x1B0 (0x1D8 - 0x28)
// Class NWX.StructureCompositePiece
class UStructureCompositePiece : public UObjectWithWorld
{
public:
	uint8                                        Pad_9B89[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsValidPiece;                                      // 0xD8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9B8A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPieceStateUpdated;                               // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStructureMoved;                                  // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UNWXObjectComponent>> ObjectComponentClasses;                            // 0x100(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UStructureCompositePieceStateObject> StructureStateObjectClass;                         // 0x110(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCompositePiecePointer                CompositePiecePtr;                                 // 0x138(0x10)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UStructureEventsObject*                EventsObject;                                      // 0x148(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStructureUIData                      CachedUIData;                                      // 0x150(0x78)(NativeAccessSpecifierPrivate)
	uint8                                        ServerBlockingQueryCount;                          // 0x1C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B8B[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureCompositePiece* GetDefaultObj();

	void SetTransform(struct FTransform& WorldTransform, bool bTeleport);
	void SetStructureWorldTransform(struct FTransform& Transform, bool bTeleport);
	void SetSchematicState(enum class EStructureState NewState);
	void RemoveState(struct FGameplayTag& StateTag);
	void K2_OnRepCompositePieceData();
	void K2_OnDestroyed();
	void K2_OnDamageReceived(float Damage, class AActor* Target, class AActor* Source, struct FGameplayTagContainer& EffectTags, struct FHitResult& HitResult, struct FTagValueContainer& TagValueContainer);
	void K2_OnBeginPlay();
	struct FTransform GetStructureWorldTransform();
	void GetPieceData(struct FCompositePieceGameplay* OutPieceData);
	class UStructureCompositeComponent* GetOwnerStructureCompositeComponent();
	class AStructureComposite* GetOwnerStructureComposite();
	class UCompositePieceInstance* GetMeshInstance();
	void GetComponentOfClass(TSubclassOf<class UNWXObjectComponent> ComponentClass, class UNWXObjectComponent** OutComponent);
	void DuplicatePieceData(struct FCompositePieceGameplay* OutPieceData);
	void AddState(struct FGameplayTag& StateTag);
	void ActivateFX();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureCompositePieceInterface
class IStructureCompositePieceInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureCompositePieceInterface* GetDefaultObj();

	void GetCompositeStructure(class AStructureComposite** Composite);
	void GetCompositePieceGameplay(struct FCompositePieceGameplay* GameplayData);
};

// 0x400 (0x6A0 - 0x2A0)
// Class NWX.StructureCompositePieceProxyActor
class AStructureCompositePieceProxyActor : public AActor
{
public:
	class UGridComponentProxy*                   GridComponent;                                     // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9B94[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureData                        StructureData;                                     // 0x2B0(0x3E0)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCompositePieceProxySnapObject*        SnapObject;                                        // 0x690(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9B95[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStructureCompositePieceProxyActor* GetDefaultObj();

	void SnapToGridPoint(class UGridComponentProxy* TargetGridComponent, bool ShouldTryNewSourcePoint, class FString* ErrorMessage, enum class EProxySnapResult* SnapResult);
	void SaveLightToStructureData();
	void SaveFireToStructureData();
	void CreateLightFromStructureData();
	void CreateFireFromStructureData();
	void ClearVFX();
	void ClearMeshes();
	void ClearLight();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureStateObject
class UStructureStateObject : public UStructureObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureStateObject* GetDefaultObj();

	bool IsStructureSchematic(class UObject* Structure);
	bool IsStructureComplete(class UObject* Structure);
	bool IsStructureBlockedByPawn(class UObject* TargetStructure);
	bool HasAllRequiredResources(class UObject* Structure);
	bool HasAddedResources(class UObject* Structure);
	bool CheckStateTransition(class UObject* Structure);
	void ChangeState(class UObject* Structure, enum class EStructureState State);
	bool CanTransitionToPlaced(class UObject* Structure);
	bool CanTransitionToPending(class UObject* Structure);
	bool CanTransitionToConfirm(class UObject* Structure);
	bool CanTransitionToComplete(class UObject* Structure);
	bool CanAddResourcesInCurrentState(class UObject* Structure);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureCompositePieceStateObject
class UStructureCompositePieceStateObject : public UStructureStateObject
{
public:

	static class UClass* StaticClass();
	static class UStructureCompositePieceStateObject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureCompositeStateObject
class UStructureCompositeStateObject : public UStructureStateObject
{
public:

	static class UClass* StaticClass();
	static class UStructureCompositeStateObject* GetDefaultObj();

};

// 0x490 (0x930 - 0x4A0)
// Class NWX.StructureConstructedBase
class AStructureConstructedBase : public ANWXStructure
{
public:
	uint8                                        Pad_9BB5[0x80];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x520(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       CompleteMeshes;                                    // 0x528(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStructureInitialized;                            // 0x530(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCustomizedPlayerNameChanged;                     // 0x540(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStructureMoved;                                  // 0x550(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBoxComponent*                         SimpleCollision;                                   // 0x560(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9BB6[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAssetReference              StructureAssetRefererence;                         // 0x5C0(0x80)(BlueprintVisible, BlueprintReadOnly, Net, SaveGame, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UMeshComponent*, struct FStructureMeshStateDefinition> MeshStatePerMeshComponent;                         // 0x640(0x50)(BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EStructureFXActivationTime, struct FStructureFXAudioDefinitionArray> AudioFXDefinition;                                 // 0x690(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EStructureFXActivationTime, class UScopedAkComponent*> MappedAudioComponents;                             // 0x6E0(0x50)(BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_9BB7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureUIData                      CachedUIData;                                      // 0x740(0x78)(NativeAccessSpecifierPrivate)
	class UStructureSlotsComponent*              StructureSlotsComponent;                           // 0x7B8(0x8)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureTraitEmissionComponent*      StructureTraitEmissionComponent;                   // 0x7C0(0x8)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureTraitComponent*              StructureTraitComponent;                           // 0x7C8(0x8)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureTraitAuraComponent*          StructureTraitAuraComponent;                       // 0x7D0(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructurePetComponent*                StructurePetComponent;                             // 0x7D8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasPetComponent;                                  // 0x7E0(0x1)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9BB8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  BaseStaticMesh;                                    // 0x7E8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9BB9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UNiagaraComponent*>             NiagaraComponents;                                 // 0x7F8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPointLightComponent*                  LightComponent;                                    // 0x808(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStructureWeatherComponent*            WeatherComponent;                                  // 0x810(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UShelterComponent*                     ShelterComponent;                                  // 0x818(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                CustomizedPlayerName;                              // 0x820(0x10)(Net, ZeroConstructor, SaveGame, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               CachedBaseMeshWorldLocation;                       // 0x830(0x18)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               CachedBaseMeshWorldScale;                          // 0x848(0x18)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScopedAkComponent*                    StructureAkComponent;                              // 0x860(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshGroupObject*                MeshGroupObject;                                   // 0x868(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           AkEventCallback;                                   // 0x870(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9BBB[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStructureConstructedBase* GetDefaultObj();

	void WeatherStateUpdated();
	void UpdateSimpleCollision();
	void UpdateMeshNavigationStatus();
	void UpdateFXActivationMap();
	void UpdateAllMeshCollision();
	void SetStructureAssetReferenceInternal(struct FStructureAssetReference& InStructureAssetReference);
	void SetMeshesOnMeshObject();
	void SetAllMaterialsToConstructed();
	void ServerOnly_HandleStructureMoved(class UObject* MovedEntity);
	void OnStructureInitializationComplete();
	void OnShelterChanged();
	void OnRep_CustomizedPlayerName();
	void MakeTestStatUFunc();
	bool IsStructureRespawnPoint();
	void InitializeVFX();
	void InitializeStructureInternal();
	void InitializeStructure();
	void InitializeSimpleCollision();
	void InitializeMeshes();
	void InitializeLightComponent();
	void HandleAudioCallback(enum class EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	TArray<class UMeshComponent*> GetStructureMeshes();
	class UStructureConstructedComponent* GetStructureConstructedComponent();
	class UScopedAkComponent* GetStructureAkComponent();
	bool GetShouldIgnoreIncomingDamage();
	class UScopedAkComponent* GetOrCreateMappedAudioComponent(enum class EStructureFXActivationTime ActivationTime, struct FVector& RelativeLocation);
	class UMeshObject* GetMeshObject();
	TArray<class UMeshComponent*> GetMeshComponents();
	bool GetIsStructureReferenceValid();
	bool GetIsStructureInitialized();
	void GetCustomizedPlayerName(class FString* OutName);
	bool GetClosestDamagedTargetData(class APawn* AIPawn, struct FAIStructureTargetData* OutTargetData);
	class UStaticMeshComponent* GetBaseMesh();
	FDelegateProperty_ GetAkEventCallback();
	void DestroyAkComponent();
	void DeactivateFXComponents(enum class EStructureFXActivationTime ActivationTime);
	void ClearCustomizedPlayerName();
	bool CanCustomizeName();
	class UStructurePetComponent* CacheAndGetPetComponent();
	void ActivateFXComponents(enum class EStructureFXActivationTime ActivationTime);
};

// 0x18 (0xD0 - 0xB8)
// Class NWX.StructureConstructedComponent
class UStructureConstructedComponent : public UStructureComponentBase
{
public:
	uint8                                        Pad_9BBE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UGameplayEffect>           InitHeathEffect;                                   // 0xC0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentHealth;                                     // 0xC8(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9BBF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureConstructedComponent* GetDefaultObj();

	void OnHealthChanged(float HealthDelta);
	void InitHealthAttributes(struct FStructureData& StructureData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDamageFunctionLibrary
class UStructureDamageFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureDamageFunctionLibrary* GetDefaultObj();

	bool IsHitComponentValidForCompositeStructure(class AStructureComposite* CompositeStructure, class UPrimitiveComponent* HitComponent);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDamageObject
class UStructureDamageObject : public UStructureObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureDamageObject* GetDefaultObj();

	bool MovePieceResourcesToOwningStructure(class UObject* StructurePiece, TArray<struct FInventoryEntry>& ResourcesToMove, TArray<struct FInventoryEntry>* OutUnusedResources);
	struct FTransform GetResourceDropTransform(class UObject* Structure);
	void GetDroppableResources(class UObject* Structure, TArray<struct FInventoryEntry>* DroppableResources);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDataFunctionLibrary
class UStructureDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureDataFunctionLibrary* GetDefaultObj();

	bool TryGetConstructedStructureData(struct FStructureData& Data, class UStructureTypeData_Constructed** OutData);
	bool TryGetCompositePieceStructureData(struct FStructureData& Data, class UStructureTypeData_Composite** OutData);
	struct FStructureData MakeStructureDataFromPreset(class UObject* Outer, class UStructurePresetDataAsset* PresetAsset, struct FStructureUIData& UIData);
	bool IsStructureValid(struct FStructureData& Data);
	bool IsStructureConstructed(struct FStructureData& Data);
	bool IsCompositePiece(struct FStructureData& Data);
	bool GetStructureUITraitTypes(struct FStructureData& StructureData, TArray<class UStructureTraitTypeUIData*>* OutUITraitTypes);
	bool GetRecipesFromCraftingData(class UStructureCraftingData* Data, TSet<struct FCraftingRecipeReference>* OutRecipes);
	bool GetDisciplinesFromCraftingData(class UStructureCraftingData* Data, struct FGameplayTagContainer* OutGameplayTagContainer);
	bool CanStructureCraftRecipe(struct FStructureData& Data, struct FCraftingRecipe& Recipe);
};

// 0x90 (0xC0 - 0x30)
// Class NWX.StructurePresetDataAsset
class UStructurePresetDataAsset : public UDataAsset
{
public:
	float                                        MaxHealth;                                         // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinHealth;                                         // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 FilterTags;                                        // 0x38(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 TraitsTags;                                        // 0x58(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 GameplayTags;                                      // 0x78(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 UnlockTags;                                        // 0x98(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UStructureObjectComponentData*         ObjectData;                                        // 0xB8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePresetDataAsset* GetDefaultObj();

};

// 0xA0 (0x160 - 0xC0)
// Class NWX.CompositeStructurePresetDataAsset
class UCompositeStructurePresetDataAsset : public UStructurePresetDataAsset
{
public:
	class UStructureTypeData_Composite*          StructureType;                                     // 0xC0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructureSnappableData*               SnappableData;                                     // 0xC8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompositeInstanceDef                 CompositeInstanceDef;                              // 0xD0(0x80)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UStructurePlacementData*               PlacementData;                                     // 0x150(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9BD7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositeStructurePresetDataAsset* GetDefaultObj();

};

// 0x8 (0xC8 - 0xC0)
// Class NWX.ConstructedStructurePresetDataAsset
class UConstructedStructurePresetDataAsset : public UStructurePresetDataAsset
{
public:
	class UStructureTypeData_Constructed*        StructureType;                                     // 0xC0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConstructedStructurePresetDataAsset* GetDefaultObj();

};

// 0x20 (0xE8 - 0xC8)
// Class NWX.CraftingStationPresetDataAsset
class UCraftingStationPresetDataAsset : public UConstructedStructurePresetDataAsset
{
public:
	class UStructureCraftingData*                CraftingData;                                      // 0xC8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructurePostConstructionInteractionData* InteractionData;                                   // 0xD0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructureSnappableData*               SnappableData;                                     // 0xD8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructurePlacementData*               PlacementData;                                     // 0xE0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCraftingStationPresetDataAsset* GetDefaultObj();

};

// 0x10 (0xD8 - 0xC8)
// Class NWX.DecorationSmallPresetDataAsset
class UDecorationSmallPresetDataAsset : public UConstructedStructurePresetDataAsset
{
public:
	class UStructureSnappableData*               SnappableData;                                     // 0xC8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructurePlacementData*               PlacementData;                                     // 0xD0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDecorationSmallPresetDataAsset* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.StructurePresetMapDataAsset
class UStructurePresetMapDataAsset : public UDataAsset
{
public:
	TMap<class FString, class UStructurePresetDataAsset*> PresetMap;                                         // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePresetMapDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDataProviderInterface
class IStructureDataProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureDataProviderInterface* GetDefaultObj();

	void GetUIData(bool* IsValid, struct FStructureUIData* OutUIData);
	void GetTraitInitData(bool* IsValid, class UStructureTraitInitData** OutTraitInitData);
	void GetStructureType(bool* IsValid, class UStructureTypeData** OutStructureType);
	void GetStructureDataDebugName(class FString* OutDebugName);
	void GetStructureData(bool* IsValid, struct FStructureData* OutStructureData);
	void GetStructureAssetReference(bool* IsValid, struct FStructureAssetReference* OutStructureReference);
	void GetSnappableData(bool* IsValid, class UStructureSnappableData** OutSnappableData);
	void GetResourceRequirementsData(bool* IsValid, class UStructureResourceRequirementsData** OutResourceRequirementsData);
	void GetResourceCollectionData(bool* IsValid, class UStructureResourceCollectionData** OutResourceCollectionData);
	void GetPostConstructionInteractionData(bool* IsValid, class UStructurePostConstructionInteractionData** OutPostConstructionInteractionData);
	void GetPlacementData(bool* IsValid, class UStructurePlacementData** OutPlacementData);
	void GetObjectComponentData(bool* IsValid, class UStructureObjectComponentData** OutObjectComponentData);
	void GetMeshData(bool* IsValid, struct FStructureData_Mesh* OutMeshData);
	void GetMapPinUIData(bool* IsValid, struct FDataTableRowHandle* OutMapPinUIData);
	void GetLightInitData(bool* IsValid, class UStructureLightDefinition** OutLightInitData);
	void GetItemLockerData(bool* IsValid, class UStructureItemLockerData** OutItemLockerData);
	void GetItemContainerData(bool* IsValid, class UStructureItemContainerData** OutItemContainerData);
	void GetInteriorData(bool* IsValid, class UStructureInteriorData** OutInteriorData);
	void GetHealthData(bool* IsValid, struct FStructureHealthData* OutHealthData);
	void GetFireData(bool* IsValid, class UStructureFireDefinition** OutFireData);
	void GetEncounterData(bool* bIsValid, class UStructureEncounterSettings** OutEncounterData);
	void GetCraftingData(bool* IsValid, class UStructureCraftingData** OutCraftingData);
};

// 0x10 (0x38 - 0x28)
// Class NWX.StructureTypeData
class UStructureTypeData : public UObject
{
public:
	enum class EStructureType                    StructureType;                                     // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9BF9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AreaOfEffect;                                      // 0x2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerLevel                           PowerLevel;                                        // 0x30(0x4)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_9BFA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTypeData* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class NWX.StructureTypeData_Composite
class UStructureTypeData_Composite : public UStructureTypeData
{
public:
	TSubclassOf<class UStructureCompositePiece>  PieceObjClass;                                     // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanBeTraversed;                                   // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9BFB[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTypeData_Composite* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class NWX.StructureTypeData_Constructed
class UStructureTypeData_Constructed : public UStructureTypeData
{
public:
	TSubclassOf<class ANWXStructure>             StructureActorClass;                               // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UNWXGameplayEffect>> AbilityGrants;                                     // 0x40(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTypeData_Constructed* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class NWX.StructureSnappableData
class UStructureSnappableData : public UObject
{
public:
	struct FPieceSnapPoints                      SnapPoints;                                        // 0x28(0x30)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USnapPointDataAsset>    PrimarySnapData;                                   // 0x58(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureSnappableData* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.StructureResourceRequirementsData
class UStructureResourceRequirementsData : public UObject
{
public:
	TArray<struct FStructureResourceRequirements> ResourceRequirements;                              // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FStructureResourceRequirements> PostConstructionRequirements;                      // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureResourceRequirementsData* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class NWX.StructurePlacementData
class UStructurePlacementData : public UObject
{
public:
	struct FStructurePlacementDef                PlacementDef;                                      // 0x28(0x8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStructureSupportDef                  SupportDef;                                        // 0x30(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePlacementData* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.StructureObjectComponentData
class UStructureObjectComponentData : public UObject
{
public:
	TSoftClassPtr<class UStructurePlacerObject>  StructurePlacerObject;                             // 0x28(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UStructureDamageObject>  StructureDamageObject;                             // 0x50(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureObjectComponentData* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.StructureInteriorData
class UStructureInteriorData : public UObject
{
public:
	float                                        TraitRadius;                                       // 0x28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C00[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureInteriorData* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.StructureCraftingData
class UStructureCraftingData : public UObject
{
public:
	TArray<TSoftObjectPtr<class UDisciplineRecipeCollectionAsset>> CraftingDisciplines;                               // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureCraftingData* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class NWX.StructureItemLockerData
class UStructureItemLockerData : public UObject
{
public:
	struct FGameplayTag                          ItemGameplayTag;                                   // 0x28(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractTextName;                                  // 0x30(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bAcceptAnyItem;                                    // 0x48(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C02[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureItemLockerData* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.StructureItemContainerData
class UStructureItemContainerData : public UObject
{
public:
	struct FContainerCapacityData                CapacityData;                                      // 0x28(0x8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        DefaultPermissions;                                // 0x30(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C03[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureItemContainerData* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class NWX.ResourceCollectionPickupDataContainer
class UResourceCollectionPickupDataContainer : public UObject
{
public:
	uint8                                        Pad_9C05[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FResourceCollectionPickupData         ResourcePickupData;                                // 0x30(0xB0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UResourceCollectionPickupDataContainer* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.ResourceCollectionMeshPresentationData
class UResourceCollectionMeshPresentationData : public UObject
{
public:
	class FName                                  MeshTag;                                           // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BottomZOffset;                                     // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TopZOffset;                                        // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UResourceCollectionMeshPresentationData* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class NWX.StructureResourceCollectionData
class UStructureResourceCollectionData : public UObject
{
public:
	enum class EStructureResourceCollectionType  ResourceType;                                      // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C06[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxResource;                                       // 0x2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FillRate;                                          // 0x30(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C07[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UResourceCollectionPickupDataContainer* ResourcePickupData;                                // 0x38(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UResourceCollectionMeshPresentationData* ResourceCollectionPresentation;                    // 0x40(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureResourceCollectionData* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class NWX.StructurePostConstructionInteractionData
class UStructurePostConstructionInteractionData : public UObject
{
public:
	TMap<enum class EStructureInteractionType, struct FStructureData_Interaction> Interactions;                                      // 0x28(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePostConstructionInteractionData* GetDefaultObj();

};

// 0xD8 (0x100 - 0x28)
// Class NWX.StructureLightDefinition
class UStructureLightDefinition : public UObject
{
public:
	class FString                                ComponentName;                                     // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ParentComponentName;                               // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStructureFXActivationTime        ActivationTime;                                    // 0x48(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C09[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RelativeTransform;                                 // 0x50(0x60)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AttenuationRadius;                                 // 0xB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseTemperature;                                   // 0xB8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C0A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Temperature;                                       // 0xBC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpotLight;                                        // 0xC0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C0B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InnerConeAngle;                                    // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterConeAngle;                                    // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C0C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UTextureLightProfile>   IESTexture;                                        // 0xD0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseIESIntensity;                                  // 0xF8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C0D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IESIntensityScale;                                 // 0xFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureLightDefinition* GetDefaultObj();

};

// 0x78 (0xA0 - 0x28)
// Class NWX.StructureFireDefinition
class UStructureFireDefinition : public UObject
{
public:
	uint8                                        Pad_9C0E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RelativeTransform;                                 // 0x30(0x60)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageRadius;                                      // 0x90(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C0F[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureFireDefinition* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.StructureCustomizationSettings
class UStructureCustomizationSettings : public UObject
{
public:
	bool                                         bCanCustomizeName;                                 // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C10[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureCustomizationSettings* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.StructureEncounterSettings
class UStructureEncounterSettings : public UObject
{
public:
	bool                                         bSpawnActive;                                      // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDamageTriggersPlayerInteraction;                  // 0x29(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C11[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureEncounterSettings* GetDefaultObj();

};

// 0x98 (0xC0 - 0x28)
// Class NWX.StructureDerivedExperienceStateIDBuilder
class UStructureDerivedExperienceStateIDBuilder : public UExperienceStateIDBuilder
{
public:
	uint8                                        Pad_9C14[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAssetReference              StructureReference;                                // 0x30(0x80)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDerivedStates                    TargetDerivedState;                                // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9C15[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureDerivedExperienceStateIDBuilder* GetDefaultObj();

	struct FExperienceStateID Build(enum class EDerivedStates TargetState, struct FStructureAssetReference& StructureAssetReference);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDestroyableInterface
class IStructureDestroyableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureDestroyableInterface* GetDefaultObj();

	void ExecuteDestroyStructure(class AActor* DestructionSource, bool* Success);
	void ExecuteDeconstructStructure(enum class EDeconstructionResourceReturn ResourceReturn, class AActor* DeconstructionSource, bool* Success);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureDestructionFunctionLibrary
class UStructureDestructionFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureDestructionFunctionLibrary* GetDefaultObj();

	void SpawnStructureDestructionVFX(struct FStructureDestructionData& DestructionData, struct FStructureNiagaraDestructionResponse& DefaultResponse, class UObject* WorldContextObject);
	class UNiagaraComponent* SpawnBustableDestructionVFX(struct FStructureNiagaraDestructionResponse& DestructionResponse, class UObject* WorldContextObject, struct FIIMExtents& InstanceExtents, struct FTransform& EffectTransform, class UStaticMesh* PropStaticMesh);
	struct FStructureNiagaraDestructionResponse GetStructureDestructionResponse(struct FStructureDestructionData& DestructionData, struct FStructureNiagaraDestructionResponse& DefaultResponse, class UObject* WorldContextObject);
	bool GetIsStructureDestructing(struct FStructureDestructionData& DestructionData);
};

// 0x38 (0x70 - 0x38)
// Class NWX.StructureDestructionVFXSettings
class UStructureDestructionVFXSettings : public UDeveloperSettings
{
public:
	struct FGameplayTag                          BreakEffectTag;                                    // 0x38(0x8)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                          DestructionEffectTag;                              // 0x40(0x8)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAffinityTable>         DestructionAffinityTable;                          // 0x48(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureDestructionVFXSettings* GetDefaultObj();

};

// 0xD0 (0x170 - 0xA0)
// Class NWX.StructureEstateComponent
class UStructureEstateComponent : public UActorComponent
{
public:
	uint8                                        Pad_9C2A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            Client_OnEstateScoreUpdated;                       // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Client_OnCurrentRespitePointUpdated;               // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Client_OnOwningPlayerIdUpdated;                    // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        EstateScore;                                       // 0xD8(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         CurrentRespitePoint;                               // 0xDC(0x1)(BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9C2D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OwningPlayerId;                                    // 0xE0(0x10)(BlueprintVisible, Net, ZeroConstructor, SaveGame, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScoreForUniqueStructure;                           // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScoreForNonUniqueStructure;                        // 0xF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScorePerCount;                                     // 0xF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ScorePerTrait;                                     // 0xFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9C30[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureEstateComponent* GetDefaultObj();

	void UpdateOwningPlayerEstateScore();
	void SetRespitePoint(bool bCurrentRespitePoint);
	void RemoveStructureObjectFromEstate(class UObject* Object);
	void OnTraitChanged(struct FStructureTraitChangedContext& Context);
	void OnRep_OwningPlayerId();
	void OnRep_EstateScore();
	void OnRep_CurrentRespitePoint();
	bool IsRespitePoint();
	class FString GetOwningPlayerID();
	float GetEstateScore();
	bool DoesPlayerOwnRespitePoint(const class FString& PlayerId);
	void AddStructureObjectToEstate(class UObject* Object);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureEstateInterface
class IStructureEstateInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureEstateInterface* GetDefaultObj();

	class UStructureEstateComponent* GetStructureEstateComponentForModify();
	class UStructureEstateComponent* GetStructureEstateComponent();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureEventInterface
class IStructureEventInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureEventInterface* GetDefaultObj();

	class UStructureEventsObject* GetStructureEventsObjectForModify();
	class UStructureEventsObject* GetStructureEventsObject();
};

// 0x70 (0x98 - 0x28)
// Class NWX.StructureEventsObject
class UStructureEventsObject : public UStructureObjectComponent
{
public:
	FMulticastInlineDelegateProperty_            OnStructureDestroyed;                              // 0x28(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStructureHealthChanged;                          // 0x38(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSchematicCompleted;                              // 0x48(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSchematicPlaced;                                 // 0x58(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSchematicConfirmed;                              // 0x68(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnResourcesAdded;                                  // 0x78(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnResourcesRemoved;                                // 0x88(0x10)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureEventsObject* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.StructureExperienceStateComponent
class UStructureExperienceStateComponent : public UActorComponent
{
public:
	uint8                                        Pad_9C46[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureExperienceStateComponent* GetDefaultObj();

	void HandleSchematicCompleted(class UObject* Structure);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureExperienceStateIDEnumerator
class UStructureExperienceStateIDEnumerator : public UExperienceStateDefinitionSource
{
public:

	static class UClass* StaticClass();
	static class UStructureExperienceStateIDEnumerator* GetDefaultObj();

};

// 0x3B0 (0x450 - 0xA0)
// Class NWX.StructureFarmingComponent
class UStructureFarmingComponent : public UActorComponent
{
public:
	uint8                                        Pad_9C5F[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WaterAmountRequired;                               // 0xC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C60[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UResourceCollector*                    WaterCollector;                                    // 0xC8(0x8)(Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FResourceContainerPersistedData       ResourceContainerPersistedData;                    // 0xD0(0x4)(SaveGame, NoDestructor, NativeAccessSpecifierPrivate)
	enum class EGrowthState                      GrowthState;                                       // 0xD4(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCanBeWatered;                                     // 0xD8(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C61[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        IIMInstanceID;                                     // 0xDC(0x4)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C62[0x310];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWateredStateChanged;                             // 0x3F0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnCanBeWateredChanged;                             // 0x400(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           WaterLevelChanged;                                 // 0x410(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           OwnerMovedDelegate;                                // 0x420(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                       GrowTimer_StartTime;                               // 0x430(0x8)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                       GrowTimer_TotalTime;                               // 0x438(0x8)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C64[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureFarmingComponent* GetDefaultObj();

	void UnbindDelegate_OnWateredStateChanged(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnCanBeWateredChanged(FDelegateProperty_& Delegate);
	void OnWetStateChanged(int32 WeatherState);
	void OnWaterContainerLevelChanged(float WaterLevel);
	void OnStructureWateredStateChanged__DelegateSignature(bool IsWatered);
	void OnStructureResourcesAdded(struct FStructureAddResourcesContext& AddResourcesContext);
	void OnStructureInitialized(class UObject* Structure);
	void OnStructureDestroyed(class UObject* Structure, class AActor* Instigator);
	void OnStructureCompleted(class UObject* Structure);
	void OnStructureCanBeWateredChanged__DelegateSignature(bool CanBeWatered);
	void OnResourceInstanceStateChanged(int32 InstanceID, enum class EIIMGameplayState OldState, enum class EIIMGameplayState NewState, int32 OldHealth, int32 NewHealth);
	void OnRep_CanBeWatered();
	void OnRealmTimeSet();
	void OnOwnerMoved(class UObject* MovedEntity);
	bool IsWatered();
	void HandleWateredStateChanged(bool IsWatered);
	TScriptInterface<class IResourceContainerObservable> GetResourceContainerObservable();
	void FinishedGrowing();
	bool CanBeWatered();
	float CalculateGrowTime();
	void BindDelegate_OnWateredStateChanged(FDelegateProperty_& Delegate);
	void BindDelegate_OnCanBeWateredChanged(FDelegateProperty_& Delegate);
};

// 0x58 (0xF8 - 0xA0)
// Class NWX.StructureFireComponent
class UStructureFireComponent : public UActorComponent
{
public:
	uint8                                        Pad_9C6D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnFireIgnited;                                     // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFireExtinguished;                                // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USphereComponent>       AOE;                                               // 0xC8(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            OnFireStateChanged;                                // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                         bFireEnabled;                                      // 0xE0(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsRestoredFromPersistence;                        // 0xE1(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C6E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USphereComponent*                      DamageSphere;                                      // 0xE8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNavModifierComponent*                 NavModifier;                                       // 0xF0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureFireComponent* GetDefaultObj();

	void ToggleSphereCollider();
	void SetBurningState(bool bEnabled);
	bool OwnerHasAuthority();
	void OnWetStateChanged(int32 WeatherState);
	void OnRep_FireEnabled();
	void OnIsFireEnabledChanged(bool bIsFireEnabled);
	void OnFireStructureInitialized(class UObject* Structure);
	void OnFireRadiusExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnFireRadiusEnter(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void Ignite(class APawn* Pawn);
	TArray<class AActor*> GetDamageSphereOverlappingActors();
	bool GetBurningState();
	TArray<class AActor*> GetAreaOfEffectOverlappingActors();
	void Extinguish(class APawn* Pawn, enum class EExtinguishReason Reason);
	bool CanIgniteTargetActor(class AActor* TargetActor);
	bool CanIgnite(enum class EIgniteBlockedReason* OutReason);
	void BindFireEvents();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureFireInterface
class IStructureFireInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureFireInterface* GetDefaultObj();

	class UStructureFireComponent* GetStructureFireComponentForModify();
	class UStructureFireComponent* GetStructureFireComponent();
};

// 0x0 (0x5A0 - 0x5A0)
// Class NWX.StructureFireProxyComponent
class UStructureFireProxyComponent : public USphereComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureFireProxyComponent* GetDefaultObj();

};

// 0x390 (0x430 - 0xA0)
// Class NWX.StructureFuelComponent
class UStructureFuelComponent : public UActorComponent
{
public:
	uint8                                        Pad_9C72[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInventoryEntry>               InventoryEntries;                                  // 0xB0(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsDraining;                                       // 0xC0(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C73[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          FuelTickTimerHandle;                               // 0xC8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnRemainingFuelPercentChangedDelegate;             // 0xD0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnFuelActivelyConsumedChangedDelegate;             // 0xE0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnAppliedFuelItemsChangedDelegate;                 // 0xF0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnActiveFuelItemChangedDelegate;                   // 0x100(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C74[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FuelTimer_StartTime;                               // 0x11C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        FuelTimer_TotalTime;                               // 0x120(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        ActiveItemElapsedTime;                             // 0x124(0x4)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C75[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       ActiveFuelItem;                                    // 0x130(0x2F0)(SaveGame, NativeAccessSpecifierPrivate)
	struct FGuid                                 ActiveFuelItemID;                                  // 0x420(0x10)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureFuelComponent* GetDefaultObj();

	void SetIsDraining(bool bDraining);
	void ServerOnly_TickFuel();
	bool OwnerHasAuthority();
	void OnRep_IsDraining();
	void OnRep_InventoryEntries();
	void OnRep_ActiveFuelItemID();
	void OnOwningStructureInitialized(class UObject* Structure);
	void OnFuelResourcesRemoved(struct FStructureRemoveResourcesContext& RemoveResourcesContext);
	void OnFuelResourcesAdded(struct FStructureAddResourcesContext& AddResourcesContext);
	bool IsDrainingFuel();
	bool HasFuelAvailable();
	void GetNonBurningInventoryEntries(TArray<struct FInventoryEntry>* NonBurningEntries);
	bool CanRemoveFuel(struct FInventoryEntry& EntryToRemove);
	void CallStopDrainingAndExtinguish();
};

// 0x0 (0xA0 - 0xA0)
// Class NWX.StructureFunctionalTestComponent
class UStructureFunctionalTestComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureFunctionalTestComponent* GetDefaultObj();

	void TEST_SetSnapRulesOverride(class UStructureGridComponent* Component, int32 SnapPointIndex, class USnapPointRules* SnapRulesOverride);
	struct FGridPoint TEST_NewGridPoint(struct FSnapPointId& ID, class AActor* Owner, enum class ESnapPointQuadrant Quadrant, class USnapPointRules* SnapRulesOverride);
};

// 0xC8 (0x168 - 0xA0)
// Class NWX.StructureGridComponent
class UStructureGridComponent : public UActorComponent
{
public:
	TArray<struct FGridPoint>                    GridPoints;                                        // 0xA0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class USnapRulesEnforcer>        SnapRulesEnforcerClass;                            // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USupportRulesEnforcer>     SupportRulesEnforcerClass;                         // 0xB8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCompositePieceSnapObject> SnapObjectClass;                                   // 0xC0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStructureAttachments                 LegacyAttachments;                                 // 0xC8(0x20)(Net, NativeAccessSpecifierPrivate)
	struct FPieceSnapPoints                      LegacySnapPoints;                                  // 0xE8(0x30)(Net, NativeAccessSpecifierPrivate)
	TMap<int32, class UCompositePieceSnapObject*> SnapObjects;                                       // 0x118(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureGridComponent* GetDefaultObj();

	void ToggleSnapPointVisibility();
	void SetSnapData(class UStructureSnappableData* SnapData);
	class UCompositePieceSnapObject* GetSinglePieceSnapObject();
	class UCompositePieceSnapObject* GetPieceSnapObject(int32 PieceId);
	struct FStructureAttachments GetLegacyStructureAttachments_Mutable();
	struct FStructureAttachments GetLegacyStructureAttachments();
	struct FPieceSnapPoints GetLegacySnapPoints();
	void DEBUG_GetAllSnapObjects(TArray<class UCompositePieceSnapObject*>* OutSnapObjects);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureHealthInterface
class IStructureHealthInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureHealthInterface* GetDefaultObj();

	float GetMinHealth();
	float GetMaxHealth();
	float GetCurrentHealth();
};

// 0x10 (0xB0 - 0xA0)
// Class NWX.StructureHopeComponent
class UStructureHopeComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class USphereComponent>       OwnerAreaOfEffect;                                 // 0xA0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRegenActive;                                      // 0xA8(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9C93[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureHopeComponent* GetDefaultObj();

	void StopRegenOnNearbyActors();
	void StopRegenOnActor(class AActor* Actor);
	void StopRegenInRadius();
	void StartRegenOnNearbyActors();
	void StartRegenOnActor(class AActor* Actor);
	void StartRegenInRadius();
	void OnRep_RegenActive();
	void OnAOEEndCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnAOEBeginCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	bool IsRegenActive();
};

// 0x28 (0x50 - 0x28)
// Class NWX.StructureInteractionComponent
class UStructureInteractionComponent : public UNWXObjectComponent
{
public:
	TSoftObjectPtr<class UStructureInteractionDataAsset> ConnectionDataAsset;                               // 0x28(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UStructureInteractionComponent* GetDefaultObj();

	struct FGuid GetConnectionDataAssetUID();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureInteractionFunctionLibrary
class UStructureInteractionFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureInteractionFunctionLibrary* GetDefaultObj();

	void OnInteractionUIDataReady__DelegateSignature(TArray<class UStructureInteractionUIData*>& OutUIInteractions);
	bool IsInteractionEnabled(class UObject* Structure);
	bool GetStructureInteractionUIData(struct FStructureAssetReference& StructureRef, FDelegateProperty_& InteractionUIDataReady);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureInteractionRequirementComponent
class UStructureInteractionRequirementComponent : public UNWXObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UStructureInteractionRequirementComponent* GetDefaultObj();

	bool CheckRequirements(class UObject* Structure, class APawn* Pawn, class FText* OutReason);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureLightInterface
class IStructureLightInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureLightInterface* GetDefaultObj();

	class UPointLightComponent* GetStructureLightComponentForModify();
	class UPointLightComponent* GetStructureLightComponent();
};

// 0x78 (0x320 - 0x2A8)
// Class NWX.StructureMeshesContainer
class UStructureMeshesContainer : public USceneComponent
{
public:
	TArray<struct FCompositePieceInstanceData>   Instances;                                         // 0x2A8(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UCompositePieceInstance*>  InstanceObjects;                                   // 0x2B8(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<int32>                                DeadInstancesPool;                                 // 0x308(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCompositePieceInstance>   PieceInstanceClass;                                // 0x318(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureMeshesContainer* GetDefaultObj();

	struct FCompositeInstanceDef GetInstanceDef(struct FCompositePieceGameplay& Piece);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureMeshFunctionLibrary
class UStructureMeshFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureMeshFunctionLibrary* GetDefaultObj();

	struct FTransform GetStaticMeshOriginTransform(class UStaticMeshComponent* StaticMesh);
	void GetStaticMeshOrigin(class UStaticMeshComponent* StaticMesh, struct FVector* OutLocalLocation, struct FVector* OutWorldLocation);
	struct FVector GetStaticMeshBounds(class UStaticMeshComponent* StaticMesh);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureMeshInfoInterface
class IStructureMeshInfoInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureMeshInfoInterface* GetDefaultObj();

	void GetMeshTransform(struct FTransform* WorldTransform);
	void GetMeshOriginTransform(struct FTransform* OriginTransform);
	void GetMeshOrigin(struct FVector* LocalLocation, struct FVector* WorldLocation);
	void GetMeshMinAndMax(struct FVector* MinLocal, struct FVector* MaxLocal, struct FVector* MinWorld, struct FVector* MaxWorld);
	struct FVector GetMeshExtents();
	struct FVector GetMeshBounds();
	void EnsureFallbackMeshes(bool bForceUseFallback);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureObjectOwnerInterface
class IStructureObjectOwnerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureObjectOwnerInterface* GetDefaultObj();

	class UStructurePlacerObject* GetStructurePlacerObject();
	class UStructureDamageObject* GetStructureDamageObject();
};

// 0x30 (0x60 - 0x30)
// Class NWX.StructureOcclusionSubsystem
class UStructureOcclusionSubsystem : public ULocalPlayerSubsystem
{
public:
	float                                        TickDelay;                                         // 0x30(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntPoint                             Resolution;                                        // 0x34(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SearchRadius;                                      // 0x3C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9CA9[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureOcclusionSubsystem* GetDefaultObj();

	void SetUpdateDelay(float InTickDelay);
	void SetOccluderSearchRadius(float InSearchRadius);
	void SetMapResolution(struct FIntPoint& InResolution);
	void RefreshOcclusionData();
	class UTexture* GetOcclusionTexture();
	struct FMatrix GetOcclusionMatrix();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureOriginatorInterface
class IStructureOriginatorInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureOriginatorInterface* GetDefaultObj();

	void SetStructureOriginatorType(enum class EStructureOriginatorType Type);
	enum class EStructureOriginatorType GetStructureOriginatorType();
};

// 0x60 (0x100 - 0xA0)
// Class NWX.StructurePetComponent
class UStructurePetComponent : public UActorComponent
{
public:
	uint8                                        Pad_9CAC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPetSpawned;                                      // 0xA8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9CAD[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasSpawnedPet;                                    // 0xC8(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9CAE[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UPetsDataAsset>         PetDataAsset;                                      // 0xD8(0x28)(SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructurePetComponent* GetDefaultObj();

	void TrySpawnNewPet(TSoftObjectPtr<class UPetsDataAsset>& PetsDataAsset);
	void OnSpawnerSpawnedPet(class ANWXAICharacter* CharacterSpawned, class ANWXAISpawner* OwningSpawner);
	void OnRep_HasSpawnedPet();
	void OnOwnerStructureMoved(class UObject* MovedObject);
	bool HasPetSpawned();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructurePlacementFeedbackInterface
class IStructurePlacementFeedbackInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructurePlacementFeedbackInterface* GetDefaultObj();

	void UnbindEventFrom_OnClientPlacementValidityChanged(FDelegateProperty_& Event);
	void UnbindEventFrom_OnClientPlacementFeedbackChanged(FDelegateProperty_& Event);
	void Client_SetPlacementFeedback(struct FStructurePlacementFeedback& FeedbackData);
	struct FStructurePlacementFeedback Client_GetPlacementFeedback();
	void BindEventTo_OnClientPlacementValidityChanged(FDelegateProperty_& Event);
	void BindEventTo_OnClientPlacementFeedbackChanged(FDelegateProperty_& Event);
};

// 0x10 (0x40 - 0x30)
// Class NWX.StructurePlacementPresentationDataAsset
class UStructurePlacementPresentationDataAsset : public UDataAsset
{
public:
	TArray<struct FStructurePlacementPresentationData> PlacementFeedbackList;                             // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePlacementPresentationDataAsset* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class NWX.StructurePlacementSettings
class UStructurePlacementSettings : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UStructurePlacementPresentationDataAsset> PlacementPresentationAsset;                        // 0x38(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructurePlacementSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructurePlacerObject
class UStructurePlacerObject : public UStructureObjectComponent
{
public:

	static class UClass* StaticClass();
	static class UStructurePlacerObject* GetDefaultObj();

	void SetPlacementMaterial(class UObject* Structure, struct FStructurePlacementFeedback& PlacementData);
	struct FStructurePlacementFeedback SetPlacementFeedback(class UObject* Structure, class AController* Controller, struct FGameplayAbilityTargetDataHandle& TargetData);
	struct FStructurePlacementFeedback IsValidPlacement(class UObject* Structure, class AController* Controller, struct FGameplayAbilityTargetDataHandle& TargetData);
	struct FStructurePlacementFeedback IsPhysicalPlacementValid(class UObject* Structure, class AController* Controller, struct FGameplayAbilityTargetDataHandle& TargetData);
	struct FGameplayAbilityTargetDataHandle GetPlacementTransform(class UObject* Structure, class ACharacter* Character, float OptionalDeltaRotationZ, float OptionalDeltaHeightZ);
	class UMaterialInstance* GetPlacementMaterial(class UObject* Structure, struct FStructurePlacementFeedback& PlacementData);
	void GetObjectsToIgnoreInGeometryTrace(class UObject* ThisStructure, struct FGameplayAbilityTargetDataHandle& TargetData, TArray<class UObject*>* OutObjectsToIgnore);
	bool FinalizeStructureData(class UObject* Structure, class AController* Controller, struct FSnapPlacementTargetData& SnapData);
	bool FinalizePlacement(class UObject* Structure, class AController* Controller, struct FSnapPlacementTargetData& SnapData);
	bool FinalizeGameplayData(class UObject* Structure);
	bool DoesPlacementExceedPieceBudget(class AStructureComposite* StructureComposite, class AController* Controller);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructurePortalFunctionLibrary
class UStructurePortalFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructurePortalFunctionLibrary* GetDefaultObj();

	class FString GetPortalUniqueId(class ANWXStructure* Structure, bool* OutSuccess);
};

// 0x100 (0x1A0 - 0xA0)
// Class NWX.StructureResourceCollectionComponent
class UStructureResourceCollectionComponent : public UActorComponent
{
public:
	uint8                                        Pad_9CBD[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UResourceCollector*                    ResourceCollector;                                 // 0xB8(0x8)(Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FResourceContainerPersistedData       ResourceContainerPersistedData;                    // 0xC0(0x4)(SaveGame, NoDestructor, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           ResourceLevelChanged;                              // 0xC4(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9CBE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UResourceCollection_LevelMeshMover*    LevelMeshMover;                                    // 0xD8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9CBF[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureResourceCollectionComponent* GetDefaultObj();

	void StopCollection();
	void StartCollection();
	float RemoveResource(float Amount);
	void OnOwningStructureStateChanged();
	void OnOwningStructureInitialized(class UObject* Structure);
	void OnContainerLevelChange(float Level);
	bool CanRemoveResource();
	struct FPickupResult CalculatePickupResult();
};

// 0x20 (0x48 - 0x28)
// Class NWX.ResourceCollection_LevelMeshMover
class UResourceCollection_LevelMeshMover : public UObject
{
public:
	uint8                                        Pad_9CC1[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UResourceCollection_LevelMeshMover* GetDefaultObj();

	void OnResourceLevelUpdate(float ResourceLevel);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureResourceConsumerInterface
class IStructureResourceConsumerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureResourceConsumerInterface* GetDefaultObj();

	void ResolvePersistedResourceHistory();
	void RemoveResource(const struct FInventoryEntry& Resource, int32 Quantity, bool* Success);
	void RemoveAddedResources(TArray<struct FInventoryEntry>* RemovedResources);
	void HasAddedResources(bool* HasAddedResources);
	void GetCurrentAddedResourceAmount(struct FItemDataReference& Resource, int32* Quantity);
	void GetContributingPlayerStates(class UObject* WorldContextObject, TArray<class APlayerState*>* PlayerStates);
	void GetAddedResourcesHistory(TArray<struct FInventoryEntry>* AddedResources);
	void AddBulkResources(TArray<struct FInventoryEntry>& Resources, class AController* Controller, class UObject* Structure, bool bInitialBuild, bool bIsSilent, bool* bSuccess, TArray<struct FInventoryEntry>* OutRemainingResources, TArray<struct FInventoryEntry>* OutAddedResources);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureResourceHandlingInterface
class IStructureResourceHandlingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureResourceHandlingInterface* GetDefaultObj();

	bool RemoveResource(struct FInventoryEntry& Resource, class AController* Controller);
	void AddConstructionResources(TArray<struct FInventoryEntry>& Resources, class AController* Controller, bool* bSuccess, TArray<struct FInventoryEntry>* OutUnusedResources, TArray<struct FInventoryEntry>* OutAddedResources);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureResourceManagerOwnerInterface
class IStructureResourceManagerOwnerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureResourceManagerOwnerInterface* GetDefaultObj();

	void InitializeResourceManagers();
	void GetTotalResourceRequirementsForCurrentState(TArray<struct FStructureResourceRequirements>* TotalRequirements);
	TScriptInterface<class IStructureResourceConsumerInterface> GetResourcesManagerForCurrentState();
	TScriptInterface<class IStructureResourceRequirementsInterface> GetResourceRequirementsForCurrentState();
	TScriptInterface<class IStructureResourceConsumerInterface> GetPostConstructionResourcesManager();
	TScriptInterface<class IStructureResourceRequirementsInterface> GetPostConstructionResourceRequirements();
	TScriptInterface<class IStructureResourceConsumerInterface> GetConstructionResourcesManager();
	TScriptInterface<class IStructureResourceRequirementsInterface> GetConstructionRequirements();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureResourceRequirementsInterface
class IStructureResourceRequirementsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureResourceRequirementsInterface* GetDefaultObj();

	bool HasAnyRequirements();
	bool HasAnyAddedResources();
	bool HasAllRequiredResources();
	void GetTotalResourceRequirements(TArray<struct FStructureResourceRequirements>* TotalResourceRequirements);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureResourcesFunctionLibrary
class UStructureResourcesFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureResourcesFunctionLibrary* GetDefaultObj();

	void GetMatchingRequirements(class UObject* Structure, TScriptInterface<class IItemContainer>& Container, TArray<struct FInventoryEntryIdAndQuantity>* OutMatchingItems);
	bool DoesStructureHaveAllRequiredResources(class UObject* Structure);
	bool DoesResourceMeetRequiredProperties(struct FGameplayTagContainer& Properties, struct FItemDataReference& Resource);
	bool ContainerHasAnyRequirements(class UObject* Structure, TScriptInterface<class IItemContainer>& Container);
	bool CanAddResourcesToStructure(class UObject* Structure);
};

// 0x30 (0x58 - 0x28)
// Class NWX.StructureResourcesManagerObject
class UStructureResourcesManagerObject : public UObjectWithWorld
{
public:
	uint8                                        Pad_9CE5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ResourceTrackerId;                                 // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9CE6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAddResourcesComponent*                ResourcesComponent;                                // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                        ContributingPlayerProfileIds;                      // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureResourcesManagerObject* GetDefaultObj();

	TArray<struct FInventoryEntry> RemoveAllAddedResources();
	int32 ModifyResourceCount(struct FInventoryEntry& ResourceName, int32 QuantityDelta);
	bool InitializeResources(TArray<struct FStructureResourceRequirements>& Requirements);
	bool HasAnyAddedResource();
	bool HasAllRequirements();
	void GetTotalRequirements(TArray<struct FStructureResourceRequirements>* TotalRequirements);
	struct FGameplayTagContainer GetResourceProperties(struct FItemDataReference* Resource);
	void GetAddedResources(TArray<struct FInventoryEntry>* AddedResources);
	TArray<struct FInventoryEntry> AddAllResourcesFromInventory(class UInventoryComponentBase* InventoryComponent);
};

// 0x60 (0x88 - 0x28)
// Class NWX.CompositeAcousticSpace
class UCompositeAcousticSpace : public UObject
{
public:
	uint8                                        Pad_9CE8[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositeAcousticSpace* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class NWX.StructureVolumeAcousticSpace
class UStructureVolumeAcousticSpace : public UObject
{
public:
	uint8                                        Pad_9CE9[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureVolumeAcousticSpace* GetDefaultObj();

};

// 0xA0 (0x140 - 0xA0)
// Class NWX.StructureReverbComponent
class UStructureReverbComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnPlayerEnteredReverberantStructure;               // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerExitedReverberantStructure;                // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnReverbVolumesUpdated;                            // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FStructureReverbVolume>        StructureReverbVolumes;                            // 0xD0(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCompositeAcousticSpace*>       CompositeAcousticSpaces;                           // 0xE0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStructureVolumeAcousticSpace*> StructureVolumeAcousticSpaces;                     // 0xF0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class URainScopedAkComponent*>        WeatherComponents;                                 // 0x100(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UWindScopedAkComponent*>        WindComponents;                                    // 0x110(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAcousticOpeningComponent*>     AcousticOpenings;                                  // 0x120(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAcousticOpeningComponent*>     LocalAcousticOpenings;                             // 0x130(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureReverbComponent* GetDefaultObj();

	void GetInteriorToExteriorAcousticOpeningPositions(TArray<struct FVector>* Positions);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructuresFunctionLibrary
class UStructuresFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructuresFunctionLibrary* GetDefaultObj();

	struct FGameplayAbilityTargetDataHandle TargetDataFromSnapablePlacementData(struct FSnapPlacementTargetData& Data);
	void StructureNWXPrint(class UObject* WorldContextObject, class UObject* Structure, const class FString& FunctionName, const class FString& Message, enum class ENWXLogLevel NWXLogLevel);
	bool StructResourceTrackerInitialize(struct FStructureResourceRequirementsTracker& Tracker, TArray<struct FStructureResourceRequirements>& Requirements, class UStructureResourcesManagerObject* StructureResourcesManagerObject);
	bool StructResourceTrackerHasAllRequiredResoures(struct FStructureResourceRequirementsTracker& Tracker);
	int32 StructResourceTrackerAddResource(struct FStructureResourceRequirementsTracker& Tracker, struct FInventoryEntry& StructureResource, int32 Quantity);
	bool SpawnOptionalMeshComponentFromDefinition(struct FStructureOptionalMeshDefinition& OptionalMeshDefinition, class USceneComponent* Parent, class AActor* Actor);
	class UNiagaraComponent* SpawnNiagaraComponentFromDefinition(struct FStructureNiagaraComponentDefinition& NiagaraDefinition, class USceneComponent* Parent, class AActor* Actor);
	bool SpawnMeshComponentFromDefinition(struct FStructureMeshDefinition& MeshDefinition, class USceneComponent* Parent, class AActor* Actor);
	class UPointLightComponent* SpawnLightComponentFromDefinition(class UStructureLightDefinition* LightDefinition, class USceneComponent* Parent, class UObject* Outer, class FName& ComponentName, enum class EAttachmentRule AttachmentRule);
	void SortStructureRowNames(TArray<class FName>& InStructureRowNames, TArray<class FName>* OutStructureRowNames);
	bool ShouldOverrideMeshMaterial(class UMeshComponent* MeshComponent);
	void SaveMeshData(const class FString& Filename, TArray<class FString>& MeshStrings);
	struct FGameplayAbilityTargetDataHandle Prototype_TargetDataFromBuildingPlacementData(struct FBuildingPlacementTargetData& Data);
	void Prototype_GetBuildingPlacementData(struct FGameplayAbilityTargetDataHandle& TargetData, struct FBuildingPlacementTargetData* OutData);
	void PrintGridPointAcceptableStructures(class UObject* WorldContextObject, struct FGridPoint& GridPoint);
	bool OverrideNiagaraComponentParameters(class UNiagaraComponent* NiagaraComponent, struct FStructureNiagaraComponentDefinition& NiagaraDefinition);
	void LoadMeshData(const class FString& Filename, TArray<class FString>* MeshStrings);
	bool IsStructureValidForUse(class UObject* Structure);
	bool IsStructureValid(class UObject* Object);
	bool IsStructureOfType(class UObject* Structure, enum class EStructureType TargetStructureType);
	bool IsStructureEncroachingBlockingGeometry(class UObject* Object);
	bool IsPointUnderStructure(class UObject* WorldContextObject, struct FVector& Point);
	bool IsGridPointValid(struct FGridPoint& GridPoint);
	bool IsGridPointOccupied(struct FGridPoint& GridPoint);
	bool IsConstructedStructureOrCompositePiece(class UObject* Structure);
	bool IsConstraintMet(struct FStructureResourceRequirements& Requirements, struct FInventoryEntry& Entry);
	struct FGameplayTagContainer GetTagsFromStaticMesh(class UStaticMesh* Mesh);
	struct FGameplayTagContainer GetTagsForMeshPhysicalMaterials(TArray<class UMeshComponent*>& MeshComponents);
	class UStructurePlacerObject* GetStructurePlacerObject(class UObject* Structure);
	TSet<enum class ESnapType> GetSnapPointsAcceptableStructuresSet(class UObject* WorldContextObject, TArray<struct FGridPoint>& GridPoints);
	class FString GetSnapPointAcceptableStructuresString(class UObject* WorldContextObject, struct FGridPoint& GridPoint);
	TArray<enum class ESnapType> GetSnapPointAcceptableStructuresArray(class UObject* WorldContextObject, struct FGridPoint& GridPoint);
	void GetSnapPlacementData(struct FGameplayAbilityTargetDataHandle& TargetData, struct FSnapPlacementTargetData* OutData);
	int32 GetQuantityRequired(struct FStructureResourceRequirements& Requirements);
	int32 GetQuantityRemaining(struct FStructureResourceRequirements& Requirements);
	int32 GetQuantityAdded(struct FStructureResourceRequirements& Requirements);
	struct FItemConstraintPresentationData GetPresentationData(struct FStructureResourceRequirements& Requirements);
	enum class ESnapPointQuadrant GetMirrorQuadrant(enum class ESnapPointQuadrant Quadrant);
	struct FTransform GetGridPointWorldTransform(struct FGridPoint& GridPoint);
	void GetGridPointOwner(struct FGridPoint& GridPoint, class UObject** OutOwner);
	void GetGridPointOccupyingStructures(struct FGridPoint& GridPoint, TArray<class UObject*>* OutOccupyingStructures);
	void GetGridPointAlternativeRotations(struct FGridPoint& GridPoint, TArray<struct FVector>* OutAlternativeRotations);
	struct FGameplayTag GetDoorOpenRightTag();
	struct FGameplayTag GetDoorOpenLeftTag();
	struct FItemConstraint GetConstraint(struct FStructureResourceRequirements& Requirements);
	bool EqualEqual_FPieceSnapPoints(struct FPieceSnapPoints& A, struct FPieceSnapPoints& B);
	bool EqualEqual_FGridPoint(struct FGridPoint& A, struct FGridPoint& B);
	bool DoesStructureHaveTag(class UObject* Structure, const struct FGameplayTag& Tag, bool bExactMatch);
	bool DoesGridPointAllowStructureType(struct FGridPoint& GridPoint, enum class ESnapType StructureType);
	class UStructureDataAsset* CreateStructureDataAsset(const class FString& DirectoryPath, const class FString& StructureUID, enum class ECreateStructureAssetResult* OutResult);
	bool ConstraintHasTag(struct FStructureResourceRequirements& Requirement, struct FGameplayTag& Tag);
	void AddSnapPointDataAsset(const class FString& DirectoryName, const class FString& DataAssetName, struct FPieceSnapPoints& InputSnapPoints, bool* bSuccess, class USnapPointDataAsset** OutDataAsset);
	bool AddNiagaraComponentParametersToDefinition(struct FStructureNiagaraComponentDefinition& NiagaraDefinition, class UNiagaraComponent* NiagaraComponent);
	bool AddLightComponentParametersToDefinition(class UStructureLightDefinition** LightDefinition, class UPointLightComponent* LightComponent);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructuresGenericReplicatedDataFunctionLibrary
class UStructuresGenericReplicatedDataFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructuresGenericReplicatedDataFunctionLibrary* GetDefaultObj();

	void GetGenericReplicatedDataAsStructureAssetReference(struct FGenericReplicatedDataHandle& GenericReplicatedData, int32 Index, bool* bHasStructureAssetReference, struct FStructureAssetReference* StructureAssetReference);
	struct FGenericReplicatedDataHandle GenericReplicatedDataFromStructureAssetReference(struct FStructureAssetReference& StructureAssetReference);
};

// 0x20 (0xFD0 - 0xFB0)
// Class NWX.StructureSkeletalMeshComponent
class UStructureSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class FString                                StructureMeshDefinitionId;                         // 0xFB0(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXStructureAnimInstance*             AnimInstance;                                      // 0xFC0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D3E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureSkeletalMeshComponent* GetDefaultObj();

	void OnRep_StructureMeshDefinitionId();
};

// 0xA0 (0x140 - 0xA0)
// Class NWX.StructureSlotsComponent
class UStructureSlotsComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnStructureSlotsChanged;                           // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FDelegateProperty_                           OwnerMovedDelegate;                                // 0xB0(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           SlottedStructureMovedDelegate;                     // 0xC0(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D41[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGuid, float>                    SlottedStructuresInternal;                         // 0xD8(0x50)(NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                         ActiveSlots;                                       // 0x128(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D42[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureSlotsComponent* GetDefaultObj();

	void OnSlottedStructureMoved(class UObject* MovedEntity);
	void OnRep_ActiveSlots();
	void OnOwnerMoved(class UObject* MovedEntity);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSlotsFunctionLibrary
class UStructureSlotsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureSlotsFunctionLibrary* GetDefaultObj();

	bool IsStructureSlottedIntoStructure(class AActor* StructureToTest, class AActor* StructureWithSlots);
	bool IsStructureSlottable(class UObject* Structure);
	class UStructureSlotsComponent* GetStructureSlotsComponentFromStructure(class UObject* Structure);
	void GetStructureSlotInformation(class UObject* Structure, uint8* OutNumSlots, TArray<class AActor*>* OutSlottedStructures);
	bool CanStructureSlotIntoStructure(class AActor* StructureToBeSlotted, class AActor* StructureWithSlots);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSlotsInterface
class IStructureSlotsInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureSlotsInterface* GetDefaultObj();

	void OnStructureSlotsChanged();
	class UStructureSlotsComponent* GetStructureSlotsComponentForModify();
	class UStructureSlotsComponent* GetStructureSlotsComponent();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSnapFunctionLibrary
class UStructureSnapFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureSnapFunctionLibrary* GetDefaultObj();

	void ResolveItemProxies(class UObject* Structure);
	bool IsSnapPlacementDataValid(struct FSnapPlacementTargetData& SnapData);
	void GetUnoccupiedSnapPointsForPieceViaTrace(class AController* Controller, enum class ESnapType SnapType, TArray<struct FGridPoint>* OutSnapPoints);
	void GetUnoccupiedSnapPointsForPieceOfType(class UObject* Structure, enum class ESnapType SnapType, TArray<struct FGridPoint>* OutMatchingSnapPoints);
	void GetSnapPointIndexAndOwner(struct FGridPoint& SnapPoint, int32* OutSnapPointIndex, class UObject** OutSnapPointOwner);
	void GetSnapPointFromIndexAndOwner(int32 SnapPointIndex, class UObject* SnapPointOwner, struct FGridPoint* OutSnapPoint);
	class UCompositePieceSnapObject* GetSnapObjectFromStructure(class UObject* Structure);
	void GetSnapActorFromTargetData(struct FSnapPlacementTargetData& SnapData, class UObject** OutActor, struct FGridPoint* OutSelectedSnapPoint);
	void GetSnapActorFromPlacementData(struct FSnapPlacementTargetData& SnapData, class UObject** OutActor, struct FGridPoint* OutSelectedSnapPoint);
	void GetPieceInfoFromStructureObject(class UObject* StructureObject, class UObject** OutOwner, int32* OutPieceId);
	enum class ESnapType GetOwnerSnapType(struct FGridPoint& SnapPoint);
	bool DoesLineHitSnapPoint(struct FGridPoint& SnapPoint, enum class ESnapType SnapType, struct FVector& LineStart, struct FVector& LineEnd);
	bool ConnectTwoPieces(class UObject* SourcePiece, struct FSnapPlacementTargetData& SnapData);
	bool AreSnapPointsAtSameLocation(struct FGridPoint& SnapPointOne, struct FGridPoint& SnapPointTwo);
	bool AddPieceToConstructionBuckets(class UObject* PieceObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSnappableInterface
class IStructureSnappableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureSnappableInterface* GetDefaultObj();

	void GetSnapType(enum class ESnapType* SnapPointType);
	void GetSnapPoints(TArray<struct FGridPoint>* SnapPoints);
	void GetSnapComponent(class UCompositePieceSnapObject** SnapObject);
};

// 0xB0 (0x350 - 0x2A0)
// Class NWX.StructureSpawnerRandomizer
class AStructureSpawnerRandomizer : public AActor
{
public:
	TArray<class ATargetPoint*>                  RequiredStructures;                                // 0x2A0(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint*>                  OptionalStructures;                                // 0x2B0(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                        NumberOfOptionalStructures;                        // 0x2C0(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9D65[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAssetReference              StructureReference;                                // 0x2D0(0x80)(Edit, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AStructureSpawnerRandomizer* GetDefaultObj();

	void ProcessTargetPointsAndSpawnStructures();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureStateFunctionLibrary
class UStructureStateFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureStateFunctionLibrary* GetDefaultObj();

	struct FTimerHandle RefreshIsStructureCompletionBlocked(class UObject* Structure, struct FTimerHandle& PendingRefresh, const class FString& FunctionName);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureStateInterface
class IStructureStateInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureStateInterface* GetDefaultObj();

	enum class EStructureState SetStructureSchematicState(enum class EStructureState State);
	bool Server_IsBlockingQueryAllowed();
	void Server_IncrementBlockingQueryCounter();
	class UStructureStateObject* GetStateObject();
	enum class EStructureState GetSchematicState();
	bool GetIsStructureComplete();
	void CheckStateTransition();
};

// 0x20 (0x50 - 0x30)
// Class NWX.StructureSubsystemConfig
class UStructureSubsystemConfig : public UDataAsset
{
public:
	uint16                                       MaxConstructedStructureCount;                      // 0x30(0x2)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       MaxCompositeStructureCount;                        // 0x32(0x2)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       MaxPieceCount;                                     // 0x34(0x2)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9D67[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AStructureComposite>       CompositeStructureBPBaseClass;                     // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           StructureHealthCurve;                              // 0x40(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       HealthRoundingValue;                               // 0x48(0x2)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9D68[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAISettings                  AISettings;                                        // 0x4C(0x4)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureSubsystemConfig* GetDefaultObj();

};

// 0x1E0 (0x210 - 0x30)
// Class NWX.StructureSubsystem
class UStructureSubsystem : public UNWXWorldSubsystem
{
public:
	TSoftObjectPtr<class UStructureSubsystemConfig> ConfigurationAsset;                                // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Server_OnStructureRegistered;                      // 0x58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Server_OnStructureUnregistered;                    // 0x68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPetCountChanged;                                 // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRealmStructureCountChanged;                      // 0x88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<struct FGuid, class ANWXStructure*>     GlobalStructureMap;                                // 0x98(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class AStructureConstructedBase*> ConstructedStructureMap;                           // 0xE8(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class AStructureComposite*> CompositeStructureMap;                             // 0x138(0x50)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class ANWXStructure*>     EstateStructureMap;                                // 0x188(0x50)(NativeAccessSpecifierPrivate)
	TArray<class ANWXStructure*>                 StructuresInPlacement;                             // 0x1D8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D71[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           StructureHealthCurveFloat;                         // 0x200(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D72[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStructureAISettings                  AISettings;                                        // 0x20C(0x4)(NoDestructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureSubsystem* GetDefaultObj();

	class ANWXStructure* ServerOnly_GetStructureById(struct FGuid& ID, bool* OutSuccess);
	void ServerOnly_GetAllStructures(TArray<class ANWXStructure*>* OutStructures);
	void OnConstructedStructureInitialized(class UObject* Structure);
	struct FRealmStructureCountInfo GetRealmStructureCountInfo();
	struct FRealmStructureCapInfo GetRealmStructureCapInfo();
	uint8 GetPetCount();
	void GetAllEstates(TArray<class ANWXStructure*>* OutStructures);
	void GetAllConstructedStructures(TArray<class AStructureConstructedBase*>* OutStructures);
	void GetAllCompositeStructures(TArray<class AStructureComposite*>* OutStructures);
	class ANWXStructure* ClientOnly_GetStructureById(struct FGuid& ID, bool* OutSuccess);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSubsystemFunctionLibrary
class UStructureSubsystemFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureSubsystemFunctionLibrary* GetDefaultObj();

	void Server_UnbindEventFrom_OnStructureUnregistered(class UObject* WorldContextObject, FDelegateProperty_& Listener);
	void Server_UnbindEventFrom_OnStructureRegistered(class UObject* WorldContextObject, FDelegateProperty_& Listener);
	void Server_GetAllStructures(class UObject* WorldContextObject, TArray<class ANWXStructure*>* OutStructures);
	void Server_BindEventTo_OnStructureUnregistered(class UObject* WorldContextObject, FDelegateProperty_& Listener);
	void Server_BindEventTo_OnStructureRegistered(class UObject* WorldContextObject, FDelegateProperty_& Listener);
	class UStructureSubsystem* GetStructureSubsystem(class UObject* WorldContextObject);
	void GetAllEstates(class UObject* WorldContextObject, TArray<class ANWXStructure*>* OutEstates, const class FString& OptionalOwningPlayerID);
	void GetAllConstructedStructures(class UObject* WorldContextObject, TArray<class AStructureConstructedBase*>* OutStructures);
	void GetAllCompositeStructures(class UObject* WorldContextObject, TArray<class AStructureComposite*>* OutStructures);
	bool DoesWorldExceedConstructedStructureBudget(class UObject* WorldContextObject);
	bool DoesWorldExceedCompositeStructureBudget(class UObject* WorldContextObject);
	bool DoesCompositeStructureExceedPieceBudget(class AStructureComposite* CompositeStructure);
};

// 0xA8 (0x148 - 0xA0)
// Class NWX.StructureSupportComponent
class UStructureSupportComponent : public UActorComponent
{
public:
	TSubclassOf<class UStructureSupportObject>   SupportObjClass;                                   // 0xA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStructureCompositeSupportData        SupportData;                                       // 0xA8(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UStructureSupportObject*>  SupportObjects;                                    // 0xF8(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureSupportComponent* GetDefaultObj();

	class UStructureSupportObject* GetSupportObjectForPiece(int32 PieceId);
	class UStructureSupportObject* GetSinglePieceSupportObject();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureSupportFunctionLibrary
class UStructureSupportFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureSupportFunctionLibrary* GetDefaultObj();

	bool ShouldFilterHitResult(struct FHitResult& Hit);
	bool RotatedSupportTrace(class UObject* WorldContext, struct FVector& Corner, double HeightAboveMesh, double DepthCheck, TArray<class UObject*>& ObjectsToIgnore, bool bIgnoreStructuresForGroundSupport, struct FVector& StructureUpVector, struct FHitResult* OutFirstHit);
	void MakeSupportedSupportPlacementData(struct FStructurePlacementFeedback_Support* StructurePlacementFeedback_Support);
	class UObject* GetSupportObjectFromStructure(class UObject* Structure);
	void GetAllSupportingObjectsOfType(class UObject* Structure, int32 SupportTypes, TArray<class UObject*>* OutSupportingObjects, class UObject* ExcludedSupportingObject);
	bool DoesStructureHaveAnySupportOfType(class UObject* Structure, int32 SupportTypes, class UObject* ExcludedSupportingObject);
};

// 0x40 (0x68 - 0x28)
// Class NWX.StructureSupportObject
class UStructureSupportObject : public UObjectWithWorld
{
public:
	uint8                                        Pad_9D90[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSupportingObjectsChanged;                        // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FDelegateProperty_                           OwnerMovedDelegate;                                // 0x40(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        PieceId;                                           // 0x50(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D91[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStructureSupportComponent*            SupportComponent;                                  // 0x58(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9D92[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureSupportObject* GetDefaultObj();

	void ServerOnly_OnSupportingStructureDestroyed(class UObject* Structure, class AActor* Instigator);
	void ServerOnly_OnSupportedStructureDestroyed(class UObject* Structure, class AActor* Instigator);
	void OnOwnerMoved(class UObject* MovedEntity);
	void GetSupportData(struct FStructureSupportData* SupportData);
	class UObject* GetOwner();
};

// 0x48 (0x70 - 0x28)
// Class NWX.StructureTraitEnvironmentalInfluencesData
class UStructureTraitEnvironmentalInfluencesData : public UObject
{
public:
	class UEnvironmentalInfluenceDataDisciplines* DisciplineData;                                    // 0x28(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataRefinement* RefinementData;                                    // 0x30(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataCraftingModifiers* ModifierData;                                      // 0x38(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataCraftingYieldModifiers* CraftingYieldData;                                 // 0x40(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataCreatureSuppression* CreatureSuppressionData;                           // 0x48(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataStatusEffect* StatusEffectData;                                  // 0x50(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataTraitStackChange* TraitStackChangeData;                              // 0x58(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataGrowthRate* GrowthRateData;                                    // 0x60(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvironmentalInfluenceDataPets*       PetData;                                           // 0x68(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitEnvironmentalInfluencesData* GetDefaultObj();

};

// 0x78 (0xA0 - 0x28)
// Class NWX.StructureTraitUIData
class UStructureTraitUIData : public UObject
{
public:
	class FText                                  DisplayName;                                       // 0x28(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x40(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x58(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Reason;                                            // 0x80(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         PositiveTrait;                                     // 0x98(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9D95[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitUIData* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class NWX.StructureTraitInitData
class UStructureTraitInitData : public UObject
{
public:
	struct FStructureTraitReceiverInitData       ReceivingInitData;                                 // 0x28(0x60)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStructureTraitEmissionInitData       EmissionInitData;                                  // 0x88(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitInitData* GetDefaultObj();

};

// 0x38 (0x70 - 0x38)
// Class NWX.StructureTraitSettings
class UStructureTraitSettings : public UDeveloperSettings
{
public:
	TArray<struct FStructureTraitCombinationRule> CombinationRules;                                  // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStringTable>           EnvironmentalTraitPresentationStringTable;         // 0x48(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.TraitFunctionLibrary
class UTraitFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UTraitFunctionLibrary* GetDefaultObj();

	bool Equals(struct FTrait& A, struct FTrait& B);
};

// 0x28 (0x50 - 0x28)
// Class NWX.StructureTraitActivator
class UStructureTraitActivator : public UObjectWithWorld
{
public:
	uint8                                        Pad_9D9D[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitActivator* GetDefaultObj();

	void InitializeActivator(struct FStructureTrait& Trait);
	class UObject* GetOwningStructure();
	void DeactivateTrait();
	void ActivateTrait();
};

// 0x68 (0x98 - 0x30)
// Class NWX.StructureTraitAsset
class UStructureTraitAsset : public UDataAsset
{
public:
	struct FStructureTrait                       Data;                                              // 0x30(0x68)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitAsset* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class NWX.StructureTraitCollectionAsset
class UStructureTraitCollectionAsset : public UDataAsset
{
public:
	class UStructureTraitTypeUIData*             UIData;                                            // 0x30(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStructureTraitCollection             TraitCollection;                                   // 0x38(0x10)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitCollectionAsset* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class NWX.StructureTraitTypeUIData
class UStructureTraitTypeUIData : public UObject
{
public:
	class FText                                  DisplayName;                                       // 0x28(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x40(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStructureTraitTypeUIData* GetDefaultObj();

};

// 0x60 (0x100 - 0xA0)
// Class NWX.StructureTraitAuraComponent
class UStructureTraitAuraComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnAuraStateChanged;                                // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<struct FAuraInstance>                   Auras;                                             // 0xB0(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureTraitAuraComponent* GetDefaultObj();

	void RemoveAura(struct FAuraInstance& Aura);
	void OnStructureInitialized(class UObject* Structure);
	void OnStructureCompleted(class UObject* Structure);
	void OnOwnerComplete();
	void OnAOEEndCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnAOEBeginCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	TSet<struct FAuraInstance> GetAuras();
	void AddAura(struct FAuraInstance& Aura);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitAuraEffect
class UStructureTraitAuraEffect : public UObject
{
public:

	static class UClass* StaticClass();
	static class UStructureTraitAuraEffect* GetDefaultObj();

	void OnObjectLeaveAura(class UObject* Object, class UStructureTraitAuraComponent* LastAuraComponentEncountered);
	void OnObjectEnterAura(class UObject* Object, class UStructureTraitAuraComponent* AuraComponent);
	bool IsFeatureFlagEnabled(enum class EFeatureFlag Flag);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitAuraEffectClustered
class UStructureTraitAuraEffectClustered : public UStructureTraitAuraEffect
{
public:

	static class UClass* StaticClass();
	static class UStructureTraitAuraEffectClustered* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitAuraStatusEffect
class UStructureTraitAuraStatusEffect : public UStructureTraitAuraEffectClustered
{
public:

	static class UClass* StaticClass();
	static class UStructureTraitAuraStatusEffect* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitAuraInterface
class IStructureTraitAuraInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureTraitAuraInterface* GetDefaultObj();

	class UStructureTraitAuraComponent* GetStructureTraitAuraComponentForModify();
	class UStructureTraitAuraComponent* GetStructureTraitAuraComponent();
	class UPrimitiveComponent* GetStructureTraitAuraColliderForModify();
	class UPrimitiveComponent* GetStructureTraitAuraCollider();
};

// 0x50 (0x80 - 0x30)
// Class NWX.StructureTraitAuraSubsystem
class UStructureTraitAuraSubsystem : public UNWXWorldSubsystem
{
public:
	TMap<struct FAuraInstance, struct FTraitAuraOverlapSet> AuraToOverlaps;                                    // 0x30(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureTraitAuraSubsystem* GetDefaultObj();

};

// 0xE0 (0x180 - 0xA0)
// Class NWX.StructureTraitComponent
class UStructureTraitComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnStructureTraitsChanged;                          // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FStructureTrait>               ActiveTraits;                                      // 0xB0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                 ApplicableTraitTags;                               // 0xC0(0x20)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<uint32, struct FStructureTrait>         InternalTraitsMap;                                 // 0xE0(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<uint32, class UStructureTraitActivator*> ActivatorMap;                                      // 0x130(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureTraitComponent* GetDefaultObj();

	bool TryRemoveTrait(struct FStructureTrait& Trait);
	bool TryRemoveBulkTraits(TArray<struct FStructureTrait>& Traits);
	bool TryAddTrait(struct FStructureTrait& Trait);
	bool TryAddBulkTraits(TArray<struct FStructureTrait>& Traits);
	void OnTraitDeactivated(uint32 TraitID);
	void OnTraitActivated(uint32 TraitID);
	void OnStructureInitialized(class UObject* Structure);
	void OnStructureCompleted(class UObject* Structure);
	void OnRep_ActiveTraits();
	bool IsTraitApplicable(struct FStructureTrait& Trait);
	bool HasActiveTrait(struct FStructureTrait& Trait);
	bool FindActiveTrait(struct FStructureTrait& Trait, struct FStructureTrait* OutFoundTrait);
	bool CanRemoveTrait(struct FStructureTrait& Trait);
	bool CanAddTrait(struct FStructureTrait& Trait);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitEffect
class UStructureTraitEffect : public UObject
{
public:

	static class UClass* StaticClass();
	static class UStructureTraitEffect* GetDefaultObj();

	void OnTraitStackChanged(class AActor* OwningActor, struct FStructureTrait& Trait, uint8 PrevStack);
	void OnTraitRemoved(class AActor* OwningActor, struct FStructureTrait& Trait);
	void OnTraitAdded(class AActor* OwningActor, struct FStructureTrait& Trait);
};

// 0x160 (0x700 - 0x5A0)
// Class NWX.StructureTraitEmissionComponent
class UStructureTraitEmissionComponent : public USphereComponent
{
public:
	FMulticastInlineDelegateProperty_            OnEffectedTraitComponentsChanged;                  // 0x5A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsEmittingInRadius;                               // 0x5B0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9DDF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UStructureTraitAsset>> EmissionTraits;                                    // 0x5B8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           OwnerMovedDelegate;                                // 0x5C8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           TargetStructureMovedDelegate;                      // 0x5D8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           EffectedStructureMovedDelegate;                    // 0x5E8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FDelegateProperty_                           NearbyCompositePieceMovedDelegate;                 // 0x5F8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class UStructureTraitComponent>> EffectedTraitComponents;                           // 0x608(0x50)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9DE0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<TWeakObjectPtr<class UObject>, TWeakObjectPtr<class UObject>> TargetStructureToFirstLOSBlockingHitMap;           // 0x660(0x50)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9DE1[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitEmissionComponent* GetDefaultObj();

	void RemoveTraitsFromComponentInternal(class UStructureTraitComponent* TraitComponent, bool bLeavingEmissionRadius);
	void RecalculateAllLOS();
	void OnTargetStructureMoved(class UObject* MovedEntity);
	void OnOwnerMoved(class UObject* MovedEntity);
	void OnNearbyCompositePieceMoved(class UObject* MovedEntity);
	void OnIncompleteBlockingStructureCompleted(class UObject* Structure);
	void OnEffectedStructureMoved(class UObject* MovedEntity);
	void OnBlockingStructureDestroyed(class UObject* Structure, class AActor* Instigator);
	void OnAOEEndCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnAOEBeginCompOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void FinishEmittingTraitsToComponentInternal(class UStructureTraitComponent* TraitComponent);
	void EndEmittingTraitsInRadius();
	void EndEmissionToObject(class UObject* Object);
	void EnableRadiusEmission();
	void EmitTraitsToComponentInternal(class UStructureTraitComponent* TraitComponent);
	void DoLOSCheck(class AActor* TargetStructure);
	void DisableRadiusEmission();
	void ClearAllEffectedComponents();
	void BP_GetEmissionTraits(TArray<struct FStructureTrait>* OutEmissionTraits);
	void BP_GetEffectedTraitComponents(TArray<class UStructureTraitComponent*>* OutEffectedTraitComponents);
	void BeginEmittingTraitsInRadius();
	void BeginEmissionToObject(class UObject* Object);
	void AddStructureToIncompleteBlockingHitMap(class UObject* TargetStructure, TArray<class UObject*>& IncompleteBlockingObjects);
	void AddStructureToBlockingHitMap(class UObject* TargetStructure, class UObject* FirstHitObject);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitEmissionInterface
class IStructureTraitEmissionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureTraitEmissionInterface* GetDefaultObj();

	class UStructureTraitEmissionComponent* GetStructureTraitEmissionComponentForModify();
	class UStructureTraitEmissionComponent* GetStructureTraitEmissionComponent();
};

// 0x28 (0x58 - 0x30)
// Class NWX.StructureTraitEmissionSubsystem
class UStructureTraitEmissionSubsystem : public UWorldSubsystem
{
public:
	TArray<struct FStructureTraitEmissionRequest> Requests;                                          // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9DE2[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitEmissionSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitFunctionLibrary
class UStructureTraitFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureTraitFunctionLibrary* GetDefaultObj();

	void UpdateAuraInfluenceFromTrait(class AActor* Actor, struct FStructureTrait& Trait, enum class EStructureTraitEffectType TraitEffectType);
	void UpdateAuraEffectFromTrait(class AActor* Actor, TSubclassOf<class UStructureTraitAuraEffect>& AuraEffect, enum class EStructureTraitEffectType TraitEffectType, struct FGuid& CustomAuraId);
	void SimulateEmittedTraitsDuringPlacement(class AController* PlacingController, class UStructureTraitEmissionComponent* TraitEmissionComponent, class UStructureTraitComponent* TraitComponent, TArray<struct FStructureTrait>* OutAddedTraits, TArray<struct FStructureTrait>* OutRemovedTraits, TArray<struct FStructureTrait>* OutDecreasedTraits, TArray<struct FStructureTrait>* OutIncreasedTraits);
	void K2_SplitEffectedTraitsMap(TMap<struct FStructureTrait, enum class EStructureTraitEffectType>& EffectedTraitsMap, TArray<struct FStructureTrait>* OutAddedTraits, TArray<struct FStructureTrait>* OutRemovedTraits, TArray<struct FStructureTrait>* OutModifiedTraits);
	bool IsTraitActive(class UObject* Structure, const struct FStructureTrait& Trait);
	void InitializeTraitComponentsOnStructure(class UObject* Structure, class USceneComponent* ComponentToAttachTo, class UStructureTraitComponent** TraitComponentPtr, class UStructureTraitEmissionComponent** EmissionComponentPtr, class UStructureTraitAuraComponent** AuraComponentPtr);
	void GetTraitArrayFromCollections(TArray<TSoftObjectPtr<class UStructureTraitCollectionAsset>>& TraitCollections, TArray<TSoftObjectPtr<class UStructureTraitAsset>>* OutTraitArray);
	TArray<struct FStructureTrait> GetActiveRealmCardTraits(class UObject* WorldContextObject);
	class FText GenerateTraitPresentationText(struct FStructureTrait& Trait, struct FStructureData& StructureData);
	bool EqualEqual_FStructureTrait(struct FStructureTrait& A, struct FStructureTrait& B);
	void DoCombinationInline(TSet<struct FStructureTrait>* StructureTraits, struct FGameplayTagContainer& ApplicableTraitTags);
	bool AreTraitsEqualAndSameStack(TArray<struct FStructureTrait>& TraitsA, TArray<struct FStructureTrait>& TraitsB);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureTraitInterface
class IStructureTraitInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureTraitInterface* GetDefaultObj();

	class UStructureTraitComponent* GetStructureTraitComponentForModify();
	class UStructureTraitComponent* GetStructureTraitComponent();
	class UPrimitiveComponent* GetStructureTraitCollider();
};

// 0x288 (0x2B8 - 0x30)
// Class NWX.StructureTraitRecipeMappingAsset
class UStructureTraitRecipeMappingAsset : public UDataAsset
{
public:
	TMap<struct FGuid, struct FCraftingRecipeAssetArray> GrantingSDAGuidMapToRecipeDatasCache;              // 0x30(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureAssetArray> CRAGuidToGrantingStructureDatasCache;              // 0x80(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FCraftingRecipeAssetArray> ReceivingSDAGuidMapToRecipeDatasCache;             // 0xD0(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureAssetArray> CRAGuidToReceivingStructureDatasCache;             // 0x120(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureTraitCollectionAssetArray> CRAGuidToApplicableCollectionsDatasCache;          // 0x170(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureTraitCollectionAssetArray> CRAGuidToEmittingCollectionsDatasCache;            // 0x1C0(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureTraitCollectionAssetArray> SDAGuidToReceivingCollectionsDatasCache;           // 0x210(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FStructureTraitCollectionRecipeSoftAssetGroupingArray> GrantingSDAGuidToReceivingStructureRecipeMapDatasCache; // 0x260(0x50)(NativeAccessSpecifierPublic)
	bool                                         bIsStructureToRecipeCacheBuilt;                    // 0x2B0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9DEB[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitRecipeMappingAsset* GetDefaultObj();

};

// 0x78 (0xA8 - 0x30)
// Class NWX.StructureTraitSubsystem
class UStructureTraitSubsystem : public UNWXGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UStructureTraitRecipeMappingAsset> StructureTraitRecipeMappingCookedDataSourcePtr;    // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructureTraitRecipeMappingAsset*     StructureTraitRecipeMappingDataSource;             // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9DEC[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureTraitSubsystem* GetDefaultObj();

	void OnDeferredTraitUpdateTick();
};

// 0x10 (0x40 - 0x30)
// Class NWX.SnapPointAlternativeRotations
class USnapPointAlternativeRotations : public UDataAsset
{
public:
	TArray<struct FVector>                       AlternativeRotations;                              // 0x30(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USnapPointAlternativeRotations* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureUIDataInterface
class IStructureUIDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureUIDataInterface* GetDefaultObj();

	TSoftObjectPtr<class UTexture2D> GetIcon();
	struct FGameplayTagContainer GetFilterTags();
	class FText GetDisplayName();
	class FText GetDescription();
};

// 0xD8 (0x100 - 0x28)
// Class NWX.StructureUIObject
class UStructureUIObject : public UObject
{
public:
	struct FStructurePlacementFeedback           CachedFeedbackData;                                // 0x28(0xB8)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnPlacementValidityChanged;                        // 0xE0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnPlacementFeedbackChanged;                        // 0xF0(0x10)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureUIObject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureUniqueIDInterface
class IStructureUniqueIDInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureUniqueIDInterface* GetDefaultObj();

	struct FGuid GetUniqueIdentifierAsGUID();
	class FString GetUniqueIdentifier();
};

// 0x50 (0x80 - 0x30)
// Class NWX.StructureVFXSubsystem
class UStructureVFXSubsystem : public ULocalPlayerSubsystem
{
public:
	TMap<struct FStructureNiagaraDestructionResponseIdentifier, struct FStructureNiagaraDestructionResponse> StructureDestructionVFXMap;                        // 0x30(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UStructureVFXSubsystem* GetDefaultObj();

};

// 0x130 (0x1D0 - 0xA0)
// Class NWX.StructureVolumeComponent
class UStructureVolumeComponent : public UActorComponent
{
public:
	uint8                                        Pad_9DF0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         DrawDebug;                                         // 0xA8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         DrawDebugVolumeLocalPlanes;                        // 0xA9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9DF1[0x126];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureVolumeComponent* GetDefaultObj();

	void RegenerateVolumes(bool bForceRegenerateVolumes);
	bool IsPointUnderRoof(struct FVector& Point, bool bUseRaycast);
	bool Intersects(struct FVector& Centre, float Radius);
};

// 0x28 (0xC8 - 0xA0)
// Class NWX.StructureWeatherComponent
class UStructureWeatherComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnWeatherStateUpdated;                             // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        WeatherState;                                      // 0xB0(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9DF5[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureWeatherComponent* GetDefaultObj();

	void ShelterStateChanged();
	void OnRep_WeatherState();
	void OnRealmTimeSet();
	bool HasWeatheredStates(int32 WeatherType);
	bool HasWeatheredState(enum class EStructureWeatherType WeatherType);
	int32 GetWeatherState();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureWeatherFunctionLibrary
class UStructureWeatherFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStructureWeatherFunctionLibrary* GetDefaultObj();

	bool IsObjectHailDamageSource(class UObject* DamageSource);
	void DoPeltedFromHailDamageOnStructureActor(class AActor* Structure, double TimeDelta);
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureWeatherInterface
class IStructureWeatherInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureWeatherInterface* GetDefaultObj();

	class UStructureWeatherComponent* GetStructureWeatherComponentForModify();
	class UStructureWeatherComponent* GetStructureWeatherComponent();
};

// 0x18 (0x50 - 0x38)
// Class NWX.StructureWeatherSettings
class UStructureWeatherSettings : public UDeveloperSettings
{
public:
	int32                                        WeatherUpdateAmortizationLimit;                    // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HailUpdateAmortizationLimit;                       // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RainThreshold;                                     // 0x40(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HailThreshold;                                     // 0x44(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HailDamagePerSecond;                               // 0x48(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9DFF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureWeatherSettings* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class NWX.StructureWeatherSubsystem
class UStructureWeatherSubsystem : public UNWXWorldSubsystem
{
public:
	uint8                                        Pad_9E00[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureWeatherSubsystem* GetDefaultObj();

	void OnTick();
	void InitializeWithWeatherComponent(class UWeatherComponent* GlobalWeatherComponent);
	void CheckCurrentWeather();
};

// 0x0 (0x28 - 0x28)
// Class NWX.StructureWorldInterface
class IStructureWorldInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IStructureWorldInterface* GetDefaultObj();

	void SetStructureWorldTransform(struct FTransform& Transform, bool bTeleport);
	struct FTransform GetStructureWorldTransform();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SupportAccessInterface
class ISupportAccessInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISupportAccessInterface* GetDefaultObj();

	class UObject* GetSupportInterfaceObject();
};

// 0x0 (0x28 - 0x28)
// Class NWX.SupportInterface
class ISupportInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISupportInterface* GetDefaultObj();

	struct FStructurePlacementFeedback_Support UpdateSupport();
	void UntrackSupportedObject(struct FStructureSupportObjectData& SupportedObject);
	void UnbindFrom_SupportingObjectsChangedDelegate(FDelegateProperty_& SupportingObjectsChangedDelegate);
	bool TryDestroyIfUnsupported(class AActor* DeconstructionSource);
	void TrackSupportedObject(struct FStructureSupportObjectData& SupportedObject);
	void TraceForGroundSupport(bool bIncludeBasePotential, bool* OutIsIntersectingGround, TArray<struct FHitResult>* OutResults);
	void RebuildSupportingObjectsCache();
	void OnPlacementBlockedBeforeSupport();
	void OnOwnerSnapped();
	void OnOwnerInitialized();
	bool IsSupportingOtherObjects();
	bool IsSupported();
	void InvalidateSupportingObjectsCache();
	void GetSupportingObjects(TArray<struct FStructureSupportObjectData>* OutSupportingStructures);
	void GetSupportedObjects(TArray<struct FStructureSupportObjectData>* OutSupportedStructures);
	void GetFirstSupportingObject(class UObject** OutFirstSupportingObject);
	void BindTo_SupportingObjectsChangedDelegate(FDelegateProperty_& SupportingObjectsChangedDelegate);
};

// 0x0 (0x68 - 0x68)
// Class NWX.SupportObjectSnappable
class USupportObjectSnappable : public UStructureSupportObject
{
public:

	static class UClass* StaticClass();
	static class USupportObjectSnappable* GetDefaultObj();

};

// 0x0 (0x68 - 0x68)
// Class NWX.SupportObjectCompositePiece
class USupportObjectCompositePiece : public USupportObjectSnappable
{
public:

	static class UClass* StaticClass();
	static class USupportObjectCompositePiece* GetDefaultObj();

};

// 0x20 (0x88 - 0x68)
// Class NWX.SupportObjectFoundation
class USupportObjectFoundation : public USupportObjectCompositePiece
{
public:
	uint8                                        Pad_9E37[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USupportObjectFoundation* GetDefaultObj();

};

// 0x0 (0x68 - 0x68)
// Class NWX.SupportObjectStairs
class USupportObjectStairs : public USupportObjectCompositePiece
{
public:

	static class UClass* StaticClass();
	static class USupportObjectStairs* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.PieceSupportRules
class UPieceSupportRules : public UDataAsset
{
public:
	TMap<enum class ESnapType, struct FSupportRulesPerType> Rules;                                             // 0x30(0x50)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPieceSupportRules* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class NWX.SupportRulesEnforcer
class USupportRulesEnforcer : public UObjectWithWorld
{
public:
	struct FSupportRules                         DefaultRule;                                       // 0x28(0x10)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UPieceSupportRules*                    DefaultSnapPointRules;                             // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USupportRulesEnforcer* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.SupportRulesEnforcerFloor
class USupportRulesEnforcerFloor : public USupportRulesEnforcer
{
public:

	static class UClass* StaticClass();
	static class USupportRulesEnforcerFloor* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class NWX.SupportRulesEnforcerWall
class USupportRulesEnforcerWall : public USupportRulesEnforcer
{
public:

	static class UClass* StaticClass();
	static class USupportRulesEnforcerWall* GetDefaultObj();

};

// 0x78 (0x118 - 0xA0)
// Class NWX.SyncRestComponent
class USyncRestComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnNumPlayersWaitingToRestChanged;                  // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9E45[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPlayersWaitingToRest;                           // 0x108(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NumTotalPlayers;                                   // 0x10C(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9E46[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USyncRestComponent* GetDefaultObj();

	void RemovePlayerWaitingToRest(class APlayerController* PlayerToRemove);
	void OnStructureDestroyed(class UObject* Structure, class AActor* Instigator);
	void OnRep_NumPlayersRest();
	bool IsStructureBeingUsedToRest(class UObject* Structure);
	void GetNumPlayersResting(int32* NumPlayersWaitingToRestOut, int32* NumTotalPlayersOut);
	void AddPlayerWaitingToRest(class APlayerController* PlayerToRest, class UObject* RestStructure);
};

// 0x0 (0x28 - 0x28)
// Class NWX.TagValueContainerLibrary
class UTagValueContainerLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UTagValueContainerLibrary* GetDefaultObj();

	TArray<float> Values(struct FTagValueContainer& TagValueContainer);
	bool Remove(struct FTagValueContainer& TagValueContainer, struct FGameplayTag& Tag, bool IsExact);
	int32 Length(struct FTagValueContainer& TagValueContainer);
	TArray<struct FGameplayTag> Keys(struct FTagValueContainer& TagValueContainer);
	void Find(struct FTagValueContainer& TagValueContainer, struct FGameplayTag& Tag, bool IsExact, float* Value, bool* Found);
	bool Contains(struct FTagValueContainer& TagValueContainer, struct FGameplayTag& Tag, bool IsExact);
	void Clear(struct FTagValueContainer& TagValueContainer);
	void Add(struct FTagValueContainer& TagValueContainer, struct FGameplayTag& Tag, float Value);
};

// 0x30 (0x2D0 - 0x2A0)
// Class NWX.TargetPoint_AI
class ATargetPoint_AI : public ATargetPoint
{
public:
	class UEnvQuery*                             DefaultNavQueryTemplate;                           // 0x2A0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAIDynamicParam>               DefaultQueryConfig;                                // 0x2A8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UEnvQuery*                             GiantNavQueryTemplate;                             // 0x2B8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAIDynamicParam>               GiantQueryConfig;                                  // 0x2C0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATargetPoint_AI* GetDefaultObj();

};

// 0x168 (0x1B0 - 0x48)
// Class NWX.TechniqueDataAsset
class UTechniqueDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	struct FTechnique                            Technique;                                         // 0x48(0x168)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTechniqueDataAsset* GetDefaultObj();

};

// 0x50 (0x310 - 0x2C0)
// Class NWX.TeleportationManager
class ATeleportationManager : public AManagerBase
{
public:
	TMap<class FString, struct FTeleportationVolumeList> GroupToVolumes;                                    // 0x2C0(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ATeleportationManager* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.TeleportationVolumeDataAsset
class UTeleportationVolumeDataAsset : public UDataAsset
{
public:
	class FString                                GroupID;                                           // 0x30(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URequirement*                          InteractionRequirements;                           // 0x40(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>          InteractionAbility;                                // 0x48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InteractionFeedback;                               // 0x50(0x18)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  OverlapLoopAVFX;                                   // 0x68(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  InteractionLoopAVFX;                               // 0x70(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeAVFXDataAsset*                  TriggeredAVFX;                                     // 0x78(0x8)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTeleportationVolumeDataAsset* GetDefaultObj();

};

// 0x48 (0x2E8 - 0x2A0)
// Class NWX.TeleportationVolume
class ATeleportationVolume : public AActor
{
public:
	uint8                                        Pad_9E67[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTeleportationVolumeDataAsset*         DataAsset;                                         // 0x2B0(0x8)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       DefaultSceneRoot;                                  // 0x2B8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         OverlapVolume;                                     // 0x2C0(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         InteractionVolume;                                 // 0x2C8(0x8)(Edit, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVolumeAVFXComponent*                  VolumeAVFX;                                        // 0x2D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNWXAbilitySystemComponent*            AbilitySystem;                                     // 0x2D8(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ATeleportationManager*                 TeleportationManager;                              // 0x2E0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ATeleportationVolume* GetDefaultObj();

	void TryInteract(class AActor* OtherActor);
	void Multicast_PlayTriggeredEffect();
	bool IsInteractable(class AActor* OtherActor);
	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
	class FText GetInteractionFeedback();
};

// 0x30 (0x388 - 0x358)
// Class NWX.TemperatureGridManager
class ATemperatureGridManager : public AGridManager
{
public:
	float                                        MaxTemperature;                                    // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinTemperature;                                    // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReturnToBaseRate;                                  // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9E69[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           DailyVariation;                                    // 0x368(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           YearlyVariation;                                   // 0x370(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                             CurrentTime;                                       // 0x378(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9E6A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATemperatureGridManager* GetDefaultObj();

	float GetTemperatureDeviationForDate(struct FDateTime& Date);
	void AddHeat(struct FHeatSource& Data);
};

// 0x60 (0x90 - 0x30)
// Class NWX.TemporalRealm
class UTemporalRealm : public UDataAsset
{
public:
	class FString                                DisplayName;                                       // 0x30(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 Realm;                                             // 0x40(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBiomeID                          BiomeId;                                           // 0x68(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasRoads;                                         // 0x69(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTutorial;                                       // 0x6A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsVault;                                          // 0x6B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPortalInvalid;                                    // 0x6C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9E6C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGameplayTagContainer                 OptionalTags;                                      // 0x70(0x20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTemporalRealm* GetDefaultObj();

	struct FGameplayTagContainer GetTagRequirements();
	class FString GetRealmName();
	class FString GetDisplayName();
	TArray<class UTemporalRealm*> GetAllTemporalRealm();
	void EnsureTemporalRealmDataExists(class UWorld* World);
	bool DoesMatchPortalRealmSettings(struct FRealmSettings& RealmSettingsIn, bool bIsTutorialIn);
};

// 0x90 (0x130 - 0xA0)
// Class NWX.TextChatComponent
class UTextChatComponent : public UActorComponent
{
public:
	uint8                                        Pad_9E7C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UProfanityFilter*                      Filter;                                            // 0xB0(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9E7D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnChatRoomJoin;                                    // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatRoomLeave;                                   // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatRoomMemberJoins;                             // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatRoomMemberExits;                             // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatRoomMemberUpdates;                           // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatRoomMessage;                                 // 0x110(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAnnouncementMessageReceived;                     // 0x120(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTextChatComponent* GetDefaultObj();

	bool UnMutePlayer(const class FString& UniquePlayerId);
	void Server_CreateAndInviteThisPlayerToRealmChat();
	bool SendRoomChat(const class FString& RoomId, const class FString& Message);
	void OnChatRoomMessage__DelegateSignature(struct FNWXChatRoom& Room, const class FString& ProfileId, const class FString& PlayerName, const class FString& Message);
	void OnChatRoomMemberUpdates__DelegateSignature(struct FNWXChatRoom& Room, const class FString& MemberId);
	void OnChatRoomMemberJoins__DelegateSignature(struct FNWXChatRoom& Room, const class FString& MemberId);
	void OnChatRoomMemberExits__DelegateSignature(struct FNWXChatRoom& Room, const class FString& MemberId);
	void OnChatRoomLeave__DelegateSignature(struct FNWXChatRoom& Room, bool WasSuccessful, const class FString& Error);
	void OnChatRoomJoin__DelegateSignature(struct FNWXChatRoom& Room, bool WasSuccessful, const class FString& Error);
	void OnAnnouncementMessage__DelegateSignature(const class FString& AnnouncementMessage);
	bool MutePlayer(const class FString& UniquePlayerId);
	bool JoinPublicRoom(const class FString& RoomId);
	void HandleAnnouncementMessageReceived(const class FString& ChatMessage);
	TArray<struct FNWXChatRoom> GetJoinedRooms();
	bool ExitRoom(const class FString& RoomId);
};

// 0x0 (0x28 - 0x28)
// Class NWX.ThumbnailCreationHelper
class UThumbnailCreationHelper : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UThumbnailCreationHelper* GetDefaultObj();

};

// 0x38 (0xD8 - 0xA0)
// Class NWX.TicketGiverComponent
class UTicketGiverComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnTicketTaken;                                     // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTicketReturned;                                  // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        PriorityUpdateDelay;                               // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9E8E[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTicketGiverComponent* GetDefaultObj();

	void OnMaxTicketCountChange(enum class ETicketType TicketType);
	bool HasFreeTicket(enum class ETicketType TicketType, int32 Priority);
	void GetTicketRecipients(enum class ETicketType TicketType, TArray<class AActor*>* Actors);
	int32 GetMaxTicketCount(enum class ETicketType TicketType);
	int32 GetLoanedTicketCount(enum class ETicketType TicketType);
	int32 GetInternalMaxTicketCount(enum class ETicketType TicketType);
	int32 GetFreeTicketCount(enum class ETicketType TicketType);
};

// 0x8 (0xE0 - 0xD8)
// Class NWX.TicketGiverComponent_Attribute
class UTicketGiverComponent_Attribute : public UTicketGiverComponent
{
public:
	uint8                                        Pad_9E8F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTicketGiverComponent_Attribute* GetDefaultObj();

	void OnTicketsMaxChanged(struct FGameplayAttribute& Attribute);
};

// 0x50 (0x128 - 0xD8)
// Class NWX.TicketGiverComponent_Simple
class UTicketGiverComponent_Simple : public UTicketGiverComponent
{
public:
	TMap<enum class ETicketType, int32>          MaxTicketsByType;                                  // 0xD8(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTicketGiverComponent_Simple* GetDefaultObj();

};

// 0x40 (0xE0 - 0xA0)
// Class NWX.TicketTakerComponent
class UTicketTakerComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnTicketReleased;                                  // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9EA2[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                HeldTicketTarget;                                  // 0xD8(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UTicketTakerComponent* GetDefaultObj();

	bool ValidateTicket(bool bReleaseIfInvalid);
	void UpdateTicketPriority(int32 Priority);
	bool TryTakeTicket(enum class ETicketType TicketType, class AActor* Target, int32 Priority);
	void ReleaseTicket();
	bool HasTicketOrCanAcquire(enum class ETicketType TicketType, class AActor* Target, int32 Priority);
	bool HasTicket(enum class ETicketType TicketType, class AActor* Target);
	bool HasAnyTicket();
	enum class ETicketType GetTicketType();
	class AActor* GetTicketTarget();
	int32 GetTicketPriority();
	class UTicketGiverComponent* GetTicketGiver();
};

// 0x0 (0xA50 - 0xA50)
// Class NWX.TimedStateEffect
class UTimedStateEffect : public UGameplayEffect
{
public:

	static class UClass* StaticClass();
	static class UTimedStateEffect* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class NWX.TimeOfDaySubsystem
class UTimeOfDaySubsystem : public UNWXWorldSubsystem
{
public:
	uint8                                        Pad_9EAD[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                TimeOfDayManager;                                  // 0x48(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9EAF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTimeOfDaySubsystem* GetDefaultObj();

	void SetTimeOfDayManagerInSubsystem(class AActor* NewTimeOfDayManager);
	void SetSunDirection(struct FVector& SunDirection);
	void SetCaveOverrideValue(int32 NewValue);
	void PushEnvironmentSnapshot(struct FEnvironmentSnapshot& InEnvironmentSnapshot);
	class AActor* GetTimeOfDayManagerFromSubsystem();
	struct FVector GetSunDirection();
	TArray<struct FEnvironmentSnapshot> GetEnvironmentStack();
	int32 GetCaveOverrideValue();
};

// 0xC0 (0xF0 - 0x30)
// Class NWX.TitleScreenAnimationDataAsset
class UTitleScreenAnimationDataAsset : public UPrimaryDataAsset
{
public:
	class UAnimSequenceBase*                     SittingToStanding;                                 // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     SittingToStandingFast;                             // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     SittingIdle;                                       // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     StandingToSitting;                                 // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     StandingToSittingFast;                             // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     StandingIdleFar;                                   // 0x58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     StandingIdleClose;                                 // 0x60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FaceMouth;                                         // 0x68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FaceMouthTeeth;                                    // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FaceEye;                                           // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FaceEyeBrow;                                       // 0x80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FaceEyeLash;                                       // 0x88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     HandNail;                                          // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     FinalAnim;                                         // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ERealmDifficulty, class UAnimSequenceBase*> GearEquipAnimations;                               // 0xA0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTitleScreenAnimationDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.ToolbarFunctionLibrary
class UToolbarFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UToolbarFunctionLibrary* GetDefaultObj();

	bool IsItemReferenceValidForToolbar(enum class EToolbarArrangement ToolbarArrangement, struct FItemDataReference& ItemDataReference);
	bool IsItemReferenceValidForAnyToolbar(struct FItemDataReference& ItemDataReference);
	bool IsItemInstanceValidForToolbar(class APlayerController* PlayerController, enum class EToolbarArrangement ToolbarArrangement, struct FGuid& InventoryEntryInstanceId);
	bool IsItemInstanceValidForAnyToolbar(class APlayerController* PlayerController, struct FGuid& InventoryEntryInstanceId);
	bool IsInventoryEntryValidForToolbar(enum class EToolbarArrangement ToolbarArrangement, struct FInventoryEntry& InventoryEntry);
	bool IsInventoryEntryValidForAnyToolbar(struct FInventoryEntry& InventoryEntry);
	bool IsGameplayTagTagValidForToolbar(enum class EToolbarArrangement ToolbarArrangement, struct FGameplayTag& GameplayTag);
	bool IsGameplayTagTagValidForAnyToolbar(struct FGameplayTag& GameplayTag);
	bool GetToolbarArrangementFromLoadoutSlotTag(struct FGameplayTag& LoadoutSlotTag, enum class EToolbarArrangement* ToolbarArrangement);
	struct FGameplayTag GetLoadoutSlotTagFromToolbarArrangement(enum class EToolbarArrangement ToolbarArrangement);
};

// 0x30 (0xC0 - 0x90)
// Class NWX.ToolbarRadialEntry
class UToolbarRadialEntry : public URadialMenuEntry
{
public:
	FMulticastInlineDelegateProperty_            OnToolbarSlotChanged;                              // 0x90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9ED9[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToolbarRadialEntry* GetDefaultObj();

	void InitializeEntry(TScriptInterface<class IToolbarSlotEntryObjectInterface>& InSlotEntry, int32 InIndex, enum class EToolbarArrangement InArrangement);
};

// 0x350 (0x390 - 0x40)
// Class NWX.ToolbarSlotEntry_InventoryEntry
class UToolbarSlotEntry_InventoryEntry : public UToolbarSlotEntryBase
{
public:
	uint8                                        Pad_9EE4[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 InventoryEntryInstanceId;                          // 0x58(0x10)(Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsItemEquipped;                                   // 0x68(0x1)(Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9EE5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInventoryEntry                       InventoryEntry;                                    // 0x70(0x2F0)(Transient, NativeAccessSpecifierPrivate)
	class UTexture2D*                            IconTexture;                                       // 0x360(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UToolbarEntryStackCharacteristic*      StackCharacteristic;                               // 0x368(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UToolbarEntryDurabilityCharacteristic* DurabilityCharacteristic;                          // 0x370(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UToolbarEntryQualityCharacteristic*    QualityCharacteristic;                             // 0x378(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9EE6[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToolbarSlotEntry_InventoryEntry* GetDefaultObj();

	void OnSlotUpdatedInternalDelegate__DelegateSignature();
	void OnRep_InstanceId(struct FGuid& OldEntryId);
	bool IsEquipped();
	void InitializeSlotEntry(struct FGuid& InstanceID);
	class UUserWidget* GetTooltipWidget_BP();
	struct FInventoryEntry GetInventoryEntry();
	class UDragDropOperation* GetDragAndDropOperation_BP();
};

// 0x18 (0x48 - 0x30)
// Class NWX.TraceSubsystem
class UTraceSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_9EED[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTraceSubsystem* GetDefaultObj();

	bool StartTrace(double TraceLengthSeconds, TArray<class FString>& Channels, const class FString& BookmarkLabel, enum class ETraceReason TraceReason);
	void EndTrace();
};

// 0x70 (0xB8 - 0x48)
// Class NWX.TutorialDataAsset
class UTutorialDataAsset : public UUniquelyIdentifiableDataAsset
{
public:
	class FText                                  Title;                                             // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Body;                                              // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>           InputAction;                                       // 0x78(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  InputHintDescription;                              // 0xA0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTutorialDataAsset* GetDefaultObj();

};

// 0x28 (0x70 - 0x48)
// Class NWX.TutorialDataAsset_SlideDeck
class UTutorialDataAsset_SlideDeck : public UUniquelyIdentifiableDataAsset
{
public:
	class FText                                  Title;                                             // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FTutorialSlideData>            Slides;                                            // 0x60(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTutorialDataAsset_SlideDeck* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.UIAccessFunctionLibrary
class UUIAccessFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UUIAccessFunctionLibrary* GetDefaultObj();

	bool TryClickWidget(class UUserWidget* Widget);
	TArray<class UWidget*> FindWidgetsByClass(TSubclassOf<class UWidget>& WidgetClass, class UUserWidget* ParentWidget);
	class UWidget* FindWidgetByClass(TSubclassOf<class UWidget>& WidgetClass, class UUserWidget* ParentWidget);
	TArray<class UNWXUserWidget*> FindUserWidgetsByQuery(struct FGameplayTagQuery& TagQuery, class UUserWidget* ParentWidget);
	class UNWXUserWidget* FindUserWidgetByQuery(struct FGameplayTagQuery& TagQuery, class UUserWidget* ParentWidget);
};

// 0x40 (0x70 - 0x30)
// Class NWX.UIAudioSubsystem
class UUIAudioSubsystem : public ULocalPlayerSubsystem
{
public:
	TSoftObjectPtr<class UAffinityTable>         AudioAffinityTablePath;                            // 0x30(0x28)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGlobalAudioAkComponent*               AkComponent;                                       // 0x58(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUIEventSubsystem*                     UIEventSubsystem;                                  // 0x60(0x8)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasBeenDeinitialized;                             // 0x68(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9F0B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUIAudioSubsystem* GetDefaultObj();

	void SetUIAudioRTPC(class UAkRtpc* AudioRTPC, float Value, int32 InterpolationTimeMS);
	void SetSwitch(class UAkSwitchValue* SwitchValue, const class FString& SwitchGroup, const class FString& SwitchState);
	void PostUIAudioEvent(class UAkAudioEvent* PlayEvent, class UAkAudioEvent* StopEvent);
	void PlayAudio(struct FGameplayTag& InEventTag, struct FGameplayTag& InWindowTag);
	bool IsComponentInitialized();
	class UGlobalAudioAkComponent* GetAkComponent();
};

// 0x18 (0x48 - 0x30)
// Class NWX.UIEventSubsystem
class UUIEventSubsystem : public ULocalPlayerSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnUIEvent;                                         // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_9F0C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUIEventSubsystem* GetDefaultObj();

	void BroadcastUIEvent(struct FGameplayTag& InEventTag, struct FGameplayTag& InWindowTag);
};

// 0x8 (0x38 - 0x30)
// Class NWX.UIPrivilegesSubsystem
class UUIPrivilegesSubsystem : public ULocalPlayerSubsystem
{
public:
	uint8                                        Pad_9F0E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUIPrivilegesSubsystem* GetDefaultObj();

	void RecheckPrivileges(struct FGameplayTag& InEventTag, struct FGameplayTag& InWindowTag);
};

// 0x0 (0x28 - 0x28)
// Class NWX.UnlockableDataInterface
class IUnlockableDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IUnlockableDataInterface* GetDefaultObj();

	bool IsUnlockable();
	void GetUnlockables(struct FSkillReferenceContainer* Unlockables);
	void GetSkillPresentationData(struct FSkillPresentationData* OutSkillPresentationData);
};

// 0x0 (0x28 - 0x28)
// Class NWX.UtilBPFunctionLibrary
class UUtilBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UUtilBPFunctionLibrary* GetDefaultObj();

	TMap<class FString, int32> MapIncreasingIntegerSort(TMap<class FString, int32>& Map);
	TMap<class FString, float> MapIncreasingFloatSort(TMap<class FString, float>& Map);
	TMap<class FString, int32> MapDecreasingIntegerSort(TMap<class FString, int32>& Map);
	TMap<class FString, float> MapDecreasingFloatSort(TMap<class FString, float>& Map);
	bool IsJsonStructValid(struct FJsonStruct& InJsonStruct);
	bool IsJapaneseSku();
	TArray<class FString> IncreasingStringSort(TArray<class FString>& Array);
	TArray<int32> IncreasingIntegerSort(TArray<int32>& Array);
	TArray<float> IncreasingFloatSort(TArray<float>& Array);
	TArray<class FString> DecreasingStringSort(TArray<class FString>& Array);
	TArray<int32> DecreasingIntegerSort(TArray<int32>& Array);
	TArray<float> DecreasingFloatSort(TArray<float>& Array);
	void CopyToClipboard(const class FString& CopyText);
	bool CheckIsCheatingAllowed();
};

// 0x0 (0x28 - 0x28)
// Class NWX.UtilStructsFunctionLibrary
class UUtilStructsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UUtilStructsFunctionLibrary* GetDefaultObj();

	void IsValidStringTableHandle(struct FStringTableEntryHandle& Handle, enum class EGetResult* Result);
};

// 0x50 (0x80 - 0x30)
// Class NWX.VaultMapDataAsset
class UVaultMapDataAsset : public UDataAsset
{
public:
	TMap<enum class EBiomeID, struct FSoftLevelPath> VaultMaps;                                         // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UVaultMapDataAsset* GetDefaultObj();

};

// 0x8 (0x2C8 - 0x2C0)
// Class NWX.VaultProgressionManager
class AVaultProgressionManager : public AManagerBase
{
public:
	uint8                                        Pad_9F27[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AVaultProgressionManager* GetDefaultObj();

	void OnAllLevelsFinishedLoading();
};

// 0x18 (0x40 - 0x28)
// Class NWX.VisibilityRule
class UVisibilityRule : public UObjectWithWorld
{
public:
	bool                                         ExpectedResult;                                    // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVisibilityGate                   GateType;                                          // 0x29(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9F2E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UVisibilityCondition*>          Conditions;                                        // 0x30(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UVisibilityRule* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class NWX.VisibilityCondition
class UVisibilityCondition : public UObjectWithWorld
{
public:
	bool                                         ExpectedResult;                                    // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9F2F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVisibilityCondition* GetDefaultObj();

	bool Evaluate();
};

// 0x8 (0x38 - 0x30)
// Class NWX.IsWithinDistanceRangeCondition
class UIsWithinDistanceRangeCondition : public UVisibilityCondition
{
public:
	float                                        MinDistance;                                       // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistance;                                       // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UIsWithinDistanceRangeCondition* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.PlayerHasTagCondition
class UPlayerHasTagCondition : public UVisibilityCondition
{
public:
	struct FGameplayTag                          Tag;                                               // 0x30(0x8)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlayerHasTagCondition* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class NWX.VolumeAVFXDataAsset
class UVolumeAVFXDataAsset : public UDataAsset
{
public:
	TArray<struct FCreateAudioData>              CreateAudioDataArray;                              // 0x30(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FModifyAudioData>              ModifyAudioDataArray;                              // 0x40(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCreateVFXData>                CreateVFXDataArray;                                // 0x50(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FModifyVFXData>                ModifyVFXDataArray;                                // 0x60(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UNiagaraSystem>> DeactivateVFXSystemArray;                          // 0x70(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UVolumeAVFXDataAsset* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class NWX.VolumeAVFXDataAsset_LerpParameter
class UVolumeAVFXDataAsset_LerpParameter : public UDataAsset
{
public:
	TSoftObjectPtr<class UNiagaraSystem>         NiagaraSystem;                                     // 0x30(0x28)(Edit, DisableEditOnInstance, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParameterName;                                     // 0x58(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          LoopToModify;                                      // 0x60(0x28)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRtpc*                               RTPCToSet;                                         // 0x88(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                  LerpCurveTable;                                    // 0x90(0x10)(Edit, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UVolumeAVFXDataAsset_LerpParameter* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class NWX.VolumeAVFXDataAsset_LerpPosition
class UVolumeAVFXDataAsset_LerpPosition : public UDataAsset
{
public:
	TSoftObjectPtr<class UNiagaraSystem>         NiagaraSystem;                                     // 0x30(0x28)(Edit, DisableEditOnInstance, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>          LoopToModify;                                      // 0x58(0x28)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                  LerpCurveTable;                                    // 0x80(0x10)(Edit, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UVolumeAVFXDataAsset_LerpPosition* GetDefaultObj();

};

// 0x28 (0x2D0 - 0x2A8)
// Class NWX.VolumeAVFXComponent
class UVolumeAVFXComponent : public USceneComponent
{
public:
	TArray<class UNiagaraComponent*>             NiagaraComponents;                                 // 0x2A8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UScopedAkComponent*>            AkComponents;                                      // 0x2B8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9F48[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVolumeAVFXComponent* GetDefaultObj();

	void LerpVolumeAVFXPosition(class UVolumeAVFXDataAsset_LerpPosition* DataAsset, struct FVector& Start, struct FVector& End, float LerpValue);
	void LerpVolumeAVFXParameter(class UVolumeAVFXDataAsset_LerpParameter* DataAsset, float LerpValue);
	void ExecuteVolumeAVFX(class UPrimitiveComponent* AVFXShape, class UVolumeAVFXDataAsset* DataAsset);
};

// 0x0 (0x28 - 0x28)
// Class NWX.VolumeAVFXAccessInterface
class IVolumeAVFXAccessInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IVolumeAVFXAccessInterface* GetDefaultObj();

	class UVolumeAVFXComponent* GetVolumeAVFXComponent();
};

// 0x0 (0x28 - 0x28)
// Class NWX.VolumeFunctionLibrary
class UVolumeFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UVolumeFunctionLibrary* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.VolumeTelemetryDataAsset
class UVolumeTelemetryDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.HopeEchoGateTelemetryDataAsset
class UHopeEchoGateTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:
	bool                                         bPassedThrough;                                    // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSendLoadout;                                      // 0x31(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9F50[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHopeEchoGateTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.CheckpointVolumeTelemetryDataAsset
class UCheckpointVolumeTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UCheckpointVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.FloatingGlyphTrapVolumeTelemetryDataAsset
class UFloatingGlyphTrapVolumeTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UFloatingGlyphTrapVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.SpikeTrapVolumeTelemetryDataAsset
class USpikeTrapVolumeTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:

	static class UClass* StaticClass();
	static class USpikeTrapVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.PoisonTrapVolumeTelemetryDataAsset
class UPoisonTrapVolumeTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UPoisonTrapVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class NWX.ActivationVolumeTelemetryDataAsset
class UActivationVolumeTelemetryDataAsset : public UVolumeTelemetryDataAsset
{
public:

	static class UClass* StaticClass();
	static class UActivationVolumeTelemetryDataAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.Waterable
class IWaterable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWaterable* GetDefaultObj();

	void AddWater(float Amount);
};

// 0x0 (0x28 - 0x28)
// Class NWX.WaterableObserver
class IWaterableObserver : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWaterableObserver* GetDefaultObj();

	void UnbindDelegate_OnWateredStateChanged(FDelegateProperty_& Delegate);
	void UnbindDelegate_OnCanBeWateredChanged(FDelegateProperty_& Delegate);
	bool IsWatered();
	bool CanBeWatered();
	void BindDelegate_OnWateredStateChanged(FDelegateProperty_& Delegate);
	void BindDelegate_OnCanBeWateredChanged(FDelegateProperty_& Delegate);
};

// 0x270 (0x310 - 0xA0)
// Class NWX.WaterbodyAudioComponent
class UWaterbodyAudioComponent : public UActorComponent
{
public:
	class UAkRtpc*                               WindSpeedRTPC;                                     // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterCrossfadeRTPC;                                // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterProximity;                                    // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               PrecipitationAmountNoInterp;                       // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               HailAmountNoInterp;                                // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterElevation;                                    // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WaterOcclusion;                                    // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               TreeStandardDensityInner;                          // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               WindSpeedNoInterp;                                 // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               CoastRock;                                         // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                               CoastSand;                                         // 0xF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         StopWaterBodyFadeEvent;                            // 0xF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         StopRainLoopWaterBodyEvent;                        // 0x100(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         PlayRainLoopWaterBodyEvent;                        // 0x108(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         StopHailLoopWaterBodyEvent;                        // 0x110(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                         PlayHailLoopWaterBodyEvent;                        // 0x118(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAkComponent*>                  QuadArray;                                         // 0x120(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                       StickyModeNonOccludedLoc;                          // 0x130(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                               HeightOffset;                                      // 0x140(0x18)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxTravelDistance;                                 // 0x158(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EmitterSpeed;                                      // 0x15C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GridSpreadDist;                                    // 0x160(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EmitterDifferenceOffset;                           // 0x164(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         UseOcculusion;                                     // 0x168(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShowOcclusionDebug;                                // 0x169(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShowPositionDebug;                                 // 0x16A(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         StickyEmitterActive;                               // 0x16B(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         UseElevation;                                      // 0x16C(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9FBE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DistanceOffset;                                    // 0x170(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PrecipitationAmountLocal;                          // 0x174(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HailAmount;                                        // 0x178(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WindSpeed;                                         // 0x17C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WildlifeOSMinRadius;                               // 0x180(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WildlifeOSMaxRadius;                               // 0x184(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        OcclusionLerpTimeMs;                               // 0x188(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9FC0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraParameterCollection*           VFXGlobalEmitterVariablesCollection;               // 0x190(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                      WaterSplineComponent;                              // 0x198(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EAudioWaterBodyType               BodyType;                                          // 0x1A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9FC1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAkSwitchValue*                        BiomeType;                                         // 0x1A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9FC2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMapGridCell>                  MapGridCells;                                      // 0x1B8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FVector                               CachedPos0;                                        // 0x1C8(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        CachedMapPoints;                                   // 0x1E0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9FC4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USplineComponent*                      CachedMapSpline;                                   // 0x1E8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_9FC6[0xD0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class UAkComponent*, struct FVector>    ActiveCrossfadeTargetMap;                          // 0x2C0(0x50)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UWaterbodyAudioComponent* GetDefaultObj();

	void UpdateQuadTargetLocation(TArray<struct FVector>& QuadArrayOfVectors, struct FVector& EmitterTarget, class UAkComponent* AkComponent, bool& ActiveBool, bool& InAngleBool, TArray<struct FVector>& OcclusionGrid, bool IsStickyEmitter);
	void UpdateOcclusionValues(class UAkComponent* AkComponentToUpdate, bool bIsStickyEmitter, TArray<struct FVector>& OcclusionGrid, float TraceDistance, enum class ECollisionChannel TraceChannel);
	void UpdateMultiposition(class UAkComponent* AkComponent);
	bool TrySortSplinePointsToQuadrants(struct FVector& WorldPos, TArray<struct FVector>* OutForwardLeft, TArray<struct FVector>* OutForwardRight, TArray<struct FVector>* OutBackLeft, TArray<struct FVector>* OutBackRight, bool* OutWorldPosIsInWater, float MinSearchDistanceMetres, bool ClearArrays);
	bool TryGenerateStickyOcclusionGrid(struct FVector& CenterPoint, float Radius, int32 NumSpokes, int32 SpokeLength, TArray<struct FVector>* OutOcclusionGrid);
	bool TryGenerateOcclusionGrid(class USplineComponent* Spline, bool WaterIsOutFromSpline, struct FVector& IdealCenterPoint, float Offset, float Radius, float GridAngle, int32 NumSpokes, int32 SpokeLength, TArray<struct FVector>* OutOcclusionGrid);
	void TriggerWildlifeOneShotLoopWrapper();
	void TriggerWildlifeOneShot(struct FVector& TargetQL, struct FVector& TargetQR, struct FVector& TargetQLS, struct FVector& TargetQRS, class UAkAudioEvent* WildlifeOSEvent, bool GetBiomeSwitchSuccess, class UAkSwitchValue* SwitchValue, class UAmbienceManager* AmbienceManager);
	void SwitchOnEPhysicalSurfaceAndSetRTPCsWrapper(struct FHitResult& HitResult, class UAkComponent* AkComponent);
	void SetWindSpeedRTPCs(class UAmbienceManager* AmbienceManager);
	void RunUpdatePrecipitation(class UAmbienceManager* AmbienceManager, class UAkComponent* AkQuadL, class UAkComponent* AkQuadR, class UAkComponent* AkQuadLS, class UAkComponent* AkQuadRS, bool& QLRainActive, bool& QLHailActive, bool& QRRainActive, bool& QRHailActive, bool& QLSRainActive, bool& QLSHailActive, bool& QRSRainActive, bool& QRSHailActive);
	void RunRaycastForMaterials(class UAkComponent* AkQuadL, TArray<enum class EObjectTypeQuery>& TraceObjects);
	void RunDrawDebugSpheres(class UAkComponent* AkQuadL, const struct FLinearColor& ColorL, class UAkComponent* AkQuadR, const struct FLinearColor& ColorR, class UAkComponent* AkQuadLS, const struct FLinearColor& ColorLS, class UAkComponent* AkQuadRS, const struct FLinearColor& ColorRS);
	void OcclusionInvalid(class UAkComponent* AkComponent);
	struct FVector GetCameraWorldLocation(bool* Success);
	struct FVector GenerateRandomVectorOfTwo(float Min, float Max);
	void CheckQuadDistanceFromEachOther(class UAkComponent* AkComponent, bool& InCloseProxMode, float MergeDistance, struct FVector& CameraLocation);
	void CheckQuadDistance(class UAkComponent*& AkComponent, class UAkAudioEvent* AudioEvent, struct FVector& EmitterTarget, bool& ActiveBool, bool& InAngleBool, bool& InCloseProxMode, class UAkSwitchValue* QuadSwitch, float MergeDistance);
	void CheckElevation();
};

// 0x50 (0xF0 - 0xA0)
// Class NWX.WaterFootstepComponent
class UWaterFootstepComponent : public UActorComponent
{
public:
	uint8                                        Pad_9FCE[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWaterFootstepComponent* GetDefaultObj();

};

// 0xB0 (0xE8 - 0x38)
// Class NWX.WatermarkSettings
class UWatermarkSettings : public UDeveloperSettings
{
public:
	TSubclassOf<class UUserWidget>               WidgetClass;                                       // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNWXWatermarkSettingsData             DefaultSettings;                                   // 0x40(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	enum class EFeatureFlag                      FeatureFlag;                                       // 0x90(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_9FD1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FNWXWatermarkSettingsData             FeatureFlagSettings;                               // 0x98(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWatermarkSettings* GetDefaultObj();

	struct FNWXWatermarkSettingsData GetWatermarkSettingsData();
};

// 0x18 (0x48 - 0x30)
// Class NWX.WatermarkSubsystem
class UWatermarkSubsystem : public ULocalPlayerSubsystem
{
public:
	uint8                                        Pad_9FD9[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWatermarkSubsystem* GetDefaultObj();

	void OnGameViewportReadyDelegate();
	bool IsWatermarkVisible();
	void HideWatermarkWidget();
	void DebugToggleWatermark();
};

// 0x18 (0x2D8 - 0x2C0)
// Class NWX.WatermarkWidgetBase
class UWatermarkWidgetBase : public UUserWidget
{
public:
	class UWatermarkSettings*                    WatermarkSettings;                                 // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_9FE4[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWatermarkWidgetBase* GetDefaultObj();

	void OnWatermarkSettingsApplied(class UWatermarkSettings* NewWatermarkSettings);
	void OnPlayerIdUpdated(const class FString& NewPlayerId);
	void OnLoginStateChanged(enum class E_UILoginState NewLoginState);
};

// 0x0 (0x28 - 0x28)
// Class NWX.WeaponAVFXInterface
class IWeaponAVFXInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWeaponAVFXInterface* GetDefaultObj();

	struct FGameplayTagContainer GetFiredBulletMuzzleTags();
};

// 0x10 (0x40 - 0x30)
// Class NWX.WeaponBlockSwitchDataAsset
class UWeaponBlockSwitchDataAsset : public UDataAsset
{
public:
	TArray<struct FWeaponBlockData>              BlockDataArray;                                    // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UWeaponBlockSwitchDataAsset* GetDefaultObj();

	TSoftObjectPtr<class UAkSwitchValue> GetSwitchSoftPtrForTagContainer(struct FGameplayTagContainer& TagContainer);
	TSoftObjectPtr<class UAkSwitchValue> GetSwitchSoftPtrForTag(struct FGameplayTag& Tag);
	class UAkSwitchValue* GetSwitchForTagContainer(struct FGameplayTagContainer& TagContainer);
	class UAkSwitchValue* GetSwitchForTag(struct FGameplayTag& Tag);
	struct FGameplayTag GetBlockedImpactTagFromContainer(struct FGameplayTagContainer& TagContainer);
	struct FGameplayTag GetBlockedImpactTag(struct FGameplayTag& Tag);
};

// 0x70 (0x110 - 0xA0)
// Class NWX.WeatherComponent
class UWeatherComponent : public UActorComponent
{
public:
	uint8                                        Pad_A011[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultTemperature;                                // 0xA8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A012[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UWeatherPhenomenon*>            WeatherPhenomena;                                  // 0xB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ServerFrameUpdateFrequency;                        // 0xC0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPrintDebugData;                                   // 0xC4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A014[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPrecipitationProfile                 PrecipitationProfile;                              // 0xC8(0x14)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FStormProfile                         StormProfile;                                      // 0xDC(0xC)(Net, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTemperatureProfile                   TemperatureProfile;                                // 0xE8(0x10)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A015[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Precipitation;                                     // 0xFC(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Accumulation;                                      // 0x100(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Humidity;                                          // 0x104(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Hail;                                              // 0x108(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Temperature;                                       // 0x10C(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UWeatherComponent* GetDefaultObj();

	void UpdateSimulationFrame(float EllapsedTimeInSeconds, float AccumulatedTimeInSeconds, float NormalizedTime);
	void SetTemperatureProfile(struct FTemperatureProfile& Profile);
	void SetStormProfile(struct FStormProfile& Profile);
	void SetPrecipitationProfile(struct FPrecipitationProfile& Profile);
	struct FTemperatureProfile GetTemperatureProfile();
	float GetTemperature();
	float GetPrecipitation();
	TArray<class UWeatherPhenomenon*> GetPhenomena();
	float GetHumidity();
	float GetHail();
	float GetAccumulation();
};

// 0x0 (0x28 - 0x28)
// Class NWX.WeatherDataProvider
class IWeatherDataProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWeatherDataProvider* GetDefaultObj();

	float GetTemperature();
	float GetPrecipitation();
	TArray<class UWeatherPhenomenon*> GetPhenomena();
	float GetHumidity();
	float GetHail();
	float GetAccumulation();
};

// 0x0 (0x28 - 0x28)
// Class NWX.WeatherFunctionLibrary
class UWeatherFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UWeatherFunctionLibrary* GetDefaultObj();

	bool IsPointUnderCeiling(class UObject* WorldContextObject, struct FVector& Point);
	bool IsActorWet(class AActor* Actor);
	bool IsActorUsingUmbrella(class AActor* Actor);
	bool IsActorSafeFromWeather(class AActor* Actor);
	bool IsActorNearWarmthSource(class AActor* Actor);
	bool IsActorInShade(class AActor* Actor);
};

// 0x20 (0x50 - 0x30)
// Class NWX.WeatherPhenomenon
class UWeatherPhenomenon : public UDataAsset
{
public:
	struct FEventWithRtpc                        Sound;                                             // 0x30(0x20)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWeatherPhenomenon* GetDefaultObj();

	float GetMagnitude();
};

// 0x0 (0x50 - 0x50)
// Class NWX.WeatherPhenomenonRain
class UWeatherPhenomenonRain : public UWeatherPhenomenon
{
public:

	static class UClass* StaticClass();
	static class UWeatherPhenomenonRain* GetDefaultObj();

};

// 0x0 (0x50 - 0x50)
// Class NWX.WeatherPhenomenonHail
class UWeatherPhenomenonHail : public UWeatherPhenomenon
{
public:

	static class UClass* StaticClass();
	static class UWeatherPhenomenonHail* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class NWX.WidgetInventoryEntryFilter
class UWidgetInventoryEntryFilter : public UObjectWithWorld
{
public:

	static class UClass* StaticClass();
	static class UWidgetInventoryEntryFilter* GetDefaultObj();

	bool ShouldShowEntry(struct FInventoryEntry& Entry);
	void Initialize();
	class ANWXPlayerController* GetOwningPlayerController();
};

// 0x10 (0x38 - 0x28)
// Class NWX.WidgetInventoryEntryFilterStructureConstraints
class UWidgetInventoryEntryFilterStructureConstraints : public UWidgetInventoryEntryFilter
{
public:
	uint8                                        Pad_A043[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWidgetInventoryEntryFilterStructureConstraints* GetDefaultObj();

	class AActor* GetInteractionActor();
};

// 0xB8 (0xE8 - 0x30)
// Class NWX.DynamicSpawningDataAsset
class UDynamicSpawningDataAsset : public UDataAsset
{
public:
	TArray<struct FDynamicSpawningFilter>        FilteredSpawnLocations;                            // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                            DynamicSpawningWildlife;                           // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FDynamicSpawnCategoryCreatureClusterCount> MajorCardInitialClusterCount;                      // 0x48(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FDynamicSpawnCategoryCreatureClusterCount> MinorCardClusterAddition;                          // 0x98(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDynamicSpawningDataAsset* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class NWX.NaturalSpawningDataAsset
class UNaturalSpawningDataAsset : public UDataAsset
{
public:
	class UDataTable*                            NaturalSpawningWildlife;                           // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNaturalSpawningDataAsset* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class NWX.WildlifeSpawningDataAsset
class UWildlifeSpawningDataAsset : public UDataAsset
{
public:
	class UNaturalSpawningDataAsset*             NaturalSpawningDataAsset;                          // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicSpawningDataAsset*             DynamicSpawningDataAsset;                          // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWildlifeSpawningDataAsset* GetDefaultObj();

};

// 0x78 (0xB0 - 0x38)
// Class NWX.RealmCreaturesSpawningRegistry
class URealmCreaturesSpawningRegistry : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class URealmWildlifeSpawningDataAsset> RealmWildlifeSpawningDataAsset;                    // 0x38(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>             ClusterPOIThemes;                                  // 0x60(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>             NarrativeNPCDataTable;                             // 0x88(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URealmCreaturesSpawningRegistry* GetDefaultObj();

};

// 0xA0 (0xD0 - 0x30)
// Class NWX.RealmWildlifeSpawningDataAsset
class URealmWildlifeSpawningDataAsset : public UDataAsset
{
public:
	TMap<enum class EBiomeID, TSoftObjectPtr<class UWildlifeSpawningDataAsset>> RealmWildlifeSpawnerData;                          // 0x30(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<enum class EBiomeID, TSoftObjectPtr<class UWildlifeSpawningDataAsset>> VaultWildlifeSpawnerData;                          // 0x80(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URealmWildlifeSpawningDataAsset* GetDefaultObj();

};

// 0x38 (0x710 - 0x6D8)
// Class NWX.WindScopedAkComponent
class UWindScopedAkComponent : public UScopedAkComponent
{
public:
	class UAmbienceManager*                      CachedAmbienceManager;                             // 0x6D8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                         ActivationEvent;                                   // 0x6E0(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkRtpc*                               WindSpeedRTPC;                                     // 0x6E8(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkSwitchValue*                        CachedSurfaceType;                                 // 0x6F0(0x8)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A050[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWindScopedAkComponent* GetDefaultObj();

	void OnWindOneShotFunc();
};

// 0x10 (0x40 - 0x30)
// Class NWX.WorkerFlagLevelManagerAsset
class UWorkerFlagLevelManagerAsset : public UDataAsset
{
public:
	TArray<struct FWorkerFlagLevelWatcher>       Flags;                                             // 0x30(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWorkerFlagLevelManagerAsset* GetDefaultObj();

};

// 0x8 (0xA8 - 0xA0)
// Class NWX.WorkerFlagLevelManagerComponent
class UWorkerFlagLevelManagerComponent : public UActorComponent
{
public:
	class UWorkerFlagLevelManagerAsset*          ManagerAsset;                                      // 0xA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWorkerFlagLevelManagerComponent* GetDefaultObj();

	void OnWorkerFlagUpdated(const class FString& FlagName, const class FString& FlagValue);
};

// 0x0 (0x28 - 0x28)
// Class NWX.WorkerFlagsProvider
class IWorkerFlagsProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWorkerFlagsProvider* GetDefaultObj();

};

// 0x50 (0x90 - 0x40)
// Class NWX.WorkerFlagSource
class UWorkerFlagSource : public URealmDataSource
{
public:
	uint8                                        Pad_A059[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorkerFlagSource* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class NWX.WorkerFlagSource_Automation
class UWorkerFlagSource_Automation : public UWorkerFlagSource
{
public:

	static class UClass* StaticClass();
	static class UWorkerFlagSource_Automation* GetDefaultObj();

};

// 0xA8 (0xE8 - 0x40)
// Class NWX.WorkerPerformanceSubsystem
class UWorkerPerformanceSubsystem : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_A05D[0x98];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AverageRecentDeltaTime;                            // 0xD8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        AverageRecentCPUTime;                              // 0xDC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        AverageRecentRPCCount;                             // 0xE0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A05E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorkerPerformanceSubsystem* GetDefaultObj();

	void OnWorldPersistenceStartupComplete(enum class E_WorldPersistenceLoadState LoadState);
};

// 0x30 (0xD0 - 0xA0)
// Class NWX.XmppConnectionManagerComponent
class UXmppConnectionManagerComponent : public UActorComponent
{
public:
	uint8                                        Pad_A062[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBasicAwaiter*                         XmppConnectionAwaiter;                             // 0xC8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UXmppConnectionManagerComponent* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class NWX.NWXEditorZooMapListConfig
class UNWXEditorZooMapListConfig : public UObject
{
public:
	TArray<class FString>                        Map;                                               // 0x28(0x10)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UNWXEditorZooMapListConfig* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class NWX.AsyncAction_CreateWidgetAsync
class UAsyncAction_CreateWidgetAsync : public UCancellableAsyncAction
{
public:
	FMulticastInlineDelegateProperty_            OnComplete;                                        // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_A06C[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAsyncAction_CreateWidgetAsync* GetDefaultObj();

	class UAsyncAction_CreateWidgetAsync* CreateWidgetAsync(class UObject* WorldContextObject, TSoftClassPtr<class UUserWidget> UserWidgetSoftClass, class APlayerController* OwningPlayer, bool bSuspendInputUntilComplete);
};

// 0x70 (0xA0 - 0x30)
// Class NWX.AsyncAction_PushContentToLayerForPlayer
class UAsyncAction_PushContentToLayerForPlayer : public UCancellableAsyncAction
{
public:
	FMulticastInlineDelegateProperty_            BeforePush;                                        // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            AfterPush;                                         // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_A076[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAsyncAction_PushContentToLayerForPlayer* GetDefaultObj();

	class UAsyncAction_PushContentToLayerForPlayer* PushContentToLayerForPlayer(class APlayerController* OwningPlayer, TSoftClassPtr<class UCommonActivatableWidget> WidgetClass, const struct FGameplayTag& LayerName, bool bSuspendInputUntilComplete);
};

// 0x0 (0x28 - 0x28)
// Class NWX.NWXCommonUIExtensions
class UNWXCommonUIExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNWXCommonUIExtensions* GetDefaultObj();

	class FName SuspendInputForPlayer(class APlayerController* PlayerController, class FName SuspendReason);
	void ResumeInputForPlayer(class APlayerController* PlayerController, class FName SuspendToken);
	void PushWidgetInstanceToLayer_ForPlayer(class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, class UCommonActivatableWidget* WidgetInstance);
	void PushStreamedContentToLayer_ForPlayer(class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, TSoftClassPtr<class UCommonActivatableWidget> WidgetClass);
	class UCommonActivatableWidget* PushContentToLayer_ForPlayer(class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, TSubclassOf<class UCommonActivatableWidget> WidgetClass);
	void PopContentFromLayer(class UCommonActivatableWidget* ActivatableWidget);
	bool IsOwningPlayerUsingTouch(class UUserWidget* WidgetContextObject);
	bool IsOwningPlayerUsingGamepad(class UUserWidget* WidgetContextObject);
	enum class ECommonInputType GetOwningPlayerInputType(class UUserWidget* WidgetContextObject);
	class ULocalPlayer* GetLocalPlayerFromController(class APlayerController* PlayerController);
	class UCommonActivatableWidget* CreateWidgetInstanceFromLayer(class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, TSubclassOf<class UCommonActivatableWidget> WidgetClass);
};

// 0x68 (0x358 - 0x2F0)
// Class NWX.NWXPrimaryGameLayout
class UNWXPrimaryGameLayout : public UCommonUserWidget
{
public:
	uint8                                        Pad_A097[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<struct FGameplayTag, class UCommonActivatableWidgetContainerBase*> Layers;                                            // 0x308(0x50)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXPrimaryGameLayout* GetDefaultObj();

	void RegisterLayer(const struct FGameplayTag& LayerTag, class UCommonActivatableWidgetContainerBase* LayerWidget);
};

// 0x30 (0x60 - 0x30)
// Class NWX.NWXUIManagerSubsystem
class UNWXUIManagerSubsystem : public ULocalPlayerSubsystem
{
public:
	class UNWXUIPolicy*                          CurrentPolicy;                                     // 0x30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UNWXUIPolicy>            DefaultUIPolicyClass;                              // 0x38(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXUIManagerSubsystem* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class NWX.NWXUIPolicy
class UNWXUIPolicy : public UObject
{
public:
	class UInputMappingContext*                  DefaultMappingContext_UI;                          // 0x28(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A09D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UNWXPrimaryGameLayout>   LayoutClass;                                       // 0x38(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FRootViewportLayoutInfo>       RootViewportLayouts;                               // 0x60(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UNWXUIPolicy* GetDefaultObj();

};

}


